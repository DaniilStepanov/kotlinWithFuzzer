2021-03-11 23:51:51,224 [main:66] - Compilation checking started
2021-03-11 23:51:52,694 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:51:52,699 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:51:52,711 [main:66] - Compilation checking started
2021-03-11 23:51:53,462 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String = "lgyty", actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}
2021-03-11 23:51:53,464 [main:50] - replacing actual: KType KType
2021-03-11 23:51:53,464 [main:54] - Getting value of type KType
2021-03-11 23:51:53,605 [main:302] - generating value of type = KType false depth = 0
2021-03-11 23:51:54,449 [main:43] - GENERATING CALL OF fun <T> typeOf(): KType = TODO()
2021-03-11 23:51:54,454 [main:61] - WITHOUT TYPE PARAMS = fun <T> typeOf(): KType = TODO()
2021-03-11 23:51:54,620 [main:95] - GENERATED = typeOf<Float>()
2021-03-11 23:51:54,621 [main:58] - GENERATED VALUE OF TYPE KType = typeOf<Float>()
2021-03-11 23:51:54,622 [main:61] - GENERATED IS CALL =true
2021-03-11 23:51:54,625 [main:67] - randomType = Z
2021-03-11 23:51:54,740 [main:302] - generating value of type = Z false depth = 0
2021-03-11 23:51:54,741 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:51:54,920 [main:194] - Type params = []
2021-03-11 23:51:55,057 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:51:55,084 [main:106] - GETTING KType from String
2021-03-11 23:51:55,149 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:51:55,150 [main:66] - Compilation checking started
2021-03-11 23:51:55,793 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String = "lgyty", actual: KType = typeOf<Float>()) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:51:55,794 [main:50] - replacing val value: String String
2021-03-11 23:51:55,794 [main:54] - Getting value of type String
2021-03-11 23:51:55,904 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:51:55,904 [main:58] - GENERATED VALUE OF TYPE String = "dnpuy"
2021-03-11 23:51:55,905 [main:61] - GENERATED IS CALL =false
2021-03-11 23:51:56,057 [main:67] - randomType = UShort
2021-03-11 23:51:56,210 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:51:56,283 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1a4323ac]
2021-03-11 23:51:56,389 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:51:56,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c013860]
2021-03-11 23:51:56,493 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:51:56,495 [main:78] - Generated call from random type = (13477.toUShort()).div(97.toUByte()).toString(-752230189)
2021-03-11 23:51:56,495 [main:106] - GETTING String from String
2021-03-11 23:51:56,534 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]]
2021-03-11 23:51:56,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:51:56,657 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:51:56,659 [main:117] - GENERATED CALL = (expected).length.toString(-1934420992)
2021-03-11 23:51:56,660 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]]
2021-03-11 23:51:56,660 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]
2021-03-11 23:51:56,775 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:51:56,775 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:51:56,778 [main:117] - GENERATED CALL = (expected).takeLastWhile({a: Char -> false})
2021-03-11 23:51:56,778 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e26cf6]]
2021-03-11 23:51:56,778 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e26cf6]
2021-03-11 23:51:56,878 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:51:56,986 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:51:56,988 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:51:57,240 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:51:57,241 [main:95] - GENERATED = StringBuilder("txolk")
2021-03-11 23:51:57,242 [main:117] - GENERATED CALL = (expected).removeSurrounding(StringBuilder("txolk"))
2021-03-11 23:51:57,243 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:51:57,243 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:51:57,354 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:51:57,493 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:51:57,497 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:51:57,694 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:51:57,695 [main:95] - GENERATED = StringBuilder("idmyr")
2021-03-11 23:51:57,800 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:51:57,801 [main:117] - GENERATED CALL = (expected).commonSuffixWith(StringBuilder("idmyr"), false)
2021-03-11 23:51:57,801 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]]
2021-03-11 23:51:57,801 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]
2021-03-11 23:51:57,891 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:51:57,892 [main:117] - GENERATED CALL = (expected).takeLast(2102176154)
2021-03-11 23:51:57,893 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26209dab]]
2021-03-11 23:51:57,893 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26209dab]
2021-03-11 23:51:57,984 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:51:58,091 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:51:58,092 [main:117] - GENERATED CALL = (expected).replaceAfter('婌', expected, "fhbpw")
2021-03-11 23:51:58,093 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e61ecb]]
2021-03-11 23:51:58,093 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e61ecb]
2021-03-11 23:51:58,094 [main:117] - GENERATED CALL = (expected).capitalize()
2021-03-11 23:51:58,094 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d556922]]
2021-03-11 23:51:58,094 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d556922]
2021-03-11 23:51:58,095 [main:117] - GENERATED CALL = (expected).trimEnd()
2021-03-11 23:51:58,095 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1131a7db]]
2021-03-11 23:51:58,095 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1131a7db]
2021-03-11 23:51:58,185 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:51:58,186 [main:117] - GENERATED CALL = (expected).replaceBeforeLast('丱', expected, expected)
2021-03-11 23:51:58,186 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@343960d9]]
2021-03-11 23:51:58,187 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@343960d9]
2021-03-11 23:51:58,187 [main:117] - GENERATED CALL = (expected).concat(expected)
2021-03-11 23:51:58,188 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 23:51:58,188 [main:66] - Compilation checking started
2021-03-11 23:51:58,431 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String = expected)

fun check(expected: String = "lgyty", actual: KType = typeOf<Float>()) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:51:58,647 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:51:58,744 [main:194] - Type params = []
2021-03-11 23:51:58,849 [main:302] - generating value of type = String true depth = 1
2021-03-11 23:51:59,137 [main:43] - GENERATING CALL OF fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}
2021-03-11 23:51:59,137 [main:61] - WITHOUT TYPE PARAMS = fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}
2021-03-11 23:51:59,248 [main:302] - generating value of type = String true depth = 1
2021-03-11 23:51:59,248 [main:302] - generating value of type = KType false depth = 1
2021-03-11 23:51:59,352 [main:43] - GENERATING CALL OF fun <T> typeOf(): KType = TODO()
2021-03-11 23:51:59,355 [main:61] - WITHOUT TYPE PARAMS = fun <T> typeOf(): KType = TODO()
2021-03-11 23:51:59,451 [main:95] - GENERATED = typeOf<Z>()
2021-03-11 23:51:59,451 [main:95] - GENERATED = check("zssgo", typeOf<Z>())
2021-03-11 23:51:59,547 [main:45] - Trying to change 25 nodes
2021-03-11 23:51:59,549 [main:53] - replacing (actual.toString(), String)
2021-03-11 23:51:59,549 [main:50] - replacing actual.toString() String
2021-03-11 23:51:59,549 [main:54] - Getting value of type String
2021-03-11 23:51:59,635 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:51:59,635 [main:58] - GENERATED VALUE OF TYPE String = "obqec"
2021-03-11 23:51:59,636 [main:61] - GENERATED IS CALL =false
2021-03-11 23:51:59,742 [main:67] - randomType = UByte
2021-03-11 23:51:59,833 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:51:59,882 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7910aa04]
2021-03-11 23:51:59,883 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@134fa96f]
2021-03-11 23:51:59,967 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:51:59,968 [main:78] - Generated call from random type = (0.toUByte()).toLong().toString(1195367803)
2021-03-11 23:51:59,969 [main:106] - GETTING String from String
2021-03-11 23:51:59,997 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29d55215]]
2021-03-11 23:51:59,998 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29d55215]
2021-03-11 23:52:00,082 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:00,083 [main:117] - GENERATED CALL = (Z("kfuae").value).drop(-1198542122)
2021-03-11 23:52:00,083 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f682e1]]
2021-03-11 23:52:00,083 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f682e1]
2021-03-11 23:52:00,165 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:00,264 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:00,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:00,357 [main:117] - GENERATED CALL = (Z("kfuae").value).replace('肶', 'ཇ', false)
2021-03-11 23:52:00,357 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e61ecb]]
2021-03-11 23:52:00,357 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e61ecb]
2021-03-11 23:52:00,358 [main:117] - GENERATED CALL = (Z("kfuae").value).capitalize()
2021-03-11 23:52:00,358 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e844e9f]]
2021-03-11 23:52:00,358 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e844e9f]
2021-03-11 23:52:00,445 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:52:00,445 [main:117] - GENERATED CALL = (Z("kfuae").value).plus("kldmg")
2021-03-11 23:52:00,446 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b97f2a0]]
2021-03-11 23:52:00,446 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:52:00,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:00,528 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b97f2a0]
2021-03-11 23:52:00,529 [main:117] - GENERATED CALL = (Z("kfuae").value).get(-556160292).titlecase()
2021-03-11 23:52:00,529 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]]
2021-03-11 23:52:00,529 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]
2021-03-11 23:52:00,616 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:00,720 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:00,722 [main:117] - GENERATED CALL = (Z("kfuae").value).padEnd(-885575436, '쥴')
2021-03-11 23:52:00,722 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]]
2021-03-11 23:52:00,722 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]
2021-03-11 23:52:00,811 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:00,813 [main:117] - GENERATED CALL = (Z("kfuae").value).repeat(1142122122)
2021-03-11 23:52:00,813 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]]
2021-03-11 23:52:00,813 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]
2021-03-11 23:52:00,898 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:00,899 [main:117] - GENERATED CALL = (Z("kfuae").value).substringBefore('襚', Z("kfuae").value)
2021-03-11 23:52:00,899 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e26cf6]]
2021-03-11 23:52:00,899 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41e26cf6]
2021-03-11 23:52:00,978 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:01,067 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:52:01,070 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:52:01,320 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:52:01,321 [main:95] - GENERATED = StringBuilder("mhbyq")
2021-03-11 23:52:01,321 [main:117] - GENERATED CALL = (Z("kfuae").value).removeSurrounding(StringBuilder("mhbyq"))
2021-03-11 23:52:01,322 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b55a206]]
2021-03-11 23:52:01,322 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b55a206]
2021-03-11 23:52:01,412 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:01,492 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:01,575 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:01,581 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceRange(-1011057997, 1108135661, "urnwb")
2021-03-11 23:52:01,581 [main:61] - replacement of actual.toString() of type String is (Z("kfuae").value).drop(-1198542122)
2021-03-11 23:52:01,664 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:01,665 [main:66] - Compilation checking started
2021-03-11 23:52:02,211 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:02,212 [main:53] - replacing ("UShortArray", String)
2021-03-11 23:52:02,213 [main:50] - replacing "UShortArray" String
2021-03-11 23:52:02,213 [main:54] - Getting value of type String
2021-03-11 23:52:02,308 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:02,309 [main:58] - GENERATED VALUE OF TYPE String = "homir"
2021-03-11 23:52:02,310 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:02,702 [main:67] - randomType = Map<Long?, List<Z>>
2021-03-11 23:52:02,703 [main:106] - GETTING String from String
2021-03-11 23:52:02,730 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]]
2021-03-11 23:52:02,730 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]
2021-03-11 23:52:02,824 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:52:02,825 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:52:02,826 [main:117] - GENERATED CALL = (Z("kfuae").value).filter({a: Char -> false})
2021-03-11 23:52:02,826 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@adeaf5e]]
2021-03-11 23:52:02,827 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@adeaf5e]
2021-03-11 23:52:02,827 [main:117] - GENERATED CALL = (Z("kfuae").value).toLowerCase()
2021-03-11 23:52:02,827 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b55a206]]
2021-03-11 23:52:02,827 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b55a206]
2021-03-11 23:52:02,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:03,001 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:03,088 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:03,176 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:52:03,178 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:52:03,353 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 23:52:03,489 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:52:03,492 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:52:03,694 [main:302] - generating value of type = Int true depth = 6
2021-03-11 23:52:03,695 [main:95] - GENERATED = StringBuilder(1277939407)
2021-03-11 23:52:03,695 [main:95] - GENERATED = StringBuilder(StringBuilder(1277939407))
2021-03-11 23:52:03,696 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceRange(522727187, -782226726, StringBuilder(StringBuilder(1277939407)))
2021-03-11 23:52:03,696 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]]
2021-03-11 23:52:03,696 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]
2021-03-11 23:52:03,781 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:03,865 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:03,866 [main:117] - GENERATED CALL = (Z("kfuae").value).removeRange(606881476, -225626732)
2021-03-11 23:52:03,866 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58db5482]]
2021-03-11 23:52:03,867 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58db5482]
2021-03-11 23:52:03,867 [main:117] - GENERATED CALL = (Z("kfuae").value).lowercase()
2021-03-11 23:52:03,867 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d556922]]
2021-03-11 23:52:03,867 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d556922]
2021-03-11 23:52:03,868 [main:117] - GENERATED CALL = (Z("kfuae").value).trimEnd()
2021-03-11 23:52:03,868 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]]
2021-03-11 23:52:03,868 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]
2021-03-11 23:52:03,868 [main:117] - GENERATED CALL = (Z("kfuae").value).trimStart()
2021-03-11 23:52:03,868 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4064788d]]
2021-03-11 23:52:03,868 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4064788d]
2021-03-11 23:52:03,955 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:03,956 [main:117] - GENERATED CALL = (Z("kfuae").value).trimMargin("hoibd")
2021-03-11 23:52:03,957 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3affe6ad]]
2021-03-11 23:52:03,957 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3affe6ad]
2021-03-11 23:52:03,957 [main:117] - GENERATED CALL = (Z("kfuae").value).trimIndent()
2021-03-11 23:52:03,958 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b97f2a0]]
2021-03-11 23:52:03,958 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:52:04,076 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:04,077 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b97f2a0]
2021-03-11 23:52:04,085 [main:117] - GENERATED CALL = (Z("kfuae").value).get(-1252963212).titlecase()
2021-03-11 23:52:04,085 [main:61] - replacement of "UShortArray" of type String is (Z("kfuae").value).removeRange(606881476, -225626732)
2021-03-11 23:52:04,199 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:04,199 [main:66] - Compilation checking started
2021-03-11 23:52:04,644 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:04,646 [main:53] - replacing (typeOf<UShortArray?>(), KType)
2021-03-11 23:52:04,646 [main:50] - replacing typeOf<UShortArray?>() KType
2021-03-11 23:52:04,646 [main:54] - Getting value of type KType
2021-03-11 23:52:04,739 [main:302] - generating value of type = KType false depth = 0
2021-03-11 23:52:04,839 [main:43] - GENERATING CALL OF fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:04,842 [main:61] - WITHOUT TYPE PARAMS = fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:04,945 [main:95] - GENERATED = typeOf<Z>()
2021-03-11 23:52:04,946 [main:58] - GENERATED VALUE OF TYPE KType = typeOf<Z>()
2021-03-11 23:52:04,946 [main:61] - GENERATED IS CALL =true
2021-03-11 23:52:05,041 [main:67] - randomType = Sequence<Z>
2021-03-11 23:52:05,043 [main:106] - GETTING KType from String
2021-03-11 23:52:05,083 [main:61] - replacement of typeOf<UShortArray?>() of type KType is typeOf<Z>()
2021-03-11 23:52:05,179 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:52:05,180 [main:66] - Compilation checking started
2021-03-11 23:52:05,640 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:05,641 [main:53] - replacing ("Array<UByteArray?>?", String)
2021-03-11 23:52:05,642 [main:50] - replacing "Array<UByteArray?>?" String
2021-03-11 23:52:05,642 [main:54] - Getting value of type String
2021-03-11 23:52:05,741 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:05,741 [main:58] - GENERATED VALUE OF TYPE String = "bpmaz"
2021-03-11 23:52:05,742 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:05,851 [main:67] - randomType = Boolean
2021-03-11 23:52:05,970 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:05,984 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3b210322]
2021-03-11 23:52:06,078 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:06,079 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:52:06,167 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:06,169 [main:78] - Generated call from random type = (false).compareTo(false).toString(-117555391)
2021-03-11 23:52:06,169 [main:106] - GETTING String from String
2021-03-11 23:52:06,205 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:52:06,205 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:52:06,298 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:06,389 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:52:06,391 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:52:06,593 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:52:06,594 [main:95] - GENERATED = StringBuilder(1964185745)
2021-03-11 23:52:06,708 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:06,710 [main:117] - GENERATED CALL = (Z("kfuae").value).commonSuffixWith(StringBuilder(1964185745), true)
2021-03-11 23:52:06,711 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29d55215]]
2021-03-11 23:52:06,711 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29d55215]
2021-03-11 23:52:06,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:06,819 [main:117] - GENERATED CALL = (Z("kfuae").value).drop(1457923863)
2021-03-11 23:52:06,819 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e61ecb]]
2021-03-11 23:52:06,819 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e61ecb]
2021-03-11 23:52:06,820 [main:117] - GENERATED CALL = (Z("kfuae").value).capitalize()
2021-03-11 23:52:06,820 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:52:06,820 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:52:06,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:07,012 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:07,013 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:52:07,102 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:07,193 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:07,194 [main:117] - GENERATED CALL = (Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false)
2021-03-11 23:52:07,194 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:52:07,195 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:52:07,310 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:07,424 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:07,425 [main:117] - GENERATED CALL = (Z("kfuae").value).commonPrefixWith("joxfn", true)
2021-03-11 23:52:07,425 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]]
2021-03-11 23:52:07,425 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]
2021-03-11 23:52:07,516 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:52:07,517 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:52:07,519 [main:117] - GENERATED CALL = (Z("kfuae").value).takeLastWhile({a: Char -> true})
2021-03-11 23:52:07,519 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]]
2021-03-11 23:52:07,519 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:52:07,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:07,621 [main:117] - GENERATED CALL = (Z("kfuae").value).length.toString(1981651391)
2021-03-11 23:52:07,621 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14e17899]]
2021-03-11 23:52:07,621 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14e17899]
2021-03-11 23:52:07,710 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:07,712 [main:117] - GENERATED CALL = (Z("kfuae").value).dropLast(-304225859)
2021-03-11 23:52:07,712 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62d4a67e]]
2021-03-11 23:52:07,712 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:52:07,824 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:07,826 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62d4a67e]
2021-03-11 23:52:07,827 [main:117] - GENERATED CALL = (Z("kfuae").value).get(128608853).lowercase()
2021-03-11 23:52:07,827 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fd89f9d]]
2021-03-11 23:52:07,827 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fd89f9d]
2021-03-11 23:52:07,828 [main:117] - GENERATED CALL = (Z("kfuae").value).reversed()
2021-03-11 23:52:07,828 [main:61] - replacement of "Array<UByteArray?>?" of type String is (Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false)
2021-03-11 23:52:07,940 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:07,941 [main:66] - Compilation checking started
2021-03-11 23:52:08,363 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:08,364 [main:53] - replacing (expected, String)
2021-03-11 23:52:08,364 [main:50] - replacing expected String
2021-03-11 23:52:08,364 [main:54] - Getting value of type String
2021-03-11 23:52:08,452 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:08,453 [main:58] - GENERATED VALUE OF TYPE String = "yssty"
2021-03-11 23:52:08,453 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:08,454 [main:67] - randomType = Z
2021-03-11 23:52:08,544 [main:302] - generating value of type = Z false depth = 0
2021-03-11 23:52:08,544 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:52:08,647 [main:194] - Type params = []
2021-03-11 23:52:08,737 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:52:08,750 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3affe6ad]
2021-03-11 23:52:08,751 [main:78] - Generated call from random type = (Z("hqfrz")).value.trimIndent()
2021-03-11 23:52:08,753 [main:106] - GETTING String from KType
2021-03-11 23:52:08,768 [main:106] - GETTING String from String
2021-03-11 23:52:08,804 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e844e9f]]
2021-03-11 23:52:08,804 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e844e9f]
2021-03-11 23:52:08,898 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:52:08,899 [main:117] - GENERATED CALL = (expected).plus("wjcyg")
2021-03-11 23:52:08,899 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:52:08,899 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:52:08,989 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:09,098 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:09,099 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:52:09,183 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:09,294 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:09,296 [main:117] - GENERATED CALL = (expected).subSequence(926540642, 1228481660).commonSuffixWith("anjhs", true)
2021-03-11 23:52:09,296 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]]
2021-03-11 23:52:09,296 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]
2021-03-11 23:52:09,297 [main:117] - GENERATED CALL = (expected).decapitalize()
2021-03-11 23:52:09,297 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f682e1]]
2021-03-11 23:52:09,297 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f682e1]
2021-03-11 23:52:09,414 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:09,516 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:09,599 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:09,601 [main:117] - GENERATED CALL = (expected).replace('喉', '⤑', true)
2021-03-11 23:52:09,601 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]]
2021-03-11 23:52:09,601 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]
2021-03-11 23:52:09,687 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:09,801 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:09,803 [main:117] - GENERATED CALL = (expected).removeRange(-1428377967, 1522473301)
2021-03-11 23:52:09,803 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]]
2021-03-11 23:52:09,803 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]
2021-03-11 23:52:09,919 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:52:09,920 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:52:09,922 [main:117] - GENERATED CALL = (expected).takeLastWhile({a: Char -> true})
2021-03-11 23:52:09,922 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52baa460]]
2021-03-11 23:52:09,922 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52baa460]
2021-03-11 23:52:10,012 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:10,013 [main:117] - GENERATED CALL = (expected).substringBeforeLast('潔', Z("kfuae").value)
2021-03-11 23:52:10,014 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14e17899]]
2021-03-11 23:52:10,014 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14e17899]
2021-03-11 23:52:10,098 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:10,099 [main:117] - GENERATED CALL = (expected).dropLast(-1060281605)
2021-03-11 23:52:10,099 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]]
2021-03-11 23:52:10,099 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]
2021-03-11 23:52:10,181 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:52:10,181 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:52:10,183 [main:117] - GENERATED CALL = (expected).filter({a: Char -> true})
2021-03-11 23:52:10,183 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]]
2021-03-11 23:52:10,183 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]
2021-03-11 23:52:10,293 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:10,294 [main:117] - GENERATED CALL = (expected).substringBefore('鞖', expected)
2021-03-11 23:52:10,294 [main:61] - replacement of expected of type String is expected
2021-03-11 23:52:10,381 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 23:52:10,382 [main:53] - replacing ("UInt", String)
2021-03-11 23:52:10,383 [main:50] - replacing "UInt" String
2021-03-11 23:52:10,383 [main:54] - Getting value of type String
2021-03-11 23:52:10,464 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:10,464 [main:58] - GENERATED VALUE OF TYPE String = "ooooq"
2021-03-11 23:52:10,464 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:10,467 [main:67] - randomType = Z?
2021-03-11 23:52:10,551 [main:302] - generating value of type = Z false depth = 0
2021-03-11 23:52:10,552 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:52:10,634 [main:194] - Type params = []
2021-03-11 23:52:10,738 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:52:10,764 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]
2021-03-11 23:52:10,766 [main:78] - Generated call from random type = (Z("utinx"))?.value.trimStart()
2021-03-11 23:52:10,766 [main:106] - GETTING String from String
2021-03-11 23:52:10,827 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]]
2021-03-11 23:52:10,828 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]
2021-03-11 23:52:10,829 [main:117] - GENERATED CALL = (Z("kfuae").value).decapitalize()
2021-03-11 23:52:10,829 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]]
2021-03-11 23:52:10,829 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]
2021-03-11 23:52:10,922 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:52:10,922 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:52:10,924 [main:117] - GENERATED CALL = (Z("kfuae").value).takeLastWhile({a: Char -> false})
2021-03-11 23:52:10,924 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64377d2f]]
2021-03-11 23:52:10,924 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64377d2f]
2021-03-11 23:52:10,925 [main:117] - GENERATED CALL = (Z("kfuae").value).trim()
2021-03-11 23:52:10,925 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c11596e]]
2021-03-11 23:52:10,925 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c11596e]
2021-03-11 23:52:11,007 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:52:11,107 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 23:52:11,110 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 23:52:11,209 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:52:11,210 [main:95] - GENERATED = mutableListOf<Int>(978571486)
2021-03-11 23:52:11,210 [main:117] - GENERATED CALL = (Z("kfuae").value).slice(mutableListOf<Int>(978571486))
2021-03-11 23:52:11,210 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4064788d]]
2021-03-11 23:52:11,210 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4064788d]
2021-03-11 23:52:11,211 [main:117] - GENERATED CALL = (Z("kfuae").value).trimMargin(Z("kfuae").value)
2021-03-11 23:52:11,211 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]]
2021-03-11 23:52:11,211 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]
2021-03-11 23:52:11,308 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:11,400 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:11,401 [main:117] - GENERATED CALL = (Z("kfuae").value).padEnd(287789157, '琳')
2021-03-11 23:52:11,401 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1902b41]]
2021-03-11 23:52:11,402 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1902b41]
2021-03-11 23:52:11,402 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceIndent(Z("kfuae").value)
2021-03-11 23:52:11,402 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:52:11,403 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:52:11,484 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:11,567 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:11,568 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:52:11,651 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:11,765 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:11,766 [main:117] - GENERATED CALL = (Z("kfuae").value).subSequence(-1796405943, -567950066).commonSuffixWith(StringBuilder(), false)
2021-03-11 23:52:11,766 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]]
2021-03-11 23:52:11,766 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:52:11,861 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:11,942 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:11,943 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]
2021-03-11 23:52:12,028 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:12,029 [main:117] - GENERATED CALL = (Z("kfuae").value).subSequence(-674423113, -1617064874).repeat(-1849717652)
2021-03-11 23:52:12,030 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]]
2021-03-11 23:52:12,030 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:52:12,115 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:12,116 [main:117] - GENERATED CALL = (Z("kfuae").value).length.toString(-752051600)
2021-03-11 23:52:12,117 [main:61] - replacement of "UInt" of type String is (Z("kfuae").value).takeLastWhile({a: Char -> false})
2021-03-11 23:52:12,231 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:12,231 [main:66] - Compilation checking started
2021-03-11 23:52:12,706 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:12,706 [main:53] - replacing ("UShortArray", String)
2021-03-11 23:52:12,706 [main:50] - replacing "UShortArray" String
2021-03-11 23:52:12,706 [main:54] - Getting value of type String
2021-03-11 23:52:12,794 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:12,795 [main:58] - GENERATED VALUE OF TYPE String = "cepma"
2021-03-11 23:52:12,795 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:13,188 [main:67] - randomType = List<HashSet<Byte?>>
2021-03-11 23:52:13,188 [main:106] - GETTING String from String
2021-03-11 23:52:13,219 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e61ecb]]
2021-03-11 23:52:13,219 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70e61ecb]
2021-03-11 23:52:13,220 [main:117] - GENERATED CALL = (Z("kfuae").value).capitalize()
2021-03-11 23:52:13,220 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62d4a67e]]
2021-03-11 23:52:13,220 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:52:13,305 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:13,306 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62d4a67e]
2021-03-11 23:52:13,306 [main:117] - GENERATED CALL = (Z("kfuae").value).get(-957705703).lowercase()
2021-03-11 23:52:13,306 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29d55215]]
2021-03-11 23:52:13,306 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29d55215]
2021-03-11 23:52:13,393 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:13,394 [main:117] - GENERATED CALL = (Z("kfuae").value).drop(1329755930)
2021-03-11 23:52:13,394 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@adeaf5e]]
2021-03-11 23:52:13,394 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@adeaf5e]
2021-03-11 23:52:13,395 [main:117] - GENERATED CALL = (Z("kfuae").value).toLowerCase()
2021-03-11 23:52:13,395 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ae9143f]]
2021-03-11 23:52:13,395 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:52:13,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:13,481 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ae9143f]
2021-03-11 23:52:13,481 [main:117] - GENERATED CALL = (Z("kfuae").value).get(915670266).plus(Z("kfuae").value)
2021-03-11 23:52:13,482 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@343960d9]]
2021-03-11 23:52:13,482 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@343960d9]
2021-03-11 23:52:13,482 [main:117] - GENERATED CALL = (Z("kfuae").value).concat(Z("kfuae").value)
2021-03-11 23:52:13,482 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]]
2021-03-11 23:52:13,482 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]
2021-03-11 23:52:13,483 [main:117] - GENERATED CALL = (Z("kfuae").value).decapitalize()
2021-03-11 23:52:13,483 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b22a353]]
2021-03-11 23:52:13,483 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b22a353]
2021-03-11 23:52:13,568 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:13,570 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceAfterLast('쫠', Z("kfuae").value, Z("kfuae").value)
2021-03-11 23:52:13,570 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15508700]]
2021-03-11 23:52:13,570 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15508700]
2021-03-11 23:52:13,676 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:13,777 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:52:13,779 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:52:13,959 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 23:52:13,964 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 23:52:13,965 [main:117] - GENERATED CALL = (Z("kfuae").value).removeSuffix(StringBuilder(StringBuilder()))
2021-03-11 23:52:13,965 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b55a206]]
2021-03-11 23:52:13,965 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b55a206]
2021-03-11 23:52:14,052 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:14,159 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:14,270 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:14,376 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:52:14,378 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:52:14,560 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:52:14,561 [main:95] - GENERATED = StringBuilder(1375123539)
2021-03-11 23:52:14,561 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceRange(-2144625396, -1083774596, StringBuilder(1375123539))
2021-03-11 23:52:14,561 [main:61] - replacement of "UShortArray" of type String is (Z("kfuae").value).removeSuffix(StringBuilder(StringBuilder()))
2021-03-11 23:52:14,643 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:14,644 [main:53] - replacing ("ULong?", String)
2021-03-11 23:52:14,644 [main:50] - replacing "ULong?" String
2021-03-11 23:52:14,645 [main:54] - Getting value of type String
2021-03-11 23:52:14,731 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:14,731 [main:58] - GENERATED VALUE OF TYPE String = "gdywi"
2021-03-11 23:52:14,732 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:14,734 [main:67] - randomType = Z
2021-03-11 23:52:14,835 [main:302] - generating value of type = Z false depth = 0
2021-03-11 23:52:14,835 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:52:14,932 [main:194] - Type params = []
2021-03-11 23:52:15,019 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:52:15,027 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43421427]
2021-03-11 23:52:15,112 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:15,113 [main:78] - Generated call from random type = (Z("pnepg")).value.substringAfter('噹', Z("kfuae").value)
2021-03-11 23:52:15,113 [main:61] - replacement of "ULong?" of type String is (Z("pnepg")).value.substringAfter('噹', Z("kfuae").value)
2021-03-11 23:52:15,202 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:15,202 [main:66] - Compilation checking started
2021-03-11 23:52:15,589 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:15,590 [main:53] - replacing ("ULong?", String)
2021-03-11 23:52:15,590 [main:50] - replacing "ULong?" String
2021-03-11 23:52:15,590 [main:54] - Getting value of type String
2021-03-11 23:52:15,680 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:15,680 [main:58] - GENERATED VALUE OF TYPE String = "bcsvn"
2021-03-11 23:52:15,680 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:15,681 [main:67] - randomType = Int
2021-03-11 23:52:15,785 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:15,850 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46766b17]
2021-03-11 23:52:15,851 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3edfcfc5]
2021-03-11 23:52:15,940 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:15,941 [main:78] - Generated call from random type = (1175579698).toShort().toString(550248875)
2021-03-11 23:52:15,941 [main:61] - replacement of "ULong?" of type String is (1175579698).toShort().toString(550248875)
2021-03-11 23:52:16,030 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:16,031 [main:53] - replacing ("Z?", String)
2021-03-11 23:52:16,031 [main:50] - replacing "Z?" String
2021-03-11 23:52:16,031 [main:54] - Getting value of type String
2021-03-11 23:52:16,122 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:16,122 [main:58] - GENERATED VALUE OF TYPE String = "rkagj"
2021-03-11 23:52:16,122 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:16,307 [main:67] - randomType = Array<Double>
2021-03-11 23:52:16,417 [main:302] - generating value of type = Array<Double> false depth = 0
2021-03-11 23:52:16,520 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Double> = TODO()
2021-03-11 23:52:16,522 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Double> = TODO()
2021-03-11 23:52:16,609 [main:95] - GENERATED = emptyArray<Double>()
2021-03-11 23:52:16,627 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:52:16,711 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:16,712 [main:78] - Generated call from random type = (emptyArray<Double>()).size.toString(-498948608)
2021-03-11 23:52:16,712 [main:61] - replacement of "Z?" of type String is (emptyArray<Double>()).size.toString(-498948608)
2021-03-11 23:52:16,796 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:16,796 [main:66] - Compilation checking started
2021-03-11 23:52:17,221 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:17,221 [main:53] - replacing ("Z?", String)
2021-03-11 23:52:17,221 [main:50] - replacing "Z?" String
2021-03-11 23:52:17,221 [main:54] - Getting value of type String
2021-03-11 23:52:17,327 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:17,328 [main:58] - GENERATED VALUE OF TYPE String = "uvten"
2021-03-11 23:52:17,328 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:17,433 [main:67] - randomType = Long
2021-03-11 23:52:17,522 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:52:17,577 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@134fa96f]
2021-03-11 23:52:17,667 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:17,668 [main:78] - Generated call from random type = (3367800194959214891).toString(2051194646)
2021-03-11 23:52:17,668 [main:106] - GETTING String from String
2021-03-11 23:52:17,699 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:52:17,699 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:52:17,788 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:17,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:17,881 [main:117] - GENERATED CALL = (Z("kfuae").value).commonPrefixWith("dndsk", true)
2021-03-11 23:52:17,881 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a9d85de]]
2021-03-11 23:52:17,882 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a9d85de]
2021-03-11 23:52:17,971 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 23:52:17,971 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:52:17,973 [main:117] - GENERATED CALL = (Z("kfuae").value).filterIndexed({a: Int, b: Char -> false})
2021-03-11 23:52:17,973 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:52:17,973 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:52:18,083 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:18,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:18,207 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:52:18,299 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:18,393 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:18,394 [main:117] - GENERATED CALL = (Z("kfuae").value).subSequence(916022314, -426954565).commonPrefixWith("zvgyw", true)
2021-03-11 23:52:18,394 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]]
2021-03-11 23:52:18,394 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]
2021-03-11 23:52:18,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:18,480 [main:117] - GENERATED CALL = (Z("kfuae").value).repeat(2059063517)
2021-03-11 23:52:18,481 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]]
2021-03-11 23:52:18,481 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]
2021-03-11 23:52:18,565 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:18,566 [main:117] - GENERATED CALL = (Z("kfuae").value).takeLast(399696142)
2021-03-11 23:52:18,567 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483027bf]]
2021-03-11 23:52:18,567 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483027bf]
2021-03-11 23:52:18,652 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:18,752 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:18,847 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:18,848 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceFirst('໡', '겹', true)
2021-03-11 23:52:18,848 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]]
2021-03-11 23:52:18,848 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]
2021-03-11 23:52:18,930 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:18,931 [main:117] - GENERATED CALL = (Z("kfuae").value).take(2123281945)
2021-03-11 23:52:18,932 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c03ab43]]
2021-03-11 23:52:18,932 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c03ab43]
2021-03-11 23:52:19,015 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:52:19,016 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:52:19,017 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceFirstChar({a: Char -> 'þ'})
2021-03-11 23:52:19,017 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]]
2021-03-11 23:52:19,017 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]
2021-03-11 23:52:19,018 [main:117] - GENERATED CALL = (Z("kfuae").value).decapitalize()
2021-03-11 23:52:19,018 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26209dab]]
2021-03-11 23:52:19,018 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26209dab]
2021-03-11 23:52:19,109 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:19,111 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceAfter('', Z("kfuae").value, Z("kfuae").value)
2021-03-11 23:52:19,111 [main:61] - replacement of "Z?" of type String is (Z("kfuae").value).filterIndexed({a: Int, b: Char -> false})
2021-03-11 23:52:19,201 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:19,203 [main:53] - replacing (typeOf<UInt>(), KType)
2021-03-11 23:52:19,203 [main:50] - replacing typeOf<UInt>() KType
2021-03-11 23:52:19,203 [main:54] - Getting value of type KType
2021-03-11 23:52:19,304 [main:302] - generating value of type = KType false depth = 0
2021-03-11 23:52:19,492 [main:43] - GENERATING CALL OF fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:19,494 [main:61] - WITHOUT TYPE PARAMS = fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:19,592 [main:95] - GENERATED = typeOf<Boolean?>()
2021-03-11 23:52:19,592 [main:58] - GENERATED VALUE OF TYPE KType = typeOf<Boolean?>()
2021-03-11 23:52:19,593 [main:61] - GENERATED IS CALL =true
2021-03-11 23:52:19,595 [main:67] - randomType = Z
2021-03-11 23:52:19,693 [main:302] - generating value of type = Z false depth = 0
2021-03-11 23:52:19,693 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:52:19,774 [main:194] - Type params = []
2021-03-11 23:52:19,855 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:52:19,862 [main:106] - GETTING KType from String
2021-03-11 23:52:19,879 [main:61] - replacement of typeOf<UInt>() of type KType is typeOf<Boolean?>()
2021-03-11 23:52:19,978 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:52:19,979 [main:66] - Compilation checking started
2021-03-11 23:52:20,395 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<UInt?>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:20,397 [main:53] - replacing (typeOf<UInt?>(), KType)
2021-03-11 23:52:20,397 [main:50] - replacing typeOf<UInt?>() KType
2021-03-11 23:52:20,398 [main:54] - Getting value of type KType
2021-03-11 23:52:20,522 [main:302] - generating value of type = KType false depth = 0
2021-03-11 23:52:20,616 [main:43] - GENERATING CALL OF fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:20,618 [main:61] - WITHOUT TYPE PARAMS = fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:20,713 [main:95] - GENERATED = typeOf<Z>()
2021-03-11 23:52:20,713 [main:58] - GENERATED VALUE OF TYPE KType = typeOf<Z>()
2021-03-11 23:52:20,713 [main:61] - GENERATED IS CALL =true
2021-03-11 23:52:20,715 [main:67] - randomType = Z
2021-03-11 23:52:20,804 [main:302] - generating value of type = Z false depth = 0
2021-03-11 23:52:20,804 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:52:20,906 [main:194] - Type params = []
2021-03-11 23:52:20,991 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:52:21,000 [main:106] - GETTING KType from String
2021-03-11 23:52:21,030 [main:61] - replacement of typeOf<UInt?>() of type KType is typeOf<Z>()
2021-03-11 23:52:21,115 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:52:21,116 [main:66] - Compilation checking started
2021-03-11 23:52:21,512 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<Z>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:21,512 [main:53] - replacing ("UShortArray", String)
2021-03-11 23:52:21,512 [main:50] - replacing "UShortArray" String
2021-03-11 23:52:21,512 [main:54] - Getting value of type String
2021-03-11 23:52:21,594 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:21,594 [main:58] - GENERATED VALUE OF TYPE String = "qbvvn"
2021-03-11 23:52:21,595 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:21,688 [main:67] - randomType = Long
2021-03-11 23:52:21,772 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:52:21,832 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@20984847]
2021-03-11 23:52:21,832 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3edfcfc5]
2021-03-11 23:52:21,936 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:21,937 [main:78] - Generated call from random type = (-7212558762475868943).toShort().toString(1446444879)
2021-03-11 23:52:21,937 [main:61] - replacement of "UShortArray" of type String is (-7212558762475868943).toShort().toString(1446444879)
2021-03-11 23:52:22,038 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:22,040 [main:53] - replacing (typeOf<Array<UByteArray>>(), KType)
2021-03-11 23:52:22,040 [main:50] - replacing typeOf<Array<UByteArray>>() KType
2021-03-11 23:52:22,040 [main:54] - Getting value of type KType
2021-03-11 23:52:22,141 [main:302] - generating value of type = KType false depth = 0
2021-03-11 23:52:22,333 [main:43] - GENERATING CALL OF fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:22,334 [main:61] - WITHOUT TYPE PARAMS = fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:22,416 [main:95] - GENERATED = typeOf<Short>()
2021-03-11 23:52:22,416 [main:58] - GENERATED VALUE OF TYPE KType = typeOf<Short>()
2021-03-11 23:52:22,416 [main:61] - GENERATED IS CALL =true
2021-03-11 23:52:22,586 [main:67] - randomType = Collection<ULong>
2021-03-11 23:52:22,587 [main:106] - GETTING KType from String
2021-03-11 23:52:22,607 [main:61] - replacement of typeOf<Array<UByteArray>>() of type KType is typeOf<Short>()
2021-03-11 23:52:22,689 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:52:22,689 [main:66] - Compilation checking started
2021-03-11 23:52:23,070 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(-1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<Z>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Short>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:23,071 [main:53] - replacing (expected, String)
2021-03-11 23:52:23,071 [main:50] - replacing expected String
2021-03-11 23:52:23,071 [main:54] - Getting value of type String
2021-03-11 23:52:23,174 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:23,174 [main:58] - GENERATED VALUE OF TYPE String = "xkfaq"
2021-03-11 23:52:23,174 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:23,176 [main:67] - randomType = Z
2021-03-11 23:52:23,257 [main:302] - generating value of type = Z false depth = 0
2021-03-11 23:52:23,258 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:52:23,338 [main:194] - Type params = []
2021-03-11 23:52:23,418 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:52:23,424 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26209dab]
2021-03-11 23:52:23,504 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:23,585 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:23,586 [main:78] - Generated call from random type = (Z("yhejg")).value.replaceAfter('䄗', Z("kfuae").value, "wzfbu")
2021-03-11 23:52:23,586 [main:61] - replacement of expected of type String is (Z("yhejg")).value.replaceAfter('䄗', Z("kfuae").value, "wzfbu")
2021-03-11 23:52:23,666 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:23,667 [main:53] - replacing ("UInt", String)
2021-03-11 23:52:23,667 [main:50] - replacing "UInt" String
2021-03-11 23:52:23,667 [main:54] - Getting value of type String
2021-03-11 23:52:23,749 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:23,749 [main:58] - GENERATED VALUE OF TYPE String = "qocco"
2021-03-11 23:52:23,750 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:23,928 [main:67] - randomType = HashSet<Long>
2021-03-11 23:52:24,025 [main:302] - generating value of type = HashSet<Long> false depth = 0
2021-03-11 23:52:24,120 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Long> = TODO()
2021-03-11 23:52:24,122 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Long> = TODO()
2021-03-11 23:52:24,374 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:52:24,374 [main:302] - generating value of type = Float true depth = 3
2021-03-11 23:52:24,376 [main:95] - GENERATED = HashSet<Long>(-1393666465, 0.038846314f)
2021-03-11 23:52:24,540 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:52:24,624 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:24,625 [main:78] - Generated call from random type = (HashSet<Long>(-1393666465, 0.038846314f)).size.toString(1248956931)
2021-03-11 23:52:24,625 [main:106] - GETTING String from String
2021-03-11 23:52:24,658 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@274eb3fe]]
2021-03-11 23:52:24,658 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@274eb3fe]
2021-03-11 23:52:24,745 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:24,834 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:24,835 [main:117] - GENERATED CALL = (Z("kfuae").value).padStart(1441409352, '멒')
2021-03-11 23:52:24,836 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58db5482]]
2021-03-11 23:52:24,836 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58db5482]
2021-03-11 23:52:24,836 [main:117] - GENERATED CALL = (Z("kfuae").value).lowercase()
2021-03-11 23:52:24,836 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]]
2021-03-11 23:52:24,836 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]
2021-03-11 23:52:24,931 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:25,034 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:25,035 [main:117] - GENERATED CALL = (Z("kfuae").value).substringAfterLast('謽', "uhbsn")
2021-03-11 23:52:25,035 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]]
2021-03-11 23:52:25,035 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:52:25,135 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:25,136 [main:117] - GENERATED CALL = (Z("kfuae").value).length.toString(-976090240)
2021-03-11 23:52:25,136 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c5e9129]]
2021-03-11 23:52:25,136 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c5e9129]
2021-03-11 23:52:25,221 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:25,303 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:25,304 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceIndentByMargin("faobh", "kcvas")
2021-03-11 23:52:25,304 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c11596e]]
2021-03-11 23:52:25,304 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c11596e]
2021-03-11 23:52:25,386 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:52:25,473 [main:43] - GENERATING CALL OF fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): Iterable<Int> = TODO()
2021-03-11 23:52:25,475 [main:61] - WITHOUT TYPE PARAMS = fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): Iterable<Int> = TODO()
2021-03-11 23:52:25,724 [main:302] - generating value of type = Long true depth = 3
2021-03-11 23:52:25,724 [main:302] - generating value of type = Long true depth = 3
2021-03-11 23:52:25,725 [main:95] - GENERATED = LongRange(-908888166987696167, -3846611011362408749)
2021-03-11 23:52:25,725 [main:117] - GENERATED CALL = (Z("kfuae").value).slice(LongRange(-908888166987696167, -3846611011362408749))
2021-03-11 23:52:25,725 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c03ab43]]
2021-03-11 23:52:25,725 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c03ab43]
2021-03-11 23:52:25,822 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:52:25,822 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:52:25,823 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceFirstChar({a: Char -> '暎'})
2021-03-11 23:52:25,823 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64377d2f]]
2021-03-11 23:52:25,823 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64377d2f]
2021-03-11 23:52:25,824 [main:117] - GENERATED CALL = (Z("kfuae").value).trim()
2021-03-11 23:52:25,824 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b61fa2a]]
2021-03-11 23:52:25,824 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:52:25,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:25,995 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:25,996 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b61fa2a]
2021-03-11 23:52:26,075 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:52:26,156 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 23:52:26,157 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 23:52:26,415 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:52:26,416 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 23:52:26,419 [main:95] - GENERATED = Regex("hbpwx", kotlin.text.RegexOption.MULTILINE)
2021-03-11 23:52:26,420 [main:117] - GENERATED CALL = (Z("kfuae").value).subSequence(-1253045873, 1038721447).replaceFirst(Regex("hbpwx", kotlin.text.RegexOption.MULTILINE), Z("kfuae").value)
2021-03-11 23:52:26,420 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@769e0f75]]
2021-03-11 23:52:26,420 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@769e0f75]
2021-03-11 23:52:26,501 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:26,503 [main:117] - GENERATED CALL = (Z("kfuae").value).replaceBefore('ീ', Z("kfuae").value, Z("kfuae").value)
2021-03-11 23:52:26,503 [main:61] - replacement of "UInt" of type String is (Z("kfuae").value).length.toString(-976090240)
2021-03-11 23:52:26,600 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:26,692 [main:119] - TRYING TO REPLACE CONSTANT 1198542122
2021-03-11 23:52:26,773 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 23:52:26,773 [main:66] - Compilation checking started
2021-03-11 23:52:27,097 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<Z>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Short>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:27,098 [main:119] - TRYING TO REPLACE CONSTANT 606881476
2021-03-11 23:52:27,178 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 23:52:27,179 [main:66] - Compilation checking started
2021-03-11 23:52:27,416 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<Z>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(size, -225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Short>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:27,416 [main:119] - TRYING TO REPLACE CONSTANT 225626732
2021-03-11 23:52:27,499 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 23:52:27,499 [main:66] - Compilation checking started
2021-03-11 23:52:27,839 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<Z>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, 225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Short>())
    check((Z("kfuae").value).subSequence(794717725, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:27,839 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-11 23:52:27,917 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 23:52:27,917 [main:119] - TRYING TO REPLACE CONSTANT 794717725
2021-03-11 23:52:27,996 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 23:52:27,996 [main:66] - Compilation checking started
2021-03-11 23:52:28,320 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<Z>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, 225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Short>())
    check((Z("kfuae").value).subSequence(606881476, -48370287).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:28,320 [main:119] - TRYING TO REPLACE CONSTANT 48370287
2021-03-11 23:52:28,402 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:28,403 [main:66] - Compilation checking started
2021-03-11 23:52:28,760 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(-498948608), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<Z>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, 225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Short>())
    check((Z("kfuae").value).subSequence(606881476, (emptyArray<Double>()).size).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:28,760 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-11 23:52:28,839 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 23:52:28,840 [main:119] - TRYING TO REPLACE CONSTANT '噹'
2021-03-11 23:52:28,930 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 23:52:28,931 [main:66] - Compilation checking started
2021-03-11 23:52:29,261 [main:119] - TRYING TO REPLACE CONSTANT 498948608
2021-03-11 23:52:29,350 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 23:52:29,351 [main:66] - Compilation checking started
2021-03-11 23:52:29,535 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, (Z("kfuae").value).drop(1198542122))
}

fun box(): String {
    check("Z", typeOf<Z>())
    check((emptyArray<Double>()).size.toString(size), typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check((Z("kfuae").value).takeLastWhile({a: Char -> false}), typeOf<Boolean?>())
    check("UInt?", typeOf<Z>())
    check((Z("pnepg")).value.substringAfter('噹', Z("kfuae").value), typeOf<ULong?>())
    check((Z("kfuae").value).removeRange(606881476, 225626732), typeOf<UShortArray>())
    check("UShortArray?", typeOf<Z>())
    check("Array<UByteArray>", typeOf<Short>())
    check((Z("kfuae").value).subSequence(606881476, (emptyArray<Double>()).size).commonSuffixWith("zaica", false), typeOf<Array<UByteArray?>?>())

    return "OK"
}


2021-03-11 23:52:29,558 [main:41] - AFTER TRY 0 res = package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals

inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}
2021-03-11 23:52:29,701 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:52:29,782 [main:194] - Type params = []
2021-03-11 23:52:29,858 [main:302] - generating value of type = String true depth = 1
2021-03-11 23:52:30,020 [main:43] - GENERATING CALL OF fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}
2021-03-11 23:52:30,021 [main:61] - WITHOUT TYPE PARAMS = fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}
2021-03-11 23:52:30,093 [main:302] - generating value of type = String true depth = 1
2021-03-11 23:52:30,094 [main:302] - generating value of type = KType false depth = 1
2021-03-11 23:52:30,394 [main:43] - GENERATING CALL OF fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:30,395 [main:61] - WITHOUT TYPE PARAMS = fun <T> typeOf(): KType = TODO()
2021-03-11 23:52:30,468 [main:95] - GENERATED = typeOf<HashMap<UByte?, Z>>()
2021-03-11 23:52:30,468 [main:95] - GENERATED = check("zxhzs", typeOf<HashMap<UByte?, Z>>())
2021-03-11 23:52:30,543 [main:43] - Try №0
2021-03-11 23:52:40,703 [main:48] - Already checked
2021-03-11 23:52:44,651 [main:69] - Trying to insert fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }
2021-03-11 23:52:44,860 [main:66] - Compilation checking started
2021-03-11 23:52:45,950 [main:103] - Trying to change 159 nodes
2021-03-11 23:52:45,950 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:52:45,950 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:52:45,950 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:52:46,099 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:52:46,106 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:52:46,267 [main:67] - randomType = Short
2021-03-11 23:52:46,404 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:52:46,489 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 23:52:46,529 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 23:52:46,529 [main:107] - replacing (" has state-machine ", String)
2021-03-11 23:52:46,529 [main:50] - replacing " has state-machine " String
2021-03-11 23:52:46,530 [main:54] - Getting value of type String
2021-03-11 23:52:46,672 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:46,674 [main:58] - GENERATED VALUE OF TYPE String = "nfzyy"
2021-03-11 23:52:46,674 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:46,968 [main:67] - randomType = Char?
2021-03-11 23:52:47,111 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:47,146 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4442fa6c]
2021-03-11 23:52:47,147 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b97f2a0]
2021-03-11 23:52:47,147 [main:78] - Generated call from random type = ('뷥')?.dec().titlecase()
2021-03-11 23:52:47,147 [main:106] - GETTING String from String
2021-03-11 23:52:47,173 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@769e0f75]]
2021-03-11 23:52:47,173 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@769e0f75]
2021-03-11 23:52:47,302 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:47,437 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:47,440 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceBefore('혩', Z("gypfv").value, "yyjiz")
2021-03-11 23:52:47,440 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a0bde40]]
2021-03-11 23:52:47,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a0bde40]
2021-03-11 23:52:47,440 [main:117] - GENERATED CALL = (Z("gypfv").value).uppercase()
2021-03-11 23:52:47,440 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b207a5f]]
2021-03-11 23:52:47,440 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b207a5f]
2021-03-11 23:52:47,616 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:47,620 [main:117] - GENERATED CALL = (Z("gypfv").value).prependIndent("pwkmc")
2021-03-11 23:52:47,620 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f682e1]]
2021-03-11 23:52:47,620 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f682e1]
2021-03-11 23:52:47,778 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:47,908 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:48,060 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:48,063 [main:117] - GENERATED CALL = (Z("gypfv").value).replace('க', 'ꗾ', false)
2021-03-11 23:52:48,063 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:52:48,063 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:52:48,197 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:48,348 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:48,350 [main:117] - GENERATED CALL = (Z("gypfv").value).commonSuffixWith("ljqxx", false)
2021-03-11 23:52:48,350 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483027bf]]
2021-03-11 23:52:48,351 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483027bf]
2021-03-11 23:52:48,481 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:48,660 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:48,819 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:48,821 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceFirst('叫', '‴', true)
2021-03-11 23:52:48,821 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]]
2021-03-11 23:52:48,822 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]
2021-03-11 23:52:48,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:48,964 [main:117] - GENERATED CALL = (Z("gypfv").value).take(82888423)
2021-03-11 23:52:48,965 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c03ab43]]
2021-03-11 23:52:48,965 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c03ab43]
2021-03-11 23:52:49,097 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:52:49,099 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:52:49,102 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceFirstChar({a: Char -> '㋥'})
2021-03-11 23:52:49,102 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]]
2021-03-11 23:52:49,102 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]
2021-03-11 23:52:49,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:49,356 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:49,358 [main:117] - GENERATED CALL = (Z("gypfv").value).padEnd(-179586790, '句')
2021-03-11 23:52:49,359 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]]
2021-03-11 23:52:49,359 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]
2021-03-11 23:52:49,505 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:49,508 [main:117] - GENERATED CALL = (Z("gypfv").value).substringBefore('뷡', Z("gypfv").value)
2021-03-11 23:52:49,508 [main:114] - replacement of " has state-machine " of type String is (Z("gypfv").value).padEnd(-179586790, '句')
2021-03-11 23:52:49,652 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:49,652 [main:66] - Compilation checking started
2021-03-11 23:52:50,311 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = "fail"
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0(ByteArray(2))

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:52:50,314 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-11 23:52:50,315 [main:50] - replacing numberOfSuspensions Int
2021-03-11 23:52:50,315 [main:54] - Getting value of type Int
2021-03-11 23:52:50,455 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:50,458 [main:58] - GENERATED VALUE OF TYPE Int = -978909762
2021-03-11 23:52:50,458 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:50,615 [main:67] - randomType = Collection<UInt>
2021-03-11 23:52:50,617 [main:106] - GETTING Int from String
2021-03-11 23:52:50,657 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]]
2021-03-11 23:52:50,658 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:52:50,658 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]
2021-03-11 23:52:50,658 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).takeHighestOneBit()
2021-03-11 23:52:50,658 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ab7999]]
2021-03-11 23:52:50,658 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:52:50,822 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:50,826 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ab7999]
2021-03-11 23:52:50,826 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo("ydcrk").inc()
2021-03-11 23:52:50,827 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@134eb263]]
2021-03-11 23:52:50,827 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:52:50,964 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:50,966 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@134eb263]
2021-03-11 23:52:51,099 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:51,102 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo("jazqd").coerceAtMost(-896675169)
2021-03-11 23:52:51,102 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a70c20c]]
2021-03-11 23:52:51,102 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a70c20c]
2021-03-11 23:52:51,226 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:52:51,228 [main:117] - GENERATED CALL = (Z("gypfv").value).length.rem(-70)
2021-03-11 23:52:51,228 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30d64921]]
2021-03-11 23:52:51,229 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:52:51,229 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30d64921]
2021-03-11 23:52:51,359 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:51,361 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).xor(832711166)
2021-03-11 23:52:51,362 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5699119e]]
2021-03-11 23:52:51,362 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:52:51,508 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:51,512 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5699119e]
2021-03-11 23:52:51,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:51,651 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546)
2021-03-11 23:52:51,651 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe9dc2]]
2021-03-11 23:52:51,651 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe9dc2]
2021-03-11 23:52:51,801 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 23:52:51,803 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:52:51,806 [main:117] - GENERATED CALL = (Z("gypfv").value).sumBy({a: Char -> 1992851185})
2021-03-11 23:52:51,806 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58595f67]]
2021-03-11 23:52:51,806 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:52:51,954 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:52,095 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:52,098 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58595f67]
2021-03-11 23:52:52,218 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:52,344 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:52,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:52,470 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-491767546, -192120206).indexOf('뱏', 1245881538, true)
2021-03-11 23:52:52,470 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ed61f9e]]
2021-03-11 23:52:52,470 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ed61f9e]
2021-03-11 23:52:52,470 [main:117] - GENERATED CALL = (Z("gypfv").value).length.inv()
2021-03-11 23:52:52,470 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47eb8f09]]
2021-03-11 23:52:52,470 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:52:52,470 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47eb8f09]
2021-03-11 23:52:52,471 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).dec()
2021-03-11 23:52:52,471 [main:114] - replacement of numberOfSuspensions of type Int is (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546)
2021-03-11 23:52:52,590 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:52,591 [main:66] - Compilation checking started
2021-03-11 23:52:53,270 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = "fail"
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0(ByteArray(2))

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:52:53,274 [main:107] - replacing ("fail", String)
2021-03-11 23:52:53,274 [main:50] - replacing "fail" String
2021-03-11 23:52:53,274 [main:54] - Getting value of type String
2021-03-11 23:52:53,422 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:53,424 [main:58] - GENERATED VALUE OF TYPE String = "nvkxp"
2021-03-11 23:52:53,425 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:53,433 [main:67] - randomType = Kla1
2021-03-11 23:52:53,579 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 23:52:53,582 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:52:53,616 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6dd0d7e1]
2021-03-11 23:52:53,617 [main:78] - Generated call from random type = (Kla1()).prope2?.toString()!!
2021-03-11 23:52:53,617 [main:106] - GETTING String from String
2021-03-11 23:52:53,649 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]]
2021-03-11 23:52:53,649 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]
2021-03-11 23:52:53,650 [main:117] - GENERATED CALL = (Z("gypfv").value).decapitalize()
2021-03-11 23:52:53,650 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]]
2021-03-11 23:52:53,650 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:52:53,793 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:53,796 [main:117] - GENERATED CALL = (Z("gypfv").value).length.toString(1256268793)
2021-03-11 23:52:53,796 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]]
2021-03-11 23:52:53,796 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]
2021-03-11 23:52:53,797 [main:117] - GENERATED CALL = (Z("gypfv").value).trimStart()
2021-03-11 23:52:53,797 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]]
2021-03-11 23:52:53,797 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]
2021-03-11 23:52:53,927 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:54,057 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:54,060 [main:117] - GENERATED CALL = (Z("gypfv").value).removeRange(1407752786, -120339955)
2021-03-11 23:52:54,061 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52baa460]]
2021-03-11 23:52:54,061 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52baa460]
2021-03-11 23:52:54,184 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:54,327 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:52:54,330 [main:117] - GENERATED CALL = (Z("gypfv").value).substringBeforeLast('䄐', "xsqtb")
2021-03-11 23:52:54,330 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483027bf]]
2021-03-11 23:52:54,330 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483027bf]
2021-03-11 23:52:54,467 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:54,590 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:52:54,713 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:54,715 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceFirst('㿱', '苦', true)
2021-03-11 23:52:54,715 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]]
2021-03-11 23:52:54,715 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]
2021-03-11 23:52:54,833 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:52:54,835 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:52:54,838 [main:117] - GENERATED CALL = (Z("gypfv").value).filter({a: Char -> false})
2021-03-11 23:52:54,838 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c11596e]]
2021-03-11 23:52:54,838 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c11596e]
2021-03-11 23:52:54,957 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:52:55,089 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 23:52:55,092 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 23:52:55,245 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:52:55,247 [main:95] - GENERATED = mutableListOf<Int>(1754261155)
2021-03-11 23:52:55,248 [main:117] - GENERATED CALL = (Z("gypfv").value).slice(mutableListOf<Int>(1754261155))
2021-03-11 23:52:55,248 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:52:55,248 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:52:55,381 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:52:55,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:52:55,507 [main:117] - GENERATED CALL = (Z("gypfv").value).commonPrefixWith("lzbeq", true)
2021-03-11 23:52:55,507 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7603fed2]]
2021-03-11 23:52:55,507 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:52:55,628 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:52:55,631 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7603fed2]
2021-03-11 23:52:55,631 [main:117] - GENERATED CALL = (Z("gypfv").value).get(577699396).uppercase()
2021-03-11 23:52:55,631 [main:114] - replacement of "fail" of type String is (Z("gypfv").value).trimStart()
2021-03-11 23:52:55,754 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:52:55,754 [main:66] - Compilation checking started
2021-03-11 23:52:56,463 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0(ByteArray(2))

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:52:56,466 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-11 23:52:56,467 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-11 23:52:56,467 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-11 23:52:56,641 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-11 23:52:56,645 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:52:56,804 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:52:56,808 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:52:57,081 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:52:57,084 [main:95] - GENERATED = require(true)
2021-03-11 23:52:57,084 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> require(true)}
2021-03-11 23:52:57,084 [main:61] - GENERATED IS CALL =false
2021-03-11 23:52:57,368 [main:67] - randomType = Kla2<Byte>
2021-03-11 23:52:57,501 [main:302] - generating value of type = Kla2<Byte> false depth = 0
2021-03-11 23:52:57,504 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 23:52:58,152 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 23:52:58,154 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:52:58,175 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 23:52:58,196 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> require(true)}
2021-03-11 23:52:58,314 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:52:58,315 [main:66] - Compilation checking started
2021-03-11 23:52:58,931 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0(ByteArray(2))

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:52:58,935 [main:107] - replacing ({
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }, Unit?)
2021-03-11 23:52:58,935 [main:50] - replacing {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    } Unit?
2021-03-11 23:52:58,935 [main:54] - Getting value of type Unit?
2021-03-11 23:52:59,089 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 23:52:59,226 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:52:59,229 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:52:59,491 [main:302] - generating value of type = Any false depth = 3
2021-03-11 23:52:59,492 [main:95] - GENERATED = println("rdsuo")
2021-03-11 23:52:59,492 [main:58] - GENERATED VALUE OF TYPE Unit? = println("rdsuo")
2021-03-11 23:52:59,492 [main:61] - GENERATED IS CALL =true
2021-03-11 23:52:59,637 [main:67] - randomType = Kla5
2021-03-11 23:52:59,762 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 23:52:59,765 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:52:59,795 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@188dd612]
2021-03-11 23:52:59,921 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 23:53:00,048 [main:43] - GENERATING CALL OF fun Throwable(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 23:53:00,052 [main:61] - WITHOUT TYPE PARAMS = fun Throwable(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 23:53:00,499 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:53:00,501 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 23:53:00,507 [main:95] - GENERATED = Throwable("zrvop", NumberFormatException())
2021-03-11 23:53:00,507 [main:78] - Generated call from random type = (Kla5).resumeWithException(Throwable("zrvop", NumberFormatException()))
2021-03-11 23:53:00,516 [main:106] - GETTING Unit? from String
2021-03-11 23:53:00,552 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52e84ac4]]
2021-03-11 23:53:00,552 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:00,676 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:00,809 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:00,812 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52e84ac4]
2021-03-11 23:53:00,933 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 23:53:00,935 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:01,061 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:53:01,065 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:53:01,334 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:53:01,334 [main:95] - GENERATED = print("shorx")
2021-03-11 23:53:01,334 [main:117] - GENERATED CALL = (Z("gypfv").value)?.subSequence(785505675, 1986299571).forEachIndexed({a: Int, b: Char -> print("shorx")})
2021-03-11 23:53:01,334 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69a2c4aa]]
2021-03-11 23:53:01,334 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:01,494 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:01,632 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:01,634 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69a2c4aa]
2021-03-11 23:53:01,753 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 23:53:01,755 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:01,761 [main:117] - GENERATED CALL = (Z("gypfv").value)?.subSequence(1401627984, 1644375199).forEach({a: Char -> println()})
2021-03-11 23:53:01,761 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52e84ac4]]
2021-03-11 23:53:01,761 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52e84ac4]
2021-03-11 23:53:01,877 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 23:53:01,880 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:02,002 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:02,005 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:02,428 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:53:02,430 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:53:02,433 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:53:02,570 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:02,574 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:02,973 [main:302] - generating value of type = Int true depth = 8
2021-03-11 23:53:02,975 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 23:53:02,978 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 23:53:02,983 [main:95] - GENERATED = repeat(1666578805, {a: Int -> println()})
2021-03-11 23:53:02,983 [main:95] - GENERATED = repeat(1928291474, {a: Int -> repeat(1666578805, {a: Int -> println()})})
2021-03-11 23:53:02,984 [main:117] - GENERATED CALL = (Z("gypfv").value)?.forEachIndexed({a: Int, b: Char -> repeat(1928291474, {a: Int -> repeat(1666578805, {a: Int -> println()})})})
2021-03-11 23:53:02,984 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69a2c4aa]]
2021-03-11 23:53:02,984 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69a2c4aa]
2021-03-11 23:53:03,103 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 23:53:03,105 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:03,227 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:53:03,230 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:53:03,513 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:53:03,516 [main:95] - GENERATED = check(false)
2021-03-11 23:53:03,516 [main:117] - GENERATED CALL = (Z("gypfv").value)?.forEach({a: Char -> check(false)})
2021-03-11 23:53:03,516 [main:114] - replacement of {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    } of type Unit? is (Z("gypfv").value)?.subSequence(785505675, 1986299571).forEachIndexed({a: Int, b: Char -> print("shorx")})
2021-03-11 23:53:03,644 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:03,645 [main:66] - Compilation checking started
2021-03-11 23:53:03,650 [main:71] - Wrong syntax or breaks conditions
2021-03-11 23:53:03,650 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0(ByteArray(2))

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) (Z("gypfv").value)?.subSequence(785505675, 1986299571).forEachIndexed({a: Int, b: Char -> print("shorx")})
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:53:03,652 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-11 23:53:03,653 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-11 23:53:03,653 [main:54] - Getting value of type String
2021-03-11 23:53:03,768 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:03,770 [main:58] - GENERATED VALUE OF TYPE String = "gzpqi"
2021-03-11 23:53:03,771 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:03,775 [main:67] - randomType = Int
2021-03-11 23:53:03,893 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:03,938 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42140584]
2021-03-11 23:53:03,938 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d841a0]
2021-03-11 23:53:04,065 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:04,068 [main:78] - Generated call from random type = (234278423).toByte().toString(-2128709182)
2021-03-11 23:53:04,068 [main:106] - GETTING String from String
2021-03-11 23:53:04,097 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]]
2021-03-11 23:53:04,097 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:04,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:04,341 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:04,343 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]
2021-03-11 23:53:04,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:04,520 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-818739390, 973851032).repeat(1827938891)
2021-03-11 23:53:04,520 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c2b17c]]
2021-03-11 23:53:04,520 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c2b17c]
2021-03-11 23:53:04,657 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:53:04,660 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:53:04,662 [main:117] - GENERATED CALL = (Z("gypfv").value).takeWhile({a: Char -> false})
2021-03-11 23:53:04,663 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aa10b05]]
2021-03-11 23:53:04,663 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:04,779 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:04,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:04,904 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aa10b05]
2021-03-11 23:53:05,020 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:53:05,140 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:53:05,143 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:53:05,570 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:53:05,572 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 23:53:05,723 [main:43] - GENERATING CALL OF fun <T> emptySet(): Set<RegexOption> = TODO()
2021-03-11 23:53:05,728 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Set<RegexOption> = TODO()
2021-03-11 23:53:05,855 [main:95] - GENERATED = emptySet<RegexOption>()
2021-03-11 23:53:05,855 [main:95] - GENERATED = Regex("nnzwy", emptySet<RegexOption>())
2021-03-11 23:53:05,970 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 23:53:05,972 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:53:06,091 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:53:06,095 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:53:06,352 [main:302] - generating value of type = String true depth = 4
2021-03-11 23:53:06,355 [main:95] - GENERATED = StringBuilder("rykuy")
2021-03-11 23:53:06,355 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1716712419, 1020716075).replace(Regex("nnzwy", emptySet<RegexOption>()), {a: MatchResult -> StringBuilder("rykuy")})
2021-03-11 23:53:06,355 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:53:06,355 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:53:06,524 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:53:06,692 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:06,695 [main:117] - GENERATED CALL = (Z("gypfv").value).commonSuffixWith("buoeb", true)
2021-03-11 23:53:06,695 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c5e9129]]
2021-03-11 23:53:06,695 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c5e9129]
2021-03-11 23:53:06,815 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:06,818 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceIndentByMargin(Z("gypfv").value, "tzwoh")
2021-03-11 23:53:06,818 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]]
2021-03-11 23:53:06,818 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]
2021-03-11 23:53:06,934 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:06,937 [main:117] - GENERATED CALL = (Z("gypfv").value).takeLast(-895933905)
2021-03-11 23:53:06,937 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]]
2021-03-11 23:53:06,937 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]
2021-03-11 23:53:07,050 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:07,166 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:07,168 [main:117] - GENERATED CALL = (Z("gypfv").value).padEnd(-1736773109, '')
2021-03-11 23:53:07,169 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7603fed2]]
2021-03-11 23:53:07,169 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:07,282 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:07,285 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7603fed2]
2021-03-11 23:53:07,285 [main:117] - GENERATED CALL = (Z("gypfv").value).get(1258770085).uppercase()
2021-03-11 23:53:07,285 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]]
2021-03-11 23:53:07,285 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]
2021-03-11 23:53:07,285 [main:117] - GENERATED CALL = (Z("gypfv").value).trimStart()
2021-03-11 23:53:07,285 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f25ad6b]]
2021-03-11 23:53:07,285 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f25ad6b]
2021-03-11 23:53:07,402 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:53:07,404 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:53:07,407 [main:117] - GENERATED CALL = (Z("gypfv").value).dropLastWhile({a: Char -> false})
2021-03-11 23:53:07,407 [main:114] - replacement of "tail-call optimization hit: method " of type String is (Z("gypfv").value).takeWhile({a: Char -> false})
2021-03-11 23:53:07,548 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:07,548 [main:66] - Compilation checking started
2021-03-11 23:53:08,182 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0(ByteArray(2))

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:53:08,185 [main:107] - replacing (exception, Throwable)
2021-03-11 23:53:08,185 [main:50] - replacing exception Throwable
2021-03-11 23:53:08,185 [main:54] - Getting value of type Throwable
2021-03-11 23:53:08,314 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 23:53:08,319 [main:58] - GENERATED VALUE OF TYPE Throwable = UnsupportedOperationException()
2021-03-11 23:53:08,319 [main:61] - GENERATED IS CALL =true
2021-03-11 23:53:08,473 [main:67] - randomType = Short
2021-03-11 23:53:08,593 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:53:08,630 [main:106] - GETTING Throwable from String
2021-03-11 23:53:08,655 [main:114] - replacement of exception of type Throwable is UnsupportedOperationException()
2021-03-11 23:53:08,771 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:53:08,771 [main:66] - Compilation checking started
2021-03-11 23:53:09,391 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0(ByteArray(2))

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:09,393 [main:107] - replacing (ByteArray(2), ByteArray)
2021-03-11 23:53:09,393 [main:50] - replacing ByteArray(2) ByteArray
2021-03-11 23:53:09,393 [main:54] - Getting value of type ByteArray
2021-03-11 23:53:09,514 [main:302] - generating value of type = ByteArray false depth = 0
2021-03-11 23:53:09,636 [main:43] - GENERATING CALL OF fun ByteArray(size: kotlin.Int): ByteArray = TODO()
2021-03-11 23:53:09,639 [main:61] - WITHOUT TYPE PARAMS = fun ByteArray(size: kotlin.Int): ByteArray = TODO()
2021-03-11 23:53:09,901 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:53:09,903 [main:95] - GENERATED = ByteArray(-2130508060)
2021-03-11 23:53:09,904 [main:58] - GENERATED VALUE OF TYPE ByteArray = ByteArray(-2130508060)
2021-03-11 23:53:09,904 [main:61] - GENERATED IS CALL =true
2021-03-11 23:53:10,044 [main:67] - randomType = Float
2021-03-11 23:53:10,163 [main:302] - generating value of type = Float true depth = 0
2021-03-11 23:53:10,201 [main:106] - GETTING ByteArray from String
2021-03-11 23:53:10,224 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.String.encodeToByteArray(): kotlin.ByteArray defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4236cc54]]
2021-03-11 23:53:10,224 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.String.encodeToByteArray(): kotlin.ByteArray defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4236cc54]
2021-03-11 23:53:10,224 [main:117] - GENERATED CALL = (Z("gypfv").value).encodeToByteArray()
2021-03-11 23:53:10,224 [main:114] - replacement of ByteArray(2) of type ByteArray is (Z("gypfv").value).encodeToByteArray()
2021-03-11 23:53:10,356 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:10,356 [main:66] - Compilation checking started
2021-03-11 23:53:10,997 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:11,001 [main:107] - replacing (prope1.prope6, Function0<Unit>)
2021-03-11 23:53:11,001 [main:50] - replacing prope1.prope6 Function0<Unit>
2021-03-11 23:53:11,001 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:53:11,143 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:53:11,145 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:11,274 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:11,277 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:11,553 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 23:53:11,556 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:53:11,688 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:11,691 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:12,115 [main:302] - generating value of type = Int true depth = 8
2021-03-11 23:53:12,118 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 23:53:12,120 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 23:53:12,244 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:12,248 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:12,640 [main:302] - generating value of type = Int true depth = 12
2021-03-11 23:53:12,642 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-11 23:53:12,644 [main:302] - generating value of type = Unit false depth = 13
2021-03-11 23:53:12,765 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:12,769 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:13,240 [main:302] - generating value of type = Int true depth = 16
2021-03-11 23:53:13,240 [main:385] - Cant generate call of fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:53:13,240 [main:95] - GENERATED = repeat(913614427, {a: Int -> })
2021-03-11 23:53:13,240 [main:95] - GENERATED = repeat(-326046975, {a: Int -> repeat(913614427, {a: Int -> })})
2021-03-11 23:53:13,240 [main:95] - GENERATED = contract({ repeat(-326046975, {a: Int -> repeat(913614427, {a: Int -> })})})
2021-03-11 23:53:13,240 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ repeat(-326046975, {a: Int -> repeat(913614427, {a: Int -> })})})}
2021-03-11 23:53:13,241 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:13,815 [main:67] - randomType = HashSet<Triple<Long, UInt, Byte>>
2021-03-11 23:53:13,932 [main:302] - generating value of type = HashSet<Triple<Long, UInt, Byte>> false depth = 0
2021-03-11 23:53:14,053 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Triple<Long, UInt, Byte>> = TODO()
2021-03-11 23:53:14,057 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Triple<Long, UInt, Byte>> = TODO()
2021-03-11 23:53:14,494 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:53:14,496 [main:302] - generating value of type = Float true depth = 3
2021-03-11 23:53:14,499 [main:95] - GENERATED = LinkedHashSet<Triple<Long, UInt, Byte>>(2129041188, 0.67377716f)
2021-03-11 23:53:14,681 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:53:14,709 [main:114] - replacement of prope1.prope6 of type Function0<Unit> is { contract({ repeat(-326046975, {a: Int -> repeat(913614427, {a: Int -> })})})}
2021-03-11 23:53:14,827 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:53:14,827 [main:66] - Compilation checking started
2021-03-11 23:53:15,199 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { contract({ repeat(-326046975, {a: Int -> repeat(913614427, {a: Int -> })})})} = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:15,203 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4, String)
2021-03-11 23:53:15,204 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4 String
2021-03-11 23:53:15,204 [main:54] - Getting value of type String
2021-03-11 23:53:15,334 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:15,337 [main:58] - GENERATED VALUE OF TYPE String = "uunyq"
2021-03-11 23:53:15,337 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:15,341 [main:67] - randomType = String
2021-03-11 23:53:15,460 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:15,479 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:15,594 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:15,723 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:15,726 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]
2021-03-11 23:53:15,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:15,846 [main:78] - Generated call from random type = ("rrwks").subSequence(-1259682167, -316901708).repeat(1708655002)
2021-03-11 23:53:15,846 [main:106] - GETTING String from String
2021-03-11 23:53:15,863 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:53:15,864 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:15,983 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:16,102 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:16,104 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:53:16,220 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:53:16,340 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:16,343 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(1256211020, -1321681630).commonPrefixWith("zywnv", true)
2021-03-11 23:53:16,343 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b22a353]]
2021-03-11 23:53:16,343 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b22a353]
2021-03-11 23:53:16,462 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:16,586 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:16,589 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceAfterLast('玦', Z("gypfv").value, "fcnby")
2021-03-11 23:53:16,589 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14e17899]]
2021-03-11 23:53:16,589 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14e17899]
2021-03-11 23:53:16,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:16,707 [main:117] - GENERATED CALL = (Z("gypfv").value).dropLast(-1863107561)
2021-03-11 23:53:16,707 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58db5482]]
2021-03-11 23:53:16,707 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58db5482]
2021-03-11 23:53:16,707 [main:117] - GENERATED CALL = (Z("gypfv").value).lowercase()
2021-03-11 23:53:16,707 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:53:16,707 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:16,822 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:16,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:16,973 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:53:17,125 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:53:17,255 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:17,259 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(81533788, -556764668).commonSuffixWith(StringBuilder(), false)
2021-03-11 23:53:17,259 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]]
2021-03-11 23:53:17,259 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]
2021-03-11 23:53:17,389 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:17,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:17,520 [main:117] - GENERATED CALL = (Z("gypfv").value).removeRange(-1187756568, -524568803)
2021-03-11 23:53:17,520 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]]
2021-03-11 23:53:17,520 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]
2021-03-11 23:53:17,633 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:17,636 [main:117] - GENERATED CALL = (Z("gypfv").value).take(1202987545)
2021-03-11 23:53:17,636 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f25ad6b]]
2021-03-11 23:53:17,636 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f25ad6b]
2021-03-11 23:53:17,751 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:53:17,753 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:53:17,756 [main:117] - GENERATED CALL = (Z("gypfv").value).dropLastWhile({a: Char -> true})
2021-03-11 23:53:17,756 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]]
2021-03-11 23:53:17,756 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]
2021-03-11 23:53:17,870 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:17,872 [main:117] - GENERATED CALL = (Z("gypfv").value).substringAfterLast('窗', Z("gypfv").value)
2021-03-11 23:53:17,873 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b55a206]]
2021-03-11 23:53:17,873 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b55a206]
2021-03-11 23:53:17,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:18,156 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:18,290 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:53:18,296 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceRange(-1544154737, -327212594, "lucjx")
2021-03-11 23:53:18,296 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z("gypfv").value).compareTo("fcyec").coerceAtLeast(-103482546) + ", got " + prope4 of type String is (Z("gypfv").value).removeRange(-1187756568, -524568803)
2021-03-11 23:53:18,424 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:18,424 [main:66] - Compilation checking started
2021-03-11 23:53:19,076 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:19,078 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 23:53:19,079 [main:50] - replacing getOrThrow() Any?
2021-03-11 23:53:19,079 [main:54] - Getting value of type Any?
2021-03-11 23:53:19,220 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:19,220 [main:58] - GENERATED VALUE OF TYPE Any? = "aqtny"
2021-03-11 23:53:19,220 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:19,229 [main:67] - randomType = Kla3
2021-03-11 23:53:19,344 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:53:19,346 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 23:53:19,356 [main:106] - GETTING Any? from String
2021-03-11 23:53:19,379 [main:114] - replacement of getOrThrow() of type Any? is "aqtny"
2021-03-11 23:53:19,495 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 23:53:19,495 [main:66] - Compilation checking started
2021-03-11 23:53:19,840 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2."aqtny"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:19,841 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:53:19,841 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:53:19,841 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:53:19,957 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:53:19,962 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:53:20,102 [main:67] - randomType = Array<Int>
2021-03-11 23:53:20,215 [main:302] - generating value of type = Array<Int> false depth = 0
2021-03-11 23:53:20,335 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int): Array<Int> = TODO()
2021-03-11 23:53:20,339 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int): Array<Int> = TODO()
2021-03-11 23:53:20,728 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:53:20,730 [main:302] - generating value of type = Function1<Int, Int> false depth = 3
2021-03-11 23:53:20,733 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:53:20,735 [main:95] - GENERATED = Array<Int>(526041278, {a: Int -> 84473406})
2021-03-11 23:53:20,745 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 23:53:20,761 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 23:53:20,761 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:53:20,761 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:53:20,761 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:53:20,874 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:53:20,879 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:53:21,730 [main:67] - randomType = MutableMap<Kla2<Float?>, Double>?
2021-03-11 23:53:21,732 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 23:53:21,757 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 23:53:21,757 [main:107] - replacing (prope5, Boolean)
2021-03-11 23:53:21,757 [main:50] - replacing prope5 Boolean
2021-03-11 23:53:21,757 [main:54] - Getting value of type Boolean
2021-03-11 23:53:21,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:21,882 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:53:21,882 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:22,014 [main:67] - randomType = Short
2021-03-11 23:53:22,127 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:53:22,160 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1bbdd833]
2021-03-11 23:53:22,276 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:53:22,278 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67264fde]
2021-03-11 23:53:22,410 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:22,410 [main:78] - Generated call from random type = (-24290).compareTo(-25).equals("duenn")
2021-03-11 23:53:22,411 [main:106] - GETTING Boolean from String
2021-03-11 23:53:22,434 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eac302c]]
2021-03-11 23:53:22,434 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eac302c]
2021-03-11 23:53:22,434 [main:117] - GENERATED CALL = (Z("gypfv").value).none()
2021-03-11 23:53:22,434 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e]]
2021-03-11 23:53:22,434 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e]
2021-03-11 23:53:22,563 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:22,564 [main:117] - GENERATED CALL = (Z("gypfv").value).equals("otamr")
2021-03-11 23:53:22,564 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33ca0a4d]]
2021-03-11 23:53:22,564 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33ca0a4d]
2021-03-11 23:53:22,564 [main:117] - GENERATED CALL = (Z("gypfv").value).toBoolean()
2021-03-11 23:53:22,564 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e8d801]]
2021-03-11 23:53:22,564 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:22,684 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:22,798 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:22,800 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e8d801]
2021-03-11 23:53:22,801 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1704432850, -284615649).isNotBlank()
2021-03-11 23:53:22,801 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5a877525]]
2021-03-11 23:53:22,801 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e]
2021-03-11 23:53:22,914 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:22,914 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5a877525]
2021-03-11 23:53:23,026 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:23,029 [main:117] - GENERATED CALL = (Z("gypfv").value).equals("mkrjt").and(true)
2021-03-11 23:53:23,029 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ac9483]]
2021-03-11 23:53:23,029 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ac9483]
2021-03-11 23:53:23,029 [main:117] - GENERATED CALL = (Z("gypfv").value).matches(Z("gypfv").value)
2021-03-11 23:53:23,029 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@389d3b4f]]
2021-03-11 23:53:23,029 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@389d3b4f]
2021-03-11 23:53:23,029 [main:117] - GENERATED CALL = (Z("gypfv").value).any()
2021-03-11 23:53:23,029 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e5eef71]]
2021-03-11 23:53:23,029 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:23,143 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:23,145 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e5eef71]
2021-03-11 23:53:23,145 [main:117] - GENERATED CALL = (Z("gypfv").value).get(1321197650).isWhitespace()
2021-03-11 23:53:23,145 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5de5459f]]
2021-03-11 23:53:23,145 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:23,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:23,399 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:23,401 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5de5459f]
2021-03-11 23:53:23,402 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1694058669, -1099529247).isBlank()
2021-03-11 23:53:23,402 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c525925]]
2021-03-11 23:53:23,402 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e]
2021-03-11 23:53:23,536 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:23,536 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c525925]
2021-03-11 23:53:23,661 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:23,661 [main:117] - GENERATED CALL = (Z("gypfv").value).equals("zvqrt").equals("igcek")
2021-03-11 23:53:23,661 [main:114] - replacement of prope5 of type Boolean is (Z("gypfv").value).equals("mkrjt").and(true)
2021-03-11 23:53:23,773 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:23,774 [main:66] - Compilation checking started
2021-03-11 23:53:24,104 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        (Z("gypfv").value).equals("mkrjt").and(true) = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:24,106 [main:107] - replacing (true, Boolean)
2021-03-11 23:53:24,106 [main:50] - replacing true Boolean
2021-03-11 23:53:24,106 [main:54] - Getting value of type Boolean
2021-03-11 23:53:24,221 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:24,224 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:53:24,224 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:24,358 [main:67] - randomType = Char?
2021-03-11 23:53:24,472 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:24,493 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5dcd0fe]
2021-03-11 23:53:24,493 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6a909132]
2021-03-11 23:53:24,607 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:24,607 [main:78] - Generated call from random type = ('켗')?.toShort().equals("panpr")
2021-03-11 23:53:24,607 [main:114] - replacement of true of type Boolean is ('켗')?.toShort().equals("panpr")
2021-03-11 23:53:24,733 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:24,733 [main:66] - Compilation checking started
2021-03-11 23:53:25,347 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:25,349 [main:107] - replacing (prope2.exceptionOrNull()!!, Throwable)
2021-03-11 23:53:25,349 [main:50] - replacing prope2.exceptionOrNull()!! Throwable
2021-03-11 23:53:25,349 [main:54] - Getting value of type Throwable
2021-03-11 23:53:25,471 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 23:53:25,597 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 23:53:25,601 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 23:53:25,851 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 23:53:25,975 [main:43] - GENERATING CALL OF fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-11 23:53:25,979 [main:61] - WITHOUT TYPE PARAMS = fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-11 23:53:26,232 [main:302] - generating value of type = String true depth = 6
2021-03-11 23:53:26,235 [main:95] - GENERATED = NotImplementedError("mmqln")
2021-03-11 23:53:26,235 [main:95] - GENERATED = UninitializedPropertyAccessException(NotImplementedError("mmqln"))
2021-03-11 23:53:26,235 [main:58] - GENERATED VALUE OF TYPE Throwable = UninitializedPropertyAccessException(NotImplementedError("mmqln"))
2021-03-11 23:53:26,235 [main:61] - GENERATED IS CALL =true
2021-03-11 23:53:26,375 [main:67] - randomType = UByte
2021-03-11 23:53:26,492 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:53:26,538 [main:106] - GETTING Throwable from String
2021-03-11 23:53:26,568 [main:114] - replacement of prope2.exceptionOrNull()!! of type Throwable is UninitializedPropertyAccessException(NotImplementedError("mmqln"))
2021-03-11 23:53:26,690 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:53:26,692 [main:107] - replacing (prope4, Int)
2021-03-11 23:53:26,692 [main:50] - replacing prope4 Int
2021-03-11 23:53:26,692 [main:54] - Getting value of type Int
2021-03-11 23:53:26,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:26,815 [main:58] - GENERATED VALUE OF TYPE Int = 1540484165
2021-03-11 23:53:26,815 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:27,716 [main:67] - randomType = HashMap<ULong, Array<Kla2<Function1<Kla4, Kla3>>?>>
2021-03-11 23:53:27,865 [main:302] - generating value of type = HashMap<ULong, Array<Kla2<Function1<Kla4, Kla3>>?>> false depth = 0
2021-03-11 23:53:27,987 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<ULong, Array<Kla2<Function1<Kla4, Kla3>>?>> = TODO()
2021-03-11 23:53:27,991 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<ULong, Array<Kla2<Function1<Kla4, Kla3>>?>> = TODO()
2021-03-11 23:53:28,113 [main:95] - GENERATED = hashMapOf<ULong, Array<Kla2<Function1<Kla4, Kla3>>?>>()
2021-03-11 23:53:28,340 [main:149] - GENERATING call of type public open fun get(key: kotlin.ULong): kotlin.Array<test.Kla2<(test.Kla4) -> test.Kla3>?>? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@7c2bbf28]
2021-03-11 23:53:28,467 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:53:28,470 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e425d41]
2021-03-11 23:53:28,586 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 23:53:28,588 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:53:28,591 [main:78] - Generated call from random type = (hashMapOf<ULong, Array<Kla2<Function1<Kla4, Kla3>>?>>()).get(5722912541981835944.toULong())?.sumBy({a: T -> -1164388987})!!
2021-03-11 23:53:28,592 [main:106] - GETTING Int from String
2021-03-11 23:53:28,612 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75377820]]
2021-03-11 23:53:28,612 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:28,734 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:28,864 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:28,866 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75377820]
2021-03-11 23:53:28,983 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 23:53:29,122 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-11 23:53:29,125 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-11 23:53:29,371 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:53:29,374 [main:95] - GENERATED = CharArray(1133347768)
2021-03-11 23:53:29,490 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:29,607 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:29,610 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true)
2021-03-11 23:53:29,610 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f500542]]
2021-03-11 23:53:29,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f500542]
2021-03-11 23:53:29,610 [main:117] - GENERATED CALL = (Z("gypfv").value).length.countLeadingZeroBits()
2021-03-11 23:53:29,610 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5699119e]]
2021-03-11 23:53:29,610 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5699119e]
2021-03-11 23:53:29,728 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:29,730 [main:117] - GENERATED CALL = (Z("gypfv").value).length.coerceAtLeast(1678198385)
2021-03-11 23:53:29,730 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@412c7b5e]]
2021-03-11 23:53:29,730 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:29,846 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:29,848 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@412c7b5e]
2021-03-11 23:53:29,848 [main:117] - GENERATED CALL = (Z("gypfv").value).get(1710864693).toInt()
2021-03-11 23:53:29,848 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@10adc78d]]
2021-03-11 23:53:29,848 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@10adc78d]
2021-03-11 23:53:29,965 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:29,967 [main:117] - GENERATED CALL = (Z("gypfv").value).length.rotateRight(-1961990505)
2021-03-11 23:53:29,968 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ed61f9e]]
2021-03-11 23:53:29,968 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:53:29,968 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ed61f9e]
2021-03-11 23:53:29,968 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).inv()
2021-03-11 23:53:29,968 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@efa1638]]
2021-03-11 23:53:29,968 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:53:29,968 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@efa1638]
2021-03-11 23:53:30,083 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:53:30,086 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).div(98)
2021-03-11 23:53:30,086 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e67722b]]
2021-03-11 23:53:30,086 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e67722b]
2021-03-11 23:53:30,243 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:53:30,246 [main:117] - GENERATED CALL = (Z("gypfv").value).length.compareTo(-65)
2021-03-11 23:53:30,246 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@302d88d8]]
2021-03-11 23:53:30,246 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:53:30,246 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@302d88d8]
2021-03-11 23:53:30,246 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).countTrailingZeroBits()
2021-03-11 23:53:30,247 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@68d74371]]
2021-03-11 23:53:30,247 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:30,382 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:30,385 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@68d74371]
2021-03-11 23:53:30,503 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:30,505 [main:117] - GENERATED CALL = (Z("gypfv").value).get(-788438848).compareTo('텝')
2021-03-11 23:53:30,505 [main:114] - replacement of prope4 of type Int is (Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true)
2021-03-11 23:53:30,620 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:30,620 [main:66] - Compilation checking started
2021-03-11 23:53:31,231 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:31,233 [main:107] - replacing (i, Int)
2021-03-11 23:53:31,234 [main:50] - replacing i Int
2021-03-11 23:53:31,234 [main:54] - Getting value of type Int
2021-03-11 23:53:31,372 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:31,374 [main:58] - GENERATED VALUE OF TYPE Int = -203295063
2021-03-11 23:53:31,375 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:31,539 [main:67] - randomType = Kla3?
2021-03-11 23:53:31,654 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 23:53:31,656 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-11 23:53:31,662 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in test.Kla3[DeserializedSimpleFunctionDescriptor@f0c3e73]
2021-03-11 23:53:31,783 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:31,783 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3b210322]
2021-03-11 23:53:31,916 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:31,918 [main:78] - Generated call from random type = (Kla3())?.equals("bonyz").compareTo(true)
2021-03-11 23:53:31,919 [main:106] - GETTING Int from String
2021-03-11 23:53:31,936 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cfe8ea3]]
2021-03-11 23:53:31,936 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:32,050 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:32,168 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:32,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cfe8ea3]
2021-03-11 23:53:32,286 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 23:53:32,288 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:53:32,291 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-942875149, -539104832).sumOf({a: Char -> 2124459523})
2021-03-11 23:53:32,291 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ed61f9e]]
2021-03-11 23:53:32,291 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ed61f9e]
2021-03-11 23:53:32,291 [main:117] - GENERATED CALL = (Z("gypfv").value).length.inv()
2021-03-11 23:53:32,291 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3038b596]]
2021-03-11 23:53:32,291 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:32,404 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:32,407 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3038b596]
2021-03-11 23:53:32,407 [main:117] - GENERATED CALL = (Z("gypfv").value).get(-1833519235).digitToInt()
2021-03-11 23:53:32,407 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@270da5ae]]
2021-03-11 23:53:32,407 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@270da5ae]
2021-03-11 23:53:32,520 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 23:53:32,641 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 23:53:32,644 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 23:53:32,769 [main:302] - generating value of type = Char true depth = 3
2021-03-11 23:53:32,771 [main:95] - GENERATED = charArrayOf('䳋')
2021-03-11 23:53:32,887 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:33,003 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:33,006 [main:117] - GENERATED CALL = (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)
2021-03-11 23:53:33,006 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@738eae2f]]
2021-03-11 23:53:33,006 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@738eae2f]
2021-03-11 23:53:33,006 [main:117] - GENERATED CALL = (Z("gypfv").value).length.unaryPlus()
2021-03-11 23:53:33,006 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@71accac1]]
2021-03-11 23:53:33,006 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:53:33,006 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@71accac1]
2021-03-11 23:53:33,120 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:33,123 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).and(-679084376)
2021-03-11 23:53:33,123 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74554e68]]
2021-03-11 23:53:33,123 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74554e68]
2021-03-11 23:53:33,123 [main:117] - GENERATED CALL = (Z("gypfv").value).length.unaryMinus()
2021-03-11 23:53:33,123 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@134eb263]]
2021-03-11 23:53:33,123 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@134eb263]
2021-03-11 23:53:33,268 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:33,271 [main:117] - GENERATED CALL = (Z("gypfv").value).length.coerceAtMost(1229715464)
2021-03-11 23:53:33,271 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c6e45d2]]
2021-03-11 23:53:33,271 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:53:33,271 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c6e45d2]
2021-03-11 23:53:33,401 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:53:33,403 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).times(35)
2021-03-11 23:53:33,404 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe9dc2]]
2021-03-11 23:53:33,404 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe9dc2]
2021-03-11 23:53:33,519 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 23:53:33,521 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:53:33,524 [main:117] - GENERATED CALL = (Z("gypfv").value).sumBy({a: Char -> -2094320154})
2021-03-11 23:53:33,524 [main:114] - replacement of i of type Int is (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)
2021-03-11 23:53:33,641 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:33,641 [main:66] - Compilation checking started
2021-03-11 23:53:34,247 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:34,250 [main:107] - replacing (prope8.size, Int)
2021-03-11 23:53:34,250 [main:50] - replacing prope8.size Int
2021-03-11 23:53:34,250 [main:54] - Getting value of type Int
2021-03-11 23:53:34,389 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:34,391 [main:58] - GENERATED VALUE OF TYPE Int = -2015915733
2021-03-11 23:53:34,391 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:34,524 [main:67] - randomType = Long
2021-03-11 23:53:34,650 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:53:34,705 [main:78] - Generated call from random type = (8224716132490639820).sign
2021-03-11 23:53:34,705 [main:114] - replacement of prope8.size of type Int is (8224716132490639820).sign
2021-03-11 23:53:34,824 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:34,824 [main:66] - Compilation checking started
2021-03-11 23:53:35,203 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    (8224716132490639820).sign.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error("tail-call optimization miss: method at " + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:35,205 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-11 23:53:35,206 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-11 23:53:35,206 [main:54] - Getting value of type String
2021-03-11 23:53:35,322 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:35,325 [main:58] - GENERATED VALUE OF TYPE String = "fiytb"
2021-03-11 23:53:35,325 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:35,472 [main:67] - randomType = Kla2<Kla4>
2021-03-11 23:53:35,592 [main:302] - generating value of type = Kla2<Kla4> false depth = 0
2021-03-11 23:53:35,594 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 23:53:36,111 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 23:53:36,113 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 23:53:36,127 [main:106] - GETTING String from String
2021-03-11 23:53:36,143 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64377d2f]]
2021-03-11 23:53:36,143 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64377d2f]
2021-03-11 23:53:36,144 [main:117] - GENERATED CALL = (Z("gypfv").value).trim()
2021-03-11 23:53:36,144 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c11596e]]
2021-03-11 23:53:36,144 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c11596e]
2021-03-11 23:53:36,259 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:53:36,382 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 23:53:36,386 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 23:53:36,790 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:53:36,792 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:53:36,795 [main:95] - GENERATED = IntRange(1029514921, -749585231)
2021-03-11 23:53:36,795 [main:117] - GENERATED CALL = (Z("gypfv").value).slice(IntRange(1029514921, -749585231))
2021-03-11 23:53:36,795 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]]
2021-03-11 23:53:36,795 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]
2021-03-11 23:53:36,910 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:36,913 [main:117] - GENERATED CALL = (Z("gypfv").value).substringAfterLast('콓', Z("gypfv").value)
2021-03-11 23:53:36,913 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]]
2021-03-11 23:53:36,913 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]
2021-03-11 23:53:37,033 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:37,035 [main:117] - GENERATED CALL = (Z("gypfv").value).repeat(-43523914)
2021-03-11 23:53:37,036 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]]
2021-03-11 23:53:37,036 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]
2021-03-11 23:53:37,154 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:37,156 [main:117] - GENERATED CALL = (Z("gypfv").value).substringBefore('?', Z("gypfv").value)
2021-03-11 23:53:37,156 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fd89f9d]]
2021-03-11 23:53:37,157 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fd89f9d]
2021-03-11 23:53:37,157 [main:117] - GENERATED CALL = (Z("gypfv").value).reversed()
2021-03-11 23:53:37,157 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]]
2021-03-11 23:53:37,157 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]
2021-03-11 23:53:37,157 [main:117] - GENERATED CALL = (Z("gypfv").value).decapitalize()
2021-03-11 23:53:37,157 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:53:37,157 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:53:37,277 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:53:37,400 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:37,402 [main:117] - GENERATED CALL = (Z("gypfv").value).commonSuffixWith("coyol", true)
2021-03-11 23:53:37,402 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d556922]]
2021-03-11 23:53:37,402 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d556922]
2021-03-11 23:53:37,403 [main:117] - GENERATED CALL = (Z("gypfv").value).trimEnd()
2021-03-11 23:53:37,403 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:53:37,403 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:53:37,522 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:53:37,643 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:37,645 [main:117] - GENERATED CALL = (Z("gypfv").value).commonPrefixWith("ulgwx", true)
2021-03-11 23:53:37,645 [main:114] - replacement of "tail-call optimization miss: method at " of type String is (Z("gypfv").value).trimEnd()
2021-03-11 23:53:37,764 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:37,764 [main:66] - Compilation checking started
2021-03-11 23:53:38,386 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:38,388 [main:107] - replacing (0, Int)
2021-03-11 23:53:38,388 [main:50] - replacing 0 Int
2021-03-11 23:53:38,388 [main:54] - Getting value of type Int
2021-03-11 23:53:38,516 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:38,518 [main:58] - GENERATED VALUE OF TYPE Int = -1663971460
2021-03-11 23:53:38,519 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:38,656 [main:67] - randomType = ULong
2021-03-11 23:53:38,773 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:53:38,804 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@952990f]
2021-03-11 23:53:38,919 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:53:38,921 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a70c20c]
2021-03-11 23:53:39,043 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:53:39,045 [main:78] - Generated call from random type = (7810163800263232548.toULong()).compareTo(66.toUByte()).rem(100)
2021-03-11 23:53:39,046 [main:106] - GETTING Int from String
2021-03-11 23:53:39,073 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5699119e]]
2021-03-11 23:53:39,074 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:53:39,074 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5699119e]
2021-03-11 23:53:39,196 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:39,198 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).coerceAtLeast(1977900888)
2021-03-11 23:53:39,199 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]]
2021-03-11 23:53:39,199 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:53:39,199 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]
2021-03-11 23:53:39,199 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).takeHighestOneBit()
2021-03-11 23:53:39,199 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@38ac9dca]]
2021-03-11 23:53:39,200 [main:117] - GENERATED CALL = (Z("gypfv").value).length.sign
2021-03-11 23:53:39,200 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5699119e]]
2021-03-11 23:53:39,200 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5699119e]
2021-03-11 23:53:39,315 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:39,318 [main:117] - GENERATED CALL = (Z("gypfv").value).length.coerceAtLeast(23738394)
2021-03-11 23:53:39,318 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30d64921]]
2021-03-11 23:53:39,318 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30d64921]
2021-03-11 23:53:39,433 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:39,436 [main:117] - GENERATED CALL = (Z("gypfv").value).length.xor(890417020)
2021-03-11 23:53:39,436 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@551a2901]]
2021-03-11 23:53:39,436 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:39,551 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:39,667 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:39,670 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@551a2901]
2021-03-11 23:53:39,809 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:53:39,811 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:53:39,814 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-413695588, -91822814).indexOfLast({a: Char -> true})
2021-03-11 23:53:39,814 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc1c39f]]
2021-03-11 23:53:39,814 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:53:39,930 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:39,933 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc1c39f]
2021-03-11 23:53:40,047 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:53:40,049 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo("velit").plus(-52)
2021-03-11 23:53:40,049 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@6461dd70]]
2021-03-11 23:53:40,049 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:40,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:40,284 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:40,287 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(47356374, -130085943).lastIndex
2021-03-11 23:53:40,289 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@412c7b5e]]
2021-03-11 23:53:40,289 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:40,404 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:40,406 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@412c7b5e]
2021-03-11 23:53:40,406 [main:117] - GENERATED CALL = (Z("gypfv").value).get(-607992221).toInt()
2021-03-11 23:53:40,406 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14f6c633]]
2021-03-11 23:53:40,406 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14f6c633]
2021-03-11 23:53:40,523 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:40,639 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:40,642 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo("sysnv", false)
2021-03-11 23:53:40,642 [main:114] - replacement of 0 of type Int is -1663971460
2021-03-11 23:53:40,756 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 23:53:40,756 [main:66] - Compilation checking started
2021-03-11 23:53:41,329 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:41,332 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:53:41,332 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:53:41,332 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:53:41,465 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:53:41,470 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:53:41,480 [main:67] - randomType = Kla1
2021-03-11 23:53:41,637 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 23:53:41,640 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:53:41,664 [main:78] - Generated call from random type = (Kla1()).context
2021-03-11 23:53:41,664 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is (Kla1()).context
2021-03-11 23:53:41,780 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:41,782 [main:107] - replacing (!prope5, Boolean)
2021-03-11 23:53:41,783 [main:50] - replacing !prope5 Boolean
2021-03-11 23:53:41,783 [main:54] - Getting value of type Boolean
2021-03-11 23:53:41,902 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:41,904 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:53:41,904 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:42,041 [main:67] - randomType = String?
2021-03-11 23:53:42,159 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:42,186 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:42,305 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:42,308 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbfa293]
2021-03-11 23:53:42,308 [main:78] - Generated call from random type = ("fwvcr")?.get(1356079936).isDigit()
2021-03-11 23:53:42,309 [main:106] - GETTING Boolean from String
2021-03-11 23:53:42,330 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e8d801]]
2021-03-11 23:53:42,331 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:42,449 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:42,570 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:42,572 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13e8d801]
2021-03-11 23:53:42,572 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(1961248485, -33889821).isNotBlank()
2021-03-11 23:53:42,572 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686e0301]]
2021-03-11 23:53:42,572 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:42,688 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:42,809 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:42,812 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686e0301]
2021-03-11 23:53:42,931 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:43,054 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:43,056 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(61284526, 1130743825).contains('ૂ', true)
2021-03-11 23:53:43,057 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16bd7a27]]
2021-03-11 23:53:43,057 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:43,175 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:43,336 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:43,338 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16bd7a27]
2021-03-11 23:53:43,339 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(1233728135, 1517178260).isNotEmpty()
2021-03-11 23:53:43,339 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7acec9df]]
2021-03-11 23:53:43,339 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7acec9df]
2021-03-11 23:53:43,483 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:53:43,485 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:53:43,488 [main:117] - GENERATED CALL = (Z("gypfv").value).all({a: Char -> false})
2021-03-11 23:53:43,488 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a934373]]
2021-03-11 23:53:43,488 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:43,604 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:43,607 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a934373]
2021-03-11 23:53:43,607 [main:117] - GENERATED CALL = (Z("gypfv").value).get(-1865319987).isLetter()
2021-03-11 23:53:43,607 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eac302c]]
2021-03-11 23:53:43,607 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eac302c]
2021-03-11 23:53:43,607 [main:117] - GENERATED CALL = (Z("gypfv").value).none()
2021-03-11 23:53:43,607 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@331c837f]]
2021-03-11 23:53:43,608 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:43,721 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:43,723 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@331c837f]
2021-03-11 23:53:43,723 [main:117] - GENERATED CALL = (Z("gypfv").value).get(632942370).isISOControl()
2021-03-11 23:53:43,723 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67264fde]]
2021-03-11 23:53:43,723 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67264fde]
2021-03-11 23:53:43,837 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:43,837 [main:117] - GENERATED CALL = (Z("gypfv").value).length.equals("gerkw")
2021-03-11 23:53:43,838 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bcde9a0]]
2021-03-11 23:53:43,838 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:43,953 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:43,955 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bcde9a0]
2021-03-11 23:53:43,955 [main:117] - GENERATED CALL = (Z("gypfv").value).get(-1805153085).isTitleCase()
2021-03-11 23:53:43,955 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9b49c12]]
2021-03-11 23:53:43,955 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:44,069 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:44,072 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9b49c12]
2021-03-11 23:53:44,072 [main:117] - GENERATED CALL = (Z("gypfv").value).get(1948202600).isLetterOrDigit()
2021-03-11 23:53:44,072 [main:114] - replacement of !prope5 of type Boolean is (Z("gypfv").value).none()
2021-03-11 23:53:44,187 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:44,187 [main:66] - Compilation checking started
2021-03-11 23:53:44,745 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:44,748 [main:107] - replacing ({ x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}, Function1<Continuation<Ty0>, Any?>)
2021-03-11 23:53:44,748 [main:50] - replacing { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
} Function1<Continuation<Ty0>, Any?>
2021-03-11 23:53:44,748 [main:54] - Getting value of type Function1<Continuation<Ty0>, Any?>
2021-03-11 23:53:44,884 [main:302] - generating value of type = Function1<Continuation<Ty0>, Any?> false depth = 0
2021-03-11 23:53:44,886 [main:302] - generating value of type = Any false depth = 1
2021-03-11 23:53:44,886 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Ty0>, Any?> = {a: Continuation<Ty0> -> "ixnxq"}
2021-03-11 23:53:44,886 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:45,053 [main:67] - randomType = ArrayDeque<Z>
2021-03-11 23:53:45,173 [main:302] - generating value of type = ArrayDeque<Z> false depth = 0
2021-03-11 23:53:45,297 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Z> = TODO()
2021-03-11 23:53:45,300 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Z> = TODO()
2021-03-11 23:53:45,422 [main:95] - GENERATED = ArrayDeque<Z>()
2021-03-11 23:53:45,541 [main:106] - GETTING Function1<Continuation<Ty0>, Any?> from String
2021-03-11 23:53:45,557 [main:114] - replacement of { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
} of type Function1<Continuation<Ty0>, Any?> is {a: Continuation<Ty0> -> "ixnxq"}
2021-03-11 23:53:45,677 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:53:45,677 [main:66] - Compilation checking started
2021-03-11 23:53:46,226 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:46,227 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 23:53:46,228 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 23:53:46,228 [main:54] - Getting value of type String
2021-03-11 23:53:46,350 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:46,352 [main:58] - GENERATED VALUE OF TYPE String = "zirtg"
2021-03-11 23:53:46,353 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:46,484 [main:67] - randomType = ULong
2021-03-11 23:53:46,600 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:53:46,628 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5b049236]
2021-03-11 23:53:46,628 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10d3ef8d]
2021-03-11 23:53:46,760 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:46,763 [main:78] - Generated call from random type = (2077981156166472719.toULong()).toUShort().toString(-1051388179)
2021-03-11 23:53:46,763 [main:106] - GETTING String from String
2021-03-11 23:53:46,780 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]]
2021-03-11 23:53:46,780 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]
2021-03-11 23:53:46,897 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:47,014 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:47,017 [main:117] - GENERATED CALL = (Z("gypfv").value).substringAfterLast('컮', "oamus")
2021-03-11 23:53:47,017 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7209795d]]
2021-03-11 23:53:47,017 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7209795d]
2021-03-11 23:53:47,132 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:53:47,134 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:53:47,137 [main:117] - GENERATED CALL = (Z("gypfv").value).filterNot({a: Char -> false})
2021-03-11 23:53:47,137 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6694778f]]
2021-03-11 23:53:47,137 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6694778f]
2021-03-11 23:53:47,253 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:53:47,258 [main:117] - GENERATED CALL = (Z("gypfv").value).removePrefix("cxrba")
2021-03-11 23:53:47,258 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]]
2021-03-11 23:53:47,258 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]
2021-03-11 23:53:47,372 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:47,375 [main:117] - GENERATED CALL = (Z("gypfv").value).takeLast(-583006427)
2021-03-11 23:53:47,375 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1902b41]]
2021-03-11 23:53:47,375 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1902b41]
2021-03-11 23:53:47,375 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceIndent(Z("gypfv").value)
2021-03-11 23:53:47,375 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a9d85de]]
2021-03-11 23:53:47,375 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a9d85de]
2021-03-11 23:53:47,490 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 23:53:47,492 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:53:47,495 [main:117] - GENERATED CALL = (Z("gypfv").value).filterIndexed({a: Int, b: Char -> false})
2021-03-11 23:53:47,495 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29d55215]]
2021-03-11 23:53:47,495 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29d55215]
2021-03-11 23:53:47,610 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:47,612 [main:117] - GENERATED CALL = (Z("gypfv").value).drop(-1903694224)
2021-03-11 23:53:47,612 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:53:47,612 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:53:47,729 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:53:47,853 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:47,856 [main:117] - GENERATED CALL = (Z("gypfv").value).commonPrefixWith("qqwnd", true)
2021-03-11 23:53:47,856 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]]
2021-03-11 23:53:47,856 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]
2021-03-11 23:53:47,856 [main:117] - GENERATED CALL = (Z("gypfv").value).trimStart()
2021-03-11 23:53:47,856 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4064788d]]
2021-03-11 23:53:47,857 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4064788d]
2021-03-11 23:53:47,857 [main:117] - GENERATED CALL = (Z("gypfv").value).trimMargin(Z("gypfv").value)
2021-03-11 23:53:47,857 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (Z("gypfv").value).filterIndexed({a: Int, b: Char -> false})
2021-03-11 23:53:47,971 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:47,972 [main:66] - Compilation checking started
2021-03-11 23:53:48,559 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:48,561 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 23:53:48,561 [main:50] - replacing getOrThrow() Any?
2021-03-11 23:53:48,561 [main:54] - Getting value of type Any?
2021-03-11 23:53:48,687 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:48,687 [main:58] - GENERATED VALUE OF TYPE Any? = "rwheq"
2021-03-11 23:53:48,687 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:48,822 [main:67] - randomType = UByte
2021-03-11 23:53:48,944 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:53:48,981 [main:106] - GETTING Any? from String
2021-03-11 23:53:48,996 [main:114] - replacement of getOrThrow() of type Any? is "rwheq"
2021-03-11 23:53:49,113 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 23:53:49,114 [main:66] - Compilation checking started
2021-03-11 23:53:49,449 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let({a: Throwable -> require(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2."rwheq"
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:49,451 [main:107] - replacing (prope2.exceptionOrNull()?.let({a: Throwable -> require(true)}), Unit?)
2021-03-11 23:53:49,451 [main:50] - replacing prope2.exceptionOrNull()?.let({a: Throwable -> require(true)}) Unit?
2021-03-11 23:53:49,451 [main:54] - Getting value of type Unit?
2021-03-11 23:53:49,568 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 23:53:49,691 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:53:49,694 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:53:49,952 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 23:53:49,954 [main:95] - GENERATED = require(true)
2021-03-11 23:53:49,954 [main:58] - GENERATED VALUE OF TYPE Unit? = require(true)
2021-03-11 23:53:49,954 [main:61] - GENERATED IS CALL =true
2021-03-11 23:53:50,403 [main:67] - randomType = Map<Kla1, UShort?>
2021-03-11 23:53:50,404 [main:106] - GETTING Unit? from String
2021-03-11 23:53:50,430 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52e84ac4]]
2021-03-11 23:53:50,430 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:50,551 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:50,671 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:50,674 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52e84ac4]
2021-03-11 23:53:50,790 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 23:53:50,792 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:50,921 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:53:50,924 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:53:51,317 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:53:51,320 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:53:51,322 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:53:51,322 [main:95] - GENERATED = check(true, { "ndxeo"})
2021-03-11 23:53:51,323 [main:117] - GENERATED CALL = (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
2021-03-11 23:53:51,323 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69a2c4aa]]
2021-03-11 23:53:51,323 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:51,441 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:51,559 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:51,561 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69a2c4aa]
2021-03-11 23:53:51,680 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 23:53:51,682 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:51,836 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:53:51,839 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:53:52,247 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:53:52,250 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:53:52,252 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:53:52,252 [main:95] - GENERATED = require(true, { "qzehj"})
2021-03-11 23:53:52,253 [main:117] - GENERATED CALL = (Z("gypfv").value)?.subSequence(928020812, -800762335).forEach({a: Char -> require(true, { "qzehj"})})
2021-03-11 23:53:52,253 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69a2c4aa]]
2021-03-11 23:53:52,253 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69a2c4aa]
2021-03-11 23:53:52,368 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 23:53:52,371 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:52,494 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:53:52,497 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:53:52,901 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:53:52,903 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:53:52,906 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:53:52,906 [main:95] - GENERATED = require(false, { "yeslm"})
2021-03-11 23:53:52,906 [main:117] - GENERATED CALL = (Z("gypfv").value)?.forEach({a: Char -> require(false, { "yeslm"})})
2021-03-11 23:53:52,907 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52e84ac4]]
2021-03-11 23:53:52,907 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52e84ac4]
2021-03-11 23:53:53,024 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 23:53:53,026 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:53:53,147 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:53:53,151 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:53:53,445 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:53:53,446 [main:95] - GENERATED = print("yfrfq")
2021-03-11 23:53:53,446 [main:117] - GENERATED CALL = (Z("gypfv").value)?.forEachIndexed({a: Int, b: Char -> print("yfrfq")})
2021-03-11 23:53:53,446 [main:114] - replacement of prope2.exceptionOrNull()?.let({a: Throwable -> require(true)}) of type Unit? is (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
2021-03-11 23:53:53,580 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:53:53,580 [main:66] - Compilation checking started
2021-03-11 23:53:54,161 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:53:54,163 [main:107] - replacing (c, Continuation<Unit>)
2021-03-11 23:53:54,163 [main:50] - replacing c Continuation<Unit>
2021-03-11 23:53:54,163 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 23:53:54,282 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 23:53:54,407 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 23:53:54,411 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 23:53:54,824 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 23:53:54,948 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:53:54,952 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:53:55,222 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 23:53:55,390 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:53:55,394 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:53:55,816 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 23:53:55,944 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 23:53:55,948 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 23:53:56,370 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 23:53:56,497 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:53:56,500 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:53:56,911 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 23:53:56,912 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 23:53:56,912 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:53:56,912 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:53:56,912 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 23:53:56,912 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 23:53:57,078 [main:67] - randomType = String?
2021-03-11 23:53:57,200 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:53:57,231 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 23:53:57,255 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 23:53:57,255 [main:107] - replacing (false, Boolean)
2021-03-11 23:53:57,255 [main:50] - replacing false Boolean
2021-03-11 23:53:57,255 [main:54] - Getting value of type Boolean
2021-03-11 23:53:57,373 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:57,375 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:53:57,376 [main:61] - GENERATED IS CALL =false
2021-03-11 23:53:57,788 [main:67] - randomType = HashSet<Kla5>
2021-03-11 23:53:57,905 [main:302] - generating value of type = HashSet<Kla5> false depth = 0
2021-03-11 23:53:58,028 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla5): HashSet<Kla5> = TODO()
2021-03-11 23:53:58,031 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla5): HashSet<Kla5> = TODO()
2021-03-11 23:53:58,156 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-11 23:53:58,158 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 23:53:58,159 [main:95] - GENERATED = linkedSetOf<Kla5>(Kla5)
2021-03-11 23:53:58,271 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@7011610b]
2021-03-11 23:53:58,271 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54595220]
2021-03-11 23:53:58,271 [main:78] - Generated call from random type = (linkedSetOf<Kla5>(Kla5)).toArray().isNotEmpty()
2021-03-11 23:53:58,272 [main:106] - GETTING Boolean from String
2021-03-11 23:53:58,291 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13315429]]
2021-03-11 23:53:58,291 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:53:58,410 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:58,413 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13315429]
2021-03-11 23:53:58,413 [main:117] - GENERATED CALL = (Z("gypfv").value).get(-814495902).isDefined()
2021-03-11 23:53:58,413 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7acec9df]]
2021-03-11 23:53:58,413 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:58,533 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:58,654 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:58,656 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7acec9df]
2021-03-11 23:53:58,773 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:53:58,776 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:53:58,778 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1834531277, 1141228253).all({a: Char -> false})
2021-03-11 23:53:58,778 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b94cce0]]
2021-03-11 23:53:58,778 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:58,924 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:59,046 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:59,049 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b94cce0]
2021-03-11 23:53:59,167 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:53:59,287 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:59,290 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(382379270, -2139352988).startsWith('䛠', true)
2021-03-11 23:53:59,290 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d02203c]]
2021-03-11 23:53:59,290 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e]
2021-03-11 23:53:59,410 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:53:59,410 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d02203c]
2021-03-11 23:53:59,530 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:53:59,532 [main:117] - GENERATED CALL = (Z("gypfv").value).equals("yykar").xor(false)
2021-03-11 23:53:59,533 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8b3f4ef]]
2021-03-11 23:53:59,533 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:53:59,654 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:59,775 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:59,777 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8b3f4ef]
2021-03-11 23:53:59,895 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:53:59,897 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-196703533, 493393101).hasSurrogatePairAt(-1956292197)
2021-03-11 23:53:59,898 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8b3f4ef]]
2021-03-11 23:53:59,898 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8b3f4ef]
2021-03-11 23:54:00,016 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:00,018 [main:117] - GENERATED CALL = (Z("gypfv").value).hasSurrogatePairAt(-64256610)
2021-03-11 23:54:00,019 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67264fde]]
2021-03-11 23:54:00,019 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67264fde]
2021-03-11 23:54:00,136 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:54:00,137 [main:117] - GENERATED CALL = (Z("gypfv").value).length.equals("hmcfv")
2021-03-11 23:54:00,137 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@389d3b4f]]
2021-03-11 23:54:00,137 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:00,255 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:00,379 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:00,382 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@389d3b4f]
2021-03-11 23:54:00,382 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1986423201, 1115763552).any()
2021-03-11 23:54:00,382 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e65f0e3]]
2021-03-11 23:54:00,382 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e65f0e3]
2021-03-11 23:54:00,382 [main:117] - GENERATED CALL = (Z("gypfv").value).isEmpty()
2021-03-11 23:54:00,382 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5897f64a]]
2021-03-11 23:54:00,382 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:54:00,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:00,506 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5897f64a]
2021-03-11 23:54:00,506 [main:117] - GENERATED CALL = (Z("gypfv").value).get(147339935).isUpperCase()
2021-03-11 23:54:00,506 [main:114] - replacement of false of type Boolean is (Z("gypfv").value).length.equals("hmcfv")
2021-03-11 23:54:00,654 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:00,654 [main:66] - Compilation checking started
2021-03-11 23:54:01,266 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true)) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:01,269 [main:107] - replacing (prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true), Boolean)
2021-03-11 23:54:01,269 [main:50] - replacing prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true) Boolean
2021-03-11 23:54:01,269 [main:54] - Getting value of type Boolean
2021-03-11 23:54:01,392 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:01,395 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:54:01,395 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:01,528 [main:67] - randomType = Long
2021-03-11 23:54:01,645 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:54:01,676 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@751d2d80]
2021-03-11 23:54:01,677 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@33201269]
2021-03-11 23:54:01,793 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:54:01,794 [main:78] - Generated call from random type = (8436054071383926333).toByte().equals("qxhom")
2021-03-11 23:54:01,794 [main:114] - replacement of prope4 != (Z("gypfv").value).indexOfAny(charArrayOf('䳋'), 124437643, true) of type Boolean is (8436054071383926333).toByte().equals("qxhom")
2021-03-11 23:54:01,910 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:01,911 [main:66] - Compilation checking started
2021-03-11 23:54:02,526 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return "fail 1"
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:02,529 [main:107] - replacing ("fail 1", String)
2021-03-11 23:54:02,529 [main:50] - replacing "fail 1" String
2021-03-11 23:54:02,529 [main:54] - Getting value of type String
2021-03-11 23:54:02,667 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:02,669 [main:58] - GENERATED VALUE OF TYPE String = "guifn"
2021-03-11 23:54:02,669 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:02,803 [main:67] - randomType = UByte
2021-03-11 23:54:02,920 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:54:02,949 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2564d1b9]
2021-03-11 23:54:02,949 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d841a0]
2021-03-11 23:54:03,067 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:03,069 [main:78] - Generated call from random type = (14.toUByte()).toByte().toString(-1872459798)
2021-03-11 23:54:03,069 [main:106] - GETTING String from String
2021-03-11 23:54:03,087 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3affe6ad]]
2021-03-11 23:54:03,087 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3affe6ad]
2021-03-11 23:54:03,087 [main:117] - GENERATED CALL = (Z("gypfv").value).trimIndent()
2021-03-11 23:54:03,087 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@adeaf5e]]
2021-03-11 23:54:03,087 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@adeaf5e]
2021-03-11 23:54:03,087 [main:117] - GENERATED CALL = (Z("gypfv").value).toLowerCase()
2021-03-11 23:54:03,087 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]]
2021-03-11 23:54:03,087 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@694970c1]
2021-03-11 23:54:03,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:03,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:03,330 [main:117] - GENERATED CALL = (Z("gypfv").value).removeRange(1222435054, 1665403766)
2021-03-11 23:54:03,330 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15508700]]
2021-03-11 23:54:03,330 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15508700]
2021-03-11 23:54:03,452 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:54:03,458 [main:117] - GENERATED CALL = (Z("gypfv").value).removeSuffix("wxswy")
2021-03-11 23:54:03,458 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]]
2021-03-11 23:54:03,458 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bd93df1]
2021-03-11 23:54:03,577 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:03,700 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:03,703 [main:117] - GENERATED CALL = (Z("gypfv").value).padEnd(1617893604, '꛸')
2021-03-11 23:54:03,703 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4064788d]]
2021-03-11 23:54:03,703 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4064788d]
2021-03-11 23:54:03,824 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:03,827 [main:117] - GENERATED CALL = (Z("gypfv").value).trimMargin("ulnxo")
2021-03-11 23:54:03,827 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]]
2021-03-11 23:54:03,827 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]
2021-03-11 23:54:03,980 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:54:03,983 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:54:03,986 [main:117] - GENERATED CALL = (Z("gypfv").value).takeLastWhile({a: Char -> true})
2021-03-11 23:54:03,986 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]]
2021-03-11 23:54:03,986 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:54:04,119 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:04,122 [main:117] - GENERATED CALL = (Z("gypfv").value).length.toString(1625017899)
2021-03-11 23:54:04,122 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1902b41]]
2021-03-11 23:54:04,122 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1902b41]
2021-03-11 23:54:04,123 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceIndent(Z("gypfv").value)
2021-03-11 23:54:04,123 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43421427]]
2021-03-11 23:54:04,123 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43421427]
2021-03-11 23:54:04,242 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:04,245 [main:117] - GENERATED CALL = (Z("gypfv").value).substringAfter('⣎', Z("gypfv").value)
2021-03-11 23:54:04,245 [main:114] - replacement of "fail 1" of type String is (Z("gypfv").value).trimMargin("ulnxo")
2021-03-11 23:54:04,361 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:04,362 [main:66] - Compilation checking started
2021-03-11 23:54:04,910 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:04,912 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 23:54:04,912 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 23:54:04,912 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 23:54:05,033 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 23:54:05,038 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 23:54:05,179 [main:67] - randomType = Char?
2021-03-11 23:54:05,299 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:05,321 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 23:54:05,337 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 23:54:05,338 [main:107] - replacing ({ it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") }, Function0<Boolean>)
2021-03-11 23:54:05,338 [main:50] - replacing { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") } Function0<Boolean>
2021-03-11 23:54:05,338 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 23:54:05,456 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 23:54:05,459 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:54:05,461 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 23:54:05,461 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:05,466 [main:67] - randomType = Byte
2021-03-11 23:54:05,585 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:54:05,644 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 23:54:05,660 [main:114] - replacement of { it?.methodName?.startsWith(method) == ('켗')?.toShort().equals("panpr") } of type Function0<Boolean> is { true}
2021-03-11 23:54:05,776 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:54:05,776 [main:66] - Compilation checking started
2021-03-11 23:54:06,332 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:06,334 [main:107] - replacing (" has no state-machine ", String)
2021-03-11 23:54:06,334 [main:50] - replacing " has no state-machine " String
2021-03-11 23:54:06,334 [main:54] - Getting value of type String
2021-03-11 23:54:06,457 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:06,460 [main:58] - GENERATED VALUE OF TYPE String = "pvtaa"
2021-03-11 23:54:06,460 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:06,771 [main:67] - randomType = Function1<Function1<Z?, Kla3>, Byte>
2021-03-11 23:54:06,771 [main:106] - GETTING String from String
2021-03-11 23:54:06,787 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f682e1]]
2021-03-11 23:54:06,788 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f682e1]
2021-03-11 23:54:06,904 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:07,024 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:07,142 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:07,145 [main:117] - GENERATED CALL = (Z("gypfv").value).replace('䜠', '녓', false)
2021-03-11 23:54:07,145 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7209795d]]
2021-03-11 23:54:07,145 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7209795d]
2021-03-11 23:54:07,262 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:54:07,264 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:54:07,267 [main:117] - GENERATED CALL = (Z("gypfv").value).filterNot({a: Char -> true})
2021-03-11 23:54:07,267 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]]
2021-03-11 23:54:07,267 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b77d72e]
2021-03-11 23:54:07,408 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:07,411 [main:117] - GENERATED CALL = (Z("gypfv").value).takeLast(-304277062)
2021-03-11 23:54:07,411 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5165b258]]
2021-03-11 23:54:07,411 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5165b258]
2021-03-11 23:54:07,528 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:54:07,530 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:54:07,533 [main:117] - GENERATED CALL = (Z("gypfv").value).dropWhile({a: Char -> false})
2021-03-11 23:54:07,533 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6694778f]]
2021-03-11 23:54:07,533 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6694778f]
2021-03-11 23:54:07,651 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:54:07,774 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:54:07,777 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:54:08,032 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:54:08,035 [main:95] - GENERATED = StringBuilder(-1026044951)
2021-03-11 23:54:08,035 [main:117] - GENERATED CALL = (Z("gypfv").value).removePrefix(StringBuilder(-1026044951))
2021-03-11 23:54:08,035 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]]
2021-03-11 23:54:08,035 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c93e6d]
2021-03-11 23:54:08,151 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:08,153 [main:117] - GENERATED CALL = (Z("gypfv").value).substringAfterLast('', Z("gypfv").value)
2021-03-11 23:54:08,154 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b22a353]]
2021-03-11 23:54:08,154 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b22a353]
2021-03-11 23:54:08,270 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:08,273 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceAfterLast('﫸', Z("gypfv").value, Z("gypfv").value)
2021-03-11 23:54:08,273 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62d4a67e]]
2021-03-11 23:54:08,273 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:54:08,390 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:08,393 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62d4a67e]
2021-03-11 23:54:08,393 [main:117] - GENERATED CALL = (Z("gypfv").value).get(1886411835).lowercase()
2021-03-11 23:54:08,393 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]]
2021-03-11 23:54:08,393 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]
2021-03-11 23:54:08,509 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:54:08,512 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:54:08,514 [main:117] - GENERATED CALL = (Z("gypfv").value).filter({a: Char -> true})
2021-03-11 23:54:08,514 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@343960d9]]
2021-03-11 23:54:08,514 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@343960d9]
2021-03-11 23:54:08,630 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:08,633 [main:117] - GENERATED CALL = (Z("gypfv").value).concat("xqcgl")
2021-03-11 23:54:08,633 [main:114] - replacement of " has no state-machine " of type String is (Z("gypfv").value).replace('䜠', '녓', false)
2021-03-11 23:54:08,749 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:08,749 [main:66] - Compilation checking started
2021-03-11 23:54:09,319 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:09,321 [main:107] - replacing ({ error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 23:54:09,321 [main:50] - replacing { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 23:54:09,321 [main:54] - Getting value of type Function0<Nothing>
2021-03-11 23:54:09,448 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 23:54:09,451 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 23:54:09,457 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO()}
2021-03-11 23:54:09,457 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:09,463 [main:67] - randomType = Boolean
2021-03-11 23:54:09,580 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:09,592 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 23:54:09,608 [main:114] - replacement of { error((Z("gypfv").value).trimEnd() + it + (Z("gypfv").value).padEnd(-179586790, '句') +
                prope3.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO()}
2021-03-11 23:54:09,726 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:54:09,726 [main:66] - Compilation checking started
2021-03-11 23:54:10,252 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:10,253 [main:107] - replacing (toString(), String)
2021-03-11 23:54:10,254 [main:50] - replacing toString() String
2021-03-11 23:54:10,254 [main:54] - Getting value of type String
2021-03-11 23:54:10,368 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:10,370 [main:58] - GENERATED VALUE OF TYPE String = "epqds"
2021-03-11 23:54:10,370 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:10,375 [main:67] - randomType = UInt
2021-03-11 23:54:10,490 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 23:54:10,518 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2e85a973]
2021-03-11 23:54:10,519 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10d3ef8d]
2021-03-11 23:54:10,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:10,637 [main:78] - Generated call from random type = (2071285223.toUInt()).toUShort().toString(367589212)
2021-03-11 23:54:10,637 [main:114] - replacement of toString() of type String is (2071285223.toUInt()).toUShort().toString(367589212)
2021-03-11 23:54:10,752 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:10,752 [main:66] - Compilation checking started
2021-03-11 23:54:11,119 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.(2071285223.toUInt()).toUShort().toString(367589212)
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:11,121 [main:107] - replacing (prope2, Result<Any?>)
2021-03-11 23:54:11,121 [main:50] - replacing prope2 Result<Any?>
2021-03-11 23:54:11,121 [main:54] - Getting value of type Result<Any?>
2021-03-11 23:54:11,246 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 23:54:11,368 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 23:54:11,371 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 23:54:11,626 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 23:54:11,629 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:54:11,629 [main:95] - GENERATED = runCatching<Any?>({ "akjfs"})
2021-03-11 23:54:11,629 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "akjfs"})
2021-03-11 23:54:11,629 [main:61] - GENERATED IS CALL =true
2021-03-11 23:54:11,909 [main:67] - randomType = Pair<Kla5, Int>
2021-03-11 23:54:12,024 [main:302] - generating value of type = Pair<Kla5, Int> false depth = 0
2021-03-11 23:54:12,146 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla5, second: Int): Pair<Kla5, Int> = TODO()
2021-03-11 23:54:12,150 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla5, second: Int): Pair<Kla5, Int> = TODO()
2021-03-11 23:54:12,272 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-11 23:54:12,274 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 23:54:12,274 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:54:12,277 [main:95] - GENERATED = Pair<Kla5, Int>(Kla5, -718538831)
2021-03-11 23:54:12,288 [main:106] - GETTING Result<Any?> from String
2021-03-11 23:54:12,304 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "akjfs"})
2021-03-11 23:54:12,417 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:54:12,418 [main:66] - Compilation checking started
2021-03-11 23:54:13,029 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:13,032 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-11 23:54:13,032 [main:50] - replacing getOrThrow() Ty1
2021-03-11 23:54:13,032 [main:54] - Getting value of type Ty1
2021-03-11 23:54:13,182 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 23:54:13,188 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 23:54:13,476 [main:67] - randomType = Set<HashSet<Int>>
2021-03-11 23:54:13,477 [main:106] - GETTING Ty1 from String
2021-03-11 23:54:13,505 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 23:54:13,505 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 23:54:13,506 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 23:54:13,506 [main:54] - Getting value of type String
2021-03-11 23:54:13,622 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:13,625 [main:58] - GENERATED VALUE OF TYPE String = "ymhty"
2021-03-11 23:54:13,625 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:14,205 [main:67] - randomType = Sequence<Triple<Kla1, UInt, Kla2<Short>>>
2021-03-11 23:54:14,205 [main:106] - GETTING String from String
2021-03-11 23:54:14,222 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@274eb3fe]]
2021-03-11 23:54:14,222 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@274eb3fe]
2021-03-11 23:54:14,339 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:14,457 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:14,460 [main:117] - GENERATED CALL = (Z("gypfv").value).padStart(531091624, '꿛')
2021-03-11 23:54:14,460 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43421427]]
2021-03-11 23:54:14,460 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43421427]
2021-03-11 23:54:14,576 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:14,720 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:14,722 [main:117] - GENERATED CALL = (Z("gypfv").value).substringAfter('਒', "qgafw")
2021-03-11 23:54:14,722 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]]
2021-03-11 23:54:14,722 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]
2021-03-11 23:54:14,837 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:14,840 [main:117] - GENERATED CALL = (Z("gypfv").value).substringBefore('?', Z("gypfv").value)
2021-03-11 23:54:14,840 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]]
2021-03-11 23:54:14,840 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c836ab]
2021-03-11 23:54:14,840 [main:117] - GENERATED CALL = (Z("gypfv").value).decapitalize()
2021-03-11 23:54:14,840 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ae9143f]]
2021-03-11 23:54:14,840 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:54:14,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:14,961 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ae9143f]
2021-03-11 23:54:14,961 [main:117] - GENERATED CALL = (Z("gypfv").value).get(1455500252).plus(Z("gypfv").value)
2021-03-11 23:54:14,961 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@103aa995]]
2021-03-11 23:54:14,961 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@103aa995]
2021-03-11 23:54:14,961 [main:117] - GENERATED CALL = (Z("gypfv").value).toUpperCase()
2021-03-11 23:54:14,962 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483027bf]]
2021-03-11 23:54:14,962 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483027bf]
2021-03-11 23:54:15,077 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:15,194 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:15,311 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:15,314 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceFirst('䦱', '', false)
2021-03-11 23:54:15,314 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aa10b05]]
2021-03-11 23:54:15,314 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:15,432 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:15,555 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:15,557 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aa10b05]
2021-03-11 23:54:15,673 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:54:15,792 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 23:54:15,796 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 23:54:16,183 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:54:16,186 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 23:54:16,351 [main:95] - GENERATED = Regex("dnrcl", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 23:54:16,465 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 23:54:16,468 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:54:16,473 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1004689257, -1239941519).replace(Regex("dnrcl", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "bnpmu"})
2021-03-11 23:54:16,473 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbe9674]]
2021-03-11 23:54:16,473 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:16,625 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:16,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:16,770 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbe9674]
2021-03-11 23:54:16,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:17,005 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:17,008 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(914883417, -977004610).substring(-306166347, 638806633)
2021-03-11 23:54:17,008 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a0bde40]]
2021-03-11 23:54:17,008 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a0bde40]
2021-03-11 23:54:17,008 [main:117] - GENERATED CALL = (Z("gypfv").value).uppercase()
2021-03-11 23:54:17,008 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (Z("gypfv").value).replaceFirst('䦱', '', false)
2021-03-11 23:54:17,123 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:17,123 [main:66] - Compilation checking started
2021-03-11 23:54:17,660 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    prope8.size.toString()
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:17,662 [main:107] - replacing (prope8.size.toString(), String)
2021-03-11 23:54:17,662 [main:50] - replacing prope8.size.toString() String
2021-03-11 23:54:17,662 [main:54] - Getting value of type String
2021-03-11 23:54:17,780 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:17,782 [main:58] - GENERATED VALUE OF TYPE String = "ldsvv"
2021-03-11 23:54:17,782 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:17,793 [main:67] - randomType = Kla1
2021-03-11 23:54:17,914 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 23:54:17,916 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:54:17,930 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6dd0d7e1]
2021-03-11 23:54:17,930 [main:78] - Generated call from random type = (Kla1()).prope2?.toString()!!
2021-03-11 23:54:17,930 [main:114] - replacement of prope8.size.toString() of type String is (Kla1()).prope2?.toString()!!
2021-03-11 23:54:18,046 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 23:54:18,046 [main:66] - Compilation checking started
2021-03-11 23:54:18,591 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:18,592 [main:107] - replacing (prope2, String)
2021-03-11 23:54:18,593 [main:50] - replacing prope2 String
2021-03-11 23:54:18,593 [main:54] - Getting value of type String
2021-03-11 23:54:18,744 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:18,747 [main:58] - GENERATED VALUE OF TYPE String = "njdbk"
2021-03-11 23:54:18,747 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:18,924 [main:67] - randomType = Triple<Boolean, Int, Kla4>
2021-03-11 23:54:19,053 [main:302] - generating value of type = Triple<Boolean, Int, Kla4> false depth = 0
2021-03-11 23:54:19,182 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Boolean, second: Int, third: Kla4): Triple<Boolean, Int, Kla4> = TODO()
2021-03-11 23:54:19,186 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Boolean, second: Int, third: Kla4): Triple<Boolean, Int, Kla4> = TODO()
2021-03-11 23:54:19,312 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 23:54:19,314 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:54:19,317 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-11 23:54:19,319 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:54:19,319 [main:95] - GENERATED = Triple<Boolean, Int, Kla4>(false, -1275111261, Kla4())
2021-03-11 23:54:19,331 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:54:19,447 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:19,450 [main:78] - Generated call from random type = (Triple<Boolean, Int, Kla4>(false, -1275111261, Kla4())).second.toString(598433038)
2021-03-11 23:54:19,450 [main:106] - GETTING String from String
2021-03-11 23:54:19,467 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@103aa995]]
2021-03-11 23:54:19,467 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@103aa995]
2021-03-11 23:54:19,467 [main:117] - GENERATED CALL = (Z("gypfv").value).toUpperCase()
2021-03-11 23:54:19,467 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]]
2021-03-11 23:54:19,467 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:19,583 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:19,702 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:19,705 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028339c]
2021-03-11 23:54:19,831 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:19,834 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-2077384521, 945475162).repeat(1961781951)
2021-03-11 23:54:19,834 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]]
2021-03-11 23:54:19,834 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e8a413]
2021-03-11 23:54:19,950 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:19,953 [main:117] - GENERATED CALL = (Z("gypfv").value).substringBefore('熷', Z("gypfv").value)
2021-03-11 23:54:19,953 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]]
2021-03-11 23:54:19,953 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a76908]
2021-03-11 23:54:20,070 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:54:20,072 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:54:20,075 [main:117] - GENERATED CALL = (Z("gypfv").value).filter({a: Char -> true})
2021-03-11 23:54:20,075 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]]
2021-03-11 23:54:20,075 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:20,192 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:20,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:20,313 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c36de3b]
2021-03-11 23:54:20,461 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:54:20,582 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:20,585 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1028394669, -1061955097).commonSuffixWith(StringBuilder(), true)
2021-03-11 23:54:20,585 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]]
2021-03-11 23:54:20,585 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]
2021-03-11 23:54:20,700 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:20,703 [main:117] - GENERATED CALL = (Z("gypfv").value).take(189611983)
2021-03-11 23:54:20,703 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52baa460]]
2021-03-11 23:54:20,703 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52baa460]
2021-03-11 23:54:20,821 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:20,939 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:20,942 [main:117] - GENERATED CALL = (Z("gypfv").value).substringBeforeLast('', "pqpyl")
2021-03-11 23:54:20,942 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbe9674]]
2021-03-11 23:54:20,942 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:21,057 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:21,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:21,177 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbe9674]
2021-03-11 23:54:21,292 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:21,409 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:21,460 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1799475852, 1785512541).substring(-94730273, -687438816)
2021-03-11 23:54:21,460 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]]
2021-03-11 23:54:21,460 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c668ea]
2021-03-11 23:54:21,575 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:54:21,577 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:54:21,580 [main:117] - GENERATED CALL = (Z("gypfv").value).takeLastWhile({a: Char -> true})
2021-03-11 23:54:21,580 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:54:21,580 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:54:21,695 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:54:21,815 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:21,818 [main:117] - GENERATED CALL = (Z("gypfv").value).commonPrefixWith(StringBuilder(), true)
2021-03-11 23:54:21,818 [main:114] - replacement of prope2 of type String is (Z("gypfv").value).subSequence(-2077384521, 945475162).repeat(1961781951)
2021-03-11 23:54:21,941 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:21,941 [main:66] - Compilation checking started
2021-03-11 23:54:22,288 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        (Z("gypfv").value).subSequence(-2077384521, 945475162).repeat(1961781951) = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0("<ignored>")
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:22,290 [main:107] - replacing (prope2.getOrThrow(), Ty1)
2021-03-11 23:54:22,290 [main:50] - replacing prope2.getOrThrow() Ty1
2021-03-11 23:54:22,291 [main:54] - Getting value of type Ty1
2021-03-11 23:54:22,427 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 23:54:22,433 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 23:54:22,564 [main:67] - randomType = Double
2021-03-11 23:54:22,681 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:54:22,712 [main:106] - GETTING Ty1 from String
2021-03-11 23:54:22,728 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty1
2021-03-11 23:54:22,728 [main:107] - replacing ("<ignored>", String)
2021-03-11 23:54:22,728 [main:50] - replacing "<ignored>" String
2021-03-11 23:54:22,728 [main:54] - Getting value of type String
2021-03-11 23:54:22,844 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:22,847 [main:58] - GENERATED VALUE OF TYPE String = "gckvi"
2021-03-11 23:54:22,847 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:22,852 [main:67] - randomType = Char
2021-03-11 23:54:22,968 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:22,987 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4c199b8e]
2021-03-11 23:54:22,988 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d841a0]
2021-03-11 23:54:23,106 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:23,108 [main:78] - Generated call from random type = ('꙲').toByte().toString(141189597)
2021-03-11 23:54:23,109 [main:106] - GETTING String from String
2021-03-11 23:54:23,127 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a9d85de]]
2021-03-11 23:54:23,127 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a9d85de]
2021-03-11 23:54:23,248 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 23:54:23,250 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:54:23,253 [main:117] - GENERATED CALL = (Z("gypfv").value).filterIndexed({a: Int, b: Char -> false})
2021-03-11 23:54:23,253 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b207a5f]]
2021-03-11 23:54:23,253 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b207a5f]
2021-03-11 23:54:23,253 [main:117] - GENERATED CALL = (Z("gypfv").value).prependIndent(Z("gypfv").value)
2021-03-11 23:54:23,253 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d556922]]
2021-03-11 23:54:23,253 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d556922]
2021-03-11 23:54:23,254 [main:117] - GENERATED CALL = (Z("gypfv").value).trimEnd()
2021-03-11 23:54:23,254 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6694778f]]
2021-03-11 23:54:23,254 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6694778f]
2021-03-11 23:54:23,370 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:54:23,375 [main:117] - GENERATED CALL = (Z("gypfv").value).removePrefix("upamy")
2021-03-11 23:54:23,375 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]]
2021-03-11 23:54:23,375 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4749e465]
2021-03-11 23:54:23,376 [main:117] - GENERATED CALL = (Z("gypfv").value).trimStart()
2021-03-11 23:54:23,376 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]]
2021-03-11 23:54:23,376 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:54:23,500 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:23,503 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:54:23,618 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:23,621 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo("sdcqw").toString(-1237778966)
2021-03-11 23:54:23,621 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e844e9f]]
2021-03-11 23:54:23,621 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e844e9f]
2021-03-11 23:54:23,735 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:54:23,736 [main:117] - GENERATED CALL = (Z("gypfv").value).plus("frebt")
2021-03-11 23:54:23,736 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cdcf2ec]]
2021-03-11 23:54:23,736 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cdcf2ec]
2021-03-11 23:54:23,852 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:23,855 [main:117] - GENERATED CALL = (Z("gypfv").value).substring(-145279417)
2021-03-11 23:54:23,855 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c03ab43]]
2021-03-11 23:54:23,855 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c03ab43]
2021-03-11 23:54:23,970 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 23:54:23,973 [main:302] - generating value of type = Char true depth = 1
2021-03-11 23:54:23,976 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceFirstChar({a: Char -> '솛'})
2021-03-11 23:54:23,976 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]]
2021-03-11 23:54:23,976 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c73d13]
2021-03-11 23:54:24,092 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:24,095 [main:117] - GENERATED CALL = (Z("gypfv").value).take(-1022823772)
2021-03-11 23:54:24,095 [main:114] - replacement of "<ignored>" of type String is (Z("gypfv").value).replaceFirstChar({a: Char -> '솛'})
2021-03-11 23:54:24,232 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:24,232 [main:66] - Compilation checking started
2021-03-11 23:54:24,806 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0((Z("gypfv").value).replaceFirstChar({a: Char -> '솛'}))
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:24,808 [main:107] - replacing ({
        fu7(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 23:54:24,808 [main:50] - replacing {
        fu7(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 23:54:24,808 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 23:54:24,935 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 23:54:24,938 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:54:25,061 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:54:25,065 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:54:25,324 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:54:25,326 [main:95] - GENERATED = check(true)
2021-03-11 23:54:25,327 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(true)}
2021-03-11 23:54:25,327 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:25,462 [main:67] - randomType = UShort
2021-03-11 23:54:25,584 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:54:25,630 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 23:54:25,659 [main:114] - replacement of {
        fu7(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(true)}
2021-03-11 23:54:25,777 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:54:25,778 [main:66] - Compilation checking started
2021-03-11 23:54:26,325 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0((Z("gypfv").value).replaceFirstChar({a: Char -> '솛'}))
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:26,327 [main:107] - replacing ("Continuation " + c, String)
2021-03-11 23:54:26,327 [main:50] - replacing "Continuation " + c String
2021-03-11 23:54:26,327 [main:54] - Getting value of type String
2021-03-11 23:54:26,473 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:26,476 [main:58] - GENERATED VALUE OF TYPE String = "kzjvq"
2021-03-11 23:54:26,476 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:27,034 [main:67] - randomType = Pair<Byte?, UShort>?
2021-03-11 23:54:27,152 [main:302] - generating value of type = Pair<Byte?, UShort> false depth = 0
2021-03-11 23:54:27,275 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte?, second: UShort): Pair<Byte?, UShort> = TODO()
2021-03-11 23:54:27,278 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte?, second: UShort): Pair<Byte?, UShort> = TODO()
2021-03-11 23:54:27,401 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 23:54:27,403 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 23:54:27,406 [main:95] - GENERATED = Pair<Byte?, UShort>(-20, 21265.toUShort())
2021-03-11 23:54:27,421 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10d3ef8d]
2021-03-11 23:54:27,539 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:27,541 [main:78] - Generated call from random type = (Pair<Byte?, UShort>(-20, 21265.toUShort()))?.second.toString(52418088)
2021-03-11 23:54:27,542 [main:106] - GETTING String from String
2021-03-11 23:54:27,558 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26209dab]]
2021-03-11 23:54:27,558 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26209dab]
2021-03-11 23:54:27,676 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:27,795 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:54:27,798 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceAfter('', Z("gypfv").value, "oriyu")
2021-03-11 23:54:27,798 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fd89f9d]]
2021-03-11 23:54:27,798 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fd89f9d]
2021-03-11 23:54:27,799 [main:117] - GENERATED CALL = (Z("gypfv").value).reversed()
2021-03-11 23:54:27,799 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]]
2021-03-11 23:54:27,799 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70b7a51a]
2021-03-11 23:54:27,915 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:54:28,038 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:28,041 [main:117] - GENERATED CALL = (Z("gypfv").value).commonPrefixWith("ocvsi", true)
2021-03-11 23:54:28,041 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7603fed2]]
2021-03-11 23:54:28,041 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:54:28,159 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:28,161 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7603fed2]
2021-03-11 23:54:28,162 [main:117] - GENERATED CALL = (Z("gypfv").value).get(794915813).uppercase()
2021-03-11 23:54:28,162 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbe9674]]
2021-03-11 23:54:28,162 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:28,279 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:28,433 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:28,436 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbe9674]
2021-03-11 23:54:28,585 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:28,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:28,731 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-449594357, 1892294250).substring(265825352, -709459798)
2021-03-11 23:54:28,731 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14e17899]]
2021-03-11 23:54:28,731 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14e17899]
2021-03-11 23:54:28,855 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:28,858 [main:117] - GENERATED CALL = (Z("gypfv").value).dropLast(-1712609448)
2021-03-11 23:54:28,858 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b61fa2a]]
2021-03-11 23:54:28,858 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:28,980 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:29,101 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:29,104 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b61fa2a]
2021-03-11 23:54:29,221 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:54:29,343 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 23:54:29,346 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 23:54:29,744 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:54:29,746 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 23:54:29,749 [main:95] - GENERATED = Regex("rcgiv", kotlin.text.RegexOption.MULTILINE)
2021-03-11 23:54:29,750 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1763710359, -24854524).replaceFirst(Regex("rcgiv", kotlin.text.RegexOption.MULTILINE), Z("gypfv").value)
2021-03-11 23:54:29,750 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c5e9129]]
2021-03-11 23:54:29,750 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c5e9129]
2021-03-11 23:54:29,750 [main:117] - GENERATED CALL = (Z("gypfv").value).replaceIndentByMargin(Z("gypfv").value, Z("gypfv").value)
2021-03-11 23:54:29,750 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aa10b05]]
2021-03-11 23:54:29,750 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:29,867 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:29,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:29,989 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aa10b05]
2021-03-11 23:54:30,163 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:54:30,302 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 23:54:30,306 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 23:54:30,581 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:54:30,584 [main:95] - GENERATED = Regex("kjeqy")
2021-03-11 23:54:30,701 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 23:54:30,704 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:54:30,709 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-81610728, -1914401886).replace(Regex("kjeqy"), {a: MatchResult -> "gigye"})
2021-03-11 23:54:30,709 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]]
2021-03-11 23:54:30,709 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-11 23:54:30,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:30,830 [main:117] - GENERATED CALL = (Z("gypfv").value).length.toString(593842189)
2021-03-11 23:54:30,830 [main:114] - replacement of "Continuation " + c of type String is (Z("gypfv").value).reversed()
2021-03-11 23:54:30,947 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:30,947 [main:66] - Compilation checking started
2021-03-11 23:54:31,496 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0((Z("gypfv").value).replaceFirstChar({a: Char -> '솛'}))
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Z("gypfv").value).reversed() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:31,499 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-11 23:54:31,499 [main:50] - replacing getOrThrow() Ty1
2021-03-11 23:54:31,499 [main:54] - Getting value of type Ty1
2021-03-11 23:54:31,621 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 23:54:31,626 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 23:54:32,504 [main:67] - randomType = Triple<Kla2<Double>, HashSet<UShort?>, UInt>
2021-03-11 23:54:32,623 [main:302] - generating value of type = Triple<Kla2<Double>, HashSet<UShort?>, UInt> false depth = 0
2021-03-11 23:54:32,748 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla2<Double>, second: HashSet<UShort?>, third: UInt): Triple<Kla2<Double>, HashSet<UShort?>, UInt> = TODO()
2021-03-11 23:54:32,752 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla2<Double>, second: HashSet<UShort?>, third: UInt): Triple<Kla2<Double>, HashSet<UShort?>, UInt> = TODO()
2021-03-11 23:54:32,876 [main:302] - generating value of type = Kla2<Double> false depth = 3
2021-03-11 23:54:32,879 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 23:54:33,405 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-11 23:54:33,408 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 23:54:33,408 [main:302] - generating value of type = HashSet<UShort?> false depth = 3
2021-03-11 23:54:33,532 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: UShort?): HashSet<UShort?> = TODO()
2021-03-11 23:54:33,535 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: UShort?): HashSet<UShort?> = TODO()
2021-03-11 23:54:33,660 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 23:54:33,663 [main:95] - GENERATED = hashSetOf<UShort?>(26222.toUShort())
2021-03-11 23:54:33,663 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 23:54:33,665 [main:95] - GENERATED = Triple<Kla2<Double>, HashSet<UShort?>, UInt>(Kla5, hashSetOf<UShort?>(26222.toUShort()), 1089809998.toUInt())
2021-03-11 23:54:33,687 [main:106] - GETTING Ty1 from String
2021-03-11 23:54:33,702 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 23:54:33,703 [main:107] - replacing (prope1, Kla4)
2021-03-11 23:54:33,703 [main:50] - replacing prope1 Kla4
2021-03-11 23:54:33,703 [main:54] - Getting value of type Kla4
2021-03-11 23:54:33,821 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:54:33,824 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:54:33,824 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 23:54:33,824 [main:61] - GENERATED IS CALL =true
2021-03-11 23:54:34,132 [main:67] - randomType = HashMap<Kla5, Kla1>
2021-03-11 23:54:34,253 [main:302] - generating value of type = HashMap<Kla5, Kla1> false depth = 0
2021-03-11 23:54:34,377 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Kla5, Kla1>): HashMap<Kla5, Kla1> = TODO()
2021-03-11 23:54:34,381 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Kla5, Kla1>): HashMap<Kla5, Kla1> = TODO()
2021-03-11 23:54:34,505 [main:302] - generating value of type = Pair<Kla5, Kla1> false depth = 3
2021-03-11 23:54:34,628 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla5, second: Kla1): Pair<Kla5, Kla1> = TODO()
2021-03-11 23:54:34,632 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla5, second: Kla1): Pair<Kla5, Kla1> = TODO()
2021-03-11 23:54:34,756 [main:302] - generating value of type = Kla5 false depth = 6
2021-03-11 23:54:34,759 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}
2021-03-11 23:54:34,759 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-11 23:54:34,762 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:54:34,762 [main:95] - GENERATED = Pair<Kla5, Kla1>(Kla5, Kla1())
2021-03-11 23:54:34,762 [main:95] - GENERATED = hashMapOf<Kla5, Kla1>(Pair<Kla5, Kla1>(Kla5, Kla1()))
2021-03-11 23:54:34,851 [main:106] - GETTING Kla4 from String
2021-03-11 23:54:34,867 [main:114] - replacement of prope1 of type Kla4 is Kla4()
2021-03-11 23:54:34,989 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:54:34,990 [main:66] - Compilation checking started
2021-03-11 23:54:35,529 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0((Z("gypfv").value).replaceFirstChar({a: Char -> '솛'}))
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Z("gypfv").value).reversed() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            Kla4().prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:35,532 [main:107] - replacing (0, Int)
2021-03-11 23:54:35,532 [main:50] - replacing 0 Int
2021-03-11 23:54:35,532 [main:54] - Getting value of type Int
2021-03-11 23:54:35,667 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:35,670 [main:58] - GENERATED VALUE OF TYPE Int = 1698066013
2021-03-11 23:54:35,670 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:35,805 [main:67] - randomType = UByte
2021-03-11 23:54:35,948 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:54:35,977 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@c95ce29]
2021-03-11 23:54:36,095 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:54:36,098 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@9d06580]
2021-03-11 23:54:36,098 [main:78] - Generated call from random type = (24.toUByte()).div(91.toUByte()).countLeadingZeroBits()
2021-03-11 23:54:36,099 [main:106] - GETTING Int from String
2021-03-11 23:54:36,116 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@3ac17b50]]
2021-03-11 23:54:36,116 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:54:36,236 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:36,239 [main:117] - GENERATED CALL = (Z("gypfv").value).get(-1592348763).code
2021-03-11 23:54:36,239 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@38ac9dca]]
2021-03-11 23:54:36,239 [main:117] - GENERATED CALL = (Z("gypfv").value).length.sign
2021-03-11 23:54:36,239 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@134323ec]]
2021-03-11 23:54:36,239 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@134323ec]
2021-03-11 23:54:36,357 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:36,360 [main:117] - GENERATED CALL = (Z("gypfv").value).length.shr(-373958975)
2021-03-11 23:54:36,360 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@1870e28d]]
2021-03-11 23:54:36,360 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:36,478 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:36,598 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:36,601 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-1469006248, 1872458794).length
2021-03-11 23:54:36,601 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]]
2021-03-11 23:54:36,601 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:54:36,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]
2021-03-11 23:54:36,601 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).takeHighestOneBit()
2021-03-11 23:54:36,601 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58595f67]]
2021-03-11 23:54:36,601 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58595f67]
2021-03-11 23:54:36,722 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:36,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:36,964 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:36,967 [main:117] - GENERATED CALL = (Z("gypfv").value).indexOf('藔', 350657138, true)
2021-03-11 23:54:36,967 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ab7999]]
2021-03-11 23:54:36,967 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65061a8b]
2021-03-11 23:54:36,967 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ab7999]
2021-03-11 23:54:36,967 [main:117] - GENERATED CALL = (Z("gypfv").value).compareTo(Z("gypfv").value).inc()
2021-03-11 23:54:36,967 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe9dc2]]
2021-03-11 23:54:36,968 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:37,087 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:37,208 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:37,211 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe9dc2]
2021-03-11 23:54:37,330 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 23:54:37,333 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:54:37,336 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(1994874382, 2027669360).sumBy({a: Char -> 1486696454})
2021-03-11 23:54:37,336 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@10adc78d]]
2021-03-11 23:54:37,336 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@10adc78d]
2021-03-11 23:54:37,453 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:37,456 [main:117] - GENERATED CALL = (Z("gypfv").value).length.rotateRight(-842741693)
2021-03-11 23:54:37,456 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68a75cd7]]
2021-03-11 23:54:37,456 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:37,574 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:37,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:37,697 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68a75cd7]
2021-03-11 23:54:37,849 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:54:37,998 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:38,126 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:38,130 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(2113867773, 1101897320).lastIndexOf('ಥ', 712553134, true)
2021-03-11 23:54:38,130 [main:114] - replacement of 0 of type Int is (Z("gypfv").value).indexOf('藔', 350657138, true)
2021-03-11 23:54:38,247 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:38,248 [main:66] - Compilation checking started
2021-03-11 23:54:38,800 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0((Z("gypfv").value).replaceFirstChar({a: Char -> '솛'}))
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Z("gypfv").value).reversed() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = (Z("gypfv").value).indexOf('藔', 350657138, true)
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            Kla4().prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:38,803 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 23:54:38,803 [main:50] - replacing getOrThrow() Any?
2021-03-11 23:54:38,803 [main:54] - Getting value of type Any?
2021-03-11 23:54:38,952 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:54:38,952 [main:58] - GENERATED VALUE OF TYPE Any? = "avtzh"
2021-03-11 23:54:38,952 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:39,230 [main:67] - randomType = ArrayList<UShort>
2021-03-11 23:54:39,350 [main:302] - generating value of type = ArrayList<UShort> false depth = 0
2021-03-11 23:54:39,475 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<UShort> = TODO()
2021-03-11 23:54:39,478 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<UShort> = TODO()
2021-03-11 23:54:39,604 [main:95] - GENERATED = ArrayList<UShort>()
2021-03-11 23:54:39,724 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@16bbd983]
2021-03-11 23:54:39,725 [main:78] - Generated call from random type = (ArrayList<UShort>()).toJSON()
2021-03-11 23:54:39,726 [main:106] - GETTING Any? from String
2021-03-11 23:54:39,742 [main:114] - replacement of getOrThrow() of type Any? is "avtzh"
2021-03-11 23:54:39,882 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 23:54:39,883 [main:66] - Compilation checking started
2021-03-11 23:54:40,237 [main:49] - Result = false
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0((Z("gypfv").value).replaceFirstChar({a: Char -> '솛'}))
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2."avtzh"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Z("gypfv").value).reversed() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = (Z("gypfv").value).indexOf('藔', 350657138, true)
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            Kla4().prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:40,239 [main:107] - replacing (true, Boolean)
2021-03-11 23:54:40,239 [main:50] - replacing true Boolean
2021-03-11 23:54:40,239 [main:54] - Getting value of type Boolean
2021-03-11 23:54:40,363 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:40,366 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:54:40,366 [main:61] - GENERATED IS CALL =false
2021-03-11 23:54:40,502 [main:67] - randomType = Double
2021-03-11 23:54:40,622 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:54:40,653 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec8e029]
2021-03-11 23:54:40,653 [main:78] - Generated call from random type = (0.26178817376032903).isInfinite()
2021-03-11 23:54:40,654 [main:106] - GETTING Boolean from String
2021-03-11 23:54:40,670 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e65f0e3]]
2021-03-11 23:54:40,670 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e65f0e3]
2021-03-11 23:54:40,670 [main:117] - GENERATED CALL = (Z("gypfv").value).isEmpty()
2021-03-11 23:54:40,670 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33ca0a4d]]
2021-03-11 23:54:40,670 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33ca0a4d]
2021-03-11 23:54:40,670 [main:117] - GENERATED CALL = (Z("gypfv").value).toBoolean()
2021-03-11 23:54:40,671 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eac302c]]
2021-03-11 23:54:40,671 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:40,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:40,913 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:40,915 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eac302c]
2021-03-11 23:54:40,915 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(138477621, 459859389).none()
2021-03-11 23:54:40,915 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5de5459f]]
2021-03-11 23:54:40,916 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:41,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:41,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:41,163 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5de5459f]
2021-03-11 23:54:41,163 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(2023560154, -105761078).isBlank()
2021-03-11 23:54:41,163 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@514c684d]]
2021-03-11 23:54:41,163 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@719b8c4e]
2021-03-11 23:54:41,282 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@514c684d]
2021-03-11 23:54:41,402 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:54:41,405 [main:117] - GENERATED CALL = (Z("gypfv").value).equals(null).or(true)
2021-03-11 23:54:41,405 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@243c1d97]]
2021-03-11 23:54:41,405 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:41,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:41,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:41,651 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@243c1d97]
2021-03-11 23:54:41,771 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:54:41,771 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-6660300, -550503226).equals("zjebl")
2021-03-11 23:54:41,771 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c25e74b]]
2021-03-11 23:54:41,771 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:54:41,913 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:41,916 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c25e74b]
2021-03-11 23:54:41,916 [main:117] - GENERATED CALL = (Z("gypfv").value).get(1679200608).isLowerCase()
2021-03-11 23:54:41,916 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8b3f4ef]]
2021-03-11 23:54:41,916 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@63d042fd]
2021-03-11 23:54:42,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:42,163 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:42,166 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8b3f4ef]
2021-03-11 23:54:42,286 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:42,289 [main:117] - GENERATED CALL = (Z("gypfv").value).subSequence(-10767525, -941117195).hasSurrogatePairAt(-626980853)
2021-03-11 23:54:42,289 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@33e99277], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67264fde]]
2021-03-11 23:54:42,289 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67264fde]
2021-03-11 23:54:42,408 [main:117] - GENERATED CALL = (Z("gypfv").value).length.equals(null)
2021-03-11 23:54:42,408 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@485ccca6]]
2021-03-11 23:54:42,408 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@19599603]
2021-03-11 23:54:42,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:54:42,530 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@485ccca6]
2021-03-11 23:54:42,530 [main:117] - GENERATED CALL = (Z("gypfv").value).get(1156865362).isLowSurrogate()
2021-03-11 23:54:42,530 [main:114] - replacement of true of type Boolean is (Z("gypfv").value).subSequence(138477621, 459859389).none()
2021-03-11 23:54:42,648 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:54:42,649 [main:66] - Compilation checking started
2021-03-11 23:54:43,207 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0((Z("gypfv").value).replaceFirstChar({a: Char -> '솛'}))
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Z("gypfv").value).reversed() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (Z("gypfv").value).subSequence(138477621, 459859389).none() } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = (Z("gypfv").value).indexOf('藔', 350657138, true)
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            Kla4().prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:43,209 [main:107] - replacing (Kla4(), Kla4)
2021-03-11 23:54:43,209 [main:50] - replacing Kla4() Kla4
2021-03-11 23:54:43,209 [main:54] - Getting value of type Kla4
2021-03-11 23:54:43,329 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:54:43,331 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = (Z("gypfv").value).indexOf('藔', 350657138, true)
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:54:43,331 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 23:54:43,332 [main:61] - GENERATED IS CALL =true
2021-03-11 23:54:43,762 [main:67] - randomType = List<Kla2<UInt>>
2021-03-11 23:54:43,762 [main:106] - GETTING Kla4 from String
2021-03-11 23:54:43,779 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-11 23:54:43,899 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:54:43,901 [main:107] - replacing (this, Kla1)
2021-03-11 23:54:43,901 [main:50] - replacing this Kla1
2021-03-11 23:54:43,901 [main:54] - Getting value of type Kla1
2021-03-11 23:54:44,049 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 23:54:44,052 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 23:54:44,052 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-11 23:54:44,052 [main:61] - GENERATED IS CALL =true
2021-03-11 23:54:44,069 [main:67] - randomType = Z?
2021-03-11 23:54:44,188 [main:302] - generating value of type = Z false depth = 0
2021-03-11 23:54:44,191 [main:112] - generating klass Z text = inline class Z(val value: String)
2021-03-11 23:54:44,310 [main:194] - Type params = []
2021-03-11 23:54:44,430 [main:302] - generating value of type = String true depth = 2
2021-03-11 23:54:44,440 [main:106] - GETTING Kla1 from String
2021-03-11 23:54:44,462 [main:114] - replacement of this of type Kla1 is Kla1()
2021-03-11 23:54:44,582 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:54:44,582 [main:66] - Compilation checking started
2021-03-11 23:54:45,117 [main:53] - Result = true
Text:
package test

import kotlin.reflect.KType
import kotlin.reflect.typeOf
import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class Z(val value: String)

fun check(expected: String, actual: KType) {
    assertEquals(expected, actual.toString())
}

fun box(): String {
    check("Z", typeOf<Z>())
    check("Z?", typeOf<Z?>())
    check("Array<Z>", typeOf<Array<Z>>())
    check("Array<Z?>", typeOf<Array<Z?>>())

    check("UInt", typeOf<UInt>())
    check("UInt?", typeOf<UInt?>())
    check("ULong?", typeOf<ULong?>())
    check("UShortArray", typeOf<UShortArray>())
    check("UShortArray?", typeOf<UShortArray?>())
    check("Array<UByteArray>", typeOf<Array<UByteArray>>())
    check("Array<UByteArray?>?", typeOf<Array<UByteArray?>?>())

    return "OK"
}

suspend fun <Ty0> fu0(v: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn {a: Continuation<Ty0> -> "ixnxq"}

fun fu1(c: suspend () -> String): String {
    var prope2 = (Z("gypfv").value).trimStart()
    c.startCoroutine(fu3 {
        prope2 = it
    })

    return prope2
}

fun fu2(): String = fu1 {
    // A piece of code for next statement:
    // INVOKEVIRTUAL suspendHere
    // CHECKCAST [B
    //
    // Analyzer uses `newValue` method for estimation of type generated by CHECKCAST insn,
    // but for arrays `newValue` returned just Basic.REFERENCE_VALUE, thus we didn't add necessary checkcasts
    // for variables spilled into fields
    val prope8 = fu0((Z("gypfv").value).encodeToByteArray())

    fu0((Z("gypfv").value).replaceFirstChar({a: Char -> '솛'}))
    (Kla1()).prope2?.toString()!!
}

fun box153(): String {
    if (fu2() != "2") return (Z("gypfv").value).trimMargin("ulnxo")
    return "OK"
}

fun <Ty1> fu3(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        x(prope2.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (Z("gypfv").value)?.subSequence(-580374894, 454161515).forEachIndexed({a: Int, b: Char -> check(true, { "ndxeo"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla1().prope2 = runCatching<Any?>({ "akjfs"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla2<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty1>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla3 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Z("gypfv").value).reversed() + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == (Z("gypfv").value).subSequence(138477621, 459859389).none() } ?: error((Z("gypfv").value).takeWhile({a: Char -> false}) + method + (Z("gypfv").value).replace('䜠', '녓', false) +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope4 = -1663971460
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = (Z("gypfv").value).indexOf('藔', 350657138, true)
        prope5 = (Z("gypfv").value).length.equals("hmcfv")
        prope6 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((8436054071383926333).toByte().equals("qxhom")) error((Z("gypfv").value).filterIndexed({a: Int, b: Char -> false}) + prope4)
            prope6()
        }
        if ((Z("gypfv").value).subSequence(1233726493, 471750005).lastIndexOfAny(CharArray(1133347768), 225134375, true) != numberOfSuspensions)
            error((Z("gypfv").value).removeRange(-1187756568, -524568803))
        if (prope5) error((Z("gypfv").value).replaceFirst('䦱', '', false))
        prope6()
        if (checkFinished && (Z("gypfv").value).none()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            Kla4().prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw UnsupportedOperationException()
    }
}


2021-03-11 23:54:45,120 [main:107] - replacing ("OK", String)
2021-03-11 23:54:45,120 [main:50] - replacing "OK" String
2021-03-11 23:54:45,120 [main:54] - Getting value of type String
