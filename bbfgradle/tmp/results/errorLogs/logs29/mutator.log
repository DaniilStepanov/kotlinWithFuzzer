2021-03-11 20:18:24,182 [main:66] - Compilation checking started
2021-03-11 20:18:25,757 [main:112] - generating klass C text = class C
2021-03-11 20:18:26,081 [main:45] - Trying to change 7 nodes
2021-03-11 20:18:26,085 [main:53] - replacing ("box\$C", String)
2021-03-11 20:18:26,086 [main:50] - replacing "box\$C" String
2021-03-11 20:18:26,086 [main:54] - Getting value of type String
2021-03-11 20:18:26,217 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:18:26,221 [main:58] - GENERATED VALUE OF TYPE String = "gqfbf"
2021-03-11 20:18:26,222 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:26,921 [main:67] - randomType = UShort
2021-03-11 20:18:27,086 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:18:27,272 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@72eca02d]
2021-03-11 20:18:27,274 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]
2021-03-11 20:18:27,403 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:27,405 [main:78] - Generated call from random type = (16152.toUShort()).toByte().toString(682195541)
2021-03-11 20:18:27,418 [main:106] - GETTING String from [ERROR : <ERROR FUNCTION RETURN TYPE>]
2021-03-11 20:18:27,422 [main:61] - replacement of "box\$C" of type String is "gqfbf"
2021-03-11 20:18:27,508 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:18:27,509 [main:66] - Compilation checking started
2021-03-11 20:18:27,925 [main:53] - Result = true
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "gqfbf" && name != "C") return "Fail: $name"

    return "OK"
}
2021-03-11 20:18:27,927 [main:53] - replacing ("C", String)
2021-03-11 20:18:27,927 [main:50] - replacing "C" String
2021-03-11 20:18:27,927 [main:54] - Getting value of type String
2021-03-11 20:18:28,017 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:18:28,017 [main:58] - GENERATED VALUE OF TYPE String = "klfbv"
2021-03-11 20:18:28,018 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:28,111 [main:67] - randomType = Byte
2021-03-11 20:18:28,218 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:18:28,306 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7f824067]
2021-03-11 20:18:28,307 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]
2021-03-11 20:18:28,386 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:28,387 [main:78] - Generated call from random type = (57).toShort().toString(2121986649)
2021-03-11 20:18:28,391 [main:106] - GETTING String from [ERROR : <ERROR FUNCTION RETURN TYPE>]
2021-03-11 20:18:28,395 [main:61] - replacement of "C" of type String is (57).toShort().toString(2121986649)
2021-03-11 20:18:28,475 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:18:28,475 [main:66] - Compilation checking started
2021-03-11 20:18:29,049 [main:53] - Result = true
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "gqfbf" && name != (57).toShort().toString(2121986649)) return "Fail: $name"

    return "OK"
}
2021-03-11 20:18:29,050 [main:53] - replacing (name != "gqfbf", Boolean)
2021-03-11 20:18:29,050 [main:50] - replacing name != "gqfbf" Boolean
2021-03-11 20:18:29,051 [main:54] - Getting value of type Boolean
2021-03-11 20:18:29,141 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:29,142 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:18:29,142 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:29,361 [main:67] - randomType = Collection<Char>
2021-03-11 20:18:29,363 [main:106] - GETTING Boolean from [ERROR : <ERROR FUNCTION RETURN TYPE>]
2021-03-11 20:18:29,366 [main:61] - replacement of name != "gqfbf" of type Boolean is true
2021-03-11 20:18:29,484 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:18:29,484 [main:66] - Compilation checking started
2021-03-11 20:18:29,816 [main:53] - Result = true
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (true && name != (57).toShort().toString(2121986649)) return "Fail: $name"

    return "OK"
}
2021-03-11 20:18:29,816 [main:53] - replacing (name != "gqfbf", Boolean)
2021-03-11 20:18:29,816 [main:50] - replacing name != "gqfbf" Boolean
2021-03-11 20:18:29,816 [main:54] - Getting value of type Boolean
2021-03-11 20:18:29,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:29,915 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:18:29,915 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:30,013 [main:67] - randomType = UInt
2021-03-11 20:18:30,092 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:18:30,143 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@481d5c41]
2021-03-11 20:18:30,143 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7f206e59]
2021-03-11 20:18:30,223 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:18:30,224 [main:78] - Generated call from random type = (1566390101.toUInt()).toFloat().equals("gexoc")
2021-03-11 20:18:30,224 [main:61] - replacement of name != "gqfbf" of type Boolean is false
2021-03-11 20:18:30,357 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:18:30,482 [main:119] - TRYING TO REPLACE CONSTANT 57
2021-03-11 20:18:30,584 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:18:30,584 [main:66] - Compilation checking started
2021-03-11 20:18:30,911 [main:53] - Result = true
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (true && name != (2121986649).toShort().toString(2121986649)) return "Fail: $name"

    return "OK"
}
2021-03-11 20:18:30,911 [main:119] - TRYING TO REPLACE CONSTANT 2121986649
2021-03-11 20:18:30,997 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:18:30,997 [main:66] - Compilation checking started
2021-03-11 20:18:31,326 [main:41] - AFTER TRY 0 res = fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}
2021-03-11 20:18:31,478 [main:112] - generating klass C text = class C
2021-03-11 20:18:31,642 [main:43] - Try â„–0
2021-03-11 20:18:32,479 [main:69] - Trying to insert infix fun Int.fu1(x: () -> Unit) {}
2021-03-11 20:18:32,582 [main:66] - Compilation checking started
2021-03-11 20:18:33,127 [main:103] - Trying to change 11 nodes
2021-03-11 20:18:33,127 [main:107] - replacing ({
        return@fu1
    }, Function0<Unit>)
2021-03-11 20:18:33,127 [main:50] - replacing {
        return@fu1
    } Function0<Unit>
2021-03-11 20:18:33,127 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:18:33,221 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:18:33,222 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:18:33,329 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:18:33,332 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:18:33,675 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:18:33,676 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:18:33,676 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:18:33,677 [main:95] - GENERATED = check(false, { "kufpt"})
2021-03-11 20:18:33,677 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "kufpt"})}
2021-03-11 20:18:33,677 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:33,875 [main:67] - randomType = UShort?
2021-03-11 20:18:33,961 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:18:34,033 [main:106] - GETTING Function0<Unit> from KClass<C>
2021-03-11 20:18:34,055 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-11 20:18:34,072 [main:114] - replacement of {
        return@fu1
    } of type Function0<Unit> is { check(false, { "kufpt"})}
2021-03-11 20:18:34,193 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:18:34,194 [main:66] - Compilation checking started
2021-03-11 20:18:34,579 [main:53] - Result = true
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 0
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}


2021-03-11 20:18:34,579 [main:107] - replacing ("OK", String)
2021-03-11 20:18:34,579 [main:50] - replacing "OK" String
2021-03-11 20:18:34,579 [main:54] - Getting value of type String
2021-03-11 20:18:34,669 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:18:34,670 [main:58] - GENERATED VALUE OF TYPE String = "igotz"
2021-03-11 20:18:34,670 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:35,195 [main:67] - randomType = Function1<HashMap<Short, UByte>, UByte>
2021-03-11 20:18:35,197 [main:106] - GETTING String from Boolean
2021-03-11 20:18:35,216 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:18:35,216 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:35,216 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:18:35,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:35,307 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").toString(2043196085)
2021-03-11 20:18:35,307 [main:114] - replacement of "OK" of type String is (name != "box\$C").compareTo(name != "box\$C").toString(2043196085)
2021-03-11 20:18:35,393 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:18:35,394 [main:66] - Compilation checking started
2021-03-11 20:18:35,628 [main:49] - Result = false
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 0
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return (name != "box\$C").compareTo(name != "box\$C").toString(2043196085)
}


2021-03-11 20:18:35,628 [main:107] - replacing (0, Int)
2021-03-11 20:18:35,628 [main:50] - replacing 0 Int
2021-03-11 20:18:35,628 [main:54] - Getting value of type Int
2021-03-11 20:18:35,713 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:35,714 [main:58] - GENERATED VALUE OF TYPE Int = 1873232201
2021-03-11 20:18:35,714 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:36,116 [main:67] - randomType = ArrayList<Function1<ULong, Float>>
2021-03-11 20:18:36,198 [main:302] - generating value of type = ArrayList<Function1<ULong, Float>> false depth = 0
2021-03-11 20:18:36,298 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Function1<ULong, Float>> = TODO()
2021-03-11 20:18:36,300 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Function1<ULong, Float>> = TODO()
2021-03-11 20:18:36,396 [main:95] - GENERATED = arrayListOf<Function1<ULong, Float>>()
2021-03-11 20:18:36,665 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4284483a]
2021-03-11 20:18:36,665 [main:78] - Generated call from random type = (arrayListOf<Function1<ULong, Float>>()).modCount.takeHighestOneBit()
2021-03-11 20:18:36,666 [main:106] - GETTING Int from Boolean
2021-03-11 20:18:36,677 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@237bb183]]
2021-03-11 20:18:36,677 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,678 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@237bb183]
2021-03-11 20:18:36,678 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").takeLowestOneBit()
2021-03-11 20:18:36,678 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4023e834]]
2021-03-11 20:18:36,678 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,679 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4023e834]
2021-03-11 20:18:36,679 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").countOneBits()
2021-03-11 20:18:36,679 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@193863aa]]
2021-03-11 20:18:36,679 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,766 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:36,767 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@193863aa]
2021-03-11 20:18:36,852 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:36,853 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(false).rotateRight(1239816394)
2021-03-11 20:18:36,853 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]]
2021-03-11 20:18:36,853 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,853 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C")
2021-03-11 20:18:36,853 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1f7091a7]]
2021-03-11 20:18:36,854 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,854 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").absoluteValue
2021-03-11 20:18:36,854 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a823c8]]
2021-03-11 20:18:36,854 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,939 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:36,940 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49a823c8]
2021-03-11 20:18:36,940 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(false).toInt()
2021-03-11 20:18:36,940 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32160935]]
2021-03-11 20:18:36,940 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,941 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32160935]
2021-03-11 20:18:36,941 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").unaryMinus()
2021-03-11 20:18:36,941 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@416faf16]]
2021-03-11 20:18:36,941 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,942 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@416faf16]
2021-03-11 20:18:36,942 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").countTrailingZeroBits()
2021-03-11 20:18:36,942 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2195d1b]]
2021-03-11 20:18:36,942 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:36,943 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2195d1b]
2021-03-11 20:18:37,051 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:37,053 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").coerceAtMost(-83216192)
2021-03-11 20:18:37,053 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2ec5db]]
2021-03-11 20:18:37,053 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:37,054 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2ec5db]
2021-03-11 20:18:37,054 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").dec()
2021-03-11 20:18:37,054 [main:114] - replacement of 0 of type Int is (name != "box\$C").compareTo(false).rotateRight(1239816394)
2021-03-11 20:18:37,174 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:18:37,175 [main:66] - Compilation checking started
2021-03-11 20:18:37,411 [main:49] - Result = false
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 0
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0((name != "box\$C").compareTo(false).rotateRight(1239816394))
    fu1(0)

    return "OK"
}


2021-03-11 20:18:37,412 [main:107] - replacing (0, Int)
2021-03-11 20:18:37,412 [main:50] - replacing 0 Int
2021-03-11 20:18:37,412 [main:54] - Getting value of type Int
2021-03-11 20:18:37,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:37,498 [main:58] - GENERATED VALUE OF TYPE Int = 796609894
2021-03-11 20:18:37,498 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:37,593 [main:67] - randomType = UByte
2021-03-11 20:18:37,679 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:18:37,730 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@24b1dba]
2021-03-11 20:18:37,731 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@67133268]
2021-03-11 20:18:37,731 [main:78] - Generated call from random type = (90.toUByte()).toFloat().roundToInt()
2021-03-11 20:18:37,733 [main:106] - GETTING Int from Boolean
2021-03-11 20:18:37,752 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e612795]]
2021-03-11 20:18:37,752 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:37,882 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:37,883 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e612795]
2021-03-11 20:18:37,994 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:18:37,995 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(true).compareTo(-87)
2021-03-11 20:18:37,995 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c84e530]]
2021-03-11 20:18:37,995 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:38,091 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:38,092 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c84e530]
2021-03-11 20:18:38,175 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:38,176 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(false).xor(-586032005)
2021-03-11 20:18:38,177 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47f20fa]]
2021-03-11 20:18:38,177 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:38,177 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47f20fa]
2021-03-11 20:18:38,263 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:18:38,265 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").times(40)
2021-03-11 20:18:38,265 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ee86eb7]]
2021-03-11 20:18:38,265 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:38,346 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:38,347 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ee86eb7]
2021-03-11 20:18:38,442 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:18:38,443 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(false).plus(-126)
2021-03-11 20:18:38,443 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56f422e9]]
2021-03-11 20:18:38,443 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:38,444 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56f422e9]
2021-03-11 20:18:38,541 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:18:38,542 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").minus(-126)
2021-03-11 20:18:38,543 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@648d6010]]
2021-03-11 20:18:38,543 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:38,543 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@648d6010]
2021-03-11 20:18:38,641 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:38,643 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").and(-820750557)
2021-03-11 20:18:38,643 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33845a7d]]
2021-03-11 20:18:38,643 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:38,644 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33845a7d]
2021-03-11 20:18:38,729 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:38,730 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").shr(-1430033091)
2021-03-11 20:18:38,730 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cf24837]]
2021-03-11 20:18:38,730 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:38,812 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:38,813 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cf24837]
2021-03-11 20:18:38,929 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:38,931 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(true).shl(-1218833792)
2021-03-11 20:18:38,931 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@237bb183]]
2021-03-11 20:18:38,931 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:39,044 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:39,045 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@237bb183]
2021-03-11 20:18:39,046 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(true).takeLowestOneBit()
2021-03-11 20:18:39,046 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78bfc2d3]]
2021-03-11 20:18:39,046 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:39,046 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78bfc2d3]
2021-03-11 20:18:39,047 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").inc()
2021-03-11 20:18:39,047 [main:114] - replacement of 0 of type Int is (name != "box\$C").compareTo(true).shl(-1218833792)
2021-03-11 20:18:39,151 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:18:39,151 [main:66] - Compilation checking started
2021-03-11 20:18:39,377 [main:49] - Result = false
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 0
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1((name != "box\$C").compareTo(true).shl(-1218833792))

    return "OK"
}


2021-03-11 20:18:39,377 [main:107] - replacing (0, Int)
2021-03-11 20:18:39,377 [main:50] - replacing 0 Int
2021-03-11 20:18:39,377 [main:54] - Getting value of type Int
2021-03-11 20:18:39,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:18:39,463 [main:58] - GENERATED VALUE OF TYPE Int = 256458983
2021-03-11 20:18:39,464 [main:61] - GENERATED IS CALL =false
2021-03-11 20:18:39,552 [main:67] - randomType = Boolean?
2021-03-11 20:18:39,634 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:18:39,660 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:39,660 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ee86eb7]
2021-03-11 20:18:39,740 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:18:39,741 [main:78] - Generated call from random type = (true)?.compareTo(name != "box\$C").plus(-126)
2021-03-11 20:18:39,742 [main:106] - GETTING Int from KClass<C>
2021-03-11 20:18:39,753 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@21bf3ae3], public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0a8237]]
2021-03-11 20:18:39,753 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f0a8237]
2021-03-11 20:18:39,835 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:18:39,836 [main:117] - GENERATED CALL = (C::class).qualifiedName?.compareTo("fdrsb")
2021-03-11 20:18:39,837 [main:113] - Case = [public abstract val qualifiedName: kotlin.String? defined in kotlin.reflect.KClass[DeserializedPropertyDescriptor@21bf3ae3], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@79e2c767]]
2021-03-11 20:18:39,837 [main:117] - GENERATED CALL = (C::class).qualifiedName?.length
2021-03-11 20:18:39,837 [main:113] - Case = [public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@afbe89a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]]
2021-03-11 20:18:39,837 [main:149] - GENERATING call of type public abstract fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KClass[DeserializedSimpleFunctionDescriptor@afbe89a]
2021-03-11 20:18:39,920 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:18:39,920 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:18:39,921 [main:117] - GENERATED CALL = (C::class).equals("kkdxg").compareTo(name != "box\$C")
2021-03-11 20:18:39,921 [main:114] - replacement of 0 of type Int is 256458983
2021-03-11 20:18:40,002 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:18:40,002 [main:66] - Compilation checking started
2021-03-11 20:18:40,296 [main:53] - Result = true
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}


2021-03-11 20:18:40,373 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 20:18:40,462 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 20:18:40,463 [main:66] - Compilation checking started
2021-03-11 20:18:40,662 [main:49] - Result = false
Text:
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(name != "box\$C", { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}


2021-03-11 20:18:40,662 [main:41] - AFTER TRY 1 res = fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}


2021-03-11 20:18:40,827 [main:112] - generating klass C text = class C
2021-03-11 20:18:40,993 [main:43] - GENERATING CALL OF fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}
2021-03-11 20:18:40,994 [main:61] - WITHOUT TYPE PARAMS = fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}
2021-03-11 20:18:41,082 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:18:41,082 [main:95] - GENERATED = fu0(1008340287)
2021-03-11 20:18:41,188 [main:43] - GENERATING CALL OF fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}
2021-03-11 20:18:41,188 [main:61] - WITHOUT TYPE PARAMS = fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}
2021-03-11 20:18:41,294 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:18:41,294 [main:95] - GENERATED = fu1(-1281809544)
2021-03-11 20:18:41,376 [main:43] - GENERATING CALL OF infix fun Int.fu1(x: () -> Unit) {}
2021-03-11 20:18:41,377 [main:61] - WITHOUT TYPE PARAMS = infix fun Int.fu1(x: () -> Unit) {}
2021-03-11 20:18:41,548 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-11 20:18:41,549 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:18:41,632 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:18:41,634 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:18:41,800 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-11 20:18:41,801 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 20:18:41,925 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:18:41,927 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:18:42,121 [main:302] - generating value of type = Any false depth = 9
2021-03-11 20:18:42,121 [main:95] - GENERATED = print("uwcmo")
2021-03-11 20:18:42,121 [main:95] - GENERATED = contract({ print("uwcmo")})
2021-03-11 20:18:42,122 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:18:42,122 [main:95] - GENERATED = 785403351.fu1({ contract({ print("uwcmo")})})
2021-03-11 20:18:42,224 [main:43] - Try â„–1
2021-03-11 20:18:55,115 [main:48] - Already checked
2021-03-11 20:18:58,825 [main:69] - Trying to insert override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
2021-03-11 20:18:58,918 [main:66] - Compilation checking started
2021-03-11 20:19:00,057 [main:103] - Trying to change 171 nodes
2021-03-11 20:19:00,057 [main:107] - replacing (prope2, String)
2021-03-11 20:19:00,057 [main:50] - replacing prope2 String
2021-03-11 20:19:00,057 [main:54] - Getting value of type String
2021-03-11 20:19:00,214 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:00,217 [main:58] - GENERATED VALUE OF TYPE String = "vpvzt"
2021-03-11 20:19:00,218 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:00,394 [main:67] - randomType = Long
2021-03-11 20:19:00,544 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:19:00,594 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:00,594 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:00,594 [main:78] - Generated call from random type = (3487788950760648434).toInt().toString(fu1(-1281809544))
2021-03-11 20:19:00,595 [main:106] - GETTING String from Int
2021-03-11 20:19:00,645 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:00,645 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:00,645 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:00,645 [main:117] - GENERATED CALL = (fu0(1008340287)).toInt().toString(fu0(0))
2021-03-11 20:19:00,646 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:00,646 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf]
2021-03-11 20:19:00,791 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:19:00,793 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:00,794 [main:117] - GENERATED CALL = (fu0(1008340287)).div(-2381993721021063930).toString(fu0(0))
2021-03-11 20:19:00,794 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]]
2021-03-11 20:19:00,794 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:00,794 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]
2021-03-11 20:19:01,001 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:01,005 [main:117] - GENERATED CALL = (fu0(1008340287)).toChar().plus("ufvjc")
2021-03-11 20:19:01,005 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]]
2021-03-11 20:19:01,005 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:01,006 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]
2021-03-11 20:19:01,006 [main:117] - GENERATED CALL = (fu0(1008340287)).toChar().uppercase()
2021-03-11 20:19:01,006 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]]
2021-03-11 20:19:01,006 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079]
2021-03-11 20:19:01,006 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]
2021-03-11 20:19:01,154 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:01,158 [main:117] - GENERATED CALL = (fu0(1008340287)).toShort().toString(-163485982)
2021-03-11 20:19:01,158 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:01,158 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398]
2021-03-11 20:19:01,158 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:01,159 [main:117] - GENERATED CALL = (fu0(1008340287)).compareTo(fu0(0)).toString(fu1(-1281809544))
2021-03-11 20:19:01,159 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:01,159 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8]
2021-03-11 20:19:01,159 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:01,308 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:01,311 [main:117] - GENERATED CALL = (fu0(1008340287)).toLong().toString(201696904)
2021-03-11 20:19:01,311 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:01,311 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:01,311 [main:117] - GENERATED CALL = (fu0(1008340287)).toString(fu0(0))
2021-03-11 20:19:01,311 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6335b]]
2021-03-11 20:19:01,311 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:01,312 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6335b]
2021-03-11 20:19:01,312 [main:117] - GENERATED CALL = (fu0(1008340287)).toChar().lowercase()
2021-03-11 20:19:01,312 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff8844e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]]
2021-03-11 20:19:01,312 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff8844e]
2021-03-11 20:19:01,312 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]
2021-03-11 20:19:01,460 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:01,462 [main:117] - GENERATED CALL = (fu0(1008340287)).toByte().toString(1678740075)
2021-03-11 20:19:01,463 [main:114] - replacement of prope2 of type String is (fu0(1008340287)).toChar().lowercase()
2021-03-11 20:19:01,600 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:01,600 [main:66] - Compilation checking started
2021-03-11 20:19:02,316 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by x // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = ""

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:02,320 [main:107] - replacing (0, Int)
2021-03-11 20:19:02,320 [main:50] - replacing 0 Int
2021-03-11 20:19:02,320 [main:54] - Getting value of type Int
2021-03-11 20:19:02,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:02,484 [main:58] - GENERATED VALUE OF TYPE Int = 1627403591
2021-03-11 20:19:02,484 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:02,843 [main:67] - randomType = HashSet<Short>
2021-03-11 20:19:02,979 [main:302] - generating value of type = HashSet<Short> false depth = 0
2021-03-11 20:19:03,146 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Short> = TODO()
2021-03-11 20:19:03,149 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Short> = TODO()
2021-03-11 20:19:03,293 [main:95] - GENERATED = hashSetOf<Short>()
2021-03-11 20:19:03,446 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ee86eb7]
2021-03-11 20:19:03,597 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:03,601 [main:78] - Generated call from random type = (hashSetOf<Short>()).size.plus(-114)
2021-03-11 20:19:03,601 [main:106] - GETTING Int from Int
2021-03-11 20:19:03,636 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55851bc0], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6f734e47]]
2021-03-11 20:19:03,636 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55851bc0]
2021-03-11 20:19:03,637 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6f734e47]
2021-03-11 20:19:03,637 [main:117] - GENERATED CALL = (fu1(-1281809544)).toDouble().roundToInt()
2021-03-11 20:19:03,637 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@648d6010]]
2021-03-11 20:19:03,637 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@648d6010]
2021-03-11 20:19:03,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:03,787 [main:117] - GENERATED CALL = (fu1(-1281809544)).and(-1482108895)
2021-03-11 20:19:03,788 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4da20418]]
2021-03-11 20:19:03,788 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:03,788 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4da20418]
2021-03-11 20:19:03,957 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:19:03,960 [main:117] - GENERATED CALL = (fu1(-1281809544)).toChar().minus('â¡²')
2021-03-11 20:19:03,960 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e612795]]
2021-03-11 20:19:03,960 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:03,960 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e612795]
2021-03-11 20:19:04,091 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:04,093 [main:117] - GENERATED CALL = (fu1(-1281809544)).toInt().compareTo(-65)
2021-03-11 20:19:04,094 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5d664d50]]
2021-03-11 20:19:04,094 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079]
2021-03-11 20:19:04,094 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5d664d50]
2021-03-11 20:19:04,227 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:04,230 [main:117] - GENERATED CALL = (fu1(-1281809544)).toShort().times(-71)
2021-03-11 20:19:04,230 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1f7091a7]]
2021-03-11 20:19:04,230 [main:117] - GENERATED CALL = (fu1(-1281809544)).absoluteValue
2021-03-11 20:19:04,230 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4da18e2c]]
2021-03-11 20:19:04,230 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4da18e2c]
2021-03-11 20:19:04,362 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:04,365 [main:117] - GENERATED CALL = (fu1(-1281809544)).rem(99)
2021-03-11 20:19:04,365 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@237bb183]]
2021-03-11 20:19:04,365 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:04,365 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@237bb183]
2021-03-11 20:19:04,365 [main:117] - GENERATED CALL = (fu1(-1281809544)).toInt().takeLowestOneBit()
2021-03-11 20:19:04,365 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2ec5db]]
2021-03-11 20:19:04,365 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:04,366 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e2ec5db]
2021-03-11 20:19:04,366 [main:117] - GENERATED CALL = (fu1(-1281809544)).toInt().dec()
2021-03-11 20:19:04,366 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2195d1b]]
2021-03-11 20:19:04,366 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398]
2021-03-11 20:19:04,366 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2195d1b]
2021-03-11 20:19:04,366 [main:117] - GENERATED CALL = (fu1(-1281809544)).compareTo(fu1(-1281809544)).coerceAtMost(fu0(0))
2021-03-11 20:19:04,366 [main:114] - replacement of 0 of type Int is (fu1(-1281809544)).toInt().dec()
2021-03-11 20:19:04,514 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:04,515 [main:66] - Compilation checking started
2021-03-11 20:19:05,167 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by x // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = ""

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:05,170 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-11 20:19:05,170 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-11 20:19:05,170 [main:54] - Getting value of type String
2021-03-11 20:19:05,331 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:05,333 [main:58] - GENERATED VALUE OF TYPE String = "wbypc"
2021-03-11 20:19:05,334 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:05,999 [main:67] - randomType = HashMap<UByte, ULong?>
2021-03-11 20:19:06,130 [main:302] - generating value of type = HashMap<UByte, ULong?> false depth = 0
2021-03-11 20:19:06,276 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): HashMap<UByte, ULong?> = TODO()
2021-03-11 20:19:06,279 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): HashMap<UByte, ULong?> = TODO()
2021-03-11 20:19:06,419 [main:95] - GENERATED = LinkedHashMap<UByte, ULong?>()
2021-03-11 20:19:06,605 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:06,606 [main:78] - Generated call from random type = (LinkedHashMap<UByte, ULong?>()).size.toString(fu1(0))
2021-03-11 20:19:06,607 [main:106] - GETTING String from Int
2021-03-11 20:19:06,667 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]]
2021-03-11 20:19:06,667 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:06,667 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]
2021-03-11 20:19:06,830 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:06,833 [main:117] - GENERATED CALL = (fu1(-1281809544)).toChar().plus("xglca")
2021-03-11 20:19:06,833 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b417]]
2021-03-11 20:19:06,833 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:06,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b417]
2021-03-11 20:19:06,834 [main:117] - GENERATED CALL = (fu1(-1281809544)).toChar().titlecase()
2021-03-11 20:19:06,834 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:06,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:07,010 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:07,014 [main:117] - GENERATED CALL = (fu1(-1281809544)).toString(1361926884)
2021-03-11 20:19:07,014 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6335b]]
2021-03-11 20:19:07,014 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:07,014 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6335b]
2021-03-11 20:19:07,015 [main:117] - GENERATED CALL = (fu1(-1281809544)).toChar().lowercase()
2021-03-11 20:19:07,015 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:07,015 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf]
2021-03-11 20:19:07,198 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:19:07,201 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:07,201 [main:117] - GENERATED CALL = (fu1(-1281809544)).div(369091904632244392).toString(fu0(0))
2021-03-11 20:19:07,201 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]]
2021-03-11 20:19:07,201 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:07,201 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]
2021-03-11 20:19:07,202 [main:117] - GENERATED CALL = (fu1(-1281809544)).toChar().uppercase()
2021-03-11 20:19:07,202 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:07,202 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8]
2021-03-11 20:19:07,202 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:07,202 [main:117] - GENERATED CALL = (fu1(-1281809544)).toLong().toString(fu1(-1281809544))
2021-03-11 20:19:07,202 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:07,202 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:07,202 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:07,347 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:07,349 [main:117] - GENERATED CALL = (fu1(-1281809544)).toInt().toString(1984674708)
2021-03-11 20:19:07,349 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff8844e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]]
2021-03-11 20:19:07,349 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff8844e]
2021-03-11 20:19:07,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]
2021-03-11 20:19:07,350 [main:117] - GENERATED CALL = (fu1(-1281809544)).toByte().toString(fu0(1008340287))
2021-03-11 20:19:07,350 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:07,350 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398]
2021-03-11 20:19:07,350 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:07,350 [main:117] - GENERATED CALL = (fu1(-1281809544)).compareTo(fu0(0)).toString(fu0(0))
2021-03-11 20:19:07,350 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (fu1(-1281809544)).toByte().toString(fu0(1008340287))
2021-03-11 20:19:07,481 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:07,481 [main:66] - Compilation checking started
2021-03-11 20:19:08,146 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by x // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = ""

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:08,149 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:19:08,149 [main:50] - replacing c Continuation<*>
2021-03-11 20:19:08,149 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:19:08,305 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:19:08,458 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:08,462 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:08,992 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:19:09,141 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:09,146 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:09,452 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:19:09,600 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:09,605 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:10,143 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 20:19:10,278 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:19:10,282 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:19:10,713 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 20:19:10,851 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:19:10,854 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:19:11,293 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:19:11,293 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:19:11,293 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:11,293 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:11,293 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:11,293 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:19:11,743 [main:67] - randomType = Collection<Array<UByte>>
2021-03-11 20:19:11,745 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:11,794 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:11,794 [main:106] - GETTING Continuation<*> from KClass<C>
2021-03-11 20:19:11,807 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 20:19:11,820 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:11,821 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:11,821 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:19:11,821 [main:107] - replacing ("", String)
2021-03-11 20:19:11,821 [main:50] - replacing "" String
2021-03-11 20:19:11,821 [main:54] - Getting value of type String
2021-03-11 20:19:11,945 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:11,948 [main:58] - GENERATED VALUE OF TYPE String = "sxwxw"
2021-03-11 20:19:11,948 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:11,956 [main:67] - randomType = Kla7
2021-03-11 20:19:12,081 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 20:19:12,083 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 20:19:12,094 [main:106] - GETTING String from Int
2021-03-11 20:19:12,143 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b417]]
2021-03-11 20:19:12,143 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:12,144 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b417]
2021-03-11 20:19:12,144 [main:117] - GENERATED CALL = (fu1(0)).toChar().titlecase()
2021-03-11 20:19:12,144 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:12,144 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:12,144 [main:117] - GENERATED CALL = (fu1(0)).toString(fu0(1008340287))
2021-03-11 20:19:12,144 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:12,144 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf]
2021-03-11 20:19:12,270 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:19:12,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:12,272 [main:117] - GENERATED CALL = (fu1(0)).div(7407807597681740920).toString(fu1(-1281809544))
2021-03-11 20:19:12,272 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]]
2021-03-11 20:19:12,272 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:12,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]
2021-03-11 20:19:12,273 [main:117] - GENERATED CALL = (fu1(0)).toChar().uppercase()
2021-03-11 20:19:12,273 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]]
2021-03-11 20:19:12,273 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079]
2021-03-11 20:19:12,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]
2021-03-11 20:19:12,273 [main:117] - GENERATED CALL = (fu1(0)).toShort().toString(fu1(-1281809544))
2021-03-11 20:19:12,273 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]]
2021-03-11 20:19:12,273 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:12,273 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]
2021-03-11 20:19:12,399 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:12,402 [main:117] - GENERATED CALL = (fu1(0)).toChar().plus("manxr")
2021-03-11 20:19:12,402 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff8844e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]]
2021-03-11 20:19:12,402 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff8844e]
2021-03-11 20:19:12,402 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]
2021-03-11 20:19:12,402 [main:117] - GENERATED CALL = (fu1(0)).toByte().toString(fu1(-1281809544))
2021-03-11 20:19:12,402 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6335b]]
2021-03-11 20:19:12,402 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:12,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6335b]
2021-03-11 20:19:12,403 [main:117] - GENERATED CALL = (fu1(0)).toChar().lowercase()
2021-03-11 20:19:12,403 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:12,403 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8]
2021-03-11 20:19:12,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:12,403 [main:117] - GENERATED CALL = (fu1(0)).toLong().toString(fu1(-1281809544))
2021-03-11 20:19:12,403 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:12,403 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:12,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:12,404 [main:117] - GENERATED CALL = (fu1(0)).toInt().toString(fu0(1008340287))
2021-03-11 20:19:12,404 [main:114] - replacement of "" of type String is (fu1(0)).toChar().titlecase()
2021-03-11 20:19:12,535 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:12,536 [main:66] - Compilation checking started
2021-03-11 20:19:13,190 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by x // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:13,193 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:19:13,193 [main:50] - replacing c Continuation<*>
2021-03-11 20:19:13,193 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:19:13,358 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:19:13,501 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:13,504 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:13,983 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:19:14,110 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:14,113 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:14,420 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:19:14,555 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:14,558 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:15,016 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:15,016 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:15,016 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:15,016 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:19:15,171 [main:67] - randomType = Kla1?
2021-03-11 20:19:15,292 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:19:15,294 [main:112] - generating klass Kla1 text = class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}
2021-03-11 20:19:15,305 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:15,360 [main:106] - GETTING Continuation<*> from KClass<C>
2021-03-11 20:19:15,375 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 20:19:15,390 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:15,391 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:15,392 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:15,393 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:19:15,393 [main:107] - replacing (x, Kla0)
2021-03-11 20:19:15,393 [main:50] - replacing x Kla0
2021-03-11 20:19:15,393 [main:54] - Getting value of type Kla0
2021-03-11 20:19:15,522 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 20:19:15,524 [main:112] - generating klass Kla0 text = interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}
2021-03-11 20:19:15,803 [main:302] - generating value of type = Kla1 false depth = 2
2021-03-11 20:19:15,805 [main:112] - generating klass Kla1 text = class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}
2021-03-11 20:19:15,806 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla1()
2021-03-11 20:19:15,806 [main:61] - GENERATED IS CALL =true
2021-03-11 20:19:15,946 [main:67] - randomType = UInt
2021-03-11 20:19:16,078 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:19:16,121 [main:106] - GETTING Kla0 from Int
2021-03-11 20:19:16,171 [main:106] - GETTING Kla0 from Int
2021-03-11 20:19:16,172 [main:106] - GETTING Kla0 from Boolean
2021-03-11 20:19:16,180 [main:106] - GETTING Kla0 from KClass<C>
2021-03-11 20:19:16,188 [main:106] - GETTING Kla0 from Int
2021-03-11 20:19:16,189 [main:106] - GETTING Kla0 from Int
2021-03-11 20:19:16,189 [main:114] - replacement of x of type Kla0 is Kla1()
2021-03-11 20:19:16,313 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:19:16,314 [main:66] - Compilation checking started
2021-03-11 20:19:16,991 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:16,993 [main:107] - replacing ("\n", String)
2021-03-11 20:19:16,993 [main:50] - replacing "\n" String
2021-03-11 20:19:16,993 [main:54] - Getting value of type String
2021-03-11 20:19:17,121 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:17,123 [main:58] - GENERATED VALUE OF TYPE String = "xkbxl"
2021-03-11 20:19:17,123 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:17,260 [main:67] - randomType = Short
2021-03-11 20:19:17,383 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:19:17,422 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e4bd8b7]
2021-03-11 20:19:17,422 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]
2021-03-11 20:19:17,545 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:17,547 [main:78] - Generated call from random type = (-7778).toChar().plus("jwuli")
2021-03-11 20:19:17,548 [main:106] - GETTING String from Int
2021-03-11 20:19:17,580 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b417]]
2021-03-11 20:19:17,580 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:17,580 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b417]
2021-03-11 20:19:17,580 [main:117] - GENERATED CALL = (fu0(1008340287)).toChar().titlecase()
2021-03-11 20:19:17,580 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:17,580 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8]
2021-03-11 20:19:17,580 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:17,581 [main:117] - GENERATED CALL = (fu0(1008340287)).toLong().toString(fu0(0))
2021-03-11 20:19:17,581 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]]
2021-03-11 20:19:17,581 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:17,581 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]
2021-03-11 20:19:17,702 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:17,704 [main:117] - GENERATED CALL = (fu0(1008340287)).toChar().plus("anelx")
2021-03-11 20:19:17,704 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]]
2021-03-11 20:19:17,705 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:17,705 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]
2021-03-11 20:19:17,705 [main:117] - GENERATED CALL = (fu0(1008340287)).toChar().uppercase()
2021-03-11 20:19:17,705 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:17,705 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf]
2021-03-11 20:19:17,825 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:19:17,828 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:17,828 [main:117] - GENERATED CALL = (fu0(1008340287)).div(-818563151072335572).toString(fu1(-1281809544))
2021-03-11 20:19:17,828 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff8844e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]]
2021-03-11 20:19:17,828 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ff8844e]
2021-03-11 20:19:17,828 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542b3be9]
2021-03-11 20:19:17,949 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:17,952 [main:117] - GENERATED CALL = (fu0(1008340287)).toByte().toString(1194990730)
2021-03-11 20:19:17,952 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:17,952 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:17,952 [main:117] - GENERATED CALL = (fu0(1008340287)).toString(fu1(0))
2021-03-11 20:19:17,952 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:17,952 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:17,952 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:18,076 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:18,078 [main:117] - GENERATED CALL = (fu0(1008340287)).toInt().toString(1050197551)
2021-03-11 20:19:18,078 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:18,078 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398]
2021-03-11 20:19:18,199 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:18,201 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:18,202 [main:117] - GENERATED CALL = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))
2021-03-11 20:19:18,202 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]]
2021-03-11 20:19:18,202 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079]
2021-03-11 20:19:18,202 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]
2021-03-11 20:19:18,202 [main:117] - GENERATED CALL = (fu0(1008340287)).toShort().toString(fu1(0))
2021-03-11 20:19:18,202 [main:114] - replacement of "\n" of type String is (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))
2021-03-11 20:19:18,326 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:18,327 [main:66] - Compilation checking started
2021-03-11 20:19:18,913 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:18,915 [main:107] - replacing (prope2, Any?)
2021-03-11 20:19:18,915 [main:50] - replacing prope2 Any?
2021-03-11 20:19:18,915 [main:54] - Getting value of type Any?
2021-03-11 20:19:19,043 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:19,043 [main:58] - GENERATED VALUE OF TYPE Any? = "tcsdq"
2021-03-11 20:19:19,044 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:19,204 [main:67] - randomType = Kla2?
2021-03-11 20:19:19,327 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:19:19,330 [main:112] - generating klass Kla2 text = open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()
2021-03-11 20:19:19,475 [main:194] - Type params = []
2021-03-11 20:19:19,595 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 20:19:19,597 [main:112] - generating klass Kla0 text = interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}
2021-03-11 20:19:19,857 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-11 20:19:19,859 [main:112] - generating klass Kla1 text = class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}
2021-03-11 20:19:19,873 [main:106] - GETTING Any? from Int
2021-03-11 20:19:19,909 [main:106] - GETTING Any? from Int
2021-03-11 20:19:19,910 [main:106] - GETTING Any? from KClass<C>
2021-03-11 20:19:19,919 [main:106] - GETTING Any? from Int
2021-03-11 20:19:19,920 [main:106] - GETTING Any? from Int
2021-03-11 20:19:19,921 [main:106] - GETTING Any? from Boolean
2021-03-11 20:19:19,930 [main:114] - replacement of prope2 of type Any? is "tcsdq"
2021-03-11 20:19:20,071 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:19:20,071 [main:66] - Compilation checking started
2021-03-11 20:19:20,509 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this."tcsdq" = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:20,512 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:19:20,513 [main:50] - replacing c Continuation<*>
2021-03-11 20:19:20,513 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:19:20,638 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:19:20,769 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:20,772 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:21,210 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:19:21,340 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:21,343 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:21,615 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:19:21,746 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:21,749 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:22,194 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:22,194 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:22,194 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:19:22,194 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:19:22,774 [main:67] - randomType = Function1<MutableMap<Short, Boolean>, Kla7>
2021-03-11 20:19:22,775 [main:106] - GETTING Continuation<*> from KClass<C>
2021-03-11 20:19:22,787 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:22,836 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:22,837 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:22,838 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:19:22,839 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 20:19:22,850 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:19:22,850 [main:107] - replacing (prope4, Int)
2021-03-11 20:19:22,850 [main:50] - replacing prope4 Int
2021-03-11 20:19:22,851 [main:54] - Getting value of type Int
2021-03-11 20:19:22,972 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:22,974 [main:58] - GENERATED VALUE OF TYPE Int = 897725373
2021-03-11 20:19:22,974 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:23,242 [main:67] - randomType = Double?
2021-03-11 20:19:23,361 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:19:23,396 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5a5b2829]
2021-03-11 20:19:23,530 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:23,533 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@416faf16]
2021-03-11 20:19:23,533 [main:78] - Generated call from random type = (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits()
2021-03-11 20:19:23,533 [main:114] - replacement of prope4 of type Int is (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits()
2021-03-11 20:19:23,651 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:23,652 [main:66] - Compilation checking started
2021-03-11 20:19:24,363 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:24,365 [main:107] - replacing (isSuccess, Boolean)
2021-03-11 20:19:24,365 [main:50] - replacing isSuccess Boolean
2021-03-11 20:19:24,365 [main:54] - Getting value of type Boolean
2021-03-11 20:19:24,498 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:19:24,500 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:19:24,500 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:24,643 [main:67] - randomType = Kla8
2021-03-11 20:19:24,766 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 20:19:24,768 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:19:24,799 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla8[DeserializedSimpleFunctionDescriptor@7af447b6]
2021-03-11 20:19:24,928 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:24,929 [main:78] - Generated call from random type = (Kla8).equals("jtbsg")
2021-03-11 20:19:24,929 [main:114] - replacement of isSuccess of type Boolean is (Kla8).equals("jtbsg")
2021-03-11 20:19:25,054 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:25,055 [main:66] - Compilation checking started
2021-03-11 20:19:25,463 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.(Kla8).equals("jtbsg")) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:25,465 [main:107] - replacing (prope5, Boolean)
2021-03-11 20:19:25,465 [main:50] - replacing prope5 Boolean
2021-03-11 20:19:25,465 [main:54] - Getting value of type Boolean
2021-03-11 20:19:25,608 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:19:25,611 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:19:25,611 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:25,619 [main:67] - randomType = Kla3
2021-03-11 20:19:25,756 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 20:19:25,760 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-11 20:19:25,892 [main:194] - Type params = []
2021-03-11 20:19:26,013 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:19:26,143 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:26,146 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:26,428 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:19:26,559 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:26,562 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:26,992 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:26,992 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:27,010 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@449def31]
2021-03-11 20:19:27,144 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:27,144 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@608e7e46]
2021-03-11 20:19:27,301 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:19:27,304 [main:78] - Generated call from random type = (Kla3()).equals("muclu").or(true)
2021-03-11 20:19:27,304 [main:114] - replacement of prope5 of type Boolean is (Kla3()).equals("muclu").or(true)
2021-03-11 20:19:27,452 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:27,453 [main:66] - Compilation checking started
2021-03-11 20:19:27,826 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.(Kla3()).equals("muclu").or(true) = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:27,827 [main:107] - replacing (!prope5, Boolean)
2021-03-11 20:19:27,828 [main:50] - replacing !prope5 Boolean
2021-03-11 20:19:27,828 [main:54] - Getting value of type Boolean
2021-03-11 20:19:27,954 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:19:27,957 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:19:27,957 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:28,112 [main:67] - randomType = Short
2021-03-11 20:19:28,238 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:19:28,296 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5af50d9b]
2021-03-11 20:19:28,296 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7f206e59]
2021-03-11 20:19:28,417 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:28,417 [main:78] - Generated call from random type = (8124).toFloat().equals("mjlhc")
2021-03-11 20:19:28,417 [main:106] - GETTING Boolean from Boolean
2021-03-11 20:19:28,429 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6be13eeb]]
2021-03-11 20:19:28,429 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c]
2021-03-11 20:19:28,553 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:28,553 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6be13eeb]
2021-03-11 20:19:28,553 [main:117] - GENERATED CALL = (name != "box\$C").equals("esxiz").not()
2021-03-11 20:19:28,554 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29e0375f]]
2021-03-11 20:19:28,554 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c]
2021-03-11 20:19:28,685 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:28,686 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29e0375f]
2021-03-11 20:19:28,811 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:28,811 [main:117] - GENERATED CALL = (name != "box\$C").equals("fnnci").equals("vjvxb")
2021-03-11 20:19:28,811 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6be13eeb]]
2021-03-11 20:19:28,811 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6be13eeb]
2021-03-11 20:19:28,812 [main:117] - GENERATED CALL = (name != "box\$C").not()
2021-03-11 20:19:28,812 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@219f9031]]
2021-03-11 20:19:28,812 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@219f9031]
2021-03-11 20:19:28,812 [main:117] - GENERATED CALL = (name != "box\$C").and(name != "box\$C")
2021-03-11 20:19:28,812 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@608e7e46]]
2021-03-11 20:19:28,812 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@608e7e46]
2021-03-11 20:19:28,813 [main:117] - GENERATED CALL = (name != "box\$C").or(name != "box\$C")
2021-03-11 20:19:28,813 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29e0375f]]
2021-03-11 20:19:28,813 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29e0375f]
2021-03-11 20:19:28,954 [main:117] - GENERATED CALL = (name != "box\$C").equals(null)
2021-03-11 20:19:28,954 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@608e7e46]]
2021-03-11 20:19:28,954 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c]
2021-03-11 20:19:29,076 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:29,076 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@608e7e46]
2021-03-11 20:19:29,076 [main:117] - GENERATED CALL = (name != "box\$C").equals("gggxb").or(name != "box\$C")
2021-03-11 20:19:29,076 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@219f9031]]
2021-03-11 20:19:29,076 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c]
2021-03-11 20:19:29,202 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:29,203 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@219f9031]
2021-03-11 20:19:29,203 [main:117] - GENERATED CALL = (name != "box\$C").equals("yypmg").and(name != "box\$C")
2021-03-11 20:19:29,203 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f8922c0]]
2021-03-11 20:19:29,203 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@72d6f5c]
2021-03-11 20:19:29,324 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f8922c0]
2021-03-11 20:19:29,444 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:19:29,447 [main:117] - GENERATED CALL = (name != "box\$C").equals(null).xor(false)
2021-03-11 20:19:29,447 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f8922c0]]
2021-03-11 20:19:29,447 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f8922c0]
2021-03-11 20:19:29,447 [main:117] - GENERATED CALL = (name != "box\$C").xor(name != "box\$C")
2021-03-11 20:19:29,447 [main:114] - replacement of !prope5 of type Boolean is (8124).toFloat().equals("mjlhc")
2021-03-11 20:19:29,566 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:29,567 [main:66] - Compilation checking started
2021-03-11 20:19:30,181 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:30,183 [main:107] - replacing (1, Int)
2021-03-11 20:19:30,183 [main:50] - replacing 1 Int
2021-03-11 20:19:30,183 [main:54] - Getting value of type Int
2021-03-11 20:19:30,303 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:30,306 [main:58] - GENERATED VALUE OF TYPE Int = -1751076687
2021-03-11 20:19:30,306 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:30,314 [main:67] - randomType = Kla6
2021-03-11 20:19:30,437 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:19:30,439 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}
2021-03-11 20:19:30,448 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@47585871]
2021-03-11 20:19:30,573 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:30,574 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:19:30,574 [main:78] - Generated call from random type = (Kla6()).equals("sgoyx").compareTo(name != "box\$C")
2021-03-11 20:19:30,574 [main:106] - GETTING Int from Int
2021-03-11 20:19:30,635 [main:113] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cf24837]]
2021-03-11 20:19:30,635 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cf24837]
2021-03-11 20:19:30,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:30,759 [main:117] - GENERATED CALL = (fu0(1008340287)).shl(597062009)
2021-03-11 20:19:30,760 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2eca819f]]
2021-03-11 20:19:30,760 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079]
2021-03-11 20:19:30,760 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2eca819f]
2021-03-11 20:19:30,760 [main:117] - GENERATED CALL = (fu0(1008340287)).toShort().countTrailingZeroBits()
2021-03-11 20:19:30,760 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f83aaf]]
2021-03-11 20:19:30,760 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f83aaf]
2021-03-11 20:19:30,884 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:30,886 [main:117] - GENERATED CALL = (fu0(1008340287)).div(110)
2021-03-11 20:19:30,886 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@207d4b53]]
2021-03-11 20:19:30,886 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:30,887 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@207d4b53]
2021-03-11 20:19:30,887 [main:117] - GENERATED CALL = (fu0(1008340287)).toInt().inv()
2021-03-11 20:19:30,887 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c84e530]]
2021-03-11 20:19:30,887 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:30,887 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c84e530]
2021-03-11 20:19:30,887 [main:117] - GENERATED CALL = (fu0(1008340287)).toInt().xor(fu1(-1281809544))
2021-03-11 20:19:30,887 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@46273c1f]]
2021-03-11 20:19:30,887 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@46273c1f]
2021-03-11 20:19:31,012 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:31,015 [main:117] - GENERATED CALL = (fu0(1008340287)).rotateLeft(-1962200053)
2021-03-11 20:19:31,015 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5511d1a]]
2021-03-11 20:19:31,015 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8]
2021-03-11 20:19:31,015 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5511d1a]
2021-03-11 20:19:31,015 [main:117] - GENERATED CALL = (fu0(1008340287)).toLong().toInt()
2021-03-11 20:19:31,015 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@38e9293a]]
2021-03-11 20:19:31,015 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf]
2021-03-11 20:19:31,138 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:19:31,140 [main:117] - GENERATED CALL = (fu0(1008340287)).div(-2433068645886948643).sign
2021-03-11 20:19:31,140 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32160935]]
2021-03-11 20:19:31,140 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:31,140 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32160935]
2021-03-11 20:19:31,140 [main:117] - GENERATED CALL = (fu0(1008340287)).toInt().unaryMinus()
2021-03-11 20:19:31,141 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@dfb23a6]]
2021-03-11 20:19:31,141 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8]
2021-03-11 20:19:31,141 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@dfb23a6]
2021-03-11 20:19:31,265 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:31,268 [main:117] - GENERATED CALL = (fu0(1008340287)).toLong().compareTo(-92)
2021-03-11 20:19:31,268 [main:114] - replacement of 1 of type Int is (fu0(1008340287)).toLong().compareTo(-92)
2021-03-11 20:19:31,394 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:31,394 [main:66] - Compilation checking started
2021-03-11 20:19:31,987 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:31,990 [main:107] - replacing ({}, Function0<Unit>)
2021-03-11 20:19:31,990 [main:50] - replacing {} Function0<Unit>
2021-03-11 20:19:31,990 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:19:32,140 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:19:32,143 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:19:32,281 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:19:32,284 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:19:32,710 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:19:32,712 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:19:32,715 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:19:32,845 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:19:32,848 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:19:33,252 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:19:33,255 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 20:19:33,257 [main:302] - generating value of type = Any false depth = 9
2021-03-11 20:19:33,257 [main:95] - GENERATED = require(true, { "jalwe"})
2021-03-11 20:19:33,257 [main:95] - GENERATED = repeat(39951988, {a: Int -> require(true, { "jalwe"})})
2021-03-11 20:19:33,257 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
2021-03-11 20:19:33,257 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:34,790 [main:67] - randomType = Function2<Kla3, Triple<Kla5<Float?>?, Short, HashMap<Double, Function1<Int, Kla3>>?>, Kla4?>
2021-03-11 20:19:34,791 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:19:34,826 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:19:34,827 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:19:34,828 [main:106] - GETTING Function0<Unit> from KClass<C>
2021-03-11 20:19:34,839 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:19:34,840 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-11 20:19:34,853 [main:114] - replacement of {} of type Function0<Unit> is { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
2021-03-11 20:19:34,974 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:19:34,974 [main:66] - Compilation checking started
2021-03-11 20:19:35,613 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:35,615 [main:107] - replacing (prope2, Result<Any?>)
2021-03-11 20:19:35,615 [main:50] - replacing prope2 Result<Any?>
2021-03-11 20:19:35,615 [main:54] - Getting value of type Result<Any?>
2021-03-11 20:19:35,750 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 20:19:35,907 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:19:35,911 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:19:36,207 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 20:19:36,210 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:19:36,210 [main:95] - GENERATED = runCatching<Any?>({ "pijcz"})
2021-03-11 20:19:36,210 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "pijcz"})
2021-03-11 20:19:36,211 [main:61] - GENERATED IS CALL =true
2021-03-11 20:19:36,504 [main:67] - randomType = Function1<LinkedHashSet<Byte>, String>
2021-03-11 20:19:36,510 [main:106] - GETTING Result<Any?> from KClass<C>
2021-03-11 20:19:36,520 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:19:36,557 [main:106] - GETTING Result<Any?> from Boolean
2021-03-11 20:19:36,569 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:19:36,570 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:19:36,571 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:19:36,572 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "pijcz"})
2021-03-11 20:19:36,709 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:19:36,710 [main:66] - Compilation checking started
2021-03-11 20:19:37,407 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "pijcz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:37,410 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:19:37,410 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:19:37,410 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:19:37,570 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:19:37,578 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:19:38,324 [main:67] - randomType = Function1<Int, ArrayList<ArrayList<Byte?>?>>
2021-03-11 20:19:38,325 [main:106] - GETTING EmptyCoroutineContext from KClass<C>
2021-03-11 20:19:38,334 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:19:38,369 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:19:38,370 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:19:38,371 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:19:38,382 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:19:38,382 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:19:38,382 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-11 20:19:38,382 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-11 20:19:38,382 [main:54] - Getting value of type String
2021-03-11 20:19:38,504 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:38,506 [main:58] - GENERATED VALUE OF TYPE String = "dxrlx"
2021-03-11 20:19:38,506 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:38,511 [main:67] - randomType = Int
2021-03-11 20:19:38,633 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:38,670 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079]
2021-03-11 20:19:38,670 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]
2021-03-11 20:19:38,794 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:38,796 [main:78] - Generated call from random type = (1306924158).toShort().toString(-781526908)
2021-03-11 20:19:38,796 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (1306924158).toShort().toString(-781526908)
2021-03-11 20:19:38,928 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:38,928 [main:66] - Compilation checking started
2021-03-11 20:19:39,599 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "pijcz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((1306924158).toShort().toString(-781526908) + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:39,601 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:19:39,601 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:19:39,601 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:19:39,737 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:19:39,743 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:19:39,910 [main:67] - randomType = UInt
2021-03-11 20:19:40,031 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:19:40,066 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:19:40,111 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 20:19:40,123 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:19:40,124 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:19:40,125 [main:106] - GETTING EmptyCoroutineContext from KClass<C>
2021-03-11 20:19:40,133 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:19:40,133 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:19:40,133 [main:107] - replacing (false, Boolean)
2021-03-11 20:19:40,133 [main:50] - replacing false Boolean
2021-03-11 20:19:40,133 [main:54] - Getting value of type Boolean
2021-03-11 20:19:40,255 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:19:40,257 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:19:40,258 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:40,548 [main:67] - randomType = Function1<String, ArrayList<Kla7>>
2021-03-11 20:19:40,550 [main:106] - GETTING Boolean from Int
2021-03-11 20:19:40,596 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5af50d9b], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4829f49a]]
2021-03-11 20:19:40,596 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5af50d9b]
2021-03-11 20:19:40,596 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4829f49a]
2021-03-11 20:19:40,596 [main:117] - GENERATED CALL = (fu0(0)).toFloat().isNaN()
2021-03-11 20:19:40,596 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a810e7], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@77b16c58]]
2021-03-11 20:19:40,596 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a810e7]
2021-03-11 20:19:40,725 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:40,727 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@77b16c58]
2021-03-11 20:19:40,727 [main:117] - GENERATED CALL = (fu0(0)).rangeTo(84).isEmpty()
2021-03-11 20:19:40,727 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55851bc0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1e22c706]]
2021-03-11 20:19:40,727 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55851bc0]
2021-03-11 20:19:40,728 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1e22c706]
2021-03-11 20:19:40,851 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:40,851 [main:117] - GENERATED CALL = (fu0(0)).toDouble().equals("mlksg")
2021-03-11 20:19:40,851 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a810e7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fe34d9d]]
2021-03-11 20:19:40,851 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a810e7]
2021-03-11 20:19:40,972 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:40,974 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fe34d9d]
2021-03-11 20:19:41,096 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:41,098 [main:117] - GENERATED CALL = (fu0(0)).rangeTo(-36).contains(-1218142922)
2021-03-11 20:19:41,099 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22c7bba]]
2021-03-11 20:19:41,099 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:41,099 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22c7bba]
2021-03-11 20:19:41,099 [main:117] - GENERATED CALL = (fu0(0)).toChar().isDefined()
2021-03-11 20:19:41,099 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ea95cf]]
2021-03-11 20:19:41,099 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:41,099 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ea95cf]
2021-03-11 20:19:41,099 [main:117] - GENERATED CALL = (fu0(0)).toChar().isLetterOrDigit()
2021-03-11 20:19:41,099 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5af50d9b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7f206e59]]
2021-03-11 20:19:41,099 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5af50d9b]
2021-03-11 20:19:41,099 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7f206e59]
2021-03-11 20:19:41,224 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:41,224 [main:117] - GENERATED CALL = (fu0(0)).toFloat().equals("cihmh")
2021-03-11 20:19:41,224 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55851bc0], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@563f000f]]
2021-03-11 20:19:41,224 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55851bc0]
2021-03-11 20:19:41,224 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@563f000f]
2021-03-11 20:19:41,224 [main:117] - GENERATED CALL = (fu0(0)).toDouble().isFinite()
2021-03-11 20:19:41,224 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8f02a4]]
2021-03-11 20:19:41,224 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:41,224 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8f02a4]
2021-03-11 20:19:41,225 [main:117] - GENERATED CALL = (fu0(0)).toChar().isLowSurrogate()
2021-03-11 20:19:41,225 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@272a2aa7], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@608e7e46]]
2021-03-11 20:19:41,225 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@272a2aa7]
2021-03-11 20:19:41,347 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:19:41,348 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@608e7e46]
2021-03-11 20:19:41,498 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:19:41,501 [main:117] - GENERATED CALL = (fu0(0)).equals("xfthy").or(true)
2021-03-11 20:19:41,501 [main:114] - replacement of false of type Boolean is (fu0(0)).toDouble().equals("mlksg")
2021-03-11 20:19:41,626 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:41,626 [main:66] - Compilation checking started
2021-03-11 20:19:42,221 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "pijcz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = (fu0(0)).toDouble().equals("mlksg")

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((1306924158).toShort().toString(-781526908) + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:42,223 [main:107] - replacing (x, Continuation<String>)
2021-03-11 20:19:42,223 [main:50] - replacing x Continuation<String>
2021-03-11 20:19:42,223 [main:54] - Getting value of type Continuation<String>
2021-03-11 20:19:42,384 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-11 20:19:42,519 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 20:19:42,524 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 20:19:42,960 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:19:43,103 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:43,107 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:43,432 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:19:43,569 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:43,572 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:43,988 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 20:19:44,122 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:19:44,126 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:19:44,545 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:19:44,545 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:19:44,545 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:19:44,545 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 20:19:44,545 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-11 20:19:44,555 [main:67] - randomType = Kla1
2021-03-11 20:19:44,675 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:19:44,678 [main:112] - generating klass Kla1 text = class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}
2021-03-11 20:19:44,687 [main:106] - GETTING Continuation<String> from Boolean
2021-03-11 20:19:44,697 [main:106] - GETTING Continuation<String> from Int
2021-03-11 20:19:44,731 [main:106] - GETTING Continuation<String> from Int
2021-03-11 20:19:44,732 [main:106] - GETTING Continuation<String> from KClass<C>
2021-03-11 20:19:44,742 [main:106] - GETTING Continuation<String> from Int
2021-03-11 20:19:44,743 [main:106] - GETTING Continuation<String> from Int
2021-03-11 20:19:44,743 [main:111] - Cant find and generate replacement for x type Continuation<String>
2021-03-11 20:19:44,743 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n"), String)
2021-03-11 20:19:44,743 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n") String
2021-03-11 20:19:44,743 [main:54] - Getting value of type String
2021-03-11 20:19:44,864 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:44,866 [main:58] - GENERATED VALUE OF TYPE String = "iixrg"
2021-03-11 20:19:44,866 [main:61] - GENERATED IS CALL =false
2021-03-11 20:19:44,876 [main:67] - randomType = Kla0
2021-03-11 20:19:44,877 [main:106] - GETTING String from Int
2021-03-11 20:19:44,910 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:44,910 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@12e3b398]
2021-03-11 20:19:44,911 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:44,911 [main:117] - GENERATED CALL = (fu1(0)).compareTo(fu1(0)).toString(fu1(0))
2021-03-11 20:19:44,911 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6335b]]
2021-03-11 20:19:44,911 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:44,911 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6335b]
2021-03-11 20:19:44,911 [main:117] - GENERATED CALL = (fu1(0)).toChar().lowercase()
2021-03-11 20:19:44,911 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]]
2021-03-11 20:19:44,911 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50121079]
2021-03-11 20:19:44,911 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d85ff88]
2021-03-11 20:19:45,037 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:45,039 [main:117] - GENERATED CALL = (fu1(0)).toShort().toString(-1579407608)
2021-03-11 20:19:45,039 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b417]]
2021-03-11 20:19:45,039 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:45,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b417]
2021-03-11 20:19:45,040 [main:117] - GENERATED CALL = (fu1(0)).toChar().titlecase()
2021-03-11 20:19:45,040 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:45,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:45,040 [main:117] - GENERATED CALL = (fu1(0)).toString(fu0(1008340287))
2021-03-11 20:19:45,040 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]]
2021-03-11 20:19:45,040 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:45,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb9b820]
2021-03-11 20:19:45,041 [main:117] - GENERATED CALL = (fu1(0)).toChar().uppercase()
2021-03-11 20:19:45,041 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]]
2021-03-11 20:19:45,041 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@511caa26]
2021-03-11 20:19:45,041 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64599229]
2021-03-11 20:19:45,189 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:19:45,192 [main:117] - GENERATED CALL = (fu1(0)).toChar().plus("tloxe")
2021-03-11 20:19:45,192 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:45,192 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@189c55bf]
2021-03-11 20:19:45,314 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:19:45,317 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:45,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:19:45,440 [main:117] - GENERATED CALL = (fu1(0)).div(2317105228208780708).toString(-2137950257)
2021-03-11 20:19:45,440 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]]
2021-03-11 20:19:45,440 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@365ebc58]
2021-03-11 20:19:45,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b79ee80]
2021-03-11 20:19:45,440 [main:117] - GENERATED CALL = (fu1(0)).toInt().toString(fu0(0))
2021-03-11 20:19:45,440 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]]
2021-03-11 20:19:45,440 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@67b756b8]
2021-03-11 20:19:45,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16f23f22]
2021-03-11 20:19:45,441 [main:117] - GENERATED CALL = (fu1(0)).toLong().toString(fu1(0))
2021-03-11 20:19:45,441 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n") of type String is "iixrg"
2021-03-11 20:19:45,562 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:19:45,562 [main:66] - Compilation checking started
2021-03-11 20:19:46,158 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "pijcz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("iixrg") }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = (fu0(0)).toDouble().equals("mlksg")

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((1306924158).toShort().toString(-781526908) + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:46,160 [main:107] - replacing ((fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions, IntRange)
2021-03-11 20:19:46,160 [main:50] - replacing (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions IntRange
2021-03-11 20:19:46,160 [main:54] - Getting value of type IntRange
2021-03-11 20:19:46,285 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 20:19:46,424 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 20:19:46,429 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 20:19:46,841 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:19:46,843 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:19:46,846 [main:95] - GENERATED = IntRange(-521344096, 2100558137)
2021-03-11 20:19:46,846 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-521344096, 2100558137)
2021-03-11 20:19:46,846 [main:61] - GENERATED IS CALL =true
2021-03-11 20:19:46,994 [main:67] - randomType = ArrayList<Kla4>
2021-03-11 20:19:47,135 [main:302] - generating value of type = ArrayList<Kla4> false depth = 0
2021-03-11 20:19:47,263 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Kla4> = TODO()
2021-03-11 20:19:47,266 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Kla4> = TODO()
2021-03-11 20:19:47,393 [main:95] - GENERATED = ArrayList<Kla4>()
2021-03-11 20:19:47,533 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a810e7]
2021-03-11 20:19:47,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:47,656 [main:78] - Generated call from random type = (ArrayList<Kla4>()).size.rangeTo(111)
2021-03-11 20:19:47,657 [main:106] - GETTING IntRange from Boolean
2021-03-11 20:19:47,667 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a810e7]]
2021-03-11 20:19:47,667 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:19:47,667 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a810e7]
2021-03-11 20:19:47,789 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:47,791 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").rangeTo(-59)
2021-03-11 20:19:47,792 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4d5e7334]]
2021-03-11 20:19:47,792 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@742ff968]
2021-03-11 20:19:47,792 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4d5e7334]
2021-03-11 20:19:47,912 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:19:47,915 [main:117] - GENERATED CALL = (name != "box\$C").compareTo(name != "box\$C").until(-5)
2021-03-11 20:19:47,915 [main:114] - replacement of (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions of type IntRange is (name != "box\$C").compareTo(name != "box\$C").rangeTo(-59)
2021-03-11 20:19:48,036 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:48,036 [main:66] - Compilation checking started
2021-03-11 20:19:48,426 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "pijcz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("iixrg") }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = (fu0(0)).toDouble().equals("mlksg")

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (name != "box\$C").compareTo(name != "box\$C").rangeTo(-59)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((1306924158).toShort().toString(-781526908) + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:48,428 [main:107] - replacing (let(x), Unit?)
2021-03-11 20:19:48,428 [main:50] - replacing let(x) Unit?
2021-03-11 20:19:48,428 [main:54] - Getting value of type Unit?
2021-03-11 20:19:48,548 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:19:48,676 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:19:48,680 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:19:48,965 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 20:19:48,967 [main:95] - GENERATED = check(false)
2021-03-11 20:19:48,967 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false)
2021-03-11 20:19:48,967 [main:61] - GENERATED IS CALL =true
2021-03-11 20:19:49,251 [main:67] - randomType = Array<String?>
2021-03-11 20:19:49,377 [main:302] - generating value of type = Array<String?> false depth = 0
2021-03-11 20:19:49,506 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String?): Array<String?> = TODO()
2021-03-11 20:19:49,510 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String?): Array<String?> = TODO()
2021-03-11 20:19:49,911 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:19:49,913 [main:302] - generating value of type = Function1<Int, String?> false depth = 3
2021-03-11 20:19:49,916 [main:302] - generating value of type = String true depth = 4
2021-03-11 20:19:49,918 [main:95] - GENERATED = Array<String?>(429111695, {a: Int -> "odqdj"})
2021-03-11 20:19:49,931 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.String?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@4fb73543]
2021-03-11 20:19:49,931 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3bddb025]
2021-03-11 20:19:50,052 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 20:19:50,054 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:19:50,060 [main:78] - Generated call from random type = (Array<String?>(429111695, {a: Int -> "odqdj"})).iterator().forEach({a: T -> println()})
2021-03-11 20:19:50,061 [main:106] - GETTING Unit? from Int
2021-03-11 20:19:50,106 [main:106] - GETTING Unit? from Int
2021-03-11 20:19:50,107 [main:106] - GETTING Unit? from Int
2021-03-11 20:19:50,108 [main:106] - GETTING Unit? from Boolean
2021-03-11 20:19:50,121 [main:106] - GETTING Unit? from KClass<C>
2021-03-11 20:19:50,134 [main:106] - GETTING Unit? from Int
2021-03-11 20:19:50,134 [main:114] - replacement of let(x) of type Unit? is (Array<String?>(429111695, {a: Int -> "odqdj"})).iterator().forEach({a: T -> println()})
2021-03-11 20:19:50,255 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:19:50,256 [main:66] - Compilation checking started
2021-03-11 20:19:50,667 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.(Array<String?>(429111695, {a: Int -> "odqdj"})).iterator().forEach({a: T -> println()})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "pijcz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("iixrg") }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = (fu0(0)).toDouble().equals("mlksg")

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((1306924158).toShort().toString(-781526908) + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:50,670 [main:107] - replacing (this, Kla4)
2021-03-11 20:19:50,670 [main:50] - replacing this Kla4
2021-03-11 20:19:50,670 [main:54] - Getting value of type Kla4
2021-03-11 20:19:50,850 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 20:19:50,853 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = runCatching<Any?>({ "pijcz"}).getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-11 20:19:50,853 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 20:19:50,853 [main:61] - GENERATED IS CALL =true
2021-03-11 20:19:50,862 [main:67] - randomType = Kla0
2021-03-11 20:19:50,863 [main:106] - GETTING Kla4 from Boolean
2021-03-11 20:19:50,877 [main:106] - GETTING Kla4 from KClass<C>
2021-03-11 20:19:50,890 [main:106] - GETTING Kla4 from Int
2021-03-11 20:19:50,965 [main:106] - GETTING Kla4 from Int
2021-03-11 20:19:50,966 [main:106] - GETTING Kla4 from Int
2021-03-11 20:19:50,966 [main:106] - GETTING Kla4 from Int
2021-03-11 20:19:50,967 [main:114] - replacement of this of type Kla4 is Kla4()
2021-03-11 20:19:51,105 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:19:51,105 [main:66] - Compilation checking started
2021-03-11 20:19:51,811 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    class C

    val name = C::class.java.getSimpleName()
    if (name != "box\$C" && name != "C") return "Fail: $name"

    return "OK"
}

fun fu0(x: Int): Int {
    x fu1 { check(false, { "kufpt"})}

    return 256458983
}

fun fu1(x: Int): Int {
    x fu1 {
        return@fu1
    }

    return 0
}

infix fun Int.fu1(x: () -> Unit) {}

fun box875(): String {
    fu0(0)
    fu1(0)

    return "OK"
}

suspend fun fu2(v: String): String = suspendCoroutineUninterceptedOrReturn { x ->
    prope0.fu10(x)
    x.resume(v)
    COROUTINE_SUSPENDED
}

interface Kla0 {
    suspend fun fu6(): String

    suspend fun fu7(): String
}

class Kla1 : Kla0 {
    override suspend fun fu6(): String = fu2("OK")

    override suspend fun fu7(): String {
        fu2("FAIL 2")
        return "OK"
    }
}

open class Kla2(val x: Kla0) : Kla0 by Kla1() // open override suspend fun suspendHere() = x.suspendHere()

fun fu3(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

fun box308(): String {
    var prope2 = (fu1(0)).toChar().titlecase()

    fu3 {
        prope2 = Kla2(Kla1()).fu6()
    }
    prope0.fu11("suspendHere")
    prope0.fu11("suspendHere\$suspendImpl")

    if ((fu0(1008340287)).toChar().lowercase() != "OK") return "FAIL 1"

    fu3 {
        prope2 = Kla2(Kla1()).fu7()
    }
    prope0.fu12("suspendHereNoTailCall")
    prope0.fu11("suspendHereNoTailCall\$suspendImpl")

    return prope2
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla4().prope2 = runCatching<Any?>({ "pijcz"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu8(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("iixrg") }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error((fu1(-1281809544)).toByte().toString(fu0(1008340287)) + " has no state-machine " +
                prope3.joinToString(separator = (fu0(1008340287)).compareTo(-1218778877).toString(fu0(1008340287))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = (fu1(-1281809544)).toInt().dec()
    var prope5 = (fu0(0)).toDouble().equals("mlksg")

    var prope6: () -> Unit = {}

    fun fu13() {
        prope4 = 0
        prope5 = false
        prope6 = { repeat(39951988, {a: Int -> require(true, { "jalwe"})})}
    }

    suspend fun fu6() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu0(1008340287)).toLong().compareTo(-92)..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (0.5034393596709728)?.compareTo(-102).countTrailingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((1306924158).toShort().toString(-781526908) + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && (8124).toFloat().equals("mjlhc")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:19:51,815 [main:107] - replacing ("suspendHereNoTailCall\$suspendImpl", String)
2021-03-11 20:19:51,815 [main:50] - replacing "suspendHereNoTailCall\$suspendImpl" String
2021-03-11 20:19:51,815 [main:54] - Getting value of type String
