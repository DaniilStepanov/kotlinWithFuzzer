2021-03-12 08:49:32,228 [main:66] - Compilation checking started
2021-03-12 08:49:34,164 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:34,166 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:34,168 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:49:34,180 [main:66] - Compilation checking started
2021-03-12 08:49:35,107 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En = En.C): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}
2021-03-12 08:49:35,108 [main:50] - replacing x: En En
2021-03-12 08:49:35,108 [main:54] - Getting value of type En
2021-03-12 08:49:35,314 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:35,316 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:35,316 [main:58] - GENERATED VALUE OF TYPE En = En.B
2021-03-12 08:49:35,317 [main:61] - GENERATED IS CALL =false
2021-03-12 08:49:35,323 [main:67] - randomType = En
2021-03-12 08:49:35,522 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:35,523 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:35,986 [main:106] - GETTING En from En
2021-03-12 08:49:36,080 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:49:36,082 [main:66] - Compilation checking started
2021-03-12 08:49:36,878 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En = En.C): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En = En.B): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}
2021-03-12 08:49:36,878 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:36,879 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:36,880 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:49:36,880 [main:66] - Compilation checking started
2021-03-12 08:49:37,573 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En = En.C): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En = En.B): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En = En.B): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}
2021-03-12 08:49:37,574 [main:50] - replacing val x: En En
2021-03-12 08:49:37,574 [main:54] - Getting value of type En
2021-03-12 08:49:37,818 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:37,819 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:37,820 [main:58] - GENERATED VALUE OF TYPE En = En.B
2021-03-12 08:49:37,821 [main:61] - GENERATED IS CALL =false
2021-03-12 08:49:38,530 [main:67] - randomType = Function2<ArrayDeque<Short?>, Z2, Z2?>
2021-03-12 08:49:38,531 [main:106] - GETTING En from En
2021-03-12 08:49:38,582 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:49:38,583 [main:66] - Compilation checking started
2021-03-12 08:49:38,928 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En = x)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En = En.C): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En = En.B): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En = En.B): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}
2021-03-12 08:49:38,929 [main:50] - replacing val z: Z1 Z1
2021-03-12 08:49:38,929 [main:54] - Getting value of type Z1
2021-03-12 08:49:39,057 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:49:39,058 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:39,209 [main:194] - Type params = []
2021-03-12 08:49:39,407 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:49:39,408 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:39,410 [main:58] - GENERATED VALUE OF TYPE Z1 = Z1(En.N)
2021-03-12 08:49:39,411 [main:61] - GENERATED IS CALL =true
2021-03-12 08:49:39,414 [main:67] - randomType = En
2021-03-12 08:49:39,615 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:39,616 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:39,672 [main:106] - GETTING Z1 from En
2021-03-12 08:49:39,707 [main:106] - GETTING Z1 from En
2021-03-12 08:49:39,708 [main:106] - GETTING Z1 from En
2021-03-12 08:49:39,709 [main:106] - GETTING Z1 from En
2021-03-12 08:49:39,710 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:49:39,710 [main:66] - Compilation checking started
2021-03-12 08:49:40,280 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1 = Z1(En.N))
inline class ZN(val z: Z1?)

fun wrap1(x: En = En.C): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En = En.B): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En = En.B): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}
2021-03-12 08:49:40,281 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:49:40,282 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:40,409 [main:194] - Type params = []
2021-03-12 08:49:40,573 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:49:40,574 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:40,575 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:49:40,576 [main:66] - Compilation checking started
2021-03-12 08:49:41,141 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1 = Z1(En.N))
inline class ZN(val z: Z1? = Z1(En.N))

fun wrap1(x: En = En.C): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En = En.B): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En = En.B): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}
2021-03-12 08:49:41,430 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:41,431 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:41,564 [main:194] - Type params = []
2021-03-12 08:49:41,702 [main:302] - generating value of type = En false depth = 1
2021-03-12 08:49:41,703 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:41,704 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:49:41,827 [main:194] - Type params = []
2021-03-12 08:49:41,994 [main:302] - generating value of type = Z1 false depth = 1
2021-03-12 08:49:41,995 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:42,111 [main:194] - Type params = []
2021-03-12 08:49:42,268 [main:302] - generating value of type = En false depth = 3
2021-03-12 08:49:42,268 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:42,270 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:49:42,388 [main:194] - Type params = []
2021-03-12 08:49:42,560 [main:302] - generating value of type = Z1 false depth = 1
2021-03-12 08:49:42,561 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:42,712 [main:194] - Type params = []
2021-03-12 08:49:42,815 [main:302] - generating value of type = En false depth = 3
2021-03-12 08:49:42,815 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:42,816 [main:112] - generating klass N text = N,
2021-03-12 08:49:42,817 [main:112] - generating klass A text = A,
2021-03-12 08:49:42,817 [main:112] - generating klass B text = B,
2021-03-12 08:49:42,817 [main:112] - generating klass C text = C
2021-03-12 08:49:43,044 [main:43] - GENERATING CALL OF fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
2021-03-12 08:49:43,045 [main:61] - WITHOUT TYPE PARAMS = fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
2021-03-12 08:49:43,169 [main:302] - generating value of type = En false depth = 1
2021-03-12 08:49:43,170 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:43,171 [main:95] - GENERATED = wrap1(En.N)
2021-03-12 08:49:43,303 [main:43] - GENERATING CALL OF fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
2021-03-12 08:49:43,304 [main:61] - WITHOUT TYPE PARAMS = fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
2021-03-12 08:49:43,425 [main:302] - generating value of type = En false depth = 1
2021-03-12 08:49:43,426 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:43,426 [main:95] - GENERATED = wrap2(En.C)
2021-03-12 08:49:43,527 [main:43] - GENERATING CALL OF fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))
2021-03-12 08:49:43,528 [main:61] - WITHOUT TYPE PARAMS = fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))
2021-03-12 08:49:43,685 [main:302] - generating value of type = En false depth = 1
2021-03-12 08:49:43,686 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:43,686 [main:95] - GENERATED = wrapN(En.A)
2021-03-12 08:49:43,804 [main:45] - Trying to change 66 nodes
2021-03-12 08:49:43,808 [main:53] - replacing (a, En)
2021-03-12 08:49:43,808 [main:50] - replacing a En
2021-03-12 08:49:43,808 [main:54] - Getting value of type En
2021-03-12 08:49:43,915 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:43,916 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:43,916 [main:58] - GENERATED VALUE OF TYPE En = En.B
2021-03-12 08:49:43,916 [main:61] - GENERATED IS CALL =false
2021-03-12 08:49:44,173 [main:67] - randomType = ArrayDeque<Byte>
2021-03-12 08:49:44,270 [main:302] - generating value of type = ArrayDeque<Byte> false depth = 0
2021-03-12 08:49:44,432 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Byte> = TODO()
2021-03-12 08:49:44,436 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Byte> = TODO()
2021-03-12 08:49:44,570 [main:95] - GENERATED = ArrayDeque<Byte>()
2021-03-12 08:49:44,847 [main:106] - GETTING En from En
2021-03-12 08:49:44,884 [main:61] - replacement of a of type En is En.B
2021-03-12 08:49:44,991 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:49:44,992 [main:66] - Compilation checking started
2021-03-12 08:49:45,430 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:45,432 [main:53] - replacing (En.N, En)
2021-03-12 08:49:45,432 [main:50] - replacing En.N En
2021-03-12 08:49:45,432 [main:54] - Getting value of type En
2021-03-12 08:49:45,528 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:45,528 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:45,528 [main:58] - GENERATED VALUE OF TYPE En = En.N
2021-03-12 08:49:45,529 [main:61] - GENERATED IS CALL =false
2021-03-12 08:49:45,644 [main:67] - randomType = ULong
2021-03-12 08:49:45,749 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:49:45,806 [main:106] - GETTING En from Z2?
2021-03-12 08:49:45,814 [main:113] - Case = [public final val z: Z1 defined in Z2[PropertyDescriptorImpl@6dd6f94], public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:49:45,815 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).z.x
2021-03-12 08:49:45,815 [main:61] - replacement of En.N of type En is (wrap2(Z1(En.B).x)).z.x
2021-03-12 08:49:45,915 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:49:45,915 [main:66] - Compilation checking started
2021-03-12 08:49:46,201 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = (wrap2(Z1(En.B).x)).z.x
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:46,203 [main:53] - replacing (AssertionError(), AssertionError)
2021-03-12 08:49:46,204 [main:50] - replacing AssertionError() AssertionError
2021-03-12 08:49:46,204 [main:54] - Getting value of type AssertionError
2021-03-12 08:49:46,340 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-12 08:49:46,466 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.Any?): AssertionError = TODO()
2021-03-12 08:49:46,468 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.Any?): AssertionError = TODO()
2021-03-12 08:49:46,681 [main:95] - GENERATED = AssertionError(null)
2021-03-12 08:49:46,681 [main:58] - GENERATED VALUE OF TYPE AssertionError = AssertionError(null)
2021-03-12 08:49:46,681 [main:61] - GENERATED IS CALL =true
2021-03-12 08:49:46,926 [main:67] - randomType = Char?
2021-03-12 08:49:47,023 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:49:47,078 [main:106] - GETTING AssertionError from En
2021-03-12 08:49:47,114 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:49:47,123 [main:106] - GETTING AssertionError from Z1
2021-03-12 08:49:47,132 [main:106] - GETTING AssertionError from ZN?
2021-03-12 08:49:47,141 [main:106] - GETTING AssertionError from En
2021-03-12 08:49:47,143 [main:106] - GETTING AssertionError from Z2?
2021-03-12 08:49:47,152 [main:106] - GETTING AssertionError from En
2021-03-12 08:49:47,154 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:49:47,154 [main:61] - replacement of AssertionError() of type AssertionError is AssertionError(null)
2021-03-12 08:49:47,256 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:49:47,257 [main:66] - Compilation checking started
2021-03-12 08:49:47,694 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:47,695 [main:53] - replacing (Z1(x), Z1)
2021-03-12 08:49:47,696 [main:50] - replacing Z1(x) Z1
2021-03-12 08:49:47,696 [main:54] - Getting value of type Z1
2021-03-12 08:49:47,794 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:49:47,795 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:47,915 [main:194] - Type params = []
2021-03-12 08:49:48,024 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:49:48,025 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:48,026 [main:58] - GENERATED VALUE OF TYPE Z1 = Z1(En.B)
2021-03-12 08:49:48,026 [main:61] - GENERATED IS CALL =true
2021-03-12 08:49:48,426 [main:67] - randomType = LinkedHashSet<Long>
2021-03-12 08:49:48,521 [main:302] - generating value of type = LinkedHashSet<Long> false depth = 0
2021-03-12 08:49:48,624 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Long): LkedHashSet<Long> = TODO()
2021-03-12 08:49:48,626 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Long): LkedHashSet<Long> = TODO()
2021-03-12 08:49:48,732 [main:302] - generating value of type = Long true depth = 3
2021-03-12 08:49:48,733 [main:95] - GENERATED = linkedSetOf<Long>(-8754539395425254787)
2021-03-12 08:49:48,950 [main:106] - GETTING Z1 from Z2?
2021-03-12 08:49:48,959 [main:113] - Case = [public final val z: Z1 defined in Z2[PropertyDescriptorImpl@6dd6f94]]
2021-03-12 08:49:48,960 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).z
2021-03-12 08:49:48,960 [main:61] - replacement of Z1(x) of type Z1 is Z1(En.B)
2021-03-12 08:49:49,070 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:49:49,071 [main:66] - Compilation checking started
2021-03-12 08:49:49,476 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:49,478 [main:53] - replacing (a, En)
2021-03-12 08:49:49,479 [main:50] - replacing a En
2021-03-12 08:49:49,479 [main:54] - Getting value of type En
2021-03-12 08:49:49,591 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:49,591 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:49,592 [main:58] - GENERATED VALUE OF TYPE En = En.C
2021-03-12 08:49:49,592 [main:61] - GENERATED IS CALL =false
2021-03-12 08:49:49,691 [main:67] - randomType = Byte
2021-03-12 08:49:49,785 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:49:49,847 [main:106] - GETTING En from En
2021-03-12 08:49:49,893 [main:61] - replacement of a of type En is n
2021-03-12 08:49:49,990 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:49:49,991 [main:66] - Compilation checking started
2021-03-12 08:49:50,431 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(n) == null) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:50,434 [main:53] - replacing (wrapN(n), ZN?)
2021-03-12 08:49:50,434 [main:50] - replacing wrapN(n) ZN?
2021-03-12 08:49:50,434 [main:54] - Getting value of type ZN?
2021-03-12 08:49:50,539 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:49:50,540 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:49:50,637 [main:194] - Type params = []
2021-03-12 08:49:50,735 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:49:50,735 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:50,839 [main:194] - Type params = []
2021-03-12 08:49:50,930 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:49:50,930 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:50,931 [main:58] - GENERATED VALUE OF TYPE ZN? = ZN(Z1(En.B))
2021-03-12 08:49:50,931 [main:61] - GENERATED IS CALL =true
2021-03-12 08:49:51,028 [main:67] - randomType = ULong
2021-03-12 08:49:51,120 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:49:51,169 [main:106] - GETTING ZN? from Z1?
2021-03-12 08:49:51,178 [main:106] - GETTING ZN? from Z1?
2021-03-12 08:49:51,179 [main:106] - GETTING ZN? from ZN?
2021-03-12 08:49:51,188 [main:106] - GETTING ZN? from Z2?
2021-03-12 08:49:51,197 [main:106] - GETTING ZN? from En
2021-03-12 08:49:51,232 [main:106] - GETTING ZN? from En
2021-03-12 08:49:51,233 [main:106] - GETTING ZN? from Z1
2021-03-12 08:49:51,241 [main:106] - GETTING ZN? from En
2021-03-12 08:49:51,241 [main:61] - replacement of wrapN(n) of type ZN? is ZN(Z1(En.B))
2021-03-12 08:49:51,334 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:49:51,335 [main:66] - Compilation checking started
2021-03-12 08:49:51,728 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(n) == null) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:51,730 [main:53] - replacing (wrapN(a)!!.z, Z1?)
2021-03-12 08:49:51,730 [main:50] - replacing wrapN(a)!!.z Z1?
2021-03-12 08:49:51,730 [main:54] - Getting value of type Z1?
2021-03-12 08:49:51,830 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:49:51,831 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:51,934 [main:194] - Type params = []
2021-03-12 08:49:52,034 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:49:52,035 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:52,036 [main:58] - GENERATED VALUE OF TYPE Z1? = Z1(En.N)
2021-03-12 08:49:52,036 [main:61] - GENERATED IS CALL =true
2021-03-12 08:49:52,037 [main:67] - randomType = ZN
2021-03-12 08:49:52,135 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:49:52,136 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:49:52,238 [main:194] - Type params = []
2021-03-12 08:49:52,353 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:49:52,354 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:52,500 [main:194] - Type params = []
2021-03-12 08:49:52,600 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:49:52,600 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:52,608 [main:78] - Generated call from random type = (ZN(Z1(En.A))).z
2021-03-12 08:49:52,609 [main:106] - GETTING Z1? from En
2021-03-12 08:49:52,634 [main:106] - GETTING Z1? from Z1?
2021-03-12 08:49:52,640 [main:106] - GETTING Z1? from ZN?
2021-03-12 08:49:52,643 [main:113] - Case = [public final val z: Z1? defined in ZN[PropertyDescriptorImpl@198ee4e5]]
2021-03-12 08:49:52,644 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x))?.z
2021-03-12 08:49:52,644 [main:61] - replacement of wrapN(a)!!.z of type Z1? is (ZN(Z1(En.A))).z
2021-03-12 08:49:52,729 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:49:52,730 [main:66] - Compilation checking started
2021-03-12 08:49:53,135 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(n) == null) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:53,135 [main:53] - replacing (x, En)
2021-03-12 08:49:53,135 [main:50] - replacing x En
2021-03-12 08:49:53,135 [main:54] - Getting value of type En
2021-03-12 08:49:53,241 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:53,242 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:53,242 [main:58] - GENERATED VALUE OF TYPE En = En.B
2021-03-12 08:49:53,242 [main:61] - GENERATED IS CALL =false
2021-03-12 08:49:53,244 [main:67] - randomType = Z2
2021-03-12 08:49:53,337 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:49:53,337 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:49:53,434 [main:194] - Type params = []
2021-03-12 08:49:53,533 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:49:53,533 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:53,633 [main:194] - Type params = []
2021-03-12 08:49:53,728 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:49:53,729 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:53,738 [main:78] - Generated call from random type = (Z2(Z1(En.N))).z.x
2021-03-12 08:49:53,739 [main:106] - GETTING En from Z1
2021-03-12 08:49:53,746 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:49:53,746 [main:117] - GENERATED CALL = (Z2(Z1(En.C)).z).x
2021-03-12 08:49:53,746 [main:61] - replacement of x of type En is En.B
2021-03-12 08:49:53,856 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:49:53,858 [main:53] - replacing (wrap2(n), Z2?)
2021-03-12 08:49:53,859 [main:50] - replacing wrap2(n) Z2?
2021-03-12 08:49:53,859 [main:54] - Getting value of type Z2?
2021-03-12 08:49:53,973 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:49:53,973 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:49:54,072 [main:194] - Type params = []
2021-03-12 08:49:54,164 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:49:54,164 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:54,252 [main:194] - Type params = []
2021-03-12 08:49:54,362 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:49:54,363 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:54,363 [main:58] - GENERATED VALUE OF TYPE Z2? = Z2(Z1(En.N))
2021-03-12 08:49:54,363 [main:61] - GENERATED IS CALL =true
2021-03-12 08:49:54,776 [main:67] - randomType = Map<Collection<Int>, UShort>
2021-03-12 08:49:54,777 [main:106] - GETTING Z2? from En
2021-03-12 08:49:54,800 [main:106] - GETTING Z2? from Z1?
2021-03-12 08:49:54,808 [main:106] - GETTING Z2? from En
2021-03-12 08:49:54,809 [main:106] - GETTING Z2? from En
2021-03-12 08:49:54,809 [main:106] - GETTING Z2? from ZN?
2021-03-12 08:49:54,816 [main:106] - GETTING Z2? from Z1
2021-03-12 08:49:54,822 [main:106] - GETTING Z2? from Z1?
2021-03-12 08:49:54,823 [main:106] - GETTING Z2? from Z2?
2021-03-12 08:49:54,828 [main:61] - replacement of wrap2(n) of type Z2? is Z2(Z1(En.N))
2021-03-12 08:49:54,926 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:49:54,926 [main:66] - Compilation checking started
2021-03-12 08:49:55,371 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(n) == null) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:55,371 [main:53] - replacing (x, En)
2021-03-12 08:49:55,372 [main:50] - replacing x En
2021-03-12 08:49:55,372 [main:54] - Getting value of type En
2021-03-12 08:49:55,494 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:55,495 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:55,495 [main:58] - GENERATED VALUE OF TYPE En = En.N
2021-03-12 08:49:55,495 [main:61] - GENERATED IS CALL =false
2021-03-12 08:49:55,497 [main:67] - randomType = Z2
2021-03-12 08:49:55,595 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:49:55,595 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:49:55,691 [main:194] - Type params = []
2021-03-12 08:49:55,795 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:49:55,796 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:55,888 [main:194] - Type params = []
2021-03-12 08:49:55,973 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:49:55,974 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:55,980 [main:78] - Generated call from random type = (Z2(Z1(En.A))).z.x
2021-03-12 08:49:55,982 [main:106] - GETTING En from ZN?
2021-03-12 08:49:55,990 [main:113] - Case = [public final val z: Z1? defined in ZN[PropertyDescriptorImpl@198ee4e5], public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:49:55,990 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).z?.x
2021-03-12 08:49:55,990 [main:61] - replacement of x of type En is (wrapN(Z1(En.B).x)).z?.x
2021-03-12 08:49:56,078 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 08:49:56,078 [main:53] - replacing (wrapN(a)!!.z, Z1?)
2021-03-12 08:49:56,079 [main:50] - replacing wrapN(a)!!.z Z1?
2021-03-12 08:49:56,079 [main:54] - Getting value of type Z1?
2021-03-12 08:49:56,164 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:49:56,164 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:49:56,255 [main:194] - Type params = []
2021-03-12 08:49:56,375 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:49:56,375 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:56,376 [main:58] - GENERATED VALUE OF TYPE Z1? = Z1(En.B)
2021-03-12 08:49:56,376 [main:61] - GENERATED IS CALL =true
2021-03-12 08:49:56,884 [main:67] - randomType = LinkedHashMap<En, Array<Short?>?>
2021-03-12 08:49:56,991 [main:302] - generating value of type = LinkedHashMap<En, Array<Short?>?> false depth = 0
2021-03-12 08:49:57,088 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<En, Array<Short?>?> = TODO()
2021-03-12 08:49:57,091 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<En, Array<Short?>?> = TODO()
2021-03-12 08:49:57,182 [main:95] - GENERATED = linkedMapOf<En, Array<Short?>?>()
2021-03-12 08:49:57,412 [main:106] - GETTING Z1? from Z1?
2021-03-12 08:49:57,420 [main:106] - GETTING Z1? from Z2?
2021-03-12 08:49:57,428 [main:113] - Case = [public final val z: Z1 defined in Z2[PropertyDescriptorImpl@6dd6f94]]
2021-03-12 08:49:57,429 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x))?.z
2021-03-12 08:49:57,429 [main:61] - replacement of wrapN(a)!!.z of type Z1? is (wrap2(Z1(En.B).x))?.z
2021-03-12 08:49:57,524 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 08:49:57,525 [main:53] - replacing (wrap1(n) == null, Boolean)
2021-03-12 08:49:57,525 [main:50] - replacing wrap1(n) == null Boolean
2021-03-12 08:49:57,525 [main:54] - Getting value of type Boolean
2021-03-12 08:49:57,644 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:49:57,645 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:49:57,805 [main:61] - GENERATED IS CALL =false
2021-03-12 08:49:58,079 [main:67] - randomType = Function2<Z2, Double, Double>
2021-03-12 08:49:58,080 [main:106] - GETTING Boolean from En
2021-03-12 08:49:58,114 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]]
2021-03-12 08:49:58,114 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:49:58,201 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:49:58,203 [main:117] - GENERATED CALL = (n).equals("pwbbo")
2021-03-12 08:49:58,203 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:49:58,204 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:49:58,304 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:49:58,304 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:49:58,399 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:49:58,400 [main:117] - GENERATED CALL = (n).equals("xvmtq").equals("iyped")
2021-03-12 08:49:58,401 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@7c8c7a16], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59ba9caa]]
2021-03-12 08:49:58,401 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59ba9caa]
2021-03-12 08:49:58,401 [main:117] - GENERATED CALL = (n).name.toBoolean()
2021-03-12 08:49:58,401 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:49:58,401 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:49:58,487 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:49:58,487 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:49:58,572 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:49:58,573 [main:117] - GENERATED CALL = (n).equals("tsgvk").xor(true)
2021-03-12 08:49:58,574 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:49:58,574 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:49:58,668 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:49:58,668 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:49:58,669 [main:117] - GENERATED CALL = (n).equals("eqtuz").not()
2021-03-12 08:49:58,669 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:49:58,669 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:49:58,772 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:49:58,773 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:49:58,877 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:49:58,878 [main:117] - GENERATED CALL = (n).equals("uuyxr").or(true)
2021-03-12 08:49:58,878 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@7c8c7a16], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@151cfd54]]
2021-03-12 08:49:58,878 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@151cfd54]
2021-03-12 08:49:58,969 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:49:59,061 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:49:59,062 [main:117] - GENERATED CALL = (n).name.endsWith("scryq", false)
2021-03-12 08:49:59,062 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@7c8c7a16], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c331482]]
2021-03-12 08:49:59,062 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c331482]
2021-03-12 08:49:59,146 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:49:59,147 [main:117] - GENERATED CALL = (n).name.matches("cosgl")
2021-03-12 08:49:59,147 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@7c8c7a16], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e5759]]
2021-03-12 08:49:59,148 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e5759]
2021-03-12 08:49:59,247 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:49:59,342 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:49:59,343 [main:117] - GENERATED CALL = (n).name.startsWith("zahqh", true)
2021-03-12 08:49:59,343 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@44deaadc], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@70a8159f]]
2021-03-12 08:49:59,343 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@44deaadc]
2021-03-12 08:49:59,343 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@70a8159f]
2021-03-12 08:49:59,435 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:49:59,435 [main:117] - GENERATED CALL = (n).clone().equals("zhdbj")
2021-03-12 08:49:59,435 [main:61] - replacement of wrap1(n) == null of type Boolean is (n).equals("uuyxr").or(true)
2021-03-12 08:49:59,526 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:49:59,527 [main:66] - Compilation checking started
2021-03-12 08:49:59,851 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:49:59,852 [main:53] - replacing (a, En)
2021-03-12 08:49:59,852 [main:50] - replacing a En
2021-03-12 08:49:59,852 [main:54] - Getting value of type En
2021-03-12 08:49:59,950 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:49:59,950 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:49:59,951 [main:58] - GENERATED VALUE OF TYPE En = En.C
2021-03-12 08:49:59,951 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:00,141 [main:67] - randomType = List<ULong>
2021-03-12 08:50:00,142 [main:106] - GETTING En from Z1?
2021-03-12 08:50:00,148 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:00,148 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).x
2021-03-12 08:50:00,148 [main:61] - replacement of a of type En is (wrap1(Z1(En.B).x)).x
2021-03-12 08:50:00,236 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:00,236 [main:66] - Compilation checking started
2021-03-12 08:50:00,465 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if (wrap1((wrap1(Z1(En.B).x)).x)!!.x != En.B) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:00,466 [main:53] - replacing (if (x.ordinal == 0) null else ZN(Z1(x)), ZN?)
2021-03-12 08:50:00,466 [main:50] - replacing if (x.ordinal == 0) null else ZN(Z1(x)) ZN?
2021-03-12 08:50:00,466 [main:54] - Getting value of type ZN?
2021-03-12 08:50:00,557 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:50:00,558 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:00,664 [main:194] - Type params = []
2021-03-12 08:50:00,767 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:00,768 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:00,867 [main:194] - Type params = []
2021-03-12 08:50:00,958 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:00,958 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:00,959 [main:58] - GENERATED VALUE OF TYPE ZN? = ZN(Z1(En.N))
2021-03-12 08:50:00,959 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:01,241 [main:67] - randomType = MutableMap<Array<Z1?>, UInt>
2021-03-12 08:50:01,243 [main:106] - GETTING ZN? from Z1?
2021-03-12 08:50:01,251 [main:106] - GETTING ZN? from ZN?
2021-03-12 08:50:01,258 [main:106] - GETTING ZN? from En
2021-03-12 08:50:01,290 [main:106] - GETTING ZN? from Z2?
2021-03-12 08:50:01,298 [main:106] - GETTING ZN? from En
2021-03-12 08:50:01,299 [main:106] - GETTING ZN? from Z1
2021-03-12 08:50:01,308 [main:106] - GETTING ZN? from Z1?
2021-03-12 08:50:01,308 [main:61] - replacement of if (x.ordinal == 0) null else ZN(Z1(x)) of type ZN? is ZN(Z1(En.N))
2021-03-12 08:50:01,390 [main:33] - Trying to replace Element(IF) on Element(CALL_EXPRESSION)
2021-03-12 08:50:01,391 [main:66] - Compilation checking started
2021-03-12 08:50:01,730 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:01,730 [main:53] - replacing (wrapN(a)!!.z, Z1?)
2021-03-12 08:50:01,730 [main:50] - replacing wrapN(a)!!.z Z1?
2021-03-12 08:50:01,730 [main:54] - Getting value of type Z1?
2021-03-12 08:50:01,815 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:50:01,815 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:01,900 [main:194] - Type params = []
2021-03-12 08:50:01,983 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:50:01,984 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:01,984 [main:58] - GENERATED VALUE OF TYPE Z1? = Z1(En.C)
2021-03-12 08:50:01,984 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:02,079 [main:67] - randomType = String?
2021-03-12 08:50:02,161 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:50:02,192 [main:106] - GETTING Z1? from Z2?
2021-03-12 08:50:02,197 [main:113] - Case = [public final val z: Z1 defined in Z2[PropertyDescriptorImpl@6dd6f94]]
2021-03-12 08:50:02,197 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x))?.z
2021-03-12 08:50:02,197 [main:61] - replacement of wrapN(a)!!.z of type Z1? is Z1(En.C)
2021-03-12 08:50:02,278 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:02,278 [main:53] - replacing (AssertionError(), AssertionError)
2021-03-12 08:50:02,278 [main:50] - replacing AssertionError() AssertionError
2021-03-12 08:50:02,278 [main:54] - Getting value of type AssertionError
2021-03-12 08:50:02,358 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-12 08:50:02,362 [main:58] - GENERATED VALUE OF TYPE AssertionError = AssertionError()
2021-03-12 08:50:02,362 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:02,463 [main:67] - randomType = ULong
2021-03-12 08:50:02,545 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:50:02,582 [main:106] - GETTING AssertionError from Z1
2021-03-12 08:50:02,588 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:02,595 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:02,596 [main:106] - GETTING AssertionError from ZN?
2021-03-12 08:50:02,604 [main:106] - GETTING AssertionError from Z2?
2021-03-12 08:50:02,612 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:02,642 [main:61] - replacement of AssertionError() of type AssertionError is AssertionError()
2021-03-12 08:50:02,724 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:02,725 [main:53] - replacing (AssertionError(), AssertionError)
2021-03-12 08:50:02,725 [main:50] - replacing AssertionError() AssertionError
2021-03-12 08:50:02,725 [main:54] - Getting value of type AssertionError
2021-03-12 08:50:02,808 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-12 08:50:02,813 [main:58] - GENERATED VALUE OF TYPE AssertionError = AssertionError()
2021-03-12 08:50:02,813 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:02,815 [main:67] - randomType = Z2
2021-03-12 08:50:02,896 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:50:02,896 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:50:02,980 [main:194] - Type params = []
2021-03-12 08:50:03,063 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:03,063 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:03,143 [main:194] - Type params = []
2021-03-12 08:50:03,223 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:03,224 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:03,231 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:03,252 [main:106] - GETTING AssertionError from Z1
2021-03-12 08:50:03,258 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:03,262 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:03,263 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:03,264 [main:106] - GETTING AssertionError from Z2?
2021-03-12 08:50:03,270 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:03,271 [main:106] - GETTING AssertionError from ZN?
2021-03-12 08:50:03,275 [main:61] - replacement of AssertionError() of type AssertionError is AssertionError()
2021-03-12 08:50:03,371 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:03,372 [main:53] - replacing (x.ordinal == 0, Boolean)
2021-03-12 08:50:03,372 [main:50] - replacing x.ordinal == 0 Boolean
2021-03-12 08:50:03,372 [main:54] - Getting value of type Boolean
2021-03-12 08:50:03,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:03,452 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:50:03,453 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:03,540 [main:67] - randomType = UShort
2021-03-12 08:50:03,622 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:50:03,661 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@29eee918]
2021-03-12 08:50:03,742 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:03,742 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:50:03,824 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:03,826 [main:78] - Generated call from random type = (1352.toUShort()).equals("toldk").and(false)
2021-03-12 08:50:03,827 [main:106] - GETTING Boolean from Z2?
2021-03-12 08:50:03,833 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]]
2021-03-12 08:50:03,833 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:03,917 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:03,917 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("ryuxj")
2021-03-12 08:50:03,917 [main:113] - Case = [public final val z: Z1 defined in Z2[PropertyDescriptorImpl@6dd6f94], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]]
2021-03-12 08:50:03,917 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:03,999 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:04,000 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).z.equals("nhwgs")
2021-03-12 08:50:04,000 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:50:04,000 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:04,081 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:04,082 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:50:04,181 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:04,182 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("vyxcy").and(false)
2021-03-12 08:50:04,182 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:50:04,182 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:04,282 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:04,282 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:50:04,283 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("whsac").not()
2021-03-12 08:50:04,283 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:50:04,283 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:04,364 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:04,365 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:50:04,446 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:04,447 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("nacbz").or(true)
2021-03-12 08:50:04,447 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:50:04,447 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:04,529 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:04,529 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:50:04,610 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:04,611 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("tksru").xor(false)
2021-03-12 08:50:04,611 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:50:04,611 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:04,695 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:04,696 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:50:04,796 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:04,797 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("jfyif").equals("maacx")
2021-03-12 08:50:04,797 [main:61] - replacement of x.ordinal == 0 of type Boolean is (wrap2(Z1(En.B).x)).equals("vyxcy").and(false)
2021-03-12 08:50:04,893 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:04,894 [main:53] - replacing (a, En)
2021-03-12 08:50:04,894 [main:50] - replacing a En
2021-03-12 08:50:04,894 [main:54] - Getting value of type En
2021-03-12 08:50:04,978 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:04,978 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:04,978 [main:58] - GENERATED VALUE OF TYPE En = En.N
2021-03-12 08:50:04,979 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:05,065 [main:67] - randomType = En?
2021-03-12 08:50:05,146 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:05,146 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:05,167 [main:106] - GETTING En from Z1?
2021-03-12 08:50:05,171 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:05,171 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).x
2021-03-12 08:50:05,171 [main:61] - replacement of a of type En is En.N
2021-03-12 08:50:05,251 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:05,252 [main:53] - replacing (0, Int)
2021-03-12 08:50:05,252 [main:50] - replacing 0 Int
2021-03-12 08:50:05,252 [main:54] - Getting value of type Int
2021-03-12 08:50:05,333 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:05,334 [main:58] - GENERATED VALUE OF TYPE Int = 416154144
2021-03-12 08:50:05,334 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:05,815 [main:67] - randomType = Function2<Map<UInt, Z2>, Function1<Z2, Int>, En?>
2021-03-12 08:50:05,816 [main:106] - GETTING Int from Z2?
2021-03-12 08:50:05,822 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]]
2021-03-12 08:50:05,823 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:05,901 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:05,902 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]
2021-03-12 08:50:05,981 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:05,982 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("wxbvx").compareTo(false)
2021-03-12 08:50:05,982 [main:61] - replacement of 0 of type Int is 416154144
2021-03-12 08:50:06,080 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:50:06,080 [main:66] - Compilation checking started
2021-03-12 08:50:06,436 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 416154144) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if (wrap1(a)!!.x != En.B) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:06,436 [main:53] - replacing (n, En)
2021-03-12 08:50:06,436 [main:50] - replacing n En
2021-03-12 08:50:06,436 [main:54] - Getting value of type En
2021-03-12 08:50:06,527 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:06,528 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:06,528 [main:58] - GENERATED VALUE OF TYPE En = En.C
2021-03-12 08:50:06,529 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:06,633 [main:67] - randomType = MutableMap<Z2, Z1?>
2021-03-12 08:50:06,634 [main:106] - GETTING En from Z1?
2021-03-12 08:50:06,642 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:06,642 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).x
2021-03-12 08:50:06,642 [main:61] - replacement of n of type En is En.C
2021-03-12 08:50:06,721 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:06,722 [main:53] - replacing (wrap1(n), Z1?)
2021-03-12 08:50:06,722 [main:50] - replacing wrap1(n) Z1?
2021-03-12 08:50:06,722 [main:54] - Getting value of type Z1?
2021-03-12 08:50:06,802 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:50:06,803 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:06,884 [main:194] - Type params = []
2021-03-12 08:50:06,987 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:50:06,987 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:06,988 [main:58] - GENERATED VALUE OF TYPE Z1? = Z1(En.N)
2021-03-12 08:50:06,988 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:07,078 [main:67] - randomType = Array<Z2>
2021-03-12 08:50:07,158 [main:302] - generating value of type = Array<Z2> false depth = 0
2021-03-12 08:50:07,248 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Z2> = TODO()
2021-03-12 08:50:07,249 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Z2> = TODO()
2021-03-12 08:50:07,338 [main:95] - GENERATED = emptyArray<Z2>()
2021-03-12 08:50:07,356 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): Z2 defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@1eef053d]
2021-03-12 08:50:07,441 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:07,442 [main:78] - Generated call from random type = (emptyArray<Z2>()).get(-1106988560).z
2021-03-12 08:50:07,442 [main:106] - GETTING Z1? from Z1
2021-03-12 08:50:07,449 [main:61] - replacement of wrap1(n) of type Z1? is (emptyArray<Z2>()).get(-1106988560).z
2021-03-12 08:50:07,535 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:07,536 [main:53] - replacing (a, En)
2021-03-12 08:50:07,537 [main:50] - replacing a En
2021-03-12 08:50:07,537 [main:54] - Getting value of type En
2021-03-12 08:50:07,627 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:07,627 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:07,627 [main:58] - GENERATED VALUE OF TYPE En = En.C
2021-03-12 08:50:07,627 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:08,530 [main:67] - randomType = Function1<Triple<ArrayDeque<Byte>, Long, Float>?, UShort?>
2021-03-12 08:50:08,530 [main:106] - GETTING En from En
2021-03-12 08:50:08,562 [main:61] - replacement of a of type En is Z1(En.B).x
2021-03-12 08:50:08,643 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:08,643 [main:66] - Compilation checking started
2021-03-12 08:50:08,946 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 416154144) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if (wrap1(Z1(En.B).x)!!.x != En.B) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:08,946 [main:53] - replacing ((emptyArray<Z2>()).get(-1106988560).z == null, Boolean)
2021-03-12 08:50:08,946 [main:50] - replacing (emptyArray<Z2>()).get(-1106988560).z == null Boolean
2021-03-12 08:50:08,946 [main:54] - Getting value of type Boolean
2021-03-12 08:50:09,034 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:09,035 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:50:09,035 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:09,038 [main:67] - randomType = Z1
2021-03-12 08:50:09,121 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:50:09,122 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:09,201 [main:194] - Type params = []
2021-03-12 08:50:09,297 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:50:09,298 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:09,303 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@522d636e]
2021-03-12 08:50:09,382 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:09,382 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:50:09,461 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:09,462 [main:78] - Generated call from random type = (Z1(En.C)).equals("rwral").or(true)
2021-03-12 08:50:09,463 [main:106] - GETTING Boolean from ZN?
2021-03-12 08:50:09,468 [main:113] - Case = [public final val z: Z1? defined in ZN[PropertyDescriptorImpl@198ee4e5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]]
2021-03-12 08:50:09,469 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:09,548 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:09,549 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).z?.equals("rcfej")
2021-03-12 08:50:09,549 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:50:09,549 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:09,629 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:09,629 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:50:09,708 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:09,709 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("pwwpx").equals("nevgk")
2021-03-12 08:50:09,709 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:50:09,709 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:09,788 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:09,788 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:50:09,868 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:09,869 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("gepzb").xor(true)
2021-03-12 08:50:09,869 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:50:09,869 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:09,969 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:09,970 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:50:09,970 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("rdjpq").not()
2021-03-12 08:50:09,970 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:50:09,970 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:10,062 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:10,063 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:50:10,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:10,144 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("ysyzr").and(false)
2021-03-12 08:50:10,144 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:50:10,144 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:10,223 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:10,223 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:50:10,304 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:10,304 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("mpclh").or(true)
2021-03-12 08:50:10,304 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]]
2021-03-12 08:50:10,305 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:10,385 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:10,386 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("guexa")
2021-03-12 08:50:10,386 [main:61] - replacement of (emptyArray<Z2>()).get(-1106988560).z == null of type Boolean is (Z1(En.C)).equals("rwral").or(true)
2021-03-12 08:50:10,464 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:10,465 [main:53] - replacing (0, Int)
2021-03-12 08:50:10,465 [main:50] - replacing 0 Int
2021-03-12 08:50:10,465 [main:54] - Getting value of type Int
2021-03-12 08:50:10,544 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:10,544 [main:58] - GENERATED VALUE OF TYPE Int = 151819273
2021-03-12 08:50:10,545 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:10,646 [main:67] - randomType = String?
2021-03-12 08:50:10,736 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:50:10,765 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@81e6f3]
2021-03-12 08:50:10,847 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:50:10,847 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2410721]
2021-03-12 08:50:10,928 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:50:10,929 [main:78] - Generated call from random type = ("lbysu")?.compareTo("ypepe").div(-97)
2021-03-12 08:50:10,929 [main:61] - replacement of 0 of type Int is ("lbysu")?.compareTo("ypepe").div(-97)
2021-03-12 08:50:11,010 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:11,012 [main:53] - replacing (a, En)
2021-03-12 08:50:11,012 [main:50] - replacing a En
2021-03-12 08:50:11,012 [main:54] - Getting value of type En
2021-03-12 08:50:11,092 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:11,093 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:11,093 [main:58] - GENERATED VALUE OF TYPE En = En.B
2021-03-12 08:50:11,093 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:11,288 [main:67] - randomType = UShort?
2021-03-12 08:50:11,386 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:50:11,434 [main:106] - GETTING En from Z1?
2021-03-12 08:50:11,439 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:11,440 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).x
2021-03-12 08:50:11,440 [main:61] - replacement of a of type En is (wrap1(Z1(En.B).x)).x
2021-03-12 08:50:11,531 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:11,531 [main:66] - Compilation checking started
2021-03-12 08:50:11,728 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 416154144) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if (wrap1(Z1(En.B).x)!!.x != En.B) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN((wrap1(Z1(En.B).x)).x) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:11,729 [main:53] - replacing (Z2(Z1(En.N)) != null, Boolean)
2021-03-12 08:50:11,730 [main:50] - replacing Z2(Z1(En.N)) != null Boolean
2021-03-12 08:50:11,730 [main:54] - Getting value of type Boolean
2021-03-12 08:50:11,820 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:11,820 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:50:11,820 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:12,109 [main:67] - randomType = Triple<ULong, Z1, Sequence<Z2>>
2021-03-12 08:50:12,212 [main:302] - generating value of type = Triple<ULong, Z1, Sequence<Z2>> false depth = 0
2021-03-12 08:50:12,299 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ULong, second: Z1, third: Sequence<Z2>): Triple<ULong, Z1, Sequence<Z2>> = TODO()
2021-03-12 08:50:12,301 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ULong, second: Z1, third: Sequence<Z2>): Triple<ULong, Z1, Sequence<Z2>> = TODO()
2021-03-12 08:50:12,383 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 08:50:12,384 [main:302] - generating value of type = Z1 false depth = 3
2021-03-12 08:50:12,384 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:12,463 [main:194] - Type params = []
2021-03-12 08:50:12,543 [main:302] - generating value of type = En false depth = 5
2021-03-12 08:50:12,543 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:12,544 [main:302] - generating value of type = Sequence<Z2> false depth = 3
2021-03-12 08:50:12,628 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: Z2): Sequence<Z2> = TODO()
2021-03-12 08:50:12,629 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: Z2): Sequence<Z2> = TODO()
2021-03-12 08:50:12,711 [main:302] - generating value of type = Z2 false depth = 6
2021-03-12 08:50:12,712 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:50:12,790 [main:194] - Type params = []
2021-03-12 08:50:12,869 [main:302] - generating value of type = Z1 false depth = 8
2021-03-12 08:50:12,869 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:12,987 [main:194] - Type params = []
2021-03-12 08:50:13,082 [main:302] - generating value of type = En false depth = 10
2021-03-12 08:50:13,083 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:13,084 [main:95] - GENERATED = sequenceOf<Z2>(Z2(Z1(En.C)))
2021-03-12 08:50:13,084 [main:95] - GENERATED = Triple<ULong, Z1, Sequence<Z2>>(8427465705475048885.toULong(), Z1(En.N), sequenceOf<Z2>(Z2(Z1(En.C))))
2021-03-12 08:50:13,109 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.sequences.Sequence[DeserializedSimpleFunctionDescriptor@4122c369]
2021-03-12 08:50:13,206 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:13,207 [main:78] - Generated call from random type = (Triple<ULong, Z1, Sequence<Z2>>(8427465705475048885.toULong(), Z1(En.N), sequenceOf<Z2>(Z2(Z1(En.C))))).third.equals("fyzkj")
2021-03-12 08:50:13,208 [main:106] - GETTING Boolean from Z2?
2021-03-12 08:50:13,215 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:50:13,215 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:13,301 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:13,301 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:50:13,387 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:13,388 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("pssgb").equals("asnub")
2021-03-12 08:50:13,388 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:50:13,388 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:13,469 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:13,469 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:50:13,550 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:13,551 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("agckw").or(false)
2021-03-12 08:50:13,554 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:50:13,554 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:13,633 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:13,633 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:50:13,634 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("cfepp").not()
2021-03-12 08:50:13,634 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:50:13,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:13,736 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:13,737 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:50:13,829 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:13,831 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("zntlj").and(true)
2021-03-12 08:50:13,831 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:50:13,831 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:13,914 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:13,914 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:50:13,993 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:13,994 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("wqasq").xor(false)
2021-03-12 08:50:13,994 [main:113] - Case = [public final val z: Z1 defined in Z2[PropertyDescriptorImpl@6dd6f94], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]]
2021-03-12 08:50:13,994 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:14,074 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:14,075 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).z.equals("vojdo")
2021-03-12 08:50:14,075 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]]
2021-03-12 08:50:14,075 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@3daca6a4]
2021-03-12 08:50:14,173 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:14,174 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).equals("svdov")
2021-03-12 08:50:14,174 [main:61] - replacement of Z2(Z1(En.N)) != null of type Boolean is (wrap2(Z1(En.B).x)).equals("agckw").or(false)
2021-03-12 08:50:14,262 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:14,262 [main:66] - Compilation checking started
2021-03-12 08:50:14,470 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 416154144) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if (wrap1(Z1(En.B).x)!!.x != En.B) throw AssertionError()

    if ((wrap2(Z1(En.B).x)).equals("agckw").or(false)) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:14,472 [main:53] - replacing (wrap1(Z1(En.B).x)!!.x != En.B, Boolean)
2021-03-12 08:50:14,473 [main:50] - replacing wrap1(Z1(En.B).x)!!.x != En.B Boolean
2021-03-12 08:50:14,473 [main:54] - Getting value of type Boolean
2021-03-12 08:50:14,568 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:14,568 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:50:14,568 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:14,773 [main:67] - randomType = Function2<En, Int, UInt>
2021-03-12 08:50:14,774 [main:106] - GETTING Boolean from En
2021-03-12 08:50:14,809 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@7c8c7a16], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e5759]]
2021-03-12 08:50:14,809 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e5759]
2021-03-12 08:50:14,898 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:50:14,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:14,985 [main:117] - GENERATED CALL = (n).name.startsWith("fhlfd", false)
2021-03-12 08:50:14,985 [main:113] - Case = [public final val ordinal: kotlin.Int defined in En[DeserializedPropertyDescriptor@598f6591], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1570db98]]
2021-03-12 08:50:14,985 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1570db98]
2021-03-12 08:50:15,073 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:15,073 [main:117] - GENERATED CALL = (n).ordinal.equals("pdiir")
2021-03-12 08:50:15,073 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@44deaadc], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@70a8159f]]
2021-03-12 08:50:15,073 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@44deaadc]
2021-03-12 08:50:15,073 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@70a8159f]
2021-03-12 08:50:15,160 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:15,160 [main:117] - GENERATED CALL = (n).clone().equals("qotyc")
2021-03-12 08:50:15,160 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@7c8c7a16], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59ba9caa]]
2021-03-12 08:50:15,160 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59ba9caa]
2021-03-12 08:50:15,161 [main:117] - GENERATED CALL = (n).name.toBoolean()
2021-03-12 08:50:15,161 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]]
2021-03-12 08:50:15,161 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:50:15,250 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:15,250 [main:117] - GENERATED CALL = (n).equals("ooydz")
2021-03-12 08:50:15,250 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:50:15,250 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:50:15,336 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:50:15,440 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:15,442 [main:117] - GENERATED CALL = (n).equals(null).xor(true)
2021-03-12 08:50:15,442 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:50:15,442 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:50:15,552 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:15,552 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:50:15,644 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:15,644 [main:117] - GENERATED CALL = (n).equals("chzle").or(true)
2021-03-12 08:50:15,645 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:50:15,645 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:50:15,726 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:15,726 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:50:15,808 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:15,809 [main:117] - GENERATED CALL = (n).equals("sglmw").equals("hjkxf")
2021-03-12 08:50:15,809 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@7c8c7a16], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c331482]]
2021-03-12 08:50:15,809 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c331482]
2021-03-12 08:50:15,887 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:50:15,887 [main:117] - GENERATED CALL = (n).name.matches("mwqiy")
2021-03-12 08:50:15,887 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:50:15,888 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@52ce7094]
2021-03-12 08:50:15,970 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:15,970 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:50:16,059 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:16,060 [main:117] - GENERATED CALL = (n).equals("lhnyp").and(false)
2021-03-12 08:50:16,060 [main:61] - replacement of wrap1(Z1(En.B).x)!!.x != En.B of type Boolean is (n).ordinal.equals("pdiir")
2021-03-12 08:50:16,175 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:16,176 [main:66] - Compilation checking started
2021-03-12 08:50:16,495 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 416154144) null else Z2(Z1(En.B))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:16,496 [main:53] - replacing (Z2(Z1(En.B)), Z2)
2021-03-12 08:50:16,496 [main:50] - replacing Z2(Z1(En.B)) Z2
2021-03-12 08:50:16,496 [main:54] - Getting value of type Z2
2021-03-12 08:50:16,579 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:50:16,580 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:50:16,659 [main:194] - Type params = []
2021-03-12 08:50:16,738 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:16,738 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:16,818 [main:194] - Type params = []
2021-03-12 08:50:16,900 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:16,900 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:16,901 [main:58] - GENERATED VALUE OF TYPE Z2 = Z2(Z1(En.B))
2021-03-12 08:50:16,901 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:17,089 [main:67] - randomType = ArrayList<UInt>
2021-03-12 08:50:17,179 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-12 08:50:17,262 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-12 08:50:17,264 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-12 08:50:17,348 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 08:50:17,349 [main:95] - GENERATED = arrayListOf<UInt>(1239093389.toUInt())
2021-03-12 08:50:17,534 [main:106] - GETTING Z2 from En
2021-03-12 08:50:17,560 [main:106] - GETTING Z2 from Z1?
2021-03-12 08:50:17,565 [main:106] - GETTING Z2 from ZN?
2021-03-12 08:50:17,570 [main:106] - GETTING Z2 from Z1?
2021-03-12 08:50:17,570 [main:106] - GETTING Z2 from Z2?
2021-03-12 08:50:17,573 [main:61] - replacement of Z2(Z1(En.B)) of type Z2 is wrap2(Z1(En.B).x)
2021-03-12 08:50:17,653 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:17,653 [main:66] - Compilation checking started
2021-03-12 08:50:17,944 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:17,945 [main:53] - replacing (0, Int)
2021-03-12 08:50:17,945 [main:50] - replacing 0 Int
2021-03-12 08:50:17,945 [main:54] - Getting value of type Int
2021-03-12 08:50:18,042 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:18,043 [main:58] - GENERATED VALUE OF TYPE Int = -1827508088
2021-03-12 08:50:18,043 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:18,044 [main:67] - randomType = Int
2021-03-12 08:50:18,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:18,169 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2c716cd0]
2021-03-12 08:50:18,261 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:18,262 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2fe6a375]
2021-03-12 08:50:18,339 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:18,340 [main:78] - Generated call from random type = (-1652863569).compareTo(906820474).coerceAtMost(-832726683)
2021-03-12 08:50:18,341 [main:106] - GETTING Int from En
2021-03-12 08:50:18,360 [main:113] - Case = [public final val ordinal: kotlin.Int defined in En[DeserializedPropertyDescriptor@59682fa0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49e49cac]]
2021-03-12 08:50:18,360 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49e49cac]
2021-03-12 08:50:18,437 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:50:18,438 [main:117] - GENERATED CALL = (Z1(En.B).x).ordinal.rem(-4)
2021-03-12 08:50:18,438 [main:113] - Case = [public final val ordinal: kotlin.Int defined in En[DeserializedPropertyDescriptor@59682fa0], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17da6cae]]
2021-03-12 08:50:18,438 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17da6cae]
2021-03-12 08:50:18,439 [main:117] - GENERATED CALL = (Z1(En.B).x).ordinal.dec()
2021-03-12 08:50:18,439 [main:113] - Case = [public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1141ce2a]]
2021-03-12 08:50:18,439 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21]
2021-03-12 08:50:18,439 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1141ce2a]
2021-03-12 08:50:18,439 [main:117] - GENERATED CALL = (Z1(En.B).x).compareTo(Z1(En.B).x).unaryPlus()
2021-03-12 08:50:18,439 [main:113] - Case = [public final val ordinal: kotlin.Int defined in En[DeserializedPropertyDescriptor@59682fa0], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@188467fe]]
2021-03-12 08:50:18,439 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@188467fe]
2021-03-12 08:50:18,439 [main:117] - GENERATED CALL = (Z1(En.B).x).ordinal.inc()
2021-03-12 08:50:18,439 [main:113] - Case = [public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49e49cac]]
2021-03-12 08:50:18,439 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21]
2021-03-12 08:50:18,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49e49cac]
2021-03-12 08:50:18,519 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:50:18,520 [main:117] - GENERATED CALL = (Z1(En.B).x).compareTo(Z1(En.B).x).rem(-66)
2021-03-12 08:50:18,520 [main:113] - Case = [public final val ordinal: kotlin.Int defined in En[DeserializedPropertyDescriptor@59682fa0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74899df1]]
2021-03-12 08:50:18,520 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74899df1]
2021-03-12 08:50:18,599 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:18,600 [main:117] - GENERATED CALL = (Z1(En.B).x).ordinal.rotateRight(1008942281)
2021-03-12 08:50:18,601 [main:113] - Case = [public final val ordinal: kotlin.Int defined in En[DeserializedPropertyDescriptor@59682fa0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76f1d19f]]
2021-03-12 08:50:18,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76f1d19f]
2021-03-12 08:50:18,601 [main:117] - GENERATED CALL = (Z1(En.B).x).ordinal.countOneBits()
2021-03-12 08:50:18,601 [main:113] - Case = [public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70ba6842]]
2021-03-12 08:50:18,601 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21]
2021-03-12 08:50:18,601 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70ba6842]
2021-03-12 08:50:18,602 [main:117] - GENERATED CALL = (Z1(En.B).x).compareTo(Z1(En.B).x).unaryMinus()
2021-03-12 08:50:18,602 [main:113] - Case = [public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76f1d19f]]
2021-03-12 08:50:18,602 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21]
2021-03-12 08:50:18,679 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:18,680 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:18,680 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76f1d19f]
2021-03-12 08:50:18,680 [main:117] - GENERATED CALL = (Z1(En.B).x).compareTo(En.N).countOneBits()
2021-03-12 08:50:18,681 [main:113] - Case = [public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3ed6321f]]
2021-03-12 08:50:18,681 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1060ed21]
2021-03-12 08:50:18,767 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:18,767 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:18,768 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3ed6321f]
2021-03-12 08:50:18,768 [main:117] - GENERATED CALL = (Z1(En.B).x).compareTo(En.N).takeLowestOneBit()
2021-03-12 08:50:18,768 [main:61] - replacement of 0 of type Int is (Z1(En.B).x).compareTo(En.N).takeLowestOneBit()
2021-03-12 08:50:18,845 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:18,846 [main:53] - replacing (wrap2(a)!!.z.x, En)
2021-03-12 08:50:18,847 [main:50] - replacing wrap2(a)!!.z.x En
2021-03-12 08:50:18,847 [main:54] - Getting value of type En
2021-03-12 08:50:18,941 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:18,942 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:18,942 [main:58] - GENERATED VALUE OF TYPE En = En.C
2021-03-12 08:50:18,942 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:19,418 [main:67] - randomType = LinkedHashSet<LinkedHashMap<UByte, Double?>>
2021-03-12 08:50:19,496 [main:302] - generating value of type = LinkedHashSet<LinkedHashMap<UByte, Double?>> false depth = 0
2021-03-12 08:50:19,582 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: LinkedHashMap<UByte, Double?>): LkedHashSet<LkedHashMap<UByte, Double?>> = TODO()
2021-03-12 08:50:19,584 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: LinkedHashMap<UByte, Double?>): LkedHashSet<LkedHashMap<UByte, Double?>> = TODO()
2021-03-12 08:50:19,691 [main:302] - generating value of type = LinkedHashMap<UByte, Double?> false depth = 3
2021-03-12 08:50:19,790 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UByte, Double?>): LkedHashMap<UByte, Double?> = TODO()
2021-03-12 08:50:19,791 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UByte, Double?>): LkedHashMap<UByte, Double?> = TODO()
2021-03-12 08:50:19,877 [main:302] - generating value of type = Pair<UByte, Double?> false depth = 6
2021-03-12 08:50:19,967 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: Double?): Pair<UByte, Double?> = TODO()
2021-03-12 08:50:19,968 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: Double?): Pair<UByte, Double?> = TODO()
2021-03-12 08:50:20,053 [main:302] - generating value of type = UByte true depth = 9
2021-03-12 08:50:20,054 [main:302] - generating value of type = Double true depth = 9
2021-03-12 08:50:20,055 [main:95] - GENERATED = Pair<UByte, Double?>(119.toUByte(), 0.38800642290087217)
2021-03-12 08:50:20,056 [main:95] - GENERATED = linkedMapOf<UByte, Double?>(Pair<UByte, Double?>(119.toUByte(), 0.38800642290087217))
2021-03-12 08:50:20,056 [main:95] - GENERATED = linkedSetOf<LinkedHashMap<UByte, Double?>>(linkedMapOf<UByte, Double?>(Pair<UByte, Double?>(119.toUByte(), 0.38800642290087217)))
2021-03-12 08:50:20,237 [main:106] - GETTING En from Z1?
2021-03-12 08:50:20,241 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:20,241 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).x
2021-03-12 08:50:20,241 [main:61] - replacement of wrap2(a)!!.z.x of type En is En.C
2021-03-12 08:50:20,319 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:20,319 [main:66] - Compilation checking started
2021-03-12 08:50:20,612 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (En.C != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:20,613 [main:53] - replacing (x.ordinal, Int)
2021-03-12 08:50:20,613 [main:50] - replacing x.ordinal Int
2021-03-12 08:50:20,613 [main:54] - Getting value of type Int
2021-03-12 08:50:20,723 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:20,724 [main:58] - GENERATED VALUE OF TYPE Int = -880241505
2021-03-12 08:50:20,724 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:20,726 [main:67] - randomType = En
2021-03-12 08:50:20,805 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:20,805 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:20,829 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3af2627a]
2021-03-12 08:50:20,829 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2fe6a375]
2021-03-12 08:50:20,907 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:20,908 [main:78] - Generated call from random type = (En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276)
2021-03-12 08:50:20,909 [main:106] - GETTING Int from Z1?
2021-03-12 08:50:20,913 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8], public final fun compareTo(other: En): kotlin.Int defined in En[DeserializedSimpleFunctionDescriptor@71f31ada]]
2021-03-12 08:50:20,913 [main:149] - GENERATING call of type public final fun compareTo(other: En): kotlin.Int defined in En[DeserializedSimpleFunctionDescriptor@71f31ada]
2021-03-12 08:50:20,914 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).x.compareTo(Z1(En.B).x)
2021-03-12 08:50:20,914 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]]
2021-03-12 08:50:20,914 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:20,990 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:20,991 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]
2021-03-12 08:50:21,068 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:21,069 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).equals("plwkq").compareTo(true)
2021-03-12 08:50:21,069 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8], public final val ordinal: kotlin.Int defined in En[DeserializedPropertyDescriptor@59682fa0]]
2021-03-12 08:50:21,069 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).x.ordinal
2021-03-12 08:50:21,069 [main:61] - replacement of x.ordinal of type Int is (En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276)
2021-03-12 08:50:21,145 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:21,145 [main:66] - Compilation checking started
2021-03-12 08:50:21,546 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (En.C != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:21,548 [main:53] - replacing (AssertionError(), AssertionError)
2021-03-12 08:50:21,548 [main:50] - replacing AssertionError() AssertionError
2021-03-12 08:50:21,548 [main:54] - Getting value of type AssertionError
2021-03-12 08:50:21,645 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-12 08:50:21,759 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?): AssertionError = TODO()
2021-03-12 08:50:21,760 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?): AssertionError = TODO()
2021-03-12 08:50:21,944 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:50:21,945 [main:95] - GENERATED = AssertionError("hzhjb")
2021-03-12 08:50:21,945 [main:58] - GENERATED VALUE OF TYPE AssertionError = AssertionError("hzhjb")
2021-03-12 08:50:21,945 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:21,948 [main:67] - randomType = ZN?
2021-03-12 08:50:22,031 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:50:22,032 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:22,116 [main:194] - Type params = []
2021-03-12 08:50:22,201 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:22,202 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:22,294 [main:194] - Type params = []
2021-03-12 08:50:22,378 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:22,378 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:22,388 [main:106] - GETTING AssertionError from Z2?
2021-03-12 08:50:22,397 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:22,431 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:22,432 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:22,441 [main:106] - GETTING AssertionError from ZN?
2021-03-12 08:50:22,450 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:22,451 [main:106] - GETTING AssertionError from Z1
2021-03-12 08:50:22,458 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:22,458 [main:61] - replacement of AssertionError() of type AssertionError is AssertionError("hzhjb")
2021-03-12 08:50:22,548 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:22,548 [main:66] - Compilation checking started
2021-03-12 08:50:22,932 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != a) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:22,933 [main:53] - replacing (wrapN(n), ZN?)
2021-03-12 08:50:22,933 [main:50] - replacing wrapN(n) ZN?
2021-03-12 08:50:22,933 [main:54] - Getting value of type ZN?
2021-03-12 08:50:23,029 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:50:23,030 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:23,122 [main:194] - Type params = []
2021-03-12 08:50:23,207 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:23,208 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:23,291 [main:194] - Type params = []
2021-03-12 08:50:23,378 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:23,379 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:23,380 [main:58] - GENERATED VALUE OF TYPE ZN? = ZN(Z1(En.C))
2021-03-12 08:50:23,380 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:23,382 [main:67] - randomType = Z1
2021-03-12 08:50:23,467 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:50:23,467 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:23,549 [main:194] - Type params = []
2021-03-12 08:50:23,630 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:50:23,631 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:23,636 [main:106] - GETTING ZN? from En
2021-03-12 08:50:23,656 [main:106] - GETTING ZN? from ZN?
2021-03-12 08:50:23,661 [main:106] - GETTING ZN? from Z1
2021-03-12 08:50:23,665 [main:106] - GETTING ZN? from Z2?
2021-03-12 08:50:23,671 [main:106] - GETTING ZN? from Z1?
2021-03-12 08:50:23,675 [main:106] - GETTING ZN? from Z1?
2021-03-12 08:50:23,675 [main:61] - replacement of wrapN(n) of type ZN? is ZN(Z1(En.C))
2021-03-12 08:50:23,758 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:23,759 [main:53] - replacing (a, En)
2021-03-12 08:50:23,759 [main:50] - replacing a En
2021-03-12 08:50:23,759 [main:54] - Getting value of type En
2021-03-12 08:50:23,865 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:23,865 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:23,866 [main:58] - GENERATED VALUE OF TYPE En = En.A
2021-03-12 08:50:23,866 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:24,058 [main:67] - randomType = LinkedHashSet<Z1?>?
2021-03-12 08:50:24,141 [main:302] - generating value of type = LinkedHashSet<Z1?> false depth = 0
2021-03-12 08:50:24,228 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Z1?> = TODO()
2021-03-12 08:50:24,229 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Z1?> = TODO()
2021-03-12 08:50:24,490 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:50:24,491 [main:302] - generating value of type = Float true depth = 3
2021-03-12 08:50:24,493 [main:95] - GENERATED = LinkedHashSet<Z1?>(619145438, 0.76943105f)
2021-03-12 08:50:24,672 [main:106] - GETTING En from Z1
2021-03-12 08:50:24,677 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:24,677 [main:117] - GENERATED CALL = (Z2(Z1(En.C)).z).x
2021-03-12 08:50:24,678 [main:61] - replacement of a of type En is (Z2(Z1(En.C)).z).x
2021-03-12 08:50:24,785 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:24,786 [main:66] - Compilation checking started
2021-03-12 08:50:25,185 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:25,187 [main:53] - replacing (ZN(Z1(En.B)) != null, Boolean)
2021-03-12 08:50:25,188 [main:50] - replacing ZN(Z1(En.B)) != null Boolean
2021-03-12 08:50:25,188 [main:54] - Getting value of type Boolean
2021-03-12 08:50:25,285 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:25,286 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:50:25,286 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:25,288 [main:67] - randomType = En
2021-03-12 08:50:25,370 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:25,371 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:25,391 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c331482]
2021-03-12 08:50:25,472 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:50:25,473 [main:78] - Generated call from random type = (En.B).name.matches("tfmts")
2021-03-12 08:50:25,473 [main:61] - replacement of ZN(Z1(En.B)) != null of type Boolean is (En.B).name.matches("tfmts")
2021-03-12 08:50:25,555 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:25,555 [main:66] - Compilation checking started
2021-03-12 08:50:25,779 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if ((En.B).name.matches("tfmts")) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError()

    return "OK"
}


2021-03-12 08:50:25,781 [main:53] - replacing (AssertionError(), AssertionError)
2021-03-12 08:50:25,782 [main:50] - replacing AssertionError() AssertionError
2021-03-12 08:50:25,782 [main:54] - Getting value of type AssertionError
2021-03-12 08:50:25,887 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-12 08:50:26,009 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.Any?): AssertionError = TODO()
2021-03-12 08:50:26,011 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.Any?): AssertionError = TODO()
2021-03-12 08:50:26,186 [main:302] - generating value of type = Any false depth = 3
2021-03-12 08:50:26,187 [main:95] - GENERATED = AssertionError("dzcby")
2021-03-12 08:50:26,187 [main:58] - GENERATED VALUE OF TYPE AssertionError = AssertionError("dzcby")
2021-03-12 08:50:26,187 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:26,189 [main:67] - randomType = En
2021-03-12 08:50:26,272 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:26,272 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:26,306 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:26,340 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:26,348 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:26,350 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:26,351 [main:106] - GETTING AssertionError from Z1
2021-03-12 08:50:26,359 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:26,360 [main:106] - GETTING AssertionError from ZN?
2021-03-12 08:50:26,369 [main:106] - GETTING AssertionError from Z2?
2021-03-12 08:50:26,376 [main:61] - replacement of AssertionError() of type AssertionError is AssertionError("dzcby")
2021-03-12 08:50:26,461 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:26,461 [main:66] - Compilation checking started
2021-03-12 08:50:26,747 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError("dzcby")

    return "OK"
}


2021-03-12 08:50:26,748 [main:53] - replacing ((emptyArray<Z2>()).get(-1106988560).z == null, Boolean)
2021-03-12 08:50:26,748 [main:50] - replacing (emptyArray<Z2>()).get(-1106988560).z == null Boolean
2021-03-12 08:50:26,748 [main:54] - Getting value of type Boolean
2021-03-12 08:50:26,831 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:26,832 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:50:26,832 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:27,021 [main:67] - randomType = Char?
2021-03-12 08:50:27,128 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:50:27,161 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@70ff1ff5]
2021-03-12 08:50:27,248 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:50:27,249 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@1bd6455b]
2021-03-12 08:50:27,335 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:27,335 [main:78] - Generated call from random type = ('정')?.rangeTo('༯').equals("edzjo")
2021-03-12 08:50:27,336 [main:106] - GETTING Boolean from Z1?
2021-03-12 08:50:27,342 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:50:27,342 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:27,427 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:27,427 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:50:27,510 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:27,510 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).equals("wjwxu").xor(false)
2021-03-12 08:50:27,510 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]]
2021-03-12 08:50:27,511 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:27,595 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:27,595 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).equals("wznie")
2021-03-12 08:50:27,595 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:50:27,595 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:27,680 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:27,681 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:50:27,762 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:27,763 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).equals("gbldh").or(true)
2021-03-12 08:50:27,763 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8], public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@2abae9de]]
2021-03-12 08:50:27,763 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@2abae9de]
2021-03-12 08:50:27,845 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:27,845 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).x.equals("avqvr")
2021-03-12 08:50:27,845 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:50:27,845 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:27,929 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:27,929 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:50:27,929 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).equals("yinfl").not()
2021-03-12 08:50:27,930 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:50:27,930 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:28,037 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:28,037 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:50:28,140 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:28,140 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).equals("noinj").equals("cawtr")
2021-03-12 08:50:28,141 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:50:28,141 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:28,226 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:28,226 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:50:28,310 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:28,311 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).equals("gvoxl").and(true)
2021-03-12 08:50:28,311 [main:61] - replacement of (emptyArray<Z2>()).get(-1106988560).z == null of type Boolean is (ZN(Z1(En.B)).z).equals("gbldh").or(true)
2021-03-12 08:50:28,392 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:28,393 [main:53] - replacing (x, En)
2021-03-12 08:50:28,393 [main:50] - replacing x En
2021-03-12 08:50:28,393 [main:54] - Getting value of type En
2021-03-12 08:50:28,473 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:28,474 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:28,474 [main:58] - GENERATED VALUE OF TYPE En = En.C
2021-03-12 08:50:28,474 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:28,650 [main:67] - randomType = Sequence<Double>
2021-03-12 08:50:28,651 [main:106] - GETTING En from Z2?
2021-03-12 08:50:28,658 [main:113] - Case = [public final val z: Z1 defined in Z2[PropertyDescriptorImpl@6dd6f94], public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:28,659 [main:117] - GENERATED CALL = (wrap2(Z1(En.B).x)).z.x
2021-03-12 08:50:28,659 [main:61] - replacement of x of type En is (wrap2(Z1(En.B).x)).z.x
2021-03-12 08:50:28,741 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:28,741 [main:66] - Compilation checking started
2021-03-12 08:50:28,939 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1((wrap2(Z1(En.B).x)).z.x)
fun wrap2(x: En): Z2? = if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError("dzcby")

    return "OK"
}


2021-03-12 08:50:28,940 [main:53] - replacing (a, En)
2021-03-12 08:50:28,940 [main:50] - replacing a En
2021-03-12 08:50:28,940 [main:54] - Getting value of type En
2021-03-12 08:50:29,039 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:29,039 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:29,040 [main:58] - GENERATED VALUE OF TYPE En = En.B
2021-03-12 08:50:29,040 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:29,042 [main:67] - randomType = ZN
2021-03-12 08:50:29,123 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:50:29,124 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:29,205 [main:194] - Type params = []
2021-03-12 08:50:29,284 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:29,285 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:29,366 [main:194] - Type params = []
2021-03-12 08:50:29,446 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:29,446 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:29,452 [main:78] - Generated call from random type = (ZN(Z1(En.C))).z?.x!!
2021-03-12 08:50:29,453 [main:106] - GETTING En from Z1?
2021-03-12 08:50:29,457 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:29,457 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).x
2021-03-12 08:50:29,457 [main:61] - replacement of a of type En is (ZN(Z1(En.C))).z?.x!!
2021-03-12 08:50:29,537 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 08:50:29,538 [main:53] - replacing (wrap2(a), Z2?)
2021-03-12 08:50:29,538 [main:50] - replacing wrap2(a) Z2?
2021-03-12 08:50:29,538 [main:54] - Getting value of type Z2?
2021-03-12 08:50:29,620 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:50:29,620 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:50:29,704 [main:194] - Type params = []
2021-03-12 08:50:29,823 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:29,824 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:29,924 [main:194] - Type params = []
2021-03-12 08:50:30,013 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:30,013 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:30,014 [main:58] - GENERATED VALUE OF TYPE Z2? = Z2(Z1(En.N))
2021-03-12 08:50:30,014 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:30,015 [main:67] - randomType = Int
2021-03-12 08:50:30,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:30,161 [main:106] - GETTING Z2? from Z1
2021-03-12 08:50:30,169 [main:106] - GETTING Z2? from Z1?
2021-03-12 08:50:30,178 [main:106] - GETTING Z2? from Z2?
2021-03-12 08:50:30,185 [main:106] - GETTING Z2? from En
2021-03-12 08:50:30,218 [main:106] - GETTING Z2? from ZN?
2021-03-12 08:50:30,226 [main:106] - GETTING Z2? from Z1?
2021-03-12 08:50:30,226 [main:61] - replacement of wrap2(a) of type Z2? is Z2(Z1(En.N))
2021-03-12 08:50:30,317 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:30,318 [main:53] - replacing (ZN(Z1(En.B)) != null, Boolean)
2021-03-12 08:50:30,318 [main:50] - replacing ZN(Z1(En.B)) != null Boolean
2021-03-12 08:50:30,319 [main:54] - Getting value of type Boolean
2021-03-12 08:50:30,407 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:30,407 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:50:30,408 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:30,508 [main:67] - randomType = Short
2021-03-12 08:50:30,596 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:50:30,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@240b31c9]
2021-03-12 08:50:30,714 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:30,715 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:50:30,834 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:30,835 [main:78] - Generated call from random type = (-23568).equals("bhnzg").equals("kyvna")
2021-03-12 08:50:30,836 [main:106] - GETTING Boolean from ZN?
2021-03-12 08:50:30,842 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:50:30,842 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:30,935 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:30,935 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:50:31,024 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:31,025 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("tvaci").and(true)
2021-03-12 08:50:31,025 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:50:31,025 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:31,105 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:50:31,184 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:31,185 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals(null).or(false)
2021-03-12 08:50:31,185 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:50:31,185 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:31,265 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:31,266 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:50:31,266 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("quycg").not()
2021-03-12 08:50:31,266 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]]
2021-03-12 08:50:31,266 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:31,346 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:31,346 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("careq")
2021-03-12 08:50:31,346 [main:113] - Case = [public final val z: Z1? defined in ZN[PropertyDescriptorImpl@198ee4e5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]]
2021-03-12 08:50:31,346 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:31,426 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:31,427 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).z?.equals("zzwpq")
2021-03-12 08:50:31,427 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:50:31,427 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:31,507 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:31,507 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:50:31,614 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:31,615 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals("fkymw").xor(false)
2021-03-12 08:50:31,615 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:50:31,615 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZN[SimpleFunctionDescriptorImpl@4cb18267]
2021-03-12 08:50:31,713 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:50:31,818 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:31,818 [main:117] - GENERATED CALL = (wrapN(Z1(En.B).x)).equals(null).equals("rcxhm")
2021-03-12 08:50:31,818 [main:61] - replacement of ZN(Z1(En.B)) != null of type Boolean is (wrapN(Z1(En.B).x)).equals(null).equals("rcxhm")
2021-03-12 08:50:31,901 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:31,902 [main:66] - Compilation checking started
2021-03-12 08:50:32,108 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if ((wrapN(Z1(En.B).x)).equals(null).equals("rcxhm")) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError("dzcby")

    return "OK"
}


2021-03-12 08:50:32,110 [main:53] - replacing ((ZN(Z1(En.A))).z!!.x != a, Boolean)
2021-03-12 08:50:32,110 [main:50] - replacing (ZN(Z1(En.A))).z!!.x != a Boolean
2021-03-12 08:50:32,110 [main:54] - Getting value of type Boolean
2021-03-12 08:50:32,189 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:32,189 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:50:32,190 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:33,047 [main:67] - randomType = Function2<Z1, LinkedHashMap<MutableMap<ULong?, UInt>, Float>?, UInt>
2021-03-12 08:50:33,048 [main:106] - GETTING Boolean from Z1?
2021-03-12 08:50:33,054 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:50:33,054 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:33,133 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:33,133 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:50:33,213 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:33,214 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).equals("yrhbl").and(true)
2021-03-12 08:50:33,214 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:50:33,214 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:33,294 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:33,294 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:50:33,378 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:33,379 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).equals("zukon").equals("vxjwa")
2021-03-12 08:50:33,379 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:50:33,379 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:33,483 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:33,483 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:50:33,570 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:33,570 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).equals("yxhdp").or(true)
2021-03-12 08:50:33,571 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8], public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@2abae9de]]
2021-03-12 08:50:33,571 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@2abae9de]
2021-03-12 08:50:33,664 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:33,664 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).x.equals("spcux")
2021-03-12 08:50:33,664 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]]
2021-03-12 08:50:33,664 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:33,746 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:33,746 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).equals("jifok")
2021-03-12 08:50:33,746 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:50:33,746 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:33,825 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:33,825 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:50:33,906 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:50:33,906 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).equals("kupyp").xor(true)
2021-03-12 08:50:33,907 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:50:33,907 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@3bb0a1f0]
2021-03-12 08:50:33,985 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:50:33,986 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:50:33,986 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).equals("eksey").not()
2021-03-12 08:50:33,986 [main:61] - replacement of (ZN(Z1(En.A))).z!!.x != a of type Boolean is (wrap1(Z1(En.B).x)).equals("zukon").equals("vxjwa")
2021-03-12 08:50:34,066 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:34,066 [main:66] - Compilation checking started
2021-03-12 08:50:34,263 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x)
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((wrap1(Z1(En.B).x)).equals("zukon").equals("vxjwa")) throw AssertionError("dzcby")

    return "OK"
}


2021-03-12 08:50:34,263 [main:53] - replacing (Z2(Z1(En.N))!!.z.x, En)
2021-03-12 08:50:34,263 [main:50] - replacing Z2(Z1(En.N))!!.z.x En
2021-03-12 08:50:34,264 [main:54] - Getting value of type En
2021-03-12 08:50:34,343 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:34,344 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:34,344 [main:58] - GENERATED VALUE OF TYPE En = En.A
2021-03-12 08:50:34,344 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:34,346 [main:67] - randomType = ZN
2021-03-12 08:50:34,451 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:50:34,452 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:34,531 [main:194] - Type params = []
2021-03-12 08:50:34,613 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:34,613 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:34,694 [main:194] - Type params = []
2021-03-12 08:50:34,773 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:34,774 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:34,780 [main:78] - Generated call from random type = (ZN(Z1(En.N))).z?.x!!
2021-03-12 08:50:34,780 [main:106] - GETTING En from En
2021-03-12 08:50:34,804 [main:61] - replacement of Z2(Z1(En.N))!!.z.x of type En is (ZN(Z1(En.N))).z?.x!!
2021-03-12 08:50:34,883 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 08:50:34,884 [main:53] - replacing (a, En)
2021-03-12 08:50:34,884 [main:50] - replacing a En
2021-03-12 08:50:34,884 [main:54] - Getting value of type En
2021-03-12 08:50:34,963 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:34,963 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:34,963 [main:58] - GENERATED VALUE OF TYPE En = En.A
2021-03-12 08:50:34,963 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:34,966 [main:67] - randomType = ZN
2021-03-12 08:50:35,045 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:50:35,045 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:35,123 [main:194] - Type params = []
2021-03-12 08:50:35,202 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:35,203 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:35,283 [main:194] - Type params = []
2021-03-12 08:50:35,401 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:35,402 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:35,410 [main:78] - Generated call from random type = (ZN(Z1(En.C))).z?.x!!
2021-03-12 08:50:35,411 [main:106] - GETTING En from Z1?
2021-03-12 08:50:35,417 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:35,417 [main:117] - GENERATED CALL = (wrap1(Z1(En.B).x)).x
2021-03-12 08:50:35,417 [main:61] - replacement of a of type En is (ZN(Z1(En.C))).z?.x!!
2021-03-12 08:50:35,521 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 08:50:35,522 [main:53] - replacing (if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x), Z2?)
2021-03-12 08:50:35,522 [main:50] - replacing if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x) Z2?
2021-03-12 08:50:35,522 [main:54] - Getting value of type Z2?
2021-03-12 08:50:35,606 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:50:35,606 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:50:35,687 [main:194] - Type params = []
2021-03-12 08:50:35,766 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:35,767 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:35,846 [main:194] - Type params = []
2021-03-12 08:50:35,925 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:35,926 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:35,926 [main:58] - GENERATED VALUE OF TYPE Z2? = Z2(Z1(En.C))
2021-03-12 08:50:35,926 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:35,928 [main:67] - randomType = Z1
2021-03-12 08:50:36,007 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:50:36,008 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:36,088 [main:194] - Type params = []
2021-03-12 08:50:36,166 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:50:36,167 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:36,174 [main:106] - GETTING Z2? from Z1?
2021-03-12 08:50:36,180 [main:106] - GETTING Z2? from Z1?
2021-03-12 08:50:36,181 [main:106] - GETTING Z2? from Z2?
2021-03-12 08:50:36,188 [main:106] - GETTING Z2? from Z1
2021-03-12 08:50:36,194 [main:106] - GETTING Z2? from En
2021-03-12 08:50:36,217 [main:106] - GETTING Z2? from ZN?
2021-03-12 08:50:36,223 [main:106] - GETTING Z2? from En
2021-03-12 08:50:36,223 [main:61] - replacement of if ((En.C).compareTo(Z1(En.B).x).coerceAtMost(-474763276) == 416154144) null else wrap2(Z1(En.B).x) of type Z2? is Z2(Z1(En.C))
2021-03-12 08:50:36,322 [main:33] - Trying to replace Element(IF) on Element(CALL_EXPRESSION)
2021-03-12 08:50:36,323 [main:66] - Compilation checking started
2021-03-12 08:50:36,639 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = Z2(Z1(En.C))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if ((ZN(Z1(En.A))).z!!.x != a) throw AssertionError("dzcby")

    return "OK"
}


2021-03-12 08:50:36,639 [main:53] - replacing (ZN(Z1(x)), ZN)
2021-03-12 08:50:36,640 [main:50] - replacing ZN(Z1(x)) ZN
2021-03-12 08:50:36,640 [main:54] - Getting value of type ZN
2021-03-12 08:50:36,717 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:50:36,718 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:36,797 [main:194] - Type params = []
2021-03-12 08:50:36,873 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:36,874 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:36,951 [main:194] - Type params = []
2021-03-12 08:50:37,027 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:37,028 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:37,028 [main:58] - GENERATED VALUE OF TYPE ZN = ZN(Z1(En.B))
2021-03-12 08:50:37,028 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:37,030 [main:67] - randomType = Z1
2021-03-12 08:50:37,105 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:50:37,106 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:37,181 [main:194] - Type params = []
2021-03-12 08:50:37,256 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:50:37,257 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:37,264 [main:106] - GETTING ZN from Z1?
2021-03-12 08:50:37,271 [main:106] - GETTING ZN from Z1
2021-03-12 08:50:37,278 [main:106] - GETTING ZN from Z2?
2021-03-12 08:50:37,282 [main:106] - GETTING ZN from ZN?
2021-03-12 08:50:37,286 [main:61] - replacement of ZN(Z1(x)) of type ZN is ZN(Z1(En.B))
2021-03-12 08:50:37,384 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:37,384 [main:53] - replacing (wrapN(a), ZN?)
2021-03-12 08:50:37,384 [main:50] - replacing wrapN(a) ZN?
2021-03-12 08:50:37,384 [main:54] - Getting value of type ZN?
2021-03-12 08:50:37,464 [main:302] - generating value of type = ZN false depth = 0
2021-03-12 08:50:37,471 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:37,554 [main:194] - Type params = []
2021-03-12 08:50:37,637 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:37,637 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:37,712 [main:194] - Type params = []
2021-03-12 08:50:37,787 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:37,788 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:37,788 [main:58] - GENERATED VALUE OF TYPE ZN? = ZN(Z1(En.C))
2021-03-12 08:50:37,788 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:37,789 [main:67] - randomType = Int
2021-03-12 08:50:37,868 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:37,910 [main:106] - GETTING ZN? from ZN?
2021-03-12 08:50:37,914 [main:106] - GETTING ZN? from Z1?
2021-03-12 08:50:37,919 [main:106] - GETTING ZN? from En
2021-03-12 08:50:37,938 [main:106] - GETTING ZN? from Z1?
2021-03-12 08:50:37,939 [main:106] - GETTING ZN? from Z1
2021-03-12 08:50:37,943 [main:106] - GETTING ZN? from Z2?
2021-03-12 08:50:37,948 [main:61] - replacement of wrapN(a) of type ZN? is ZN(Z1(En.C))
2021-03-12 08:50:38,025 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:38,026 [main:53] - replacing (AssertionError(), AssertionError)
2021-03-12 08:50:38,026 [main:50] - replacing AssertionError() AssertionError
2021-03-12 08:50:38,026 [main:54] - Getting value of type AssertionError
2021-03-12 08:50:38,100 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-12 08:50:38,179 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?): AssertionError = TODO()
2021-03-12 08:50:38,181 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?): AssertionError = TODO()
2021-03-12 08:50:38,377 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:50:38,378 [main:95] - GENERATED = AssertionError("nnwya")
2021-03-12 08:50:38,378 [main:58] - GENERATED VALUE OF TYPE AssertionError = AssertionError("nnwya")
2021-03-12 08:50:38,378 [main:61] - GENERATED IS CALL =true
2021-03-12 08:50:38,469 [main:67] - randomType = UShort
2021-03-12 08:50:38,553 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:50:38,597 [main:106] - GETTING AssertionError from Z2?
2021-03-12 08:50:38,605 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:38,613 [main:106] - GETTING AssertionError from Z1
2021-03-12 08:50:38,620 [main:106] - GETTING AssertionError from ZN?
2021-03-12 08:50:38,628 [main:106] - GETTING AssertionError from Z1?
2021-03-12 08:50:38,630 [main:106] - GETTING AssertionError from En
2021-03-12 08:50:38,661 [main:61] - replacement of AssertionError() of type AssertionError is AssertionError("nnwya")
2021-03-12 08:50:38,736 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:50:38,737 [main:53] - replacing ((ZN(Z1(En.A))).z!!.x, En)
2021-03-12 08:50:38,738 [main:50] - replacing (ZN(Z1(En.A))).z!!.x En
2021-03-12 08:50:38,738 [main:54] - Getting value of type En
2021-03-12 08:50:38,813 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:38,814 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:38,814 [main:58] - GENERATED VALUE OF TYPE En = En.B
2021-03-12 08:50:38,814 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:38,817 [main:67] - randomType = Z2?
2021-03-12 08:50:38,895 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:50:38,895 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:50:38,977 [main:194] - Type params = []
2021-03-12 08:50:39,063 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:50:39,064 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:39,179 [main:194] - Type params = []
2021-03-12 08:50:39,262 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:50:39,262 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:39,270 [main:78] - Generated call from random type = (Z2(Z1(En.B)))?.z.x
2021-03-12 08:50:39,270 [main:106] - GETTING En from En
2021-03-12 08:50:39,306 [main:61] - replacement of (ZN(Z1(En.A))).z!!.x of type En is Z1(En.B).x
2021-03-12 08:50:39,388 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:39,389 [main:66] - Compilation checking started
2021-03-12 08:50:39,664 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = Z2(Z1(En.C))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (Z1(En.B).x != a) throw AssertionError("dzcby")

    return "OK"
}


2021-03-12 08:50:39,665 [main:53] - replacing (En.N, En)
2021-03-12 08:50:39,665 [main:50] - replacing En.N En
2021-03-12 08:50:39,665 [main:54] - Getting value of type En
2021-03-12 08:50:39,744 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:39,745 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:39,745 [main:58] - GENERATED VALUE OF TYPE En = En.B
2021-03-12 08:50:39,745 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:39,829 [main:67] - randomType = UByte
2021-03-12 08:50:39,906 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:50:39,946 [main:106] - GETTING En from En
2021-03-12 08:50:39,971 [main:61] - replacement of En.N of type En is n
2021-03-12 08:50:40,045 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:50:40,045 [main:66] - Compilation checking started
2021-03-12 08:50:40,261 [main:49] - Result = false
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = Z2(Z1(En.C))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = n
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or(true)) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (Z1(En.B).x != a) throw AssertionError("dzcby")

    return "OK"
}


2021-03-12 08:50:40,261 [main:53] - replacing (a, En)
2021-03-12 08:50:40,262 [main:50] - replacing a En
2021-03-12 08:50:40,262 [main:54] - Getting value of type En
2021-03-12 08:50:40,374 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:50:40,375 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:40,375 [main:58] - GENERATED VALUE OF TYPE En = En.N
2021-03-12 08:50:40,375 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:40,470 [main:67] - randomType = List<String>
2021-03-12 08:50:40,471 [main:106] - GETTING En from Z1?
2021-03-12 08:50:40,478 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@6d3885c8]]
2021-03-12 08:50:40,478 [main:117] - GENERATED CALL = (ZN(Z1(En.B)).z).x
2021-03-12 08:50:40,478 [main:61] - replacement of a of type En is En.N
2021-03-12 08:50:40,564 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:40,649 [main:119] - TRYING TO REPLACE CONSTANT null
2021-03-12 08:50:40,727 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 08:50:40,728 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:50:40,803 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:50:40,803 [main:66] - Compilation checking started
2021-03-12 08:50:41,112 [main:53] - Result = true
Text:
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = Z2(Z1(En.C))
fun wrapN(x: En): ZN? = ZN(Z1(En.N))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if ((n).equals("uuyxr").or((n).equals("uuyxr").or(true))) throw AssertionError()
    if ((n).ordinal.equals("pdiir")) throw AssertionError()

    if (Z2(Z1(En.N)) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError("hzhjb")
    if (En.C != (Z2(Z1(En.C)).z).x) throw AssertionError(null)

    if (ZN(Z1(En.B)) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (Z1(En.B).x != a) throw AssertionError("dzcby")

    return "OK"
}


2021-03-12 08:50:41,134 [main:41] - AFTER TRY 0 res = enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}
2021-03-12 08:50:41,292 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:41,292 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:41,370 [main:194] - Type params = []
2021-03-12 08:50:41,450 [main:302] - generating value of type = En false depth = 1
2021-03-12 08:50:41,450 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:41,451 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:50:41,557 [main:194] - Type params = []
2021-03-12 08:50:41,641 [main:302] - generating value of type = Z1 false depth = 1
2021-03-12 08:50:41,642 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:41,722 [main:194] - Type params = []
2021-03-12 08:50:41,803 [main:302] - generating value of type = En false depth = 3
2021-03-12 08:50:41,804 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:41,804 [main:112] - generating klass ZN text = inline class ZN(val z: Z1?)
2021-03-12 08:50:41,885 [main:194] - Type params = []
2021-03-12 08:50:41,969 [main:302] - generating value of type = Z1 false depth = 1
2021-03-12 08:50:41,969 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:50:42,047 [main:194] - Type params = []
2021-03-12 08:50:42,124 [main:302] - generating value of type = En false depth = 3
2021-03-12 08:50:42,125 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:42,125 [main:112] - generating klass N text = N,
2021-03-12 08:50:42,125 [main:112] - generating klass A text = A,
2021-03-12 08:50:42,125 [main:112] - generating klass B text = B,
2021-03-12 08:50:42,125 [main:112] - generating klass C text = C
2021-03-12 08:50:42,283 [main:43] - GENERATING CALL OF fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
2021-03-12 08:50:42,284 [main:61] - WITHOUT TYPE PARAMS = fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
2021-03-12 08:50:42,364 [main:302] - generating value of type = En false depth = 1
2021-03-12 08:50:42,364 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:42,364 [main:95] - GENERATED = wrap1(En.N)
2021-03-12 08:50:42,471 [main:43] - GENERATING CALL OF fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
2021-03-12 08:50:42,472 [main:61] - WITHOUT TYPE PARAMS = fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
2021-03-12 08:50:42,554 [main:302] - generating value of type = En false depth = 1
2021-03-12 08:50:42,554 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:42,555 [main:95] - GENERATED = wrap2(En.N)
2021-03-12 08:50:42,652 [main:43] - GENERATING CALL OF fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))
2021-03-12 08:50:42,653 [main:61] - WITHOUT TYPE PARAMS = fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))
2021-03-12 08:50:42,741 [main:302] - generating value of type = En false depth = 1
2021-03-12 08:50:42,742 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:50:42,742 [main:95] - GENERATED = wrapN(En.B)
2021-03-12 08:50:42,836 [main:43] - Try №0
2021-03-12 08:50:53,068 [main:48] - Already checked
2021-03-12 08:50:57,050 [main:69] - Trying to insert fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}
2021-03-12 08:50:57,267 [main:66] - Compilation checking started
2021-03-12 08:50:58,467 [main:103] - Trying to change 153 nodes
2021-03-12 08:50:58,467 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 08:50:58,469 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 08:50:58,469 [main:54] - Getting value of type String
2021-03-12 08:50:58,642 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:50:58,646 [main:58] - GENERATED VALUE OF TYPE String = "mqwoe"
2021-03-12 08:50:58,646 [main:61] - GENERATED IS CALL =false
2021-03-12 08:50:58,833 [main:67] - randomType = ULong
2021-03-12 08:50:58,996 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:50:59,044 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@19335f9e]
2021-03-12 08:50:59,044 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@193bb549]
2021-03-12 08:50:59,195 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:50:59,198 [main:78] - Generated call from random type = (6316101622277103602.toULong()).toUByte().toString(-202084126)
2021-03-12 08:50:59,199 [main:106] - GETTING String from Z2?
2021-03-12 08:50:59,208 [main:106] - GETTING String from Z1?
2021-03-12 08:50:59,217 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0]]
2021-03-12 08:50:59,218 [main:117] - GENERATED CALL = (wrapN(a)!!.z).x.name
2021-03-12 08:50:59,218 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is "mqwoe"
2021-03-12 08:50:59,379 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:50:59,379 [main:66] - Compilation checking started
2021-03-12 08:51:00,127 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:00,130 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 08:51:00,132 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 08:51:00,132 [main:54] - Getting value of type Result<Ty0>
2021-03-12 08:51:00,295 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 08:51:00,486 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:51:00,492 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:51:00,844 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:51:00,844 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 08:51:01,005 [main:67] - randomType = UInt
2021-03-12 08:51:01,148 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:51:01,186 [main:106] - GETTING Result<Ty0> from Z1
2021-03-12 08:51:01,191 [main:106] - GETTING Result<Ty0> from Z1?
2021-03-12 08:51:01,197 [main:106] - GETTING Result<Ty0> from Z2?
2021-03-12 08:51:01,202 [main:106] - GETTING Result<Ty0> from En
2021-03-12 08:51:01,221 [main:106] - GETTING Result<Ty0> from Z1?
2021-03-12 08:51:01,223 [main:106] - GETTING Result<Ty0> from ZN?
2021-03-12 08:51:01,228 [main:106] - GETTING Result<Ty0> from En
2021-03-12 08:51:01,229 [main:106] - GETTING Result<Ty0> from Z1
2021-03-12 08:51:01,231 [main:106] - GETTING Result<Ty0> from ZN?
2021-03-12 08:51:01,232 [main:106] - GETTING Result<Ty0> from Z2
2021-03-12 08:51:01,237 [main:106] - GETTING Result<Ty0> from Z1
2021-03-12 08:51:01,238 [main:106] - GETTING Result<Ty0> from Z1
2021-03-12 08:51:01,240 [main:106] - GETTING Result<Ty0> from Z1?
2021-03-12 08:51:01,241 [main:106] - GETTING Result<Ty0> from ZN
2021-03-12 08:51:01,247 [main:106] - GETTING Result<Ty0> from Z2?
2021-03-12 08:51:01,248 [main:106] - GETTING Result<Ty0> from Z2?
2021-03-12 08:51:01,250 [main:106] - GETTING Result<Ty0> from ZN?
2021-03-12 08:51:01,251 [main:106] - GETTING Result<Ty0> from Z1?
2021-03-12 08:51:01,252 [main:106] - GETTING Result<Ty0> from En
2021-03-12 08:51:01,253 [main:106] - GETTING Result<Ty0> from En
2021-03-12 08:51:01,254 [main:106] - GETTING Result<Ty0> from Z1?
2021-03-12 08:51:01,254 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 08:51:01,254 [main:107] - replacing ({
        prope3.getOrThrow()
    }, Any?)
2021-03-12 08:51:01,255 [main:50] - replacing {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    } Any?
2021-03-12 08:51:01,255 [main:54] - Getting value of type Any?
2021-03-12 08:51:01,393 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:01,394 [main:58] - GENERATED VALUE OF TYPE Any? = "qnjgq"
2021-03-12 08:51:01,394 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:01,594 [main:67] - randomType = Char
2021-03-12 08:51:01,736 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:51:01,770 [main:106] - GETTING Any? from Z1
2021-03-12 08:51:01,778 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@519507a9]]
2021-03-12 08:51:01,778 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@519507a9]
2021-03-12 08:51:01,778 [main:117] - GENERATED CALL = (wrap1(a)!!)?.x.clone()
2021-03-12 08:51:01,778 [main:114] - replacement of {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    } of type Any? is (wrap1(a)!!)?.x.clone()
2021-03-12 08:51:01,918 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:01,919 [main:66] - Compilation checking started
2021-03-12 08:51:01,923 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:51:01,923 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) (wrap1(a)!!)?.x.clone()
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:01,925 [main:107] - replacing (prope1.prope6, Boolean)
2021-03-12 08:51:01,926 [main:50] - replacing prope1.prope6 Boolean
2021-03-12 08:51:01,926 [main:54] - Getting value of type Boolean
2021-03-12 08:51:02,071 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:02,073 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:51:02,073 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:02,252 [main:67] - randomType = UInt
2021-03-12 08:51:02,407 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:51:02,449 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5a19586f]
2021-03-12 08:51:02,586 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:02,586 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:51:02,586 [main:78] - Generated call from random type = (453927421.toUInt()).equals("tdzgn").not()
2021-03-12 08:51:02,586 [main:114] - replacement of prope1.prope6 of type Boolean is (453927421.toUInt()).equals("tdzgn").not()
2021-03-12 08:51:02,739 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:02,740 [main:66] - Compilation checking started
2021-03-12 08:51:03,219 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            (453927421.toUInt()).equals("tdzgn").not() = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:03,222 [main:107] - replacing (i, Int)
2021-03-12 08:51:03,222 [main:50] - replacing i Int
2021-03-12 08:51:03,222 [main:54] - Getting value of type Int
2021-03-12 08:51:03,372 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:03,374 [main:58] - GENERATED VALUE OF TYPE Int = -1056147191
2021-03-12 08:51:03,374 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:03,920 [main:67] - randomType = Triple<Int, UInt, Int>
2021-03-12 08:51:04,062 [main:302] - generating value of type = Triple<Int, UInt, Int> false depth = 0
2021-03-12 08:51:04,210 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Int, second: UInt, third: Int): Triple<Int, UInt, Int> = TODO()
2021-03-12 08:51:04,213 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Int, second: UInt, third: Int): Triple<Int, UInt, Int> = TODO()
2021-03-12 08:51:04,354 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:51:04,356 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 08:51:04,358 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:51:04,360 [main:95] - GENERATED = Triple<Int, UInt, Int>(409156636, 438128813.toUInt(), -942549638)
2021-03-12 08:51:04,373 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24b263af]
2021-03-12 08:51:04,504 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:51:04,508 [main:78] - Generated call from random type = (Triple<Int, UInt, Int>(409156636, 438128813.toUInt(), -942549638)).first.compareTo(-111)
2021-03-12 08:51:04,509 [main:106] - GETTING Int from Z2
2021-03-12 08:51:04,518 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@6fb6e7c7], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]]
2021-03-12 08:51:04,518 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z2[SimpleFunctionDescriptorImpl@6fb6e7c7]
2021-03-12 08:51:04,675 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:04,675 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]
2021-03-12 08:51:04,811 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:04,814 [main:117] - GENERATED CALL = (wrap2(a)!!).equals("smtbi").compareTo(true)
2021-03-12 08:51:04,814 [main:114] - replacement of i of type Int is -1056147191
2021-03-12 08:51:04,954 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:51:04,954 [main:66] - Compilation checking started
2021-03-12 08:51:05,661 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:05,664 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 08:51:05,664 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 08:51:05,664 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:51:05,834 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:51:05,836 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:51:05,986 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:51:05,990 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:51:06,362 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 08:51:06,366 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:51:06,516 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:51:06,519 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:51:06,852 [main:302] - generating value of type = Any false depth = 8
2021-03-12 08:51:06,852 [main:95] - GENERATED = println("ynrxb")
2021-03-12 08:51:06,853 [main:95] - GENERATED = contract({ println("ynrxb")})
2021-03-12 08:51:06,853 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("ynrxb")})}
2021-03-12 08:51:06,853 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:07,170 [main:67] - randomType = Collection<Kla6>
2021-03-12 08:51:07,171 [main:106] - GETTING Function0<Unit> from Z1
2021-03-12 08:51:07,179 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:07,188 [main:106] - GETTING Function0<Unit> from ZN
2021-03-12 08:51:07,196 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:07,197 [main:106] - GETTING Function0<Unit> from En
2021-03-12 08:51:07,230 [main:106] - GETTING Function0<Unit> from En
2021-03-12 08:51:07,231 [main:106] - GETTING Function0<Unit> from ZN?
2021-03-12 08:51:07,239 [main:106] - GETTING Function0<Unit> from Z2?
2021-03-12 08:51:07,247 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:07,248 [main:106] - GETTING Function0<Unit> from ZN?
2021-03-12 08:51:07,249 [main:106] - GETTING Function0<Unit> from Z2?
2021-03-12 08:51:07,250 [main:106] - GETTING Function0<Unit> from ZN?
2021-03-12 08:51:07,251 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:07,252 [main:106] - GETTING Function0<Unit> from En
2021-03-12 08:51:07,254 [main:106] - GETTING Function0<Unit> from Z2
2021-03-12 08:51:07,261 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:07,263 [main:106] - GETTING Function0<Unit> from Z1
2021-03-12 08:51:07,264 [main:106] - GETTING Function0<Unit> from Z2?
2021-03-12 08:51:07,265 [main:106] - GETTING Function0<Unit> from En
2021-03-12 08:51:07,266 [main:106] - GETTING Function0<Unit> from Z1
2021-03-12 08:51:07,267 [main:106] - GETTING Function0<Unit> from Z1
2021-03-12 08:51:07,267 [main:114] - replacement of prope7 of type Function0<Unit> is { contract({ println("ynrxb")})}
2021-03-12 08:51:07,399 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:51:07,399 [main:66] - Compilation checking started
2021-03-12 08:51:07,816 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.{ contract({ println("ynrxb")})} = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:07,818 [main:107] - replacing (1, Int)
2021-03-12 08:51:07,818 [main:50] - replacing 1 Int
2021-03-12 08:51:07,818 [main:54] - Getting value of type Int
2021-03-12 08:51:07,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:07,985 [main:58] - GENERATED VALUE OF TYPE Int = -617617032
2021-03-12 08:51:07,985 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:07,990 [main:67] - randomType = Boolean
2021-03-12 08:51:08,132 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:08,146 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]
2021-03-12 08:51:08,285 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:08,288 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1141ce2a]
2021-03-12 08:51:08,288 [main:78] - Generated call from random type = (false).compareTo(false).unaryPlus()
2021-03-12 08:51:08,289 [main:106] - GETTING Int from Z1
2021-03-12 08:51:08,296 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]]
2021-03-12 08:51:08,297 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:08,436 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:08,437 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@67b10f6d]
2021-03-12 08:51:08,570 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:08,572 [main:117] - GENERATED CALL = (wrap1(a)!!).equals("wmwqy").compareTo(false)
2021-03-12 08:51:08,573 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], public final val ordinal: kotlin.Int defined in En[DeserializedPropertyDescriptor@28f21a7e]]
2021-03-12 08:51:08,573 [main:117] - GENERATED CALL = (wrap1(a)!!).x.ordinal
2021-03-12 08:51:08,573 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], public final fun compareTo(other: En): kotlin.Int defined in En[DeserializedSimpleFunctionDescriptor@d8db627]]
2021-03-12 08:51:08,573 [main:149] - GENERATING call of type public final fun compareTo(other: En): kotlin.Int defined in En[DeserializedSimpleFunctionDescriptor@d8db627]
2021-03-12 08:51:08,573 [main:117] - GENERATED CALL = (wrap1(a)!!).x.compareTo(Z1(En.C).x)
2021-03-12 08:51:08,573 [main:114] - replacement of 1 of type Int is (wrap1(a)!!).equals("wmwqy").compareTo(false)
2021-03-12 08:51:08,699 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:08,700 [main:66] - Compilation checking started
2021-03-12 08:51:09,346 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:09,348 [main:107] - replacing (prope6, Boolean)
2021-03-12 08:51:09,348 [main:50] - replacing prope6 Boolean
2021-03-12 08:51:09,348 [main:54] - Getting value of type Boolean
2021-03-12 08:51:09,484 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:09,486 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:51:09,486 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:09,494 [main:67] - randomType = Kla4
2021-03-12 08:51:09,620 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 08:51:09,622 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 08:51:09,629 [main:149] - GENERATING call of type public final suspend fun fu6(): kotlin.Unit defined in Kla4[SimpleFunctionDescriptorImpl@78409e11]
2021-03-12 08:51:09,630 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@e719834]
2021-03-12 08:51:09,758 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:09,758 [main:78] - Generated call from random type = (Kla4()).fu6().equals("qpiir")
2021-03-12 08:51:09,759 [main:106] - GETTING Boolean from Z1?
2021-03-12 08:51:09,766 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:51:09,766 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:09,896 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:51:10,023 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:10,025 [main:117] - GENERATED CALL = (wrap1(a)).equals(null).xor(true)
2021-03-12 08:51:10,026 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:51:10,026 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:10,174 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:10,174 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:51:10,301 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:10,302 [main:117] - GENERATED CALL = (wrap1(a)).equals("ctxgh").equals("bxedr")
2021-03-12 08:51:10,302 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]]
2021-03-12 08:51:10,302 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:10,426 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:10,427 [main:117] - GENERATED CALL = (wrap1(a)).equals("ltnre")
2021-03-12 08:51:10,427 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:51:10,427 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:10,555 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:10,556 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:51:10,682 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:10,684 [main:117] - GENERATED CALL = (wrap1(a)).equals("pxocv").or(true)
2021-03-12 08:51:10,684 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:51:10,684 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:10,809 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:10,809 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:51:10,809 [main:117] - GENERATED CALL = (wrap1(a)).equals("gfjvu").not()
2021-03-12 08:51:10,809 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:51:10,809 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:10,934 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:10,935 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:51:11,065 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:11,067 [main:117] - GENERATED CALL = (wrap1(a)).equals("einmc").and(true)
2021-03-12 08:51:11,067 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@185ac615]]
2021-03-12 08:51:11,067 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@185ac615]
2021-03-12 08:51:11,208 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:11,208 [main:117] - GENERATED CALL = (wrap1(a)).x.equals("hubie")
2021-03-12 08:51:11,208 [main:114] - replacement of prope6 of type Boolean is (wrap1(a)).equals("ltnre")
2021-03-12 08:51:11,342 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:11,342 [main:66] - Compilation checking started
2021-03-12 08:51:11,749 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            prope1.(wrap1(a)).equals("ltnre") = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:11,752 [main:107] - replacing (prope3.getOrThrow(), Any?)
2021-03-12 08:51:11,753 [main:50] - replacing prope3.getOrThrow() Any?
2021-03-12 08:51:11,753 [main:54] - Getting value of type Any?
2021-03-12 08:51:11,901 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:11,901 [main:58] - GENERATED VALUE OF TYPE Any? = "lvdbf"
2021-03-12 08:51:11,901 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:12,082 [main:67] - randomType = UByte
2021-03-12 08:51:12,209 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:51:12,242 [main:106] - GETTING Any? from Z2
2021-03-12 08:51:12,247 [main:106] - GETTING Any? from Z1?
2021-03-12 08:51:12,253 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@519507a9]]
2021-03-12 08:51:12,253 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@519507a9]
2021-03-12 08:51:12,253 [main:117] - GENERATED CALL = (wrapN(a)!!.z)?.x.clone()
2021-03-12 08:51:12,253 [main:114] - replacement of prope3.getOrThrow() of type Any? is (wrapN(a)!!.z)?.x.clone()
2021-03-12 08:51:12,379 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:12,379 [main:66] - Compilation checking started
2021-03-12 08:51:12,776 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = (wrapN(a)!!.z)?.x.clone()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:12,778 [main:107] - replacing (prope1, Kla5)
2021-03-12 08:51:12,778 [main:50] - replacing prope1 Kla5
2021-03-12 08:51:12,778 [main:54] - Getting value of type Kla5
2021-03-12 08:51:12,903 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:51:12,906 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:51:12,906 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 08:51:12,906 [main:61] - GENERATED IS CALL =true
2021-03-12 08:51:13,046 [main:67] - randomType = Char
2021-03-12 08:51:13,168 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:51:13,191 [main:106] - GETTING Kla5 from Z2?
2021-03-12 08:51:13,196 [main:106] - GETTING Kla5 from Z1
2021-03-12 08:51:13,201 [main:106] - GETTING Kla5 from Z2?
2021-03-12 08:51:13,202 [main:106] - GETTING Kla5 from En
2021-03-12 08:51:13,226 [main:106] - GETTING Kla5 from Z1?
2021-03-12 08:51:13,231 [main:106] - GETTING Kla5 from Z1?
2021-03-12 08:51:13,232 [main:106] - GETTING Kla5 from ZN
2021-03-12 08:51:13,236 [main:106] - GETTING Kla5 from Z1
2021-03-12 08:51:13,237 [main:106] - GETTING Kla5 from En
2021-03-12 08:51:13,237 [main:106] - GETTING Kla5 from ZN?
2021-03-12 08:51:13,243 [main:106] - GETTING Kla5 from Z1
2021-03-12 08:51:13,244 [main:106] - GETTING Kla5 from En
2021-03-12 08:51:13,244 [main:106] - GETTING Kla5 from ZN?
2021-03-12 08:51:13,245 [main:106] - GETTING Kla5 from Z1?
2021-03-12 08:51:13,246 [main:106] - GETTING Kla5 from Z1?
2021-03-12 08:51:13,246 [main:106] - GETTING Kla5 from Z2
2021-03-12 08:51:13,253 [main:106] - GETTING Kla5 from En
2021-03-12 08:51:13,254 [main:106] - GETTING Kla5 from Z1
2021-03-12 08:51:13,254 [main:106] - GETTING Kla5 from Z2?
2021-03-12 08:51:13,255 [main:106] - GETTING Kla5 from ZN?
2021-03-12 08:51:13,255 [main:106] - GETTING Kla5 from Z1?
2021-03-12 08:51:13,255 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 08:51:13,385 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:51:13,385 [main:66] - Compilation checking started
2021-03-12 08:51:14,001 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:14,004 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 08:51:14,006 [main:50] - replacing " has no state-machine " String
2021-03-12 08:51:14,006 [main:54] - Getting value of type String
2021-03-12 08:51:14,180 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:14,183 [main:58] - GENERATED VALUE OF TYPE String = "nzznd"
2021-03-12 08:51:14,183 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:14,337 [main:67] - randomType = Double
2021-03-12 08:51:14,467 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:51:14,518 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@76eeecb5]
2021-03-12 08:51:14,655 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:51:14,658 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7d1764]
2021-03-12 08:51:14,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:14,793 [main:78] - Generated call from random type = (0.20970349700231772).compareTo(66).toString(15792778)
2021-03-12 08:51:14,794 [main:106] - GETTING String from Z2?
2021-03-12 08:51:14,802 [main:106] - GETTING String from Z1?
2021-03-12 08:51:14,809 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0]]
2021-03-12 08:51:14,810 [main:117] - GENERATED CALL = (wrap1(a)).x.name
2021-03-12 08:51:14,810 [main:114] - replacement of " has no state-machine " of type String is (0.20970349700231772).compareTo(66).toString(15792778)
2021-03-12 08:51:14,939 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:14,939 [main:66] - Compilation checking started
2021-03-12 08:51:15,647 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:15,650 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 08:51:15,652 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 08:51:15,652 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 08:51:15,791 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 08:51:15,794 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:51:15,796 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 08:51:15,796 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:16,272 [main:67] - randomType = ArrayList<Float>
2021-03-12 08:51:16,396 [main:302] - generating value of type = ArrayList<Float> false depth = 0
2021-03-12 08:51:16,561 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Float> = TODO()
2021-03-12 08:51:16,565 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Float> = TODO()
2021-03-12 08:51:16,712 [main:95] - GENERATED = arrayListOf<Float>()
2021-03-12 08:51:16,856 [main:106] - GETTING Function0<Boolean> from Z1?
2021-03-12 08:51:16,861 [main:106] - GETTING Function0<Boolean> from Z1
2021-03-12 08:51:16,868 [main:106] - GETTING Function0<Boolean> from En
2021-03-12 08:51:16,888 [main:106] - GETTING Function0<Boolean> from ZN?
2021-03-12 08:51:16,895 [main:106] - GETTING Function0<Boolean> from Z1?
2021-03-12 08:51:16,896 [main:106] - GETTING Function0<Boolean> from ZN?
2021-03-12 08:51:16,897 [main:106] - GETTING Function0<Boolean> from ZN
2021-03-12 08:51:16,902 [main:106] - GETTING Function0<Boolean> from Z1?
2021-03-12 08:51:16,903 [main:106] - GETTING Function0<Boolean> from En
2021-03-12 08:51:16,904 [main:106] - GETTING Function0<Boolean> from Z1?
2021-03-12 08:51:16,906 [main:106] - GETTING Function0<Boolean> from Z2?
2021-03-12 08:51:16,912 [main:106] - GETTING Function0<Boolean> from Z2
2021-03-12 08:51:16,917 [main:106] - GETTING Function0<Boolean> from Z1
2021-03-12 08:51:16,918 [main:106] - GETTING Function0<Boolean> from Z2?
2021-03-12 08:51:16,919 [main:106] - GETTING Function0<Boolean> from Z2?
2021-03-12 08:51:16,921 [main:106] - GETTING Function0<Boolean> from En
2021-03-12 08:51:16,922 [main:106] - GETTING Function0<Boolean> from Z1
2021-03-12 08:51:16,923 [main:106] - GETTING Function0<Boolean> from En
2021-03-12 08:51:16,924 [main:106] - GETTING Function0<Boolean> from ZN?
2021-03-12 08:51:16,925 [main:106] - GETTING Function0<Boolean> from Z1?
2021-03-12 08:51:16,926 [main:106] - GETTING Function0<Boolean> from Z1
2021-03-12 08:51:16,926 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-12 08:51:17,065 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:51:17,066 [main:66] - Compilation checking started
2021-03-12 08:51:17,696 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:17,697 [main:107] - replacing (prope3.isSuccess, Boolean)
2021-03-12 08:51:17,698 [main:50] - replacing prope3.isSuccess Boolean
2021-03-12 08:51:17,698 [main:54] - Getting value of type Boolean
2021-03-12 08:51:17,830 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:17,832 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:51:17,832 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:18,111 [main:67] - randomType = Float?
2021-03-12 08:51:18,238 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:51:18,280 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7289c78a]
2021-03-12 08:51:18,280 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5ca20641]
2021-03-12 08:51:18,406 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:18,407 [main:78] - Generated call from random type = (0.87420446f)?.toLong().equals("bkysp")
2021-03-12 08:51:18,408 [main:106] - GETTING Boolean from Z1
2021-03-12 08:51:18,414 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:51:18,415 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:18,540 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:18,540 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:51:18,540 [main:117] - GENERATED CALL = (wrap2(a)!!.z).equals("gvfbm").not()
2021-03-12 08:51:18,540 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:51:18,541 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:18,696 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:18,697 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:51:18,822 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:18,824 [main:117] - GENERATED CALL = (wrap2(a)!!.z).equals("brymz").or(false)
2021-03-12 08:51:18,824 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]]
2021-03-12 08:51:18,824 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:18,952 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:18,952 [main:117] - GENERATED CALL = (wrap2(a)!!.z).equals("rrxox")
2021-03-12 08:51:18,952 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@185ac615]]
2021-03-12 08:51:18,952 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@185ac615]
2021-03-12 08:51:19,078 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:19,078 [main:117] - GENERATED CALL = (wrap2(a)!!.z).x.equals("tkqrb")
2021-03-12 08:51:19,078 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:51:19,078 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:19,205 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:19,206 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:51:19,330 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:19,330 [main:117] - GENERATED CALL = (wrap2(a)!!.z).equals("ofgqm").equals("wtirz")
2021-03-12 08:51:19,330 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:51:19,331 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:19,457 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:51:19,587 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:19,589 [main:117] - GENERATED CALL = (wrap2(a)!!.z).equals(null).and(true)
2021-03-12 08:51:19,589 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]]
2021-03-12 08:51:19,590 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z1[SimpleFunctionDescriptorImpl@6dfc1014]
2021-03-12 08:51:19,715 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55ba69f3]
2021-03-12 08:51:19,845 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:19,848 [main:117] - GENERATED CALL = (wrap2(a)!!.z).equals(null).xor(true)
2021-03-12 08:51:19,848 [main:114] - replacement of prope3.isSuccess of type Boolean is (0.87420446f)?.toLong().equals("bkysp")
2021-03-12 08:51:19,972 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:19,972 [main:66] - Compilation checking started
2021-03-12 08:51:20,598 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:20,600 [main:107] - replacing (prope3.exceptionOrNull()!!, Throwable)
2021-03-12 08:51:20,601 [main:50] - replacing prope3.exceptionOrNull()!! Throwable
2021-03-12 08:51:20,601 [main:54] - Getting value of type Throwable
2021-03-12 08:51:20,734 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:51:20,917 [main:43] - GENERATING CALL OF fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 08:51:20,920 [main:61] - WITHOUT TYPE PARAMS = fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 08:51:21,185 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:51:21,188 [main:95] - GENERATED = NotImplementedError("mfbug")
2021-03-12 08:51:21,188 [main:58] - GENERATED VALUE OF TYPE Throwable = NotImplementedError("mfbug")
2021-03-12 08:51:21,188 [main:61] - GENERATED IS CALL =true
2021-03-12 08:51:21,332 [main:67] - randomType = Kla5?
2021-03-12 08:51:21,455 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:51:21,457 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:51:21,468 [main:106] - GETTING Throwable from ZN?
2021-03-12 08:51:21,476 [main:106] - GETTING Throwable from Z1?
2021-03-12 08:51:21,483 [main:106] - GETTING Throwable from ZN?
2021-03-12 08:51:21,484 [main:106] - GETTING Throwable from En
2021-03-12 08:51:21,509 [main:106] - GETTING Throwable from Z1
2021-03-12 08:51:21,517 [main:106] - GETTING Throwable from Z2
2021-03-12 08:51:21,523 [main:106] - GETTING Throwable from Z2?
2021-03-12 08:51:21,530 [main:106] - GETTING Throwable from Z1
2021-03-12 08:51:21,532 [main:106] - GETTING Throwable from ZN?
2021-03-12 08:51:21,533 [main:106] - GETTING Throwable from Z2?
2021-03-12 08:51:21,534 [main:106] - GETTING Throwable from En
2021-03-12 08:51:21,535 [main:106] - GETTING Throwable from Z1
2021-03-12 08:51:21,536 [main:106] - GETTING Throwable from ZN
2021-03-12 08:51:21,544 [main:106] - GETTING Throwable from En
2021-03-12 08:51:21,545 [main:106] - GETTING Throwable from En
2021-03-12 08:51:21,547 [main:106] - GETTING Throwable from Z1?
2021-03-12 08:51:21,548 [main:106] - GETTING Throwable from Z1?
2021-03-12 08:51:21,549 [main:106] - GETTING Throwable from Z1
2021-03-12 08:51:21,550 [main:106] - GETTING Throwable from Z2?
2021-03-12 08:51:21,552 [main:106] - GETTING Throwable from Z1?
2021-03-12 08:51:21,553 [main:106] - GETTING Throwable from Z1?
2021-03-12 08:51:21,553 [main:114] - replacement of prope3.exceptionOrNull()!! of type Throwable is NotImplementedError("mfbug")
2021-03-12 08:51:21,675 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:51:21,676 [main:66] - Compilation checking started
2021-03-12 08:51:22,333 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:22,336 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 08:51:22,337 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 08:51:22,337 [main:54] - Getting value of type Boolean
2021-03-12 08:51:22,480 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:22,482 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:51:22,482 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:23,081 [main:67] - randomType = Pair<Kla3<ULong>, Int>
2021-03-12 08:51:23,236 [main:302] - generating value of type = Pair<Kla3<ULong>, Int> false depth = 0
2021-03-12 08:51:23,367 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla3<ULong>, second: Int): Pair<Kla3<ULong>, Int> = TODO()
2021-03-12 08:51:23,371 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla3<ULong>, second: Int): Pair<Kla3<ULong>, Int> = TODO()
2021-03-12 08:51:23,499 [main:302] - generating value of type = Kla3<ULong> false depth = 3
2021-03-12 08:51:23,501 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 08:51:24,505 [main:302] - generating value of type = Kla6 false depth = 5
2021-03-12 08:51:24,507 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-12 08:51:24,508 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:51:24,511 [main:95] - GENERATED = Pair<Kla3<ULong>, Int>(Kla6, 1236011563)
2021-03-12 08:51:24,527 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@1a87e69a]
2021-03-12 08:51:24,660 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:24,660 [main:78] - Generated call from random type = (Pair<Kla3<ULong>, Int>(Kla6, 1236011563)).equals("diynk")
2021-03-12 08:51:24,660 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (Pair<Kla3<ULong>, Int>(Kla6, 1236011563)).equals("diynk")
2021-03-12 08:51:24,797 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:24,798 [main:66] - Compilation checking started
2021-03-12 08:51:25,195 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if ((Pair<Kla3<ULong>, Int>(Kla6, 1236011563)).equals("diynk")) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:25,197 [main:107] - replacing (this.prope3, Any?)
2021-03-12 08:51:25,197 [main:50] - replacing this.prope3 Any?
2021-03-12 08:51:25,197 [main:54] - Getting value of type Any?
2021-03-12 08:51:25,336 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:25,336 [main:58] - GENERATED VALUE OF TYPE Any? = "qtscp"
2021-03-12 08:51:25,336 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:26,163 [main:67] - randomType = Function2<Kla6, Pair<String, ArrayList<Z1?>?>, Kla5>
2021-03-12 08:51:26,164 [main:106] - GETTING Any? from ZN
2021-03-12 08:51:26,173 [main:106] - GETTING Any? from En
2021-03-12 08:51:26,207 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@519507a9]]
2021-03-12 08:51:26,207 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in En[DeserializedSimpleFunctionDescriptor@519507a9]
2021-03-12 08:51:26,207 [main:117] - GENERATED CALL = (wrap1(a)!!.x)?.clone()
2021-03-12 08:51:26,207 [main:114] - replacement of this.prope3 of type Any? is (wrap1(a)!!.x)?.clone()
2021-03-12 08:51:26,344 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 08:51:26,344 [main:66] - Compilation checking started
2021-03-12 08:51:26,727 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
(wrap1(a)!!.x)?.clone() = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:26,729 [main:107] - replacing (prope6, Boolean)
2021-03-12 08:51:26,729 [main:50] - replacing prope6 Boolean
2021-03-12 08:51:26,729 [main:54] - Getting value of type Boolean
2021-03-12 08:51:26,864 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:26,866 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:51:26,866 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:27,015 [main:67] - randomType = ULong
2021-03-12 08:51:27,146 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:51:27,181 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@55fbac9d]
2021-03-12 08:51:27,312 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:51:27,314 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1570db98]
2021-03-12 08:51:27,450 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:27,450 [main:78] - Generated call from random type = (2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")
2021-03-12 08:51:27,451 [main:106] - GETTING Boolean from En
2021-03-12 08:51:27,479 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]]
2021-03-12 08:51:27,479 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b]
2021-03-12 08:51:27,614 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:27,614 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@161722eb]
2021-03-12 08:51:27,772 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:27,772 [main:117] - GENERATED CALL = (Z1(En.C).x).equals("kqbct").equals("xkppj")
2021-03-12 08:51:27,772 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b]]
2021-03-12 08:51:27,772 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b]
2021-03-12 08:51:27,901 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:27,902 [main:117] - GENERATED CALL = (Z1(En.C).x).equals("nylli")
2021-03-12 08:51:27,902 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@4811ac86], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59ba9caa]]
2021-03-12 08:51:27,902 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59ba9caa]
2021-03-12 08:51:27,902 [main:117] - GENERATED CALL = (Z1(En.C).x).name.toBoolean()
2021-03-12 08:51:27,902 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]]
2021-03-12 08:51:27,902 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b]
2021-03-12 08:51:28,026 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:28,026 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77136cf3]
2021-03-12 08:51:28,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:28,154 [main:117] - GENERATED CALL = (Z1(En.C).x).equals("oyuvu").and(false)
2021-03-12 08:51:28,154 [main:113] - Case = [public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52bb9216], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1570db98]]
2021-03-12 08:51:28,154 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52bb9216]
2021-03-12 08:51:28,155 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1570db98]
2021-03-12 08:51:28,285 [main:117] - GENERATED CALL = (Z1(En.C).x).compareTo(val a = En.A.equals(null)
2021-03-12 08:51:28,285 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@4811ac86], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@151cfd54]]
2021-03-12 08:51:28,285 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@151cfd54]
2021-03-12 08:51:28,407 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:28,530 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:28,533 [main:117] - GENERATED CALL = (Z1(En.C).x).name.endsWith("ofnxa", false)
2021-03-12 08:51:28,533 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@4811ac86], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c331482]]
2021-03-12 08:51:28,533 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c331482]
2021-03-12 08:51:28,655 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:28,657 [main:117] - GENERATED CALL = (Z1(En.C).x).name.matches("remaj")
2021-03-12 08:51:28,657 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]]
2021-03-12 08:51:28,657 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b]
2021-03-12 08:51:28,780 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:28,780 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1be219b8]
2021-03-12 08:51:28,904 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:28,907 [main:117] - GENERATED CALL = (Z1(En.C).x).equals("ujvca").or(false)
2021-03-12 08:51:28,907 [main:113] - Case = [public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]]
2021-03-12 08:51:28,907 [main:149] - GENERATING call of type public final fun equals(other: kotlin.Any?): kotlin.Boolean defined in En[DeserializedSimpleFunctionDescriptor@6c41ec6b]
2021-03-12 08:51:29,037 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:51:29,037 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@74c7ba2a]
2021-03-12 08:51:29,037 [main:117] - GENERATED CALL = (Z1(En.C).x).equals("pbwbh").not()
2021-03-12 08:51:29,037 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@4811ac86], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e5759]]
2021-03-12 08:51:29,037 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9e5759]
2021-03-12 08:51:29,158 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:29,282 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:29,284 [main:117] - GENERATED CALL = (Z1(En.C).x).name.startsWith("vpyjw", true)
2021-03-12 08:51:29,285 [main:114] - replacement of prope6 of type Boolean is (2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")
2021-03-12 08:51:29,407 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:29,407 [main:66] - Compilation checking started
2021-03-12 08:51:30,040 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    var prope2 = Kla0("O")

    fu1 {
        prope2 += Kla0("K")
    }

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:30,042 [main:107] - replacing ({
        prope2 += Kla0("K")
    }, SuspendFunction0<Unit>)
2021-03-12 08:51:30,044 [main:50] - replacing {
        prope2 += Kla0("K")
    } SuspendFunction0<Unit>
2021-03-12 08:51:30,044 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 08:51:30,252 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 08:51:30,254 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:51:30,395 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:51:30,399 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:51:30,693 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:51:30,694 [main:95] - GENERATED = print("dgsfz")
2021-03-12 08:51:30,694 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("dgsfz")}
2021-03-12 08:51:30,694 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:30,703 [main:67] - randomType = Kla2
2021-03-12 08:51:30,841 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 08:51:30,843 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 08:51:30,864 [main:106] - GETTING SuspendFunction0<Unit> from En
2021-03-12 08:51:30,891 [main:106] - GETTING SuspendFunction0<Unit> from Z1
2021-03-12 08:51:30,897 [main:106] - GETTING SuspendFunction0<Unit> from En
2021-03-12 08:51:30,898 [main:106] - GETTING SuspendFunction0<Unit> from Z1
2021-03-12 08:51:30,899 [main:106] - GETTING SuspendFunction0<Unit> from ZN
2021-03-12 08:51:30,907 [main:106] - GETTING SuspendFunction0<Unit> from En
2021-03-12 08:51:30,908 [main:106] - GETTING SuspendFunction0<Unit> from Z2?
2021-03-12 08:51:30,916 [main:106] - GETTING SuspendFunction0<Unit> from Z2?
2021-03-12 08:51:30,918 [main:106] - GETTING SuspendFunction0<Unit> from ZN?
2021-03-12 08:51:30,924 [main:106] - GETTING SuspendFunction0<Unit> from Z1?
2021-03-12 08:51:30,932 [main:106] - GETTING SuspendFunction0<Unit> from ZN?
2021-03-12 08:51:30,933 [main:106] - GETTING SuspendFunction0<Unit> from Z2?
2021-03-12 08:51:30,934 [main:106] - GETTING SuspendFunction0<Unit> from Z1?
2021-03-12 08:51:30,935 [main:106] - GETTING SuspendFunction0<Unit> from Z1?
2021-03-12 08:51:30,936 [main:106] - GETTING SuspendFunction0<Unit> from Z1?
2021-03-12 08:51:30,937 [main:106] - GETTING SuspendFunction0<Unit> from Z1?
2021-03-12 08:51:30,937 [main:106] - GETTING SuspendFunction0<Unit> from ZN?
2021-03-12 08:51:30,938 [main:106] - GETTING SuspendFunction0<Unit> from Z1
2021-03-12 08:51:30,939 [main:106] - GETTING SuspendFunction0<Unit> from Z2
2021-03-12 08:51:30,948 [main:106] - GETTING SuspendFunction0<Unit> from En
2021-03-12 08:51:30,949 [main:106] - GETTING SuspendFunction0<Unit> from Z1
2021-03-12 08:51:30,949 [main:114] - replacement of {
        prope2 += Kla0("K")
    } of type SuspendFunction0<Unit> is { print("dgsfz")}
2021-03-12 08:51:31,092 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:51:31,092 [main:66] - Compilation checking started
2021-03-12 08:51:31,735 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:31,737 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 08:51:31,737 [main:50] - replacing c Continuation<Unit>
2021-03-12 08:51:31,737 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 08:51:31,875 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 08:51:32,012 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:51:32,015 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:51:32,447 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:51:32,577 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:51:32,581 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:51:32,895 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:51:33,029 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:51:33,032 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:51:33,468 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:51:33,468 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:51:33,468 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:51:33,468 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 08:51:33,473 [main:67] - randomType = Int
2021-03-12 08:51:33,606 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:33,666 [main:106] - GETTING Continuation<Unit> from Z1
2021-03-12 08:51:33,675 [main:106] - GETTING Continuation<Unit> from En
2021-03-12 08:51:33,707 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:33,713 [main:106] - GETTING Continuation<Unit> from Z1
2021-03-12 08:51:33,714 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:33,715 [main:106] - GETTING Continuation<Unit> from ZN?
2021-03-12 08:51:33,721 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:33,722 [main:106] - GETTING Continuation<Unit> from En
2021-03-12 08:51:33,723 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:33,724 [main:106] - GETTING Continuation<Unit> from En
2021-03-12 08:51:33,725 [main:106] - GETTING Continuation<Unit> from Z2
2021-03-12 08:51:33,732 [main:106] - GETTING Continuation<Unit> from Z1
2021-03-12 08:51:33,733 [main:106] - GETTING Continuation<Unit> from Z2?
2021-03-12 08:51:33,738 [main:106] - GETTING Continuation<Unit> from ZN?
2021-03-12 08:51:33,739 [main:106] - GETTING Continuation<Unit> from Z2?
2021-03-12 08:51:33,740 [main:106] - GETTING Continuation<Unit> from Z2?
2021-03-12 08:51:33,741 [main:106] - GETTING Continuation<Unit> from Z1
2021-03-12 08:51:33,741 [main:106] - GETTING Continuation<Unit> from ZN
2021-03-12 08:51:33,747 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:33,748 [main:106] - GETTING Continuation<Unit> from En
2021-03-12 08:51:33,749 [main:106] - GETTING Continuation<Unit> from ZN?
2021-03-12 08:51:33,749 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 08:51:33,749 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 08:51:33,749 [main:50] - replacing numberOfSuspensions Int
2021-03-12 08:51:33,749 [main:54] - Getting value of type Int
2021-03-12 08:51:33,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:33,874 [main:58] - GENERATED VALUE OF TYPE Int = -491885300
2021-03-12 08:51:33,874 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:33,887 [main:67] - randomType = Z1?
2021-03-12 08:51:34,010 [main:302] - generating value of type = Z1 false depth = 0
2021-03-12 08:51:34,012 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:51:34,135 [main:194] - Type params = []
2021-03-12 08:51:34,256 [main:302] - generating value of type = En false depth = 2
2021-03-12 08:51:34,259 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:51:34,266 [main:149] - GENERATING call of type public final fun compareTo(other: En): kotlin.Int defined in En[DeserializedSimpleFunctionDescriptor@2613b394]
2021-03-12 08:51:34,266 [main:78] - Generated call from random type = (Z1(En.C))?.x.compareTo(val n = En.N
2021-03-12 08:51:34,266 [main:114] - replacement of numberOfSuspensions of type Int is (Z1(En.C))?.x.compareTo(val n = En.N
2021-03-12 08:51:34,387 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 08:51:34,388 [main:66] - Compilation checking started
2021-03-12 08:51:34,393 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:51:34,393 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Z1(En.C))?.x.compareTo(val n = En.N + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:34,395 [main:107] - replacing (method, String)
2021-03-12 08:51:34,395 [main:50] - replacing method String
2021-03-12 08:51:34,395 [main:54] - Getting value of type String
2021-03-12 08:51:34,527 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:34,529 [main:58] - GENERATED VALUE OF TYPE String = "evlqn"
2021-03-12 08:51:34,529 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:34,807 [main:67] - randomType = UShort?
2021-03-12 08:51:34,928 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:51:34,987 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1a564653]
2021-03-12 08:51:35,109 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:51:35,111 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@474f4be8]
2021-03-12 08:51:35,234 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:35,236 [main:78] - Generated call from random type = (16732.toUShort())?.div(125.toUByte()).toString(1743610183)
2021-03-12 08:51:35,237 [main:106] - GETTING String from Z1?
2021-03-12 08:51:35,243 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@15867f1f], public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@4811ac86]]
2021-03-12 08:51:35,243 [main:117] - GENERATED CALL = (wrap1(En.N)).x.name
2021-03-12 08:51:35,243 [main:114] - replacement of method of type String is "evlqn"
2021-03-12 08:51:35,365 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:51:35,365 [main:66] - Compilation checking started
2021-03-12 08:51:36,012 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "evlqn" + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:36,013 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-12 08:51:36,014 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-12 08:51:36,014 [main:54] - Getting value of type String
2021-03-12 08:51:36,144 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:36,147 [main:58] - GENERATED VALUE OF TYPE String = "frndx"
2021-03-12 08:51:36,147 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:36,295 [main:67] - randomType = Set<Kla0>
2021-03-12 08:51:36,296 [main:106] - GETTING String from Z1?
2021-03-12 08:51:36,303 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@3d0c7cf8], public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0]]
2021-03-12 08:51:36,303 [main:117] - GENERATED CALL = (wrap1(n)).x.name
2021-03-12 08:51:36,303 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is "frndx"
2021-03-12 08:51:36,427 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:51:36,428 [main:66] - Compilation checking started
2021-03-12 08:51:37,007 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "evlqn" + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("frndx" + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:37,010 [main:107] - replacing (prope3, Result<Any?>)
2021-03-12 08:51:37,010 [main:50] - replacing prope3 Result<Any?>
2021-03-12 08:51:37,010 [main:54] - Getting value of type Result<Any?>
2021-03-12 08:51:37,149 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 08:51:37,278 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:51:37,281 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:51:37,551 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 08:51:37,554 [main:95] - GENERATED = runCatching<Any?>({ null})
2021-03-12 08:51:37,554 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ null})
2021-03-12 08:51:37,554 [main:61] - GENERATED IS CALL =true
2021-03-12 08:51:37,728 [main:67] - randomType = ArrayDeque<Boolean>
2021-03-12 08:51:37,853 [main:302] - generating value of type = ArrayDeque<Boolean> false depth = 0
2021-03-12 08:51:37,986 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Boolean> = TODO()
2021-03-12 08:51:37,989 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Boolean> = TODO()
2021-03-12 08:51:38,250 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:51:38,253 [main:95] - GENERATED = ArrayDeque<Boolean>(254206609)
2021-03-12 08:51:38,379 [main:106] - GETTING Result<Any?> from Z1
2021-03-12 08:51:38,386 [main:106] - GETTING Result<Any?> from En
2021-03-12 08:51:38,408 [main:106] - GETTING Result<Any?> from En
2021-03-12 08:51:38,409 [main:106] - GETTING Result<Any?> from Z1
2021-03-12 08:51:38,411 [main:106] - GETTING Result<Any?> from Z1?
2021-03-12 08:51:38,418 [main:106] - GETTING Result<Any?> from Z1?
2021-03-12 08:51:38,419 [main:106] - GETTING Result<Any?> from Z2?
2021-03-12 08:51:38,427 [main:106] - GETTING Result<Any?> from Z2?
2021-03-12 08:51:38,429 [main:106] - GETTING Result<Any?> from Z1?
2021-03-12 08:51:38,430 [main:106] - GETTING Result<Any?> from En
2021-03-12 08:51:38,431 [main:106] - GETTING Result<Any?> from En
2021-03-12 08:51:38,433 [main:106] - GETTING Result<Any?> from ZN?
2021-03-12 08:51:38,441 [main:106] - GETTING Result<Any?> from Z1?
2021-03-12 08:51:38,442 [main:106] - GETTING Result<Any?> from ZN?
2021-03-12 08:51:38,443 [main:106] - GETTING Result<Any?> from Z1
2021-03-12 08:51:38,445 [main:106] - GETTING Result<Any?> from ZN?
2021-03-12 08:51:38,446 [main:106] - GETTING Result<Any?> from Z2
2021-03-12 08:51:38,453 [main:106] - GETTING Result<Any?> from Z1?
2021-03-12 08:51:38,454 [main:106] - GETTING Result<Any?> from Z2?
2021-03-12 08:51:38,456 [main:106] - GETTING Result<Any?> from Z1
2021-03-12 08:51:38,457 [main:106] - GETTING Result<Any?> from ZN
2021-03-12 08:51:38,462 [main:114] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ null})
2021-03-12 08:51:38,587 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:51:38,587 [main:66] - Compilation checking started
2021-03-12 08:51:39,243 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "evlqn" + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("frndx" + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:39,245 [main:107] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-12 08:51:39,246 [main:50] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-12 08:51:39,246 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 08:51:39,389 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 08:51:39,391 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 08:51:39,520 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 08:51:39,523 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 08:51:39,791 [main:302] - generating value of type = String true depth = 4
2021-03-12 08:51:39,793 [main:95] - GENERATED = TODO("gxqec")
2021-03-12 08:51:39,793 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("gxqec")}
2021-03-12 08:51:39,794 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:39,940 [main:67] - randomType = Boolean?
2021-03-12 08:51:40,064 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:51:40,078 [main:106] - GETTING Function0<Nothing> from Z1
2021-03-12 08:51:40,083 [main:106] - GETTING Function0<Nothing> from ZN?
2021-03-12 08:51:40,090 [main:106] - GETTING Function0<Nothing> from ZN?
2021-03-12 08:51:40,091 [main:106] - GETTING Function0<Nothing> from Z2?
2021-03-12 08:51:40,097 [main:106] - GETTING Function0<Nothing> from Z1?
2021-03-12 08:51:40,103 [main:106] - GETTING Function0<Nothing> from Z1
2021-03-12 08:51:40,104 [main:106] - GETTING Function0<Nothing> from En
2021-03-12 08:51:40,129 [main:106] - GETTING Function0<Nothing> from ZN
2021-03-12 08:51:40,137 [main:106] - GETTING Function0<Nothing> from Z2?
2021-03-12 08:51:40,138 [main:106] - GETTING Function0<Nothing> from Z2
2021-03-12 08:51:40,145 [main:106] - GETTING Function0<Nothing> from En
2021-03-12 08:51:40,147 [main:106] - GETTING Function0<Nothing> from Z1?
2021-03-12 08:51:40,148 [main:106] - GETTING Function0<Nothing> from Z1
2021-03-12 08:51:40,149 [main:106] - GETTING Function0<Nothing> from Z1
2021-03-12 08:51:40,150 [main:106] - GETTING Function0<Nothing> from ZN?
2021-03-12 08:51:40,151 [main:106] - GETTING Function0<Nothing> from Z1?
2021-03-12 08:51:40,152 [main:106] - GETTING Function0<Nothing> from En
2021-03-12 08:51:40,172 [main:106] - GETTING Function0<Nothing> from Z1?
2021-03-12 08:51:40,173 [main:106] - GETTING Function0<Nothing> from Z2?
2021-03-12 08:51:40,174 [main:106] - GETTING Function0<Nothing> from Z1?
2021-03-12 08:51:40,175 [main:106] - GETTING Function0<Nothing> from En
2021-03-12 08:51:40,175 [main:114] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO("gxqec")}
2021-03-12 08:51:40,298 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:51:40,298 [main:66] - Compilation checking started
2021-03-12 08:51:40,874 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { TODO("gxqec")}
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "evlqn" + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("frndx" + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:40,877 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 08:51:40,877 [main:50] - replacing it Continuation<Unit>
2021-03-12 08:51:40,877 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 08:51:41,013 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 08:51:41,146 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:51:41,150 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:51:41,555 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:51:41,682 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:51:41,685 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:51:41,956 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:51:42,084 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:51:42,087 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:51:42,497 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:51:42,497 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:51:42,498 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:51:42,498 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 08:51:42,634 [main:67] - randomType = Kla6
2021-03-12 08:51:42,782 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 08:51:42,784 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-12 08:51:42,805 [main:106] - GETTING Continuation<Unit> from ZN?
2021-03-12 08:51:42,810 [main:106] - GETTING Continuation<Unit> from En
2021-03-12 08:51:42,830 [main:106] - GETTING Continuation<Unit> from En
2021-03-12 08:51:42,831 [main:106] - GETTING Continuation<Unit> from Z2?
2021-03-12 08:51:42,836 [main:106] - GETTING Continuation<Unit> from Z1
2021-03-12 08:51:42,842 [main:106] - GETTING Continuation<Unit> from Z1
2021-03-12 08:51:42,843 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:42,848 [main:106] - GETTING Continuation<Unit> from En
2021-03-12 08:51:42,849 [main:106] - GETTING Continuation<Unit> from Z2?
2021-03-12 08:51:42,850 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:42,850 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:42,851 [main:106] - GETTING Continuation<Unit> from Z2?
2021-03-12 08:51:42,852 [main:106] - GETTING Continuation<Unit> from ZN?
2021-03-12 08:51:42,853 [main:106] - GETTING Continuation<Unit> from Z1
2021-03-12 08:51:42,854 [main:106] - GETTING Continuation<Unit> from En
2021-03-12 08:51:42,855 [main:106] - GETTING Continuation<Unit> from Z2
2021-03-12 08:51:42,860 [main:106] - GETTING Continuation<Unit> from Z1
2021-03-12 08:51:42,861 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:42,862 [main:106] - GETTING Continuation<Unit> from ZN?
2021-03-12 08:51:42,863 [main:106] - GETTING Continuation<Unit> from Z1?
2021-03-12 08:51:42,864 [main:106] - GETTING Continuation<Unit> from ZN
2021-03-12 08:51:42,869 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 08:51:42,869 [main:107] - replacing ("\n", String)
2021-03-12 08:51:42,869 [main:50] - replacing "\n" String
2021-03-12 08:51:42,869 [main:54] - Getting value of type String
2021-03-12 08:51:42,989 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:42,991 [main:58] - GENERATED VALUE OF TYPE String = "cgpgd"
2021-03-12 08:51:42,991 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:43,283 [main:67] - randomType = Array<MutableMap<Double, Z2?>>
2021-03-12 08:51:43,403 [main:302] - generating value of type = Array<MutableMap<Double, Z2?>> false depth = 0
2021-03-12 08:51:43,529 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<MutableMap<Double, Z2?>> = TODO()
2021-03-12 08:51:43,532 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<MutableMap<Double, Z2?>> = TODO()
2021-03-12 08:51:43,791 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:51:43,793 [main:95] - GENERATED = arrayOfNulls<MutableMap<Double, Z2?>>(-1521034112)
2021-03-12 08:51:43,812 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b386293]
2021-03-12 08:51:43,813 [main:78] - Generated call from random type = (arrayOfNulls<MutableMap<Double, Z2?>>(-1521034112)).contentDeepToString()
2021-03-12 08:51:43,813 [main:106] - GETTING String from ZN?
2021-03-12 08:51:43,820 [main:106] - GETTING String from En
2021-03-12 08:51:43,838 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@316c53cb]]
2021-03-12 08:51:43,838 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@316c53cb]
2021-03-12 08:51:43,958 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:51:43,960 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:51:43,962 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.takeWhile({a: Char -> false})
2021-03-12 08:51:43,963 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f5a45e8]]
2021-03-12 08:51:43,963 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f5a45e8]
2021-03-12 08:51:44,084 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:51:44,089 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.removeSuffix("dgguj")
2021-03-12 08:51:44,089 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b731450]]
2021-03-12 08:51:44,089 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b731450]
2021-03-12 08:51:44,211 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:51:44,335 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:44,337 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.substringBeforeLast('፬', "nyrac")
2021-03-12 08:51:44,337 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@695eb28e]]
2021-03-12 08:51:44,337 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@695eb28e]
2021-03-12 08:51:44,464 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:51:44,469 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.removeSurrounding("nwfhe")
2021-03-12 08:51:44,469 [main:113] - Case = [public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@40f59c4e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7d1764]]
2021-03-12 08:51:44,469 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: En): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@40f59c4e]
2021-03-12 08:51:44,591 [main:302] - generating value of type = En false depth = 0
2021-03-12 08:51:44,593 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:51:44,593 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7d1764]
2021-03-12 08:51:44,715 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:44,718 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).compareTo(En.B).toString(-1788927025)
2021-03-12 08:51:44,718 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@782d3378]]
2021-03-12 08:51:44,718 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@782d3378]
2021-03-12 08:51:44,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:44,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:44,998 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.removeRange(784079019, -488198887)
2021-03-12 08:51:44,998 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ce74a69]]
2021-03-12 08:51:44,998 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ce74a69]
2021-03-12 08:51:44,998 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.uppercase()
2021-03-12 08:51:44,998 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3f55f3]]
2021-03-12 08:51:44,998 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3f55f3]
2021-03-12 08:51:45,118 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:45,120 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.takeLast(-1610994832)
2021-03-12 08:51:45,120 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d64bc29]]
2021-03-12 08:51:45,120 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d64bc29]
2021-03-12 08:51:45,239 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:51:45,360 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:45,482 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:45,484 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.replaceBefore('蓇', "ityko", "xzwtq")
2021-03-12 08:51:45,484 [main:113] - Case = [public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@6c5f23a0], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34a60024]]
2021-03-12 08:51:45,484 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34a60024]
2021-03-12 08:51:45,604 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:51:45,606 [main:117] - GENERATED CALL = (wrap2(a)!!.z.x).name.take(-519383972)
2021-03-12 08:51:45,606 [main:114] - replacement of "\n" of type String is (wrap2(a)!!.z.x).name.uppercase()
2021-03-12 08:51:45,725 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:45,726 [main:66] - Compilation checking started
2021-03-12 08:51:46,318 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { TODO("gxqec")}
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "evlqn" + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = (wrap2(a)!!.z.x).name.uppercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("frndx" + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:46,321 [main:107] - replacing (", got ", String)
2021-03-12 08:51:46,321 [main:50] - replacing ", got " String
2021-03-12 08:51:46,321 [main:54] - Getting value of type String
2021-03-12 08:51:46,486 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:51:46,489 [main:58] - GENERATED VALUE OF TYPE String = "skkut"
2021-03-12 08:51:46,489 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:46,500 [main:67] - randomType = Kla5
2021-03-12 08:51:46,623 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:51:46,626 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("frndx" + -1056147191 + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:51:46,634 [main:106] - GETTING String from ZN
2021-03-12 08:51:46,640 [main:106] - GETTING String from ZN?
2021-03-12 08:51:46,644 [main:106] - GETTING String from ZN?
2021-03-12 08:51:46,645 [main:106] - GETTING String from Z2?
2021-03-12 08:51:46,651 [main:106] - GETTING String from Z1
2021-03-12 08:51:46,654 [main:113] - Case = [public final val x: En defined in Z1[PropertyDescriptorImpl@15867f1f], public final val name: kotlin.String defined in En[DeserializedPropertyDescriptor@4811ac86]]
2021-03-12 08:51:46,655 [main:117] - GENERATED CALL = (Z2(Z1(En.A)).z).x.name
2021-03-12 08:51:46,655 [main:114] - replacement of ", got " of type String is (Z2(Z1(En.A)).z).x.name
2021-03-12 08:51:46,775 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:51:46,776 [main:66] - Compilation checking started
2021-03-12 08:51:47,341 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { TODO("gxqec")}
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "evlqn" + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = (wrap2(a)!!.z.x).name.uppercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("frndx" + -1056147191 + (Z2(Z1(En.A)).z).x.name + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:47,344 [main:107] - replacing ({
            Kla5().prope6 = true
        }, Function0<Unit>)
2021-03-12 08:51:47,344 [main:50] - replacing {
            Kla5().prope6 = true
        } Function0<Unit>
2021-03-12 08:51:47,344 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:51:47,492 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:51:47,495 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:51:47,658 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:51:47,663 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:51:48,077 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:51:48,080 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:51:48,083 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:51:48,083 [main:95] - GENERATED = check(false, { "vyiut"})
2021-03-12 08:51:48,083 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "vyiut"})}
2021-03-12 08:51:48,083 [main:61] - GENERATED IS CALL =false
2021-03-12 08:51:48,095 [main:67] - randomType = Z2
2021-03-12 08:51:48,217 [main:302] - generating value of type = Z2 false depth = 0
2021-03-12 08:51:48,220 [main:112] - generating klass Z2 text = inline class Z2(val z: Z1)
2021-03-12 08:51:48,348 [main:194] - Type params = []
2021-03-12 08:51:48,474 [main:302] - generating value of type = Z1 false depth = 2
2021-03-12 08:51:48,477 [main:112] - generating klass Z1 text = inline class Z1(val x: En)
2021-03-12 08:51:48,598 [main:194] - Type params = []
2021-03-12 08:51:48,720 [main:302] - generating value of type = En false depth = 4
2021-03-12 08:51:48,723 [main:112] - generating klass En text = enum class En { N, A, B, C }
2021-03-12 08:51:48,730 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:48,737 [main:106] - GETTING Function0<Unit> from Z2
2021-03-12 08:51:48,744 [main:106] - GETTING Function0<Unit> from Z1
2021-03-12 08:51:48,751 [main:106] - GETTING Function0<Unit> from ZN?
2021-03-12 08:51:48,758 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:48,759 [main:106] - GETTING Function0<Unit> from Z1
2021-03-12 08:51:48,760 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:48,761 [main:106] - GETTING Function0<Unit> from ZN
2021-03-12 08:51:48,769 [main:106] - GETTING Function0<Unit> from Z2?
2021-03-12 08:51:48,775 [main:106] - GETTING Function0<Unit> from ZN?
2021-03-12 08:51:48,776 [main:106] - GETTING Function0<Unit> from En
2021-03-12 08:51:48,801 [main:106] - GETTING Function0<Unit> from Z2?
2021-03-12 08:51:48,802 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:48,803 [main:106] - GETTING Function0<Unit> from Z1
2021-03-12 08:51:48,804 [main:106] - GETTING Function0<Unit> from ZN?
2021-03-12 08:51:48,805 [main:106] - GETTING Function0<Unit> from Z1?
2021-03-12 08:51:48,806 [main:106] - GETTING Function0<Unit> from En
2021-03-12 08:51:48,807 [main:106] - GETTING Function0<Unit> from En
2021-03-12 08:51:48,808 [main:106] - GETTING Function0<Unit> from Z1
2021-03-12 08:51:48,809 [main:106] - GETTING Function0<Unit> from Z2?
2021-03-12 08:51:48,810 [main:106] - GETTING Function0<Unit> from En
2021-03-12 08:51:48,810 [main:114] - replacement of {
            Kla5().prope6 = true
        } of type Function0<Unit> is { check(false, { "vyiut"})}
2021-03-12 08:51:48,936 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:51:48,937 [main:66] - Compilation checking started
2021-03-12 08:51:49,546 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { TODO("gxqec")}
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "evlqn" + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = (wrap2(a)!!.z.x).name.uppercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("frndx" + -1056147191 + (Z2(Z1(En.A)).z).x.name + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = { check(false, { "vyiut"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:49,549 [main:107] - replacing (this, Kla2)
2021-03-12 08:51:49,549 [main:50] - replacing this Kla2
2021-03-12 08:51:49,549 [main:54] - Getting value of type Kla2
2021-03-12 08:51:49,672 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 08:51:49,675 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 08:51:49,675 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 08:51:49,675 [main:61] - GENERATED IS CALL =true
2021-03-12 08:51:49,681 [main:67] - randomType = ULong
2021-03-12 08:51:49,807 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:51:49,847 [main:106] - GETTING Kla2 from Z1
2021-03-12 08:51:49,851 [main:106] - GETTING Kla2 from Z1?
2021-03-12 08:51:49,856 [main:106] - GETTING Kla2 from ZN?
2021-03-12 08:51:49,861 [main:106] - GETTING Kla2 from Z1?
2021-03-12 08:51:49,862 [main:106] - GETTING Kla2 from Z1
2021-03-12 08:51:49,862 [main:106] - GETTING Kla2 from En
2021-03-12 08:51:49,882 [main:106] - GETTING Kla2 from ZN?
2021-03-12 08:51:49,883 [main:106] - GETTING Kla2 from ZN?
2021-03-12 08:51:49,883 [main:106] - GETTING Kla2 from Z2?
2021-03-12 08:51:49,888 [main:106] - GETTING Kla2 from Z1
2021-03-12 08:51:49,889 [main:106] - GETTING Kla2 from Z2
2021-03-12 08:51:49,893 [main:106] - GETTING Kla2 from ZN
2021-03-12 08:51:49,898 [main:106] - GETTING Kla2 from En
2021-03-12 08:51:49,899 [main:106] - GETTING Kla2 from Z1
2021-03-12 08:51:49,899 [main:106] - GETTING Kla2 from Z2?
2021-03-12 08:51:49,900 [main:106] - GETTING Kla2 from En
2021-03-12 08:51:49,900 [main:106] - GETTING Kla2 from Z1?
2021-03-12 08:51:49,901 [main:106] - GETTING Kla2 from Z1?
2021-03-12 08:51:49,902 [main:106] - GETTING Kla2 from Z1?
2021-03-12 08:51:49,902 [main:106] - GETTING Kla2 from Z2?
2021-03-12 08:51:49,903 [main:106] - GETTING Kla2 from En
2021-03-12 08:51:49,903 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-12 08:51:50,025 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:51:50,025 [main:66] - Compilation checking started
2021-03-12 08:51:50,612 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
enum class En { N, A, B, C }

inline class Z1(val x: En)
inline class Z2(val z: Z1)
inline class ZN(val z: Z1?)

fun wrap1(x: En): Z1? = if (x.ordinal == 0) null else Z1(x)
fun wrap2(x: En): Z2? = if (x.ordinal == 0) null else Z2(Z1(x))
fun wrapN(x: En): ZN? = if (x.ordinal == 0) null else ZN(Z1(x))

fun box(): String {
    val n = En.N
    val a = En.A

    if (wrap1(n) != null) throw AssertionError()
    if (wrap1(a) == null) throw AssertionError()
    if (wrap1(a)!!.x != a) throw AssertionError()

    if (wrap2(n) != null) throw AssertionError()
    if (wrap2(a) == null) throw AssertionError()
    if (wrap2(a)!!.z.x != a) throw AssertionError()

    if (wrapN(n) != null) throw AssertionError()
    if (wrapN(a) == null) throw AssertionError()
    if (wrapN(a)!!.z!!.x != a) throw AssertionError()

    return "OK"
}

suspend fun fu0(v: Kla0): Kla0 = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(v)
    COROUTINE_SUSPENDED
}

class Kla0(val value: String) {
    operator suspend fun plus(other: Kla0) = fu0(Kla0(value + other.value))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box301(): String {
    val n = En.N
val a = En.A
var prope2 = Kla0("O")

    fu1 { print("dgsfz")}

    return prope2.value
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val n = En.N
val a = En.A
Kla2().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val n = En.N
val a = En.A
if ((0.87420446f)?.toLong().equals("bkysp")) {
            resume(prope3.getOrThrow())
        } else {
            fu4(NotImplementedError("mfbug"))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val n = En.N
val a = En.A
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val n = En.N
val a = En.A
prope4.find { true}?.let { TODO("gxqec")}
    }

    fun fu8(method: String) {
        val n = En.N
val a = En.A
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "evlqn" + (0.20970349700231772).compareTo(66).toString(15792778) +
                prope4.joinToString(separator = (wrap2(a)!!.z.x).name.uppercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val n = En.N
val a = En.A
for (i in (wrap1(a)!!).equals("wmwqy").compareTo(false)..numberOfSuspensions) {
            if (prope5 != i) error("frndx" + -1056147191 + (Z2(Z1(En.A)).z).x.name + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((2169684469745578522.toULong()).compareTo(37.toUByte()).equals("ixgmr")) error("mqwoe")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val n = En.N
val a = En.A
prope1.prope7 = { check(false, { "vyiut"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:51:50,614 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 08:51:50,614 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 08:51:50,614 [main:54] - Getting value of type Function0<Unit>
