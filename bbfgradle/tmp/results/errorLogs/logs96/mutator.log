2021-03-12 08:05:36,331 [main:66] - Compilation checking started
2021-03-12 08:05:38,246 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:05:38,248 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:05:38,623 [main:45] - Trying to change 43 nodes
2021-03-12 08:05:38,627 [main:53] - replacing (0, Int)
2021-03-12 08:05:38,627 [main:50] - replacing 0 Int
2021-03-12 08:05:38,627 [main:54] - Getting value of type Int
2021-03-12 08:05:38,781 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:38,783 [main:58] - GENERATED VALUE OF TYPE Int = 1039489087
2021-03-12 08:05:38,783 [main:61] - GENERATED IS CALL =false
2021-03-12 08:05:39,329 [main:67] - randomType = Float
2021-03-12 08:05:39,488 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:05:39,624 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5ba699c9]
2021-03-12 08:05:39,625 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6630ba5a]
2021-03-12 08:05:39,790 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:39,793 [main:78] - Generated call from random type = (0.18811715f).toShort().compareTo(51)
2021-03-12 08:05:39,812 [main:106] - GETTING Int from IntArray
2021-03-12 08:05:39,833 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]]
2021-03-12 08:05:39,833 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]
2021-03-12 08:05:39,994 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:39,996 [main:117] - GENERATED CALL = (xx).size.shl(-950622061)
2021-03-12 08:05:39,997 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]]
2021-03-12 08:05:39,997 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:05:40,159 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:40,162 [main:117] - GENERATED CALL = (xx).size.plus(80)
2021-03-12 08:05:40,164 [main:113] - Case = [public inline fun kotlin.IntArray.sumBy(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b648069]]
2021-03-12 08:05:40,165 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.sumBy(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b648069]
2021-03-12 08:05:40,302 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:05:40,303 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:05:40,307 [main:117] - GENERATED CALL = (xx).sumBy({a: Int -> 726263757})
2021-03-12 08:05:40,307 [main:113] - Case = [public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]]
2021-03-12 08:05:40,307 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]
2021-03-12 08:05:40,458 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:05:40,459 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:05:40,461 [main:117] - GENERATED CALL = (xx).reduce({a: Int, b: Int -> -1915387933})
2021-03-12 08:05:40,462 [main:113] - Case = [public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]]
2021-03-12 08:05:40,462 [main:149] - GENERATING call of type public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]
2021-03-12 08:05:40,587 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:40,589 [main:117] - GENERATED CALL = (xx).lastIndexOf(-176834232)
2021-03-12 08:05:40,589 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@bd9e37b]]
2021-03-12 08:05:40,589 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@bd9e37b]
2021-03-12 08:05:40,591 [main:117] - GENERATED CALL = (xx).size.countOneBits()
2021-03-12 08:05:40,591 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c8a47f3]]
2021-03-12 08:05:40,591 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c8a47f3]
2021-03-12 08:05:40,592 [main:117] - GENERATED CALL = (xx).size.dec()
2021-03-12 08:05:40,592 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]]
2021-03-12 08:05:40,592 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]
2021-03-12 08:05:40,593 [main:117] - GENERATED CALL = (xx).size.inc()
2021-03-12 08:05:40,593 [main:113] - Case = [public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]]
2021-03-12 08:05:40,593 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]
2021-03-12 08:05:40,735 [main:302] - generating value of type = Function2<Int, [@kotlin.ParameterName] Int, Int> false depth = 0
2021-03-12 08:05:40,736 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:05:40,738 [main:117] - GENERATED CALL = (xx).reduceRight({a: Int, b: Int -> 1290337734})
2021-03-12 08:05:40,738 [main:113] - Case = [public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]]
2021-03-12 08:05:40,738 [main:149] - GENERATING call of type public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]
2021-03-12 08:05:40,739 [main:117] - GENERATED CALL = (xx).sum()
2021-03-12 08:05:40,739 [main:61] - replacement of 0 of type Int is (xx).size.plus(80)
2021-03-12 08:05:40,871 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:05:40,872 [main:66] - Compilation checking started
2021-03-12 08:05:41,274 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[(xx).size.plus(80)]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}
2021-03-12 08:05:41,277 [main:53] - replacing ("OK", String)
2021-03-12 08:05:41,277 [main:50] - replacing "OK" String
2021-03-12 08:05:41,277 [main:54] - Getting value of type String
2021-03-12 08:05:41,439 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:05:41,441 [main:58] - GENERATED VALUE OF TYPE String = "mhckk"
2021-03-12 08:05:41,442 [main:61] - GENERATED IS CALL =false
2021-03-12 08:05:41,444 [main:67] - randomType = A
2021-03-12 08:05:41,571 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:05:41,572 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:05:41,584 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:05:41,696 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:05:41,820 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:05:41,824 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:05:42,129 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:05:42,136 [main:95] - GENERATED = StringBuilder("dplgd")
2021-03-12 08:05:42,238 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:05:42,351 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:05:42,463 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:05:42,466 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:05:42,736 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:05:42,737 [main:95] - GENERATED = StringBuilder(343811680)
2021-03-12 08:05:42,866 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:43,006 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:05:43,116 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:05:43,118 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:05:43,330 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:05:43,335 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 08:05:43,454 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:05:43,455 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:05:43,463 [main:78] - Generated call from random type = (A).xx.joinToString(StringBuilder("dplgd"), "aqpum", StringBuilder(343811680), 543069536, StringBuilder(StringBuilder()), {a: Int -> "bcoqv"})
2021-03-12 08:05:43,464 [main:106] - GETTING String from IntArray
2021-03-12 08:05:43,483 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]]
2021-03-12 08:05:43,483 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:05:43,485 [main:117] - GENERATED CALL = (xx).contentToString()
2021-03-12 08:05:43,485 [main:113] - Case = [public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]]
2021-03-12 08:05:43,485 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:05:43,587 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:05:43,690 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:05:43,693 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:05:43,938 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:05:44,057 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:05:44,060 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:05:44,281 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 08:05:44,380 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:05:44,382 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:05:44,687 [main:302] - generating value of type = Int true depth = 9
2021-03-12 08:05:44,688 [main:95] - GENERATED = StringBuilder(-636373552)
2021-03-12 08:05:44,689 [main:95] - GENERATED = StringBuilder(StringBuilder(-636373552))
2021-03-12 08:05:44,689 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder(-636373552)))
2021-03-12 08:05:44,792 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:05:44,894 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:05:44,987 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:45,079 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:05:45,195 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:05:45,196 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:05:45,204 [main:117] - GENERATED CALL = (xx).joinToString(StringBuilder(StringBuilder(StringBuilder(-636373552))), "ayuhn", "kivom", 1928122878, StringBuilder(), {a: Int -> "fnzmh"})
2021-03-12 08:05:45,204 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:05:45,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:05:45,299 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:45,300 [main:117] - GENERATED CALL = (xx).size.toString(-543257153)
2021-03-12 08:05:45,300 [main:61] - replacement of "OK" of type String is (xx).joinToString(StringBuilder(StringBuilder(StringBuilder(-636373552))), "ayuhn", "kivom", 1928122878, StringBuilder(), {a: Int -> "fnzmh"})
2021-03-12 08:05:45,402 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:05:45,403 [main:66] - Compilation checking started
2021-03-12 08:05:45,774 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return (xx).joinToString(StringBuilder(StringBuilder(StringBuilder(-636373552))), "ayuhn", "kivom", 1928122878, StringBuilder(), {a: Int -> "fnzmh"})
}


2021-03-12 08:05:45,775 [main:53] - replacing (A.x, IntArray)
2021-03-12 08:05:45,775 [main:50] - replacing A.x IntArray
2021-03-12 08:05:45,776 [main:54] - Getting value of type IntArray
2021-03-12 08:05:45,895 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:05:46,022 [main:43] - GENERATING CALL OF fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:05:46,024 [main:61] - WITHOUT TYPE PARAMS = fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:05:46,143 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:05:46,144 [main:95] - GENERATED = intArrayOf(1652884571)
2021-03-12 08:05:46,144 [main:58] - GENERATED VALUE OF TYPE IntArray = intArrayOf(1652884571)
2021-03-12 08:05:46,144 [main:61] - GENERATED IS CALL =true
2021-03-12 08:05:46,355 [main:67] - randomType = HashSet<A>
2021-03-12 08:05:46,455 [main:302] - generating value of type = HashSet<A> false depth = 0
2021-03-12 08:05:46,553 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<A> = TODO()
2021-03-12 08:05:46,555 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<A> = TODO()
2021-03-12 08:05:46,676 [main:95] - GENERATED = linkedSetOf<A>()
2021-03-12 08:05:46,867 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@6fe08ffc]
2021-03-12 08:05:46,868 [main:149] - GENERATING call of type public fun kotlin.Array<out kotlin.Int>.toIntArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d0bbae5]
2021-03-12 08:05:46,868 [main:78] - Generated call from random type = (linkedSetOf<A>()).toArray().toIntArray()
2021-03-12 08:05:46,869 [main:106] - GETTING IntArray from IntArray
2021-03-12 08:05:46,882 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]]
2021-03-12 08:05:46,882 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]
2021-03-12 08:05:46,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:47,073 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:47,173 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:47,175 [main:117] - GENERATED CALL = (xx).copyInto(xx, -1346259487, 772356487, -46407307)
2021-03-12 08:05:47,175 [main:113] - Case = [public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]]
2021-03-12 08:05:47,175 [main:149] - GENERATING call of type public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]
2021-03-12 08:05:47,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:47,274 [main:117] - GENERATED CALL = (xx).plus(23510478)
2021-03-12 08:05:47,274 [main:113] - Case = [public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]]
2021-03-12 08:05:47,274 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]
2021-03-12 08:05:47,275 [main:117] - GENERATED CALL = (xx).sortedArray()
2021-03-12 08:05:47,275 [main:113] - Case = [public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]]
2021-03-12 08:05:47,275 [main:149] - GENERATING call of type public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]
2021-03-12 08:05:47,276 [main:117] - GENERATED CALL = (xx).reversedArray()
2021-03-12 08:05:47,276 [main:113] - Case = [public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]]
2021-03-12 08:05:47,276 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]
2021-03-12 08:05:47,277 [main:117] - GENERATED CALL = (xx).copyOf()
2021-03-12 08:05:47,277 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]]
2021-03-12 08:05:47,277 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]
2021-03-12 08:05:47,410 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Unit> false depth = 0
2021-03-12 08:05:47,411 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:05:47,536 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:05:47,538 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:05:47,840 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:05:47,840 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:05:47,840 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:05:47,841 [main:95] - GENERATED = require(false, { "awgds"})
2021-03-12 08:05:47,842 [main:117] - GENERATED CALL = (xx).onEachIndexed({a: Int, b: Int -> require(false, { "awgds"})})
2021-03-12 08:05:47,842 [main:113] - Case = [public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]]
2021-03-12 08:05:47,842 [main:149] - GENERATING call of type public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]
2021-03-12 08:05:47,943 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:48,038 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:48,040 [main:117] - GENERATED CALL = (xx).copyOfRange(157862262, -485168269)
2021-03-12 08:05:48,040 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]]
2021-03-12 08:05:48,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]
2021-03-12 08:05:48,132 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 08:05:48,132 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:05:48,229 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:05:48,231 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:05:48,446 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 08:05:48,447 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:05:48,552 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:05:48,555 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:05:48,765 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 08:05:48,765 [main:95] - GENERATED = check(false)
2021-03-12 08:05:48,766 [main:95] - GENERATED = contract({ check(false)})
2021-03-12 08:05:48,767 [main:117] - GENERATED CALL = (xx).onEach({a: Int -> contract({ check(false)})})
2021-03-12 08:05:48,767 [main:113] - Case = [public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]]
2021-03-12 08:05:48,768 [main:149] - GENERATING call of type public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]
2021-03-12 08:05:48,852 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-12 08:05:48,988 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Collection<Int> = TODO()
2021-03-12 08:05:48,991 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Collection<Int> = TODO()
2021-03-12 08:05:49,204 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:05:49,205 [main:95] - GENERATED = UIntArray(-526497711)
2021-03-12 08:05:49,205 [main:117] - GENERATED CALL = (xx).sliceArray(UIntArray(-526497711))
2021-03-12 08:05:49,205 [main:113] - Case = [public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]]
2021-03-12 08:05:49,206 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]
2021-03-12 08:05:49,206 [main:117] - GENERATED CALL = (xx).sortedArrayDescending()
2021-03-12 08:05:49,206 [main:61] - replacement of A.x of type IntArray is xx
2021-03-12 08:05:49,301 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:05:49,302 [main:66] - Compilation checking started
2021-03-12 08:05:49,571 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    xx[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}


2021-03-12 08:05:49,573 [main:53] - replacing (A.x, IntArray)
2021-03-12 08:05:49,573 [main:50] - replacing A.x IntArray
2021-03-12 08:05:49,573 [main:54] - Getting value of type IntArray
2021-03-12 08:05:49,664 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:05:49,764 [main:43] - GENERATING CALL OF fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:05:49,765 [main:61] - WITHOUT TYPE PARAMS = fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:05:49,861 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:05:49,862 [main:95] - GENERATED = intArrayOf(-364320738)
2021-03-12 08:05:49,862 [main:58] - GENERATED VALUE OF TYPE IntArray = intArrayOf(-364320738)
2021-03-12 08:05:49,862 [main:61] - GENERATED IS CALL =true
2021-03-12 08:05:49,863 [main:67] - randomType = String
2021-03-12 08:05:49,946 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:05:49,976 [main:106] - GETTING IntArray from IntArray
2021-03-12 08:05:49,988 [main:113] - Case = [public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]]
2021-03-12 08:05:49,988 [main:149] - GENERATING call of type public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]
2021-03-12 08:05:49,989 [main:117] - GENERATED CALL = (xx).reversedArray()
2021-03-12 08:05:49,989 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]]
2021-03-12 08:05:49,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]
2021-03-12 08:05:50,082 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:50,164 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:50,258 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:50,259 [main:117] - GENERATED CALL = (xx).copyInto(xx, 16176665, 637212501, -771018568)
2021-03-12 08:05:50,259 [main:113] - Case = [public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]]
2021-03-12 08:05:50,259 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]
2021-03-12 08:05:50,259 [main:117] - GENERATED CALL = (xx).sortedArrayDescending()
2021-03-12 08:05:50,259 [main:113] - Case = [public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]]
2021-03-12 08:05:50,259 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]
2021-03-12 08:05:50,260 [main:117] - GENERATED CALL = (xx).sortedArray()
2021-03-12 08:05:50,260 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]]
2021-03-12 08:05:50,260 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]
2021-03-12 08:05:50,370 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Unit> false depth = 0
2021-03-12 08:05:50,370 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:05:50,458 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:05:50,460 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:05:50,645 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:05:50,646 [main:95] - GENERATED = println("tbrlq")
2021-03-12 08:05:50,647 [main:117] - GENERATED CALL = (xx).onEachIndexed({a: Int, b: Int -> println("tbrlq")})
2021-03-12 08:05:50,647 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]]
2021-03-12 08:05:50,647 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]
2021-03-12 08:05:50,746 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 08:05:50,746 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:05:50,853 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:05:50,854 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:05:51,145 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:05:51,145 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:05:51,145 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:05:51,146 [main:95] - GENERATED = check(true, { "hvzat"})
2021-03-12 08:05:51,146 [main:117] - GENERATED CALL = (xx).onEach({a: Int -> check(true, { "hvzat"})})
2021-03-12 08:05:51,147 [main:113] - Case = [public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]]
2021-03-12 08:05:51,147 [main:149] - GENERATING call of type public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]
2021-03-12 08:05:51,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:51,375 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:51,376 [main:117] - GENERATED CALL = (xx).copyOfRange(-625748816, -1071276191)
2021-03-12 08:05:51,376 [main:113] - Case = [public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]]
2021-03-12 08:05:51,376 [main:149] - GENERATING call of type public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]
2021-03-12 08:05:51,458 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-12 08:05:51,546 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Collection<Int> = TODO()
2021-03-12 08:05:51,548 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Collection<Int> = TODO()
2021-03-12 08:05:51,632 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:05:51,633 [main:95] - GENERATED = listOfNotNull<Int>(1121102718)
2021-03-12 08:05:51,634 [main:117] - GENERATED CALL = (xx).sliceArray(listOfNotNull<Int>(1121102718))
2021-03-12 08:05:51,634 [main:113] - Case = [public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]]
2021-03-12 08:05:51,634 [main:149] - GENERATING call of type public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]
2021-03-12 08:05:51,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:51,729 [main:117] - GENERATED CALL = (xx).plus(1936094251)
2021-03-12 08:05:51,730 [main:113] - Case = [public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]]
2021-03-12 08:05:51,730 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]
2021-03-12 08:05:51,730 [main:117] - GENERATED CALL = (xx).copyOf()
2021-03-12 08:05:51,730 [main:61] - replacement of A.x of type IntArray is (xx).onEachIndexed({a: Int, b: Int -> println("tbrlq")})
2021-03-12 08:05:51,820 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:05:51,821 [main:66] - Compilation checking started
2021-03-12 08:05:52,044 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${(xx).onEachIndexed({a: Int, b: Int -> println("tbrlq")})[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}


2021-03-12 08:05:52,045 [main:53] - replacing (0, Int)
2021-03-12 08:05:52,046 [main:50] - replacing 0 Int
2021-03-12 08:05:52,046 [main:54] - Getting value of type Int
2021-03-12 08:05:52,130 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:52,130 [main:58] - GENERATED VALUE OF TYPE Int = 1961868044
2021-03-12 08:05:52,130 [main:61] - GENERATED IS CALL =false
2021-03-12 08:05:52,218 [main:67] - randomType = Double
2021-03-12 08:05:52,323 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:05:52,386 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:05:52,387 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d291100]
2021-03-12 08:05:52,387 [main:78] - Generated call from random type = (0.4699393101963091).toInt().unaryMinus()
2021-03-12 08:05:52,387 [main:61] - replacement of 0 of type Int is (0.4699393101963091).toInt().unaryMinus()
2021-03-12 08:05:52,475 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:05:52,475 [main:66] - Compilation checking started
2021-03-12 08:05:52,809 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}


2021-03-12 08:05:52,810 [main:53] - replacing (0, Int)
2021-03-12 08:05:52,810 [main:50] - replacing 0 Int
2021-03-12 08:05:52,810 [main:54] - Getting value of type Int
2021-03-12 08:05:52,894 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:52,894 [main:58] - GENERATED VALUE OF TYPE Int = 139123984
2021-03-12 08:05:52,894 [main:61] - GENERATED IS CALL =false
2021-03-12 08:05:52,987 [main:67] - randomType = Double
2021-03-12 08:05:53,081 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:05:53,121 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1e748256]
2021-03-12 08:05:53,204 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:53,204 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:05:53,288 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:53,288 [main:78] - Generated call from random type = (0.8679094787143269).compareTo(88).plus(-113)
2021-03-12 08:05:53,289 [main:106] - GETTING Int from IntArray
2021-03-12 08:05:53,302 [main:113] - Case = [public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]]
2021-03-12 08:05:53,303 [main:149] - GENERATING call of type public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]
2021-03-12 08:05:53,387 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:53,388 [main:117] - GENERATED CALL = (A.xx).lastIndexOf(-462084892)
2021-03-12 08:05:53,388 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]]
2021-03-12 08:05:53,389 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]
2021-03-12 08:05:53,470 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:05:53,470 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:05:53,471 [main:117] - GENERATED CALL = (A.xx).indexOfFirst({a: Int -> true})
2021-03-12 08:05:53,471 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]]
2021-03-12 08:05:53,471 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]
2021-03-12 08:05:53,554 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:53,555 [main:117] - GENERATED CALL = (A.xx).size.ushr(694672256)
2021-03-12 08:05:53,555 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c9ba66]]
2021-03-12 08:05:53,555 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c9ba66]
2021-03-12 08:05:53,654 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:53,654 [main:117] - GENERATED CALL = (A.xx).size.or(-205319303)
2021-03-12 08:05:53,654 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component1(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1fa39f96]]
2021-03-12 08:05:53,654 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component1(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1fa39f96]
2021-03-12 08:05:53,655 [main:117] - GENERATED CALL = (A.xx).component1()
2021-03-12 08:05:53,655 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@18548b0a]]
2021-03-12 08:05:53,655 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@18548b0a]
2021-03-12 08:05:53,655 [main:117] - GENERATED CALL = (A.xx).count()
2021-03-12 08:05:53,655 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]]
2021-03-12 08:05:53,655 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 08:05:53,656 [main:117] - GENERATED CALL = (A.xx).size.inv()
2021-03-12 08:05:53,656 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e], public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]]
2021-03-12 08:05:53,656 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e]
2021-03-12 08:05:53,656 [main:149] - GENERATING call of type public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]
2021-03-12 08:05:53,656 [main:117] - GENERATED CALL = (A.xx).iterator().next()
2021-03-12 08:05:53,656 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d291100]]
2021-03-12 08:05:53,657 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d291100]
2021-03-12 08:05:53,657 [main:117] - GENERATED CALL = (A.xx).size.unaryMinus()
2021-03-12 08:05:53,657 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]]
2021-03-12 08:05:53,657 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]
2021-03-12 08:05:53,764 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:53,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:53,854 [main:117] - GENERATED CALL = (A.xx).size.coerceIn(1975343703, 487666217)
2021-03-12 08:05:53,854 [main:61] - replacement of 0 of type Int is (A.xx).size.coerceIn(1975343703, 487666217)
2021-03-12 08:05:53,938 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:05:53,938 [main:66] - Compilation checking started
2021-03-12 08:05:54,279 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}


2021-03-12 08:05:54,280 [main:53] - replacing (0, Int)
2021-03-12 08:05:54,280 [main:50] - replacing 0 Int
2021-03-12 08:05:54,280 [main:54] - Getting value of type Int
2021-03-12 08:05:54,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:54,383 [main:58] - GENERATED VALUE OF TYPE Int = -206845526
2021-03-12 08:05:54,383 [main:61] - GENERATED IS CALL =false
2021-03-12 08:05:54,477 [main:67] - randomType = Short
2021-03-12 08:05:54,570 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:05:54,632 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@14aa3650]
2021-03-12 08:05:54,725 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:05:54,726 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6d4693ee]
2021-03-12 08:05:54,726 [main:78] - Generated call from random type = (-7906).div(0.49697109130694217).toInt()
2021-03-12 08:05:54,727 [main:106] - GETTING Int from IntArray
2021-03-12 08:05:54,740 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]]
2021-03-12 08:05:54,740 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]
2021-03-12 08:05:54,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:54,921 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:54,921 [main:117] - GENERATED CALL = (A.xx).size.coerceIn(399623340, 1284677121)
2021-03-12 08:05:54,921 [main:113] - Case = [public fun kotlin.IntArray.last(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d63ce]]
2021-03-12 08:05:54,922 [main:149] - GENERATING call of type public fun kotlin.IntArray.last(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d63ce]
2021-03-12 08:05:54,922 [main:117] - GENERATED CALL = (A.xx).last()
2021-03-12 08:05:54,922 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c9ba66]]
2021-03-12 08:05:54,922 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c9ba66]
2021-03-12 08:05:55,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:55,022 [main:117] - GENERATED CALL = (A.xx).size.or(-2138528769)
2021-03-12 08:05:55,022 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e4d743c]]
2021-03-12 08:05:55,023 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e4d743c]
2021-03-12 08:05:55,118 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:55,119 [main:117] - GENERATED CALL = (A.xx).size.shr(-1926370527)
2021-03-12 08:05:55,120 [main:113] - Case = [public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]]
2021-03-12 08:05:55,120 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]
2021-03-12 08:05:55,207 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:05:55,208 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:05:55,208 [main:117] - GENERATED CALL = (A.xx).reduce({a: Int, b: Int -> -1395910303})
2021-03-12 08:05:55,209 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d034f01]]
2021-03-12 08:05:55,209 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d034f01]
2021-03-12 08:05:55,297 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:55,298 [main:117] - GENERATED CALL = (A.xx).size.minus(-83)
2021-03-12 08:05:55,298 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 08:05:55,298 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 08:05:55,388 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:55,389 [main:117] - GENERATED CALL = (A.xx).size.times(-112)
2021-03-12 08:05:55,389 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2f879f35]]
2021-03-12 08:05:55,389 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2f879f35]
2021-03-12 08:05:55,494 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:55,495 [main:117] - GENERATED CALL = (A.xx).get(-1009874054)
2021-03-12 08:05:55,495 [main:113] - Case = [public inline fun kotlin.IntArray.reduceIndexed(operation: (index: kotlin.Int, acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7300db1c]]
2021-03-12 08:05:55,496 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceIndexed(operation: (index: kotlin.Int, acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7300db1c]
2021-03-12 08:05:55,592 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:05:55,592 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:05:55,593 [main:117] - GENERATED CALL = (A.xx).reduceIndexed({a: Int, b: Int, c: Int -> -1634497992})
2021-03-12 08:05:55,593 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]]
2021-03-12 08:05:55,593 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:05:55,682 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:55,683 [main:117] - GENERATED CALL = (A.xx).size.plus(73)
2021-03-12 08:05:55,683 [main:61] - replacement of 0 of type Int is (A.xx).size.times(-112)
2021-03-12 08:05:55,769 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:05:55,770 [main:53] - replacing (A.x, IntArray)
2021-03-12 08:05:55,770 [main:50] - replacing A.x IntArray
2021-03-12 08:05:55,770 [main:54] - Getting value of type IntArray
2021-03-12 08:05:55,861 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:05:55,987 [main:43] - GENERATING CALL OF fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:05:55,988 [main:61] - WITHOUT TYPE PARAMS = fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:05:56,087 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:05:56,088 [main:95] - GENERATED = intArrayOf(-2071604155)
2021-03-12 08:05:56,088 [main:58] - GENERATED VALUE OF TYPE IntArray = intArrayOf(-2071604155)
2021-03-12 08:05:56,088 [main:61] - GENERATED IS CALL =true
2021-03-12 08:05:56,088 [main:67] - randomType = Int
2021-03-12 08:05:56,175 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:56,237 [main:106] - GETTING IntArray from IntArray
2021-03-12 08:05:56,250 [main:113] - Case = [public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]]
2021-03-12 08:05:56,250 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]
2021-03-12 08:05:56,250 [main:117] - GENERATED CALL = (A.xx).sortedArray()
2021-03-12 08:05:56,250 [main:113] - Case = [public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]]
2021-03-12 08:05:56,251 [main:149] - GENERATING call of type public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]
2021-03-12 08:05:56,251 [main:117] - GENERATED CALL = (A.xx).reversedArray()
2021-03-12 08:05:56,251 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]]
2021-03-12 08:05:56,251 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]
2021-03-12 08:05:56,345 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Unit> false depth = 0
2021-03-12 08:05:56,346 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:05:56,437 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:05:56,438 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:05:56,690 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:05:56,691 [main:95] - GENERATED = require(false)
2021-03-12 08:05:56,691 [main:117] - GENERATED CALL = (A.xx).onEachIndexed({a: Int, b: Int -> require(false)})
2021-03-12 08:05:56,692 [main:113] - Case = [public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]]
2021-03-12 08:05:56,692 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]
2021-03-12 08:05:56,692 [main:117] - GENERATED CALL = (A.xx).copyOf()
2021-03-12 08:05:56,692 [main:113] - Case = [public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]]
2021-03-12 08:05:56,692 [main:149] - GENERATING call of type public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]
2021-03-12 08:05:56,774 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:56,775 [main:117] - GENERATED CALL = (A.xx).plus(-1490606973)
2021-03-12 08:05:56,775 [main:113] - Case = [public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]]
2021-03-12 08:05:56,775 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]
2021-03-12 08:05:56,775 [main:117] - GENERATED CALL = (A.xx).sortedArrayDescending()
2021-03-12 08:05:56,775 [main:113] - Case = [public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]]
2021-03-12 08:05:56,775 [main:149] - GENERATING call of type public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]
2021-03-12 08:05:56,857 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:56,938 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:56,939 [main:117] - GENERATED CALL = (A.xx).copyOfRange(454149402, -26363008)
2021-03-12 08:05:56,939 [main:113] - Case = [public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]]
2021-03-12 08:05:56,939 [main:149] - GENERATING call of type public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]
2021-03-12 08:05:57,039 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-12 08:05:57,141 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Collection<Int> = TODO()
2021-03-12 08:05:57,143 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Collection<Int> = TODO()
2021-03-12 08:05:57,333 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-12 08:05:57,334 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 08:05:57,423 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:05:57,424 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:05:57,630 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-12 08:05:57,631 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 08:05:57,636 [main:95] - GENERATED = contract({ println()})
2021-03-12 08:05:57,637 [main:95] - GENERATED = buildSet<Int>({ contract({ println()})})
2021-03-12 08:05:57,638 [main:117] - GENERATED CALL = (A.xx).sliceArray(buildSet<Int>({ contract({ println()})}))
2021-03-12 08:05:57,638 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]]
2021-03-12 08:05:57,638 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]
2021-03-12 08:05:57,734 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 08:05:57,734 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:05:57,824 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:05:57,825 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:05:57,996 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:05:57,997 [main:95] - GENERATED = println("tzoew")
2021-03-12 08:05:57,997 [main:117] - GENERATED CALL = (A.xx).onEach({a: Int -> println("tzoew")})
2021-03-12 08:05:57,997 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]]
2021-03-12 08:05:57,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]
2021-03-12 08:05:58,125 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:58,252 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:58,343 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:58,343 [main:117] - GENERATED CALL = (A.xx).copyInto(A.xx, -1337525463, 846889029, -869659982)
2021-03-12 08:05:58,344 [main:61] - replacement of A.x of type IntArray is (A.xx).plus(-1490606973)
2021-03-12 08:05:58,433 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:05:58,433 [main:66] - Compilation checking started
2021-03-12 08:05:58,881 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if ((A.xx).plus(-1490606973)[0] != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}


2021-03-12 08:05:58,883 [main:53] - replacing (A.x[0], Int)
2021-03-12 08:05:58,883 [main:50] - replacing A.x[0] Int
2021-03-12 08:05:58,883 [main:54] - Getting value of type Int
2021-03-12 08:05:58,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:58,980 [main:58] - GENERATED VALUE OF TYPE Int = -2004292100
2021-03-12 08:05:58,980 [main:61] - GENERATED IS CALL =false
2021-03-12 08:05:58,980 [main:67] - randomType = Boolean
2021-03-12 08:05:59,087 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:05:59,103 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]
2021-03-12 08:05:59,192 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:05:59,193 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]
2021-03-12 08:05:59,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:59,287 [main:78] - Generated call from random type = (false).compareTo(true).coerceAtMost(615860797)
2021-03-12 08:05:59,288 [main:106] - GETTING Int from IntArray
2021-03-12 08:05:59,301 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0]]
2021-03-12 08:05:59,301 [main:117] - GENERATED CALL = (A.xx).size
2021-03-12 08:05:59,302 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d034f01]]
2021-03-12 08:05:59,302 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d034f01]
2021-03-12 08:05:59,391 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:59,392 [main:117] - GENERATED CALL = (A.xx).size.minus(64)
2021-03-12 08:05:59,392 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]]
2021-03-12 08:05:59,392 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]
2021-03-12 08:05:59,393 [main:117] - GENERATED CALL = (A.xx).size.countLeadingZeroBits()
2021-03-12 08:05:59,393 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]]
2021-03-12 08:05:59,393 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]
2021-03-12 08:05:59,481 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:59,613 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:59,614 [main:117] - GENERATED CALL = (A.xx).size.coerceIn(1264883389, 303594057)
2021-03-12 08:05:59,614 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50dffc4]]
2021-03-12 08:05:59,614 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50dffc4]
2021-03-12 08:05:59,762 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:05:59,764 [main:117] - GENERATED CALL = (A.xx).size.compareTo(-99)
2021-03-12 08:05:59,764 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]]
2021-03-12 08:05:59,764 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]
2021-03-12 08:05:59,765 [main:117] - GENERATED CALL = (A.xx).size.inc()
2021-03-12 08:05:59,765 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfLast(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e9a9d6]]
2021-03-12 08:05:59,765 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfLast(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e9a9d6]
2021-03-12 08:05:59,880 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:05:59,881 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:05:59,882 [main:117] - GENERATED CALL = (A.xx).indexOfLast({a: Int -> false})
2021-03-12 08:05:59,882 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Int defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2f879f35]]
2021-03-12 08:05:59,882 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Int defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2f879f35]
2021-03-12 08:05:59,981 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:05:59,982 [main:117] - GENERATED CALL = (A.xx).get(-1427933866)
2021-03-12 08:05:59,982 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d291100]]
2021-03-12 08:05:59,982 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d291100]
2021-03-12 08:05:59,983 [main:117] - GENERATED CALL = (A.xx).size.unaryMinus()
2021-03-12 08:05:59,983 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@581d1c66]]
2021-03-12 08:05:59,983 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@581d1c66]
2021-03-12 08:06:00,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:00,073 [main:117] - GENERATED CALL = (A.xx).size.rotateLeft(-880780565)
2021-03-12 08:06:00,073 [main:61] - replacement of A.x[0] of type Int is (A.xx).size.coerceIn(1264883389, 303594057)
2021-03-12 08:06:00,170 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:00,170 [main:66] - Compilation checking started
2021-03-12 08:06:00,538 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if ((A.xx).plus(-1490606973)[0] != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}


2021-03-12 08:06:00,539 [main:53] - replacing ("Fail 3: ${A.x[0]}", String)
2021-03-12 08:06:00,540 [main:50] - replacing "Fail 3: ${A.x[0]}" String
2021-03-12 08:06:00,540 [main:54] - Getting value of type String
2021-03-12 08:06:00,626 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:06:00,627 [main:58] - GENERATED VALUE OF TYPE String = "pfvpt"
2021-03-12 08:06:00,627 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:00,719 [main:67] - randomType = Host
2021-03-12 08:06:00,809 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:06:00,809 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:00,818 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:06:00,818 [main:78] - Generated call from random type = (Host).x.contentToString()
2021-03-12 08:06:00,819 [main:106] - GETTING String from IntArray
2021-03-12 08:06:00,831 [main:113] - Case = [public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]]
2021-03-12 08:06:00,832 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:06:00,927 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:01,030 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:01,032 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:01,215 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:01,216 [main:95] - GENERATED = StringBuilder(-1106060702)
2021-03-12 08:06:01,314 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:01,408 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:01,409 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:01,621 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:01,622 [main:95] - GENERATED = StringBuilder(1635108392)
2021-03-12 08:06:01,712 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:01,812 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:01,898 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:01,984 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:06:01,984 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:06:01,988 [main:117] - GENERATED CALL = (A.xx).joinToString(StringBuilder(-1106060702), StringBuilder(1635108392), StringBuilder(), 204184635, "gexwg", {a: Int -> "puivw"})
2021-03-12 08:06:01,988 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:06:01,988 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:06:02,118 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:02,119 [main:117] - GENERATED CALL = (A.xx).size.toString(446934106)
2021-03-12 08:06:02,120 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]]
2021-03-12 08:06:02,120 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:06:02,120 [main:117] - GENERATED CALL = (A.xx).contentToString()
2021-03-12 08:06:02,120 [main:61] - replacement of "Fail 3: ${A.x[0]}" of type String is (A.xx).size.toString(446934106)
2021-03-12 08:06:02,251 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:02,252 [main:66] - Compilation checking started
2021-03-12 08:06:02,634 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if ((A.xx).plus(-1490606973)[0] != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (A.x[0] != 3) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:02,634 [main:53] - replacing (0, Int)
2021-03-12 08:06:02,634 [main:50] - replacing 0 Int
2021-03-12 08:06:02,634 [main:54] - Getting value of type Int
2021-03-12 08:06:02,765 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:02,765 [main:58] - GENERATED VALUE OF TYPE Int = 1536475790
2021-03-12 08:06:02,766 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:02,952 [main:67] - randomType = Host?
2021-03-12 08:06:03,060 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:06:03,060 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:03,071 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45985fe9]
2021-03-12 08:06:03,072 [main:78] - Generated call from random type = (Host)?.x.contentHashCode()
2021-03-12 08:06:03,073 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:03,085 [main:113] - Case = [public fun kotlin.IntArray.first(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e378d3]]
2021-03-12 08:06:03,085 [main:149] - GENERATING call of type public fun kotlin.IntArray.first(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e378d3]
2021-03-12 08:06:03,086 [main:117] - GENERATED CALL = (A.xx).first()
2021-03-12 08:06:03,086 [main:113] - Case = [public inline fun kotlin.IntArray.reduceRightIndexed(operation: (index: kotlin.Int, kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d0b5aef]]
2021-03-12 08:06:03,086 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceRightIndexed(operation: (index: kotlin.Int, kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d0b5aef]
2021-03-12 08:06:03,180 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] Int, Int, [@kotlin.ParameterName] Int, Int> false depth = 0
2021-03-12 08:06:03,180 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:03,181 [main:117] - GENERATED CALL = (A.xx).reduceRightIndexed({a: Int, b: Int, c: Int -> -752071844})
2021-03-12 08:06:03,182 [main:113] - Case = [public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]]
2021-03-12 08:06:03,182 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]
2021-03-12 08:06:03,272 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:06:03,272 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:03,273 [main:117] - GENERATED CALL = (A.xx).reduce({a: Int, b: Int -> -576911176})
2021-03-12 08:06:03,273 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]]
2021-03-12 08:06:03,273 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]
2021-03-12 08:06:03,364 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:03,365 [main:117] - GENERATED CALL = (A.xx).size.shl(-559953617)
2021-03-12 08:06:03,365 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component5(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@514ebdbf]]
2021-03-12 08:06:03,365 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component5(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@514ebdbf]
2021-03-12 08:06:03,365 [main:117] - GENERATED CALL = (A.xx).component5()
2021-03-12 08:06:03,365 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a79d92]]
2021-03-12 08:06:03,366 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a79d92]
2021-03-12 08:06:03,366 [main:117] - GENERATED CALL = (A.xx).size.toInt()
2021-03-12 08:06:03,366 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.sumOf(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@311831f6]]
2021-03-12 08:06:03,366 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.sumOf(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@311831f6]
2021-03-12 08:06:03,459 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:03,460 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:03,461 [main:117] - GENERATED CALL = (A.xx).sumOf({a: Int -> -1378846557})
2021-03-12 08:06:03,461 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]]
2021-03-12 08:06:03,461 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]
2021-03-12 08:06:03,461 [main:117] - GENERATED CALL = (A.xx).size.countLeadingZeroBits()
2021-03-12 08:06:03,461 [main:113] - Case = [public fun kotlin.IntArray.last(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d63ce]]
2021-03-12 08:06:03,461 [main:149] - GENERATING call of type public fun kotlin.IntArray.last(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d63ce]
2021-03-12 08:06:03,462 [main:117] - GENERATED CALL = (A.xx).last()
2021-03-12 08:06:03,462 [main:113] - Case = [public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]]
2021-03-12 08:06:03,462 [main:149] - GENERATING call of type public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]
2021-03-12 08:06:03,462 [main:117] - GENERATED CALL = (A.xx).sum()
2021-03-12 08:06:03,462 [main:61] - replacement of 0 of type Int is (A.xx).sum()
2021-03-12 08:06:03,548 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:03,549 [main:53] - replacing (0, Int)
2021-03-12 08:06:03,550 [main:50] - replacing 0 Int
2021-03-12 08:06:03,550 [main:54] - Getting value of type Int
2021-03-12 08:06:03,647 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:03,648 [main:58] - GENERATED VALUE OF TYPE Int = 1007041088
2021-03-12 08:06:03,648 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:03,841 [main:67] - randomType = ULong?
2021-03-12 08:06:03,929 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:06:03,982 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@21056351]
2021-03-12 08:06:04,067 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:06:04,068 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 08:06:04,068 [main:78] - Generated call from random type = (8162780846429363828.toULong())?.compareTo(5.toUByte()).inv()
2021-03-12 08:06:04,069 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:04,076 [main:113] - Case = [public fun kotlin.IntArray.first(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e378d3]]
2021-03-12 08:06:04,077 [main:149] - GENERATING call of type public fun kotlin.IntArray.first(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e378d3]
2021-03-12 08:06:04,077 [main:117] - GENERATED CALL = (A.xx).first()
2021-03-12 08:06:04,077 [main:113] - Case = [public fun kotlin.IntArray.single(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bf093f5]]
2021-03-12 08:06:04,077 [main:149] - GENERATING call of type public fun kotlin.IntArray.single(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bf093f5]
2021-03-12 08:06:04,077 [main:117] - GENERATED CALL = (A.xx).single()
2021-03-12 08:06:04,077 [main:113] - Case = [public val kotlin.IntArray.lastIndex: kotlin.Int defined in kotlin.collections[DeserializedPropertyDescriptor@71a91f03]]
2021-03-12 08:06:04,077 [main:117] - GENERATED CALL = (A.xx).lastIndex
2021-03-12 08:06:04,078 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.random(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69fc861a]]
2021-03-12 08:06:04,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.random(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69fc861a]
2021-03-12 08:06:04,078 [main:117] - GENERATED CALL = (A.xx).random()
2021-03-12 08:06:04,078 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29e456f1]]
2021-03-12 08:06:04,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29e456f1]
2021-03-12 08:06:04,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:04,162 [main:117] - GENERATED CALL = (A.xx).size.rotateRight(-1498586312)
2021-03-12 08:06:04,162 [main:113] - Case = [public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]]
2021-03-12 08:06:04,162 [main:149] - GENERATING call of type public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]
2021-03-12 08:06:04,162 [main:117] - GENERATED CALL = (A.xx).sum()
2021-03-12 08:06:04,162 [main:113] - Case = [public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]]
2021-03-12 08:06:04,162 [main:149] - GENERATING call of type public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]
2021-03-12 08:06:04,261 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:04,262 [main:117] - GENERATED CALL = (A.xx).lastIndexOf(1299358665)
2021-03-12 08:06:04,262 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]]
2021-03-12 08:06:04,262 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]
2021-03-12 08:06:04,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:04,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:04,448 [main:117] - GENERATED CALL = (A.xx).size.coerceIn(1328359387, -1569357202)
2021-03-12 08:06:04,448 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@bd9e37b]]
2021-03-12 08:06:04,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@bd9e37b]
2021-03-12 08:06:04,449 [main:117] - GENERATED CALL = (A.xx).size.countOneBits()
2021-03-12 08:06:04,449 [main:113] - Case = [public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]]
2021-03-12 08:06:04,449 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]
2021-03-12 08:06:04,533 [main:302] - generating value of type = Function2<Int, [@kotlin.ParameterName] Int, Int> false depth = 0
2021-03-12 08:06:04,533 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:04,534 [main:117] - GENERATED CALL = (A.xx).reduceRight({a: Int, b: Int -> -547513865})
2021-03-12 08:06:04,534 [main:61] - replacement of 0 of type Int is (A.xx).reduceRight({a: Int, b: Int -> -547513865})
2021-03-12 08:06:04,618 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:04,618 [main:66] - Compilation checking started
2021-03-12 08:06:05,089 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if ((A.xx).plus(-1490606973)[0] != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (A.x[(A.xx).reduceRight({a: Int, b: Int -> -547513865})] != 3) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:05,090 [main:53] - replacing (A.x[0], Int)
2021-03-12 08:06:05,091 [main:50] - replacing A.x[0] Int
2021-03-12 08:06:05,091 [main:54] - Getting value of type Int
2021-03-12 08:06:05,192 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:05,192 [main:58] - GENERATED VALUE OF TYPE Int = 1379678719
2021-03-12 08:06:05,192 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:05,291 [main:67] - randomType = ULong
2021-03-12 08:06:05,384 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:06:05,432 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2249321b]
2021-03-12 08:06:05,433 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6630ba5a]
2021-03-12 08:06:05,525 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:05,526 [main:78] - Generated call from random type = (9178172185881660587.toULong()).toShort().compareTo(-96)
2021-03-12 08:06:05,527 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:05,539 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bc7c8c7]]
2021-03-12 08:06:05,540 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bc7c8c7]
2021-03-12 08:06:05,632 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:05,727 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:05,727 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:05,728 [main:117] - GENERATED CALL = (A.xx).getOrElse(-1750054075, {a: Int -> 2080700016})
2021-03-12 08:06:05,728 [main:113] - Case = [public fun kotlin.IntArray.indexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a5eac38]]
2021-03-12 08:06:05,728 [main:149] - GENERATING call of type public fun kotlin.IntArray.indexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a5eac38]
2021-03-12 08:06:05,823 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:05,823 [main:117] - GENERATED CALL = (A.xx).indexOf(-415738064)
2021-03-12 08:06:05,823 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]]
2021-03-12 08:06:05,823 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]
2021-03-12 08:06:05,934 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:05,935 [main:117] - GENERATED CALL = (A.xx).size.ushr(-982545946)
2021-03-12 08:06:05,935 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]]
2021-03-12 08:06:05,935 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]
2021-03-12 08:06:06,045 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:06,046 [main:117] - GENERATED CALL = (A.xx).size.shl(-1191287018)
2021-03-12 08:06:06,046 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a0afdef]]
2021-03-12 08:06:06,046 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a0afdef]
2021-03-12 08:06:06,147 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:06,239 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:06,239 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:06,240 [main:117] - GENERATED CALL = (A.xx).elementAtOrElse(73545948, {a: Int -> -969725964})
2021-03-12 08:06:06,240 [main:113] - Case = [public val kotlin.IntArray.lastIndex: kotlin.Int defined in kotlin.collections[DeserializedPropertyDescriptor@71a91f03]]
2021-03-12 08:06:06,240 [main:117] - GENERATED CALL = (A.xx).lastIndex
2021-03-12 08:06:06,240 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e4d743c]]
2021-03-12 08:06:06,240 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e4d743c]
2021-03-12 08:06:06,326 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:06,327 [main:117] - GENERATED CALL = (A.xx).size.shr(1865138008)
2021-03-12 08:06:06,327 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfLast(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e9a9d6]]
2021-03-12 08:06:06,327 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfLast(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e9a9d6]
2021-03-12 08:06:06,414 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:06:06,414 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:06:06,415 [main:117] - GENERATED CALL = (A.xx).indexOfLast({a: Int -> true})
2021-03-12 08:06:06,415 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e], public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]]
2021-03-12 08:06:06,415 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e]
2021-03-12 08:06:06,415 [main:149] - GENERATING call of type public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]
2021-03-12 08:06:06,415 [main:117] - GENERATED CALL = (A.xx).iterator().next()
2021-03-12 08:06:06,415 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7ee60b]]
2021-03-12 08:06:06,416 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7ee60b]
2021-03-12 08:06:06,523 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:06,524 [main:117] - GENERATED CALL = (A.xx).size.coerceAtLeast(1636289813)
2021-03-12 08:06:06,524 [main:61] - replacement of A.x[0] of type Int is (A.xx).getOrElse(-1750054075, {a: Int -> 2080700016})
2021-03-12 08:06:06,621 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:06,621 [main:66] - Compilation checking started
2021-03-12 08:06:06,879 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if ((A.xx).plus(-1490606973)[0] != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++(A.xx).getOrElse(-1750054075, {a: Int -> 2080700016})
    if (A.x[(A.xx).reduceRight({a: Int, b: Int -> -547513865})] != 3) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:06,880 [main:53] - replacing (A.x[0], Int)
2021-03-12 08:06:06,880 [main:50] - replacing A.x[0] Int
2021-03-12 08:06:06,880 [main:54] - Getting value of type Int
2021-03-12 08:06:06,966 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:06,966 [main:58] - GENERATED VALUE OF TYPE Int = -251205275
2021-03-12 08:06:06,966 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:07,057 [main:67] - randomType = Host
2021-03-12 08:06:07,144 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:06:07,144 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:07,149 [main:149] - GENERATING call of type public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]
2021-03-12 08:06:07,150 [main:78] - Generated call from random type = (Host).x.sum()
2021-03-12 08:06:07,150 [main:61] - replacement of A.x[0] of type Int is (Host).x.sum()
2021-03-12 08:06:07,249 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:07,250 [main:66] - Compilation checking started
2021-03-12 08:06:07,478 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if ((A.xx).plus(-1490606973)[0] != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++(Host).x.sum()
    if (A.x[(A.xx).reduceRight({a: Int, b: Int -> -547513865})] != 3) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:07,478 [main:53] - replacing ("Fail 3: ${A.x[0]}", String)
2021-03-12 08:06:07,478 [main:50] - replacing "Fail 3: ${A.x[0]}" String
2021-03-12 08:06:07,478 [main:54] - Getting value of type String
2021-03-12 08:06:07,572 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:06:07,573 [main:58] - GENERATED VALUE OF TYPE String = "xgkrg"
2021-03-12 08:06:07,573 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:08,260 [main:67] - randomType = Triple<Float?, Array<Host>, ULong>?
2021-03-12 08:06:08,344 [main:302] - generating value of type = Triple<Float?, Array<Host>, ULong> false depth = 0
2021-03-12 08:06:08,436 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Float?, second: Array<Host>, third: ULong): Triple<Float?, Array<Host>, ULong> = TODO()
2021-03-12 08:06:08,438 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Float?, second: Array<Host>, third: ULong): Triple<Float?, Array<Host>, ULong> = TODO()
2021-03-12 08:06:08,527 [main:302] - generating value of type = Float true depth = 3
2021-03-12 08:06:08,528 [main:302] - generating value of type = Array<Host> false depth = 3
2021-03-12 08:06:08,615 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Host> = TODO()
2021-03-12 08:06:08,617 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Host> = TODO()
2021-03-12 08:06:08,842 [main:302] - generating value of type = Int true depth = 6
2021-03-12 08:06:08,843 [main:95] - GENERATED = arrayOfNulls<Host>(726645839)
2021-03-12 08:06:08,843 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 08:06:08,843 [main:95] - GENERATED = Triple<Float?, Array<Host>, ULong>(0.18821526f, arrayOfNulls<Host>(726645839), 1867058374278461297.toULong())
2021-03-12 08:06:08,877 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1df499f5]
2021-03-12 08:06:08,878 [main:78] - Generated call from random type = (Triple<Float?, Array<Host>, ULong>(0.18821526f, arrayOfNulls<Host>(726645839), 1867058374278461297.toULong()))?.second.contentDeepToString()
2021-03-12 08:06:08,878 [main:61] - replacement of "Fail 3: ${A.x[0]}" of type String is (Triple<Float?, Array<Host>, ULong>(0.18821526f, arrayOfNulls<Host>(726645839), 1867058374278461297.toULong()))?.second.contentDeepToString()
2021-03-12 08:06:08,977 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:08,978 [main:53] - replacing (A.x[(A.xx).reduceRight({a: Int, b: Int -> -547513865})] != 3, Boolean)
2021-03-12 08:06:08,979 [main:50] - replacing A.x[(A.xx).reduceRight({a: Int, b: Int -> -547513865})] != 3 Boolean
2021-03-12 08:06:08,979 [main:54] - Getting value of type Boolean
2021-03-12 08:06:09,066 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:06:09,067 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:06:09,067 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:09,068 [main:67] - randomType = A
2021-03-12 08:06:09,154 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:06:09,154 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:09,163 [main:149] - GENERATING call of type public operator fun kotlin.IntArray.contains(element: kotlin.Int): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 08:06:09,250 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:09,250 [main:78] - Generated call from random type = (A).xx.contains(-1349480060)
2021-03-12 08:06:09,251 [main:106] - GETTING Boolean from IntArray
2021-03-12 08:06:09,262 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]]
2021-03-12 08:06:09,262 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]
2021-03-12 08:06:09,350 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:06:09,350 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]
2021-03-12 08:06:09,435 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:06:09,435 [main:117] - GENERATED CALL = (xx).equals("enufr").equals("hzddz")
2021-03-12 08:06:09,435 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72c7381]]
2021-03-12 08:06:09,435 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72c7381]
2021-03-12 08:06:09,436 [main:117] - GENERATED CALL = (xx).isNotEmpty()
2021-03-12 08:06:09,436 [main:113] - Case = [public fun kotlin.IntArray.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@44328a5e]]
2021-03-12 08:06:09,436 [main:149] - GENERATING call of type public fun kotlin.IntArray.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@44328a5e]
2021-03-12 08:06:09,436 [main:117] - GENERATED CALL = (xx).none()
2021-03-12 08:06:09,436 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5f77b570]]
2021-03-12 08:06:09,436 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478]
2021-03-12 08:06:09,537 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:09,630 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:09,631 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-12 08:06:09,718 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:06:09,719 [main:117] - GENERATED CALL = (xx).set(-375353290, 1427842398).equals("oqteu")
2021-03-12 08:06:09,719 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861]]
2021-03-12 08:06:09,719 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861]
2021-03-12 08:06:09,806 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:06:09,806 [main:117] - GENERATED CALL = (xx).size.equals("vlced")
2021-03-12 08:06:09,806 [main:113] - Case = [public inline fun kotlin.IntArray.all(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@55271bec]]
2021-03-12 08:06:09,806 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.all(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@55271bec]
2021-03-12 08:06:09,892 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:06:09,892 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:06:09,893 [main:117] - GENERATED CALL = (xx).all({a: Int -> true})
2021-03-12 08:06:09,893 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]]
2021-03-12 08:06:09,893 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]
2021-03-12 08:06:09,977 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:06:09,977 [main:117] - GENERATED CALL = (xx).equals("kscby")
2021-03-12 08:06:09,977 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun kotlin.IntArray.contentEquals(other: kotlin.IntArray): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d1f65db]]
2021-03-12 08:06:09,977 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun kotlin.IntArray.contentEquals(other: kotlin.IntArray): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d1f65db]
2021-03-12 08:06:10,062 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:06:10,181 [main:43] - GENERATING CALL OF fun IntArray(size: kotlin.Int): IntArray = TODO()
2021-03-12 08:06:10,183 [main:61] - WITHOUT TYPE PARAMS = fun IntArray(size: kotlin.Int): IntArray = TODO()
2021-03-12 08:06:10,372 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:10,372 [main:95] - GENERATED = IntArray(719475478)
2021-03-12 08:06:10,373 [main:117] - GENERATED CALL = (xx).contentEquals(IntArray(719475478))
2021-03-12 08:06:10,373 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]]
2021-03-12 08:06:10,373 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]
2021-03-12 08:06:10,456 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:06:10,457 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]
2021-03-12 08:06:10,543 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:06:10,544 [main:117] - GENERATED CALL = (xx).equals("xnbjc").and(true)
2021-03-12 08:06:10,544 [main:113] - Case = [public operator fun kotlin.IntArray.contains(element: kotlin.Int): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61fe7da7]]
2021-03-12 08:06:10,544 [main:149] - GENERATING call of type public operator fun kotlin.IntArray.contains(element: kotlin.Int): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 08:06:10,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:10,629 [main:117] - GENERATED CALL = (xx).contains(-1356543436)
2021-03-12 08:06:10,629 [main:61] - replacement of A.x[(A.xx).reduceRight({a: Int, b: Int -> -547513865})] != 3 of type Boolean is true
2021-03-12 08:06:10,723 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 08:06:10,723 [main:66] - Compilation checking started
2021-03-12 08:06:11,040 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if ((A.xx).plus(-1490606973)[0] != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:11,041 [main:53] - replacing ((A.xx).plus(-1490606973)[0], Int)
2021-03-12 08:06:11,041 [main:50] - replacing (A.xx).plus(-1490606973)[0] Int
2021-03-12 08:06:11,042 [main:54] - Getting value of type Int
2021-03-12 08:06:11,125 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:11,125 [main:58] - GENERATED VALUE OF TYPE Int = -1182581280
2021-03-12 08:06:11,125 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:11,211 [main:67] - randomType = Host
2021-03-12 08:06:11,295 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:06:11,295 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:11,303 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a0afdef]
2021-03-12 08:06:11,386 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:11,465 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:11,466 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:11,466 [main:78] - Generated call from random type = (Host).x.elementAtOrElse(-1744611799, {a: Int -> -1076145164})
2021-03-12 08:06:11,467 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:11,475 [main:113] - Case = [public fun kotlin.IntArray.elementAt(index: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fed1f7f]]
2021-03-12 08:06:11,475 [main:149] - GENERATING call of type public fun kotlin.IntArray.elementAt(index: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fed1f7f]
2021-03-12 08:06:11,565 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:11,566 [main:117] - GENERATED CALL = (A.xx).elementAt(-1824859414)
2021-03-12 08:06:11,566 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d034f01]]
2021-03-12 08:06:11,566 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d034f01]
2021-03-12 08:06:11,647 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:11,648 [main:117] - GENERATED CALL = (A.xx).size.minus(14)
2021-03-12 08:06:11,648 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component2(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2f3ec9]]
2021-03-12 08:06:11,648 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component2(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2f3ec9]
2021-03-12 08:06:11,648 [main:117] - GENERATED CALL = (A.xx).component2()
2021-03-12 08:06:11,648 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]]
2021-03-12 08:06:11,648 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]
2021-03-12 08:06:11,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:11,730 [main:117] - GENERATED CALL = (A.xx).size.xor(363669297)
2021-03-12 08:06:11,730 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@31ef92a0]]
2021-03-12 08:06:11,730 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@31ef92a0]
2021-03-12 08:06:11,730 [main:117] - GENERATED CALL = (A.xx).size.takeLowestOneBit()
2021-03-12 08:06:11,730 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]]
2021-03-12 08:06:11,731 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]
2021-03-12 08:06:11,815 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:11,815 [main:117] - GENERATED CALL = (A.xx).size.rem(49)
2021-03-12 08:06:11,815 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]]
2021-03-12 08:06:11,815 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]
2021-03-12 08:06:11,896 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:11,897 [main:117] - GENERATED CALL = (A.xx).size.ushr(1127305696)
2021-03-12 08:06:11,897 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0]]
2021-03-12 08:06:11,897 [main:117] - GENERATED CALL = (A.xx).size
2021-03-12 08:06:11,897 [main:113] - Case = [public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]]
2021-03-12 08:06:11,898 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]
2021-03-12 08:06:11,977 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:06:11,978 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:11,979 [main:117] - GENERATED CALL = (A.xx).reduce({a: Int, b: Int -> 1324469432})
2021-03-12 08:06:11,979 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]]
2021-03-12 08:06:11,979 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]
2021-03-12 08:06:12,058 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:06:12,058 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:06:12,059 [main:117] - GENERATED CALL = (A.xx).indexOfFirst({a: Int -> true})
2021-03-12 08:06:12,059 [main:61] - replacement of (A.xx).plus(-1490606973)[0] of type Int is -1182581280
2021-03-12 08:06:12,139 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:06:12,139 [main:66] - Compilation checking started
2021-03-12 08:06:12,422 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:12,422 [main:53] - replacing ((A.xx).plus(-1490606973)[0], Int)
2021-03-12 08:06:12,422 [main:50] - replacing (A.xx).plus(-1490606973)[0] Int
2021-03-12 08:06:12,422 [main:54] - Getting value of type Int
2021-03-12 08:06:12,518 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:12,519 [main:58] - GENERATED VALUE OF TYPE Int = -612079720
2021-03-12 08:06:12,520 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:12,521 [main:67] - randomType = A
2021-03-12 08:06:12,607 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:06:12,608 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:12,618 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component2(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2f3ec9]
2021-03-12 08:06:12,618 [main:78] - Generated call from random type = (A).xx.component2()
2021-03-12 08:06:12,620 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:12,636 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e4d743c]]
2021-03-12 08:06:12,637 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e4d743c]
2021-03-12 08:06:12,721 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:12,722 [main:117] - GENERATED CALL = (A.xx).size.shr(-1751205321)
2021-03-12 08:06:12,722 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]]
2021-03-12 08:06:12,722 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:06:12,801 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:12,802 [main:117] - GENERATED CALL = (A.xx).size.plus(69)
2021-03-12 08:06:12,802 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d034f01]]
2021-03-12 08:06:12,802 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d034f01]
2021-03-12 08:06:12,879 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:12,880 [main:117] - GENERATED CALL = (A.xx).size.minus(97)
2021-03-12 08:06:12,880 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50dffc4]]
2021-03-12 08:06:12,880 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50dffc4]
2021-03-12 08:06:12,956 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:12,957 [main:117] - GENERATED CALL = (A.xx).size.compareTo(85)
2021-03-12 08:06:12,957 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]]
2021-03-12 08:06:12,957 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]
2021-03-12 08:06:13,033 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:13,034 [main:117] - GENERATED CALL = (A.xx).size.coerceAtMost(-1108893343)
2021-03-12 08:06:13,034 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component3(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@775d38ff]]
2021-03-12 08:06:13,034 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component3(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@775d38ff]
2021-03-12 08:06:13,034 [main:117] - GENERATED CALL = (A.xx).component3()
2021-03-12 08:06:13,034 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]]
2021-03-12 08:06:13,034 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]
2021-03-12 08:06:13,125 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:13,126 [main:117] - GENERATED CALL = (A.xx).size.rem(59)
2021-03-12 08:06:13,126 [main:113] - Case = [public inline fun kotlin.IntArray.sumBy(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b648069]]
2021-03-12 08:06:13,126 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.sumBy(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b648069]
2021-03-12 08:06:13,211 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:13,211 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:13,212 [main:117] - GENERATED CALL = (A.xx).sumBy({a: Int -> -412180671})
2021-03-12 08:06:13,212 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]]
2021-03-12 08:06:13,212 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]
2021-03-12 08:06:13,288 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:13,289 [main:117] - GENERATED CALL = (A.xx).size.ushr(1636189613)
2021-03-12 08:06:13,289 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]]
2021-03-12 08:06:13,289 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 08:06:13,289 [main:117] - GENERATED CALL = (A.xx).size.inv()
2021-03-12 08:06:13,289 [main:61] - replacement of (A.xx).plus(-1490606973)[0] of type Int is (A.xx).component3()
2021-03-12 08:06:13,370 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:13,371 [main:53] - replacing (A.x, IntArray)
2021-03-12 08:06:13,371 [main:50] - replacing A.x IntArray
2021-03-12 08:06:13,371 [main:54] - Getting value of type IntArray
2021-03-12 08:06:13,450 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:06:13,549 [main:43] - GENERATING CALL OF fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:06:13,550 [main:61] - WITHOUT TYPE PARAMS = fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:06:13,631 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:13,631 [main:95] - GENERATED = intArrayOf(-298374826)
2021-03-12 08:06:13,631 [main:58] - GENERATED VALUE OF TYPE IntArray = intArrayOf(-298374826)
2021-03-12 08:06:13,631 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:13,982 [main:67] - randomType = Set<HashMap<Byte?, A>>
2021-03-12 08:06:13,983 [main:106] - GETTING IntArray from IntArray
2021-03-12 08:06:13,990 [main:113] - Case = [public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]]
2021-03-12 08:06:13,991 [main:149] - GENERATING call of type public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]
2021-03-12 08:06:14,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:14,182 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:14,182 [main:117] - GENERATED CALL = (xx).copyOfRange(-1251646397, -1400658735)
2021-03-12 08:06:14,182 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]]
2021-03-12 08:06:14,183 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]
2021-03-12 08:06:14,260 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Unit> false depth = 0
2021-03-12 08:06:14,261 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:06:14,380 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:06:14,381 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:06:14,556 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:06:14,556 [main:95] - GENERATED = check(false)
2021-03-12 08:06:14,557 [main:117] - GENERATED CALL = (xx).onEachIndexed({a: Int, b: Int -> check(false)})
2021-03-12 08:06:14,557 [main:113] - Case = [public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]]
2021-03-12 08:06:14,557 [main:149] - GENERATING call of type public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]
2021-03-12 08:06:14,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:14,635 [main:117] - GENERATED CALL = (xx).plus(654400277)
2021-03-12 08:06:14,635 [main:113] - Case = [public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]]
2021-03-12 08:06:14,635 [main:149] - GENERATING call of type public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]
2021-03-12 08:06:14,635 [main:117] - GENERATED CALL = (xx).reversedArray()
2021-03-12 08:06:14,635 [main:113] - Case = [public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]]
2021-03-12 08:06:14,635 [main:149] - GENERATING call of type public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]
2021-03-12 08:06:14,714 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-12 08:06:14,805 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Collection<Int> = TODO()
2021-03-12 08:06:14,806 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Collection<Int> = TODO()
2021-03-12 08:06:14,885 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:14,885 [main:95] - GENERATED = listOfNotNull<Int>(-782826614)
2021-03-12 08:06:14,885 [main:117] - GENERATED CALL = (xx).sliceArray(listOfNotNull<Int>(-782826614))
2021-03-12 08:06:14,885 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]]
2021-03-12 08:06:14,886 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]
2021-03-12 08:06:14,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:15,066 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:15,143 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:15,144 [main:117] - GENERATED CALL = (xx).copyInto(xx, 1782021719, 627533781, 1318962545)
2021-03-12 08:06:15,144 [main:113] - Case = [public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]]
2021-03-12 08:06:15,144 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]
2021-03-12 08:06:15,144 [main:117] - GENERATED CALL = (xx).sortedArrayDescending()
2021-03-12 08:06:15,144 [main:113] - Case = [public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]]
2021-03-12 08:06:15,144 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]
2021-03-12 08:06:15,144 [main:117] - GENERATED CALL = (xx).sortedArray()
2021-03-12 08:06:15,144 [main:113] - Case = [public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]]
2021-03-12 08:06:15,144 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]
2021-03-12 08:06:15,145 [main:117] - GENERATED CALL = (xx).copyOf()
2021-03-12 08:06:15,145 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]]
2021-03-12 08:06:15,145 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]
2021-03-12 08:06:15,228 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 08:06:15,228 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:06:15,313 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:06:15,314 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:06:15,474 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 08:06:15,475 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:06:15,584 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:06:15,585 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:06:15,839 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 08:06:15,839 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 08:06:15,840 [main:302] - generating value of type = Any false depth = 9
2021-03-12 08:06:15,840 [main:95] - GENERATED = require(false, { "pksuw"})
2021-03-12 08:06:15,840 [main:95] - GENERATED = contract({ require(false, { "pksuw"})})
2021-03-12 08:06:15,841 [main:117] - GENERATED CALL = (xx).onEach({a: Int -> contract({ require(false, { "pksuw"})})})
2021-03-12 08:06:15,841 [main:61] - replacement of A.x of type IntArray is (xx).sortedArrayDescending()
2021-03-12 08:06:15,917 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:15,917 [main:66] - Compilation checking started
2021-03-12 08:06:16,098 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++(xx).sortedArrayDescending()[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:16,099 [main:53] - replacing (0, Int)
2021-03-12 08:06:16,099 [main:50] - replacing 0 Int
2021-03-12 08:06:16,099 [main:54] - Getting value of type Int
2021-03-12 08:06:16,176 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:16,176 [main:58] - GENERATED VALUE OF TYPE Int = -690432400
2021-03-12 08:06:16,176 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:16,255 [main:67] - randomType = Byte
2021-03-12 08:06:16,351 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:16,424 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5ac214]
2021-03-12 08:06:16,503 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:16,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]
2021-03-12 08:06:16,504 [main:78] - Generated call from random type = (-99).compareTo(-121).countLeadingZeroBits()
2021-03-12 08:06:16,505 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:16,517 [main:113] - Case = [public fun kotlin.IntArray.first(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e378d3]]
2021-03-12 08:06:16,517 [main:149] - GENERATING call of type public fun kotlin.IntArray.first(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e378d3]
2021-03-12 08:06:16,517 [main:117] - GENERATED CALL = (xx).first()
2021-03-12 08:06:16,517 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e4d743c]]
2021-03-12 08:06:16,517 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e4d743c]
2021-03-12 08:06:16,594 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:16,594 [main:117] - GENERATED CALL = (xx).size.shr(1332751881)
2021-03-12 08:06:16,594 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@519b645c]]
2021-03-12 08:06:16,594 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@519b645c]
2021-03-12 08:06:16,672 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:16,672 [main:117] - GENERATED CALL = (xx).size.and(1835622126)
2021-03-12 08:06:16,672 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]]
2021-03-12 08:06:16,673 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 08:06:16,673 [main:117] - GENERATED CALL = (xx).size.inv()
2021-03-12 08:06:16,673 [main:113] - Case = [public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]]
2021-03-12 08:06:16,673 [main:149] - GENERATING call of type public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]
2021-03-12 08:06:16,673 [main:117] - GENERATED CALL = (xx).sum()
2021-03-12 08:06:16,673 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]]
2021-03-12 08:06:16,673 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]
2021-03-12 08:06:16,750 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:16,751 [main:117] - GENERATED CALL = (xx).size.xor(1816151084)
2021-03-12 08:06:16,751 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]]
2021-03-12 08:06:16,751 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]
2021-03-12 08:06:16,830 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:16,830 [main:117] - GENERATED CALL = (xx).size.rem(-29)
2021-03-12 08:06:16,830 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e], public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]]
2021-03-12 08:06:16,830 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e]
2021-03-12 08:06:16,830 [main:149] - GENERATING call of type public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]
2021-03-12 08:06:16,831 [main:117] - GENERATED CALL = (xx).iterator().next()
2021-03-12 08:06:16,831 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13d4bf8]]
2021-03-12 08:06:16,831 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13d4bf8]
2021-03-12 08:06:16,831 [main:117] - GENERATED CALL = (xx).size.countTrailingZeroBits()
2021-03-12 08:06:16,831 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]]
2021-03-12 08:06:16,831 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]
2021-03-12 08:06:16,831 [main:117] - GENERATED CALL = (xx).size.inc()
2021-03-12 08:06:16,831 [main:61] - replacement of 0 of type Int is (xx).size.rem(-29)
2021-03-12 08:06:16,909 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:16,909 [main:66] - Compilation checking started
2021-03-12 08:06:17,129 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[(xx).size.rem(-29)] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:17,131 [main:53] - replacing (0, Int)
2021-03-12 08:06:17,131 [main:50] - replacing 0 Int
2021-03-12 08:06:17,131 [main:54] - Getting value of type Int
2021-03-12 08:06:17,226 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:17,227 [main:58] - GENERATED VALUE OF TYPE Int = -2044642574
2021-03-12 08:06:17,227 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:17,394 [main:67] - randomType = Map<A, Short>
2021-03-12 08:06:17,395 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:17,405 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfLast(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e9a9d6]]
2021-03-12 08:06:17,405 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfLast(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e9a9d6]
2021-03-12 08:06:17,483 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:06:17,483 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:06:17,484 [main:117] - GENERATED CALL = (xx).indexOfLast({a: Int -> true})
2021-03-12 08:06:17,484 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component3(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@775d38ff]]
2021-03-12 08:06:17,484 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component3(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@775d38ff]
2021-03-12 08:06:17,484 [main:117] - GENERATED CALL = (xx).component3()
2021-03-12 08:06:17,484 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.sumOf(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@311831f6]]
2021-03-12 08:06:17,485 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.sumOf(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@311831f6]
2021-03-12 08:06:17,560 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:17,561 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:17,563 [main:117] - GENERATED CALL = (xx).sumOf({a: Int -> 592791504})
2021-03-12 08:06:17,563 [main:113] - Case = [public fun kotlin.IntArray.last(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d63ce]]
2021-03-12 08:06:17,563 [main:149] - GENERATING call of type public fun kotlin.IntArray.last(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d63ce]
2021-03-12 08:06:17,563 [main:117] - GENERATED CALL = (xx).last()
2021-03-12 08:06:17,563 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29e456f1]]
2021-03-12 08:06:17,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29e456f1]
2021-03-12 08:06:17,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:17,640 [main:117] - GENERATED CALL = (xx).size.rotateRight(-231585786)
2021-03-12 08:06:17,640 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]]
2021-03-12 08:06:17,640 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]
2021-03-12 08:06:17,719 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:06:17,719 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]
2021-03-12 08:06:17,840 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:06:17,840 [main:117] - GENERATED CALL = (xx).equals("eevzz").compareTo(false)
2021-03-12 08:06:17,840 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]]
2021-03-12 08:06:17,840 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]
2021-03-12 08:06:17,936 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:17,936 [main:117] - GENERATED CALL = (xx).size.rem(78)
2021-03-12 08:06:17,936 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component4(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@363bd52e]]
2021-03-12 08:06:17,937 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component4(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@363bd52e]
2021-03-12 08:06:17,937 [main:117] - GENERATED CALL = (xx).component4()
2021-03-12 08:06:17,937 [main:113] - Case = [public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]]
2021-03-12 08:06:17,937 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]
2021-03-12 08:06:18,018 [main:302] - generating value of type = Function2<Int, [@kotlin.ParameterName] Int, Int> false depth = 0
2021-03-12 08:06:18,018 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:18,019 [main:117] - GENERATED CALL = (xx).reduceRight({a: Int, b: Int -> -1412380092})
2021-03-12 08:06:18,019 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50dffc4]]
2021-03-12 08:06:18,019 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50dffc4]
2021-03-12 08:06:18,097 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:18,097 [main:117] - GENERATED CALL = (xx).size.compareTo(-23)
2021-03-12 08:06:18,097 [main:61] - replacement of 0 of type Int is (xx).sumOf({a: Int -> 592791504})
2021-03-12 08:06:18,173 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:18,173 [main:66] - Compilation checking started
2021-03-12 08:06:18,355 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[(xx).sumOf({a: Int -> 592791504})]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:18,356 [main:53] - replacing (3, Int)
2021-03-12 08:06:18,356 [main:50] - replacing 3 Int
2021-03-12 08:06:18,356 [main:54] - Getting value of type Int
2021-03-12 08:06:18,432 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:18,432 [main:58] - GENERATED VALUE OF TYPE Int = 751486027
2021-03-12 08:06:18,433 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:18,433 [main:67] - randomType = Boolean
2021-03-12 08:06:18,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:06:18,522 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]
2021-03-12 08:06:18,612 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:06:18,613 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 08:06:18,689 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:18,690 [main:78] - Generated call from random type = (true).compareTo(false).times(-51)
2021-03-12 08:06:18,691 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:18,698 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c8a47f3]]
2021-03-12 08:06:18,698 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c8a47f3]
2021-03-12 08:06:18,699 [main:117] - GENERATED CALL = (A.xx).size.dec()
2021-03-12 08:06:18,699 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]]
2021-03-12 08:06:18,699 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]
2021-03-12 08:06:18,775 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:18,776 [main:117] - GENERATED CALL = (A.xx).size.coerceAtMost(-930254413)
2021-03-12 08:06:18,776 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e], public abstract fun nextInt(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@22f06e87]]
2021-03-12 08:06:18,776 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e]
2021-03-12 08:06:18,776 [main:149] - GENERATING call of type public abstract fun nextInt(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@22f06e87]
2021-03-12 08:06:18,776 [main:117] - GENERATED CALL = (A.xx).iterator().nextInt()
2021-03-12 08:06:18,777 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a0afdef]]
2021-03-12 08:06:18,777 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a0afdef]
2021-03-12 08:06:18,853 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:18,928 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:18,929 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:18,929 [main:117] - GENERATED CALL = (A.xx).elementAtOrElse(-1009651557, {a: Int -> 1572666762})
2021-03-12 08:06:18,929 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a79d92]]
2021-03-12 08:06:18,929 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a79d92]
2021-03-12 08:06:18,930 [main:117] - GENERATED CALL = (A.xx).size.toInt()
2021-03-12 08:06:18,930 [main:113] - Case = [public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]]
2021-03-12 08:06:18,930 [main:149] - GENERATING call of type public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]
2021-03-12 08:06:19,005 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:19,006 [main:117] - GENERATED CALL = (A.xx).lastIndexOf(1931199772)
2021-03-12 08:06:19,006 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component4(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@363bd52e]]
2021-03-12 08:06:19,006 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component4(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@363bd52e]
2021-03-12 08:06:19,006 [main:117] - GENERATED CALL = (A.xx).component4()
2021-03-12 08:06:19,006 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component1(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1fa39f96]]
2021-03-12 08:06:19,006 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component1(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1fa39f96]
2021-03-12 08:06:19,006 [main:117] - GENERATED CALL = (A.xx).component1()
2021-03-12 08:06:19,006 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45985fe9]]
2021-03-12 08:06:19,006 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45985fe9]
2021-03-12 08:06:19,007 [main:117] - GENERATED CALL = (A.xx).contentHashCode()
2021-03-12 08:06:19,007 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]]
2021-03-12 08:06:19,007 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]
2021-03-12 08:06:19,084 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:06:19,084 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:06:19,085 [main:117] - GENERATED CALL = (A.xx).indexOfFirst({a: Int -> false})
2021-03-12 08:06:19,085 [main:61] - replacement of 3 of type Int is (A.xx).elementAtOrElse(-1009651557, {a: Int -> 1572666762})
2021-03-12 08:06:19,194 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:19,195 [main:53] - replacing (A.x[0], Int)
2021-03-12 08:06:19,195 [main:50] - replacing A.x[0] Int
2021-03-12 08:06:19,195 [main:54] - Getting value of type Int
2021-03-12 08:06:19,281 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:19,282 [main:58] - GENERATED VALUE OF TYPE Int = 1557030876
2021-03-12 08:06:19,282 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:19,442 [main:67] - randomType = Host?
2021-03-12 08:06:19,518 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:06:19,518 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:19,524 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]
2021-03-12 08:06:19,599 [main:302] - generating value of type = Function2<Int, [@kotlin.ParameterName] Int, Int> false depth = 0
2021-03-12 08:06:19,600 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:19,600 [main:78] - Generated call from random type = (Host)?.x.reduceRight({a: Int, b: Int -> 698867123})
2021-03-12 08:06:19,601 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:19,608 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]]
2021-03-12 08:06:19,609 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]
2021-03-12 08:06:19,687 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:06:19,687 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]
2021-03-12 08:06:19,782 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:06:19,783 [main:117] - GENERATED CALL = (A.xx).equals("rtnvr").compareTo(false)
2021-03-12 08:06:19,783 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfLast(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e9a9d6]]
2021-03-12 08:06:19,783 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfLast(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70e9a9d6]
2021-03-12 08:06:19,869 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:06:19,869 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:06:19,870 [main:117] - GENERATED CALL = (A.xx).indexOfLast({a: Int -> false})
2021-03-12 08:06:19,870 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e74a546]]
2021-03-12 08:06:19,870 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e74a546]
2021-03-12 08:06:19,870 [main:117] - GENERATED CALL = (A.xx).size.unaryPlus()
2021-03-12 08:06:19,870 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]]
2021-03-12 08:06:19,871 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]
2021-03-12 08:06:19,948 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:19,948 [main:117] - GENERATED CALL = (A.xx).size.xor(558799582)
2021-03-12 08:06:19,949 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a5d4375]]
2021-03-12 08:06:19,949 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a5d4375]
2021-03-12 08:06:20,025 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:20,025 [main:117] - GENERATED CALL = (A.xx).size.div(124)
2021-03-12 08:06:20,026 [main:113] - Case = [public inline fun kotlin.IntArray.sumBy(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b648069]]
2021-03-12 08:06:20,026 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.sumBy(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b648069]
2021-03-12 08:06:20,103 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:20,103 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:20,104 [main:117] - GENERATED CALL = (A.xx).sumBy({a: Int -> -2145771635})
2021-03-12 08:06:20,104 [main:113] - Case = [public inline fun kotlin.IntArray.reduceIndexed(operation: (index: kotlin.Int, acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7300db1c]]
2021-03-12 08:06:20,104 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceIndexed(operation: (index: kotlin.Int, acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7300db1c]
2021-03-12 08:06:20,181 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:06:20,181 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:20,182 [main:117] - GENERATED CALL = (A.xx).reduceIndexed({a: Int, b: Int, c: Int -> -3093996})
2021-03-12 08:06:20,182 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@46972b69]]
2021-03-12 08:06:20,182 [main:117] - GENERATED CALL = (A.xx).size.absoluteValue
2021-03-12 08:06:20,183 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a79d92]]
2021-03-12 08:06:20,183 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76a79d92]
2021-03-12 08:06:20,183 [main:117] - GENERATED CALL = (A.xx).size.toInt()
2021-03-12 08:06:20,183 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component4(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@363bd52e]]
2021-03-12 08:06:20,183 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component4(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@363bd52e]
2021-03-12 08:06:20,183 [main:117] - GENERATED CALL = (A.xx).component4()
2021-03-12 08:06:20,183 [main:61] - replacement of A.x[0] of type Int is (A.xx).component4()
2021-03-12 08:06:20,259 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:20,260 [main:53] - replacing (0, Int)
2021-03-12 08:06:20,260 [main:50] - replacing 0 Int
2021-03-12 08:06:20,260 [main:54] - Getting value of type Int
2021-03-12 08:06:20,352 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:20,353 [main:58] - GENERATED VALUE OF TYPE Int = 1704860281
2021-03-12 08:06:20,353 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:20,442 [main:67] - randomType = Char
2021-03-12 08:06:20,519 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:06:20,540 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5a70976a]
2021-03-12 08:06:20,540 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b62b17c]
2021-03-12 08:06:20,540 [main:78] - Generated call from random type = ('ꄐ').toByte().countLeadingZeroBits()
2021-03-12 08:06:20,541 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:20,548 [main:113] - Case = [public inline fun kotlin.IntArray.reduceRightIndexed(operation: (index: kotlin.Int, kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d0b5aef]]
2021-03-12 08:06:20,548 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceRightIndexed(operation: (index: kotlin.Int, kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d0b5aef]
2021-03-12 08:06:20,624 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] Int, Int, [@kotlin.ParameterName] Int, Int> false depth = 0
2021-03-12 08:06:20,624 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:20,625 [main:117] - GENERATED CALL = (xx).reduceRightIndexed({a: Int, b: Int, c: Int -> 398888781})
2021-03-12 08:06:20,625 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@519b645c]]
2021-03-12 08:06:20,625 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@519b645c]
2021-03-12 08:06:20,703 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:20,703 [main:117] - GENERATED CALL = (xx).size.and(-806847715)
2021-03-12 08:06:20,703 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component3(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@775d38ff]]
2021-03-12 08:06:20,703 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component3(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@775d38ff]
2021-03-12 08:06:20,703 [main:117] - GENERATED CALL = (xx).component3()
2021-03-12 08:06:20,704 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]]
2021-03-12 08:06:20,704 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]
2021-03-12 08:06:20,781 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:20,782 [main:117] - GENERATED CALL = (xx).size.coerceAtMost(-203626118)
2021-03-12 08:06:20,782 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]]
2021-03-12 08:06:20,782 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]
2021-03-12 08:06:20,782 [main:117] - GENERATED CALL = (xx).size.inc()
2021-03-12 08:06:20,782 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@46972b69]]
2021-03-12 08:06:20,782 [main:117] - GENERATED CALL = (xx).size.absoluteValue
2021-03-12 08:06:20,782 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]]
2021-03-12 08:06:20,783 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]
2021-03-12 08:06:20,783 [main:117] - GENERATED CALL = (xx).size.countLeadingZeroBits()
2021-03-12 08:06:20,783 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2d1a0f]]
2021-03-12 08:06:20,783 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2d1a0f]
2021-03-12 08:06:20,783 [main:117] - GENERATED CALL = (xx).size.takeHighestOneBit()
2021-03-12 08:06:20,783 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13d4bf8]]
2021-03-12 08:06:20,783 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13d4bf8]
2021-03-12 08:06:20,783 [main:117] - GENERATED CALL = (xx).size.countTrailingZeroBits()
2021-03-12 08:06:20,784 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e74a546]]
2021-03-12 08:06:20,784 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e74a546]
2021-03-12 08:06:20,784 [main:117] - GENERATED CALL = (xx).size.unaryPlus()
2021-03-12 08:06:20,784 [main:61] - replacement of 0 of type Int is (xx).size.inc()
2021-03-12 08:06:20,860 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:20,860 [main:66] - Compilation checking started
2021-03-12 08:06:21,043 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[(xx).size.inc()]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:21,044 [main:53] - replacing (A.x[(A.xx).size.coerceIn(1975343703, 487666217)], Int)
2021-03-12 08:06:21,044 [main:50] - replacing A.x[(A.xx).size.coerceIn(1975343703, 487666217)] Int
2021-03-12 08:06:21,044 [main:54] - Getting value of type Int
2021-03-12 08:06:21,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:21,154 [main:58] - GENERATED VALUE OF TYPE Int = 1021346226
2021-03-12 08:06:21,154 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:21,411 [main:67] - randomType = LinkedHashMap<A, A?>?
2021-03-12 08:06:21,489 [main:302] - generating value of type = LinkedHashMap<A, A?> false depth = 0
2021-03-12 08:06:21,570 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<A, A?>): LkedHashMap<A, A?> = TODO()
2021-03-12 08:06:21,571 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<A, A?>): LkedHashMap<A, A?> = TODO()
2021-03-12 08:06:21,650 [main:302] - generating value of type = Pair<A, A?> false depth = 3
2021-03-12 08:06:21,753 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: A, second: A?): Pair<A, A?> = TODO()
2021-03-12 08:06:21,754 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: A, second: A?): Pair<A, A?> = TODO()
2021-03-12 08:06:21,842 [main:302] - generating value of type = A false depth = 6
2021-03-12 08:06:21,842 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:21,843 [main:302] - generating value of type = A false depth = 6
2021-03-12 08:06:21,843 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:21,843 [main:95] - GENERATED = Pair<A, A?>(A, A)
2021-03-12 08:06:21,843 [main:95] - GENERATED = linkedMapOf<A, A?>(Pair<A, A?>(A, A))
2021-03-12 08:06:22,066 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2d1a0f]
2021-03-12 08:06:22,066 [main:78] - Generated call from random type = (linkedMapOf<A, A?>(Pair<A, A?>(A, A)))?.size.takeHighestOneBit()
2021-03-12 08:06:22,067 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:22,081 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component4(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@363bd52e]]
2021-03-12 08:06:22,081 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component4(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@363bd52e]
2021-03-12 08:06:22,081 [main:117] - GENERATED CALL = (xx).component4()
2021-03-12 08:06:22,081 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]]
2021-03-12 08:06:22,081 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]
2021-03-12 08:06:22,082 [main:117] - GENERATED CALL = (xx).size.inc()
2021-03-12 08:06:22,082 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]]
2021-03-12 08:06:22,082 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:06:22,169 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:22,170 [main:117] - GENERATED CALL = (xx).size.plus(-58)
2021-03-12 08:06:22,170 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bc7c8c7]]
2021-03-12 08:06:22,170 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bc7c8c7]
2021-03-12 08:06:22,258 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:22,344 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:22,344 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:22,345 [main:117] - GENERATED CALL = (xx).getOrElse(1193763115, {a: Int -> 1350542785})
2021-03-12 08:06:22,345 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c8a47f3]]
2021-03-12 08:06:22,345 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c8a47f3]
2021-03-12 08:06:22,346 [main:117] - GENERATED CALL = (xx).size.dec()
2021-03-12 08:06:22,346 [main:113] - Case = [public inline fun kotlin.IntArray.reduceIndexed(operation: (index: kotlin.Int, acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7300db1c]]
2021-03-12 08:06:22,346 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceIndexed(operation: (index: kotlin.Int, acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7300db1c]
2021-03-12 08:06:22,431 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:06:22,432 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:22,432 [main:117] - GENERATED CALL = (xx).reduceIndexed({a: Int, b: Int, c: Int -> -84046265})
2021-03-12 08:06:22,433 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]]
2021-03-12 08:06:22,433 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]
2021-03-12 08:06:22,520 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:22,521 [main:117] - GENERATED CALL = (xx).size.rem(-20)
2021-03-12 08:06:22,521 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@46972b69]]
2021-03-12 08:06:22,521 [main:117] - GENERATED CALL = (xx).size.absoluteValue
2021-03-12 08:06:22,521 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]]
2021-03-12 08:06:22,521 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]
2021-03-12 08:06:22,598 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:06:22,598 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:06:22,603 [main:117] - GENERATED CALL = (xx).indexOfFirst({a: Int -> true})
2021-03-12 08:06:22,603 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@18548b0a]]
2021-03-12 08:06:22,603 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@18548b0a]
2021-03-12 08:06:22,603 [main:117] - GENERATED CALL = (xx).count()
2021-03-12 08:06:22,603 [main:61] - replacement of A.x[(A.xx).size.coerceIn(1975343703, 487666217)] of type Int is (xx).size.rem(-20)
2021-03-12 08:06:22,697 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:22,697 [main:66] - Compilation checking started
2021-03-12 08:06:22,893 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != 1) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${(xx).size.rem(-20)}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:22,893 [main:53] - replacing (1, Int)
2021-03-12 08:06:22,894 [main:50] - replacing 1 Int
2021-03-12 08:06:22,894 [main:54] - Getting value of type Int
2021-03-12 08:06:22,970 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:22,970 [main:58] - GENERATED VALUE OF TYPE Int = -1964093970
2021-03-12 08:06:22,970 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:23,641 [main:67] - randomType = HashMap<Function2<Host, Char, Host>, Set<A?>>
2021-03-12 08:06:23,720 [main:302] - generating value of type = HashMap<Function2<Host, Char, Host>, Set<A?>> false depth = 0
2021-03-12 08:06:23,807 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Function2<Host, Char, Host>, Set<A?>> = TODO()
2021-03-12 08:06:23,809 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Function2<Host, Char, Host>, Set<A?>> = TODO()
2021-03-12 08:06:23,886 [main:95] - GENERATED = hashMapOf<Function2<Host, Char, Host>, Set<A?>>()
2021-03-12 08:06:24,054 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:06:24,130 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:24,131 [main:78] - Generated call from random type = (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)
2021-03-12 08:06:24,131 [main:61] - replacement of 1 of type Int is (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)
2021-03-12 08:06:24,206 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:24,207 [main:66] - Compilation checking started
2021-03-12 08:06:24,640 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:24,641 [main:53] - replacing (A.x[0], Int)
2021-03-12 08:06:24,641 [main:50] - replacing A.x[0] Int
2021-03-12 08:06:24,641 [main:54] - Getting value of type Int
2021-03-12 08:06:24,731 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:24,732 [main:58] - GENERATED VALUE OF TYPE Int = -1762824797
2021-03-12 08:06:24,732 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:24,834 [main:67] - randomType = Byte
2021-03-12 08:06:24,934 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:24,993 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7fb8e260]
2021-03-12 08:06:24,994 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@407691d1]
2021-03-12 08:06:24,994 [main:78] - Generated call from random type = (40).toShort().toInt()
2021-03-12 08:06:24,994 [main:61] - replacement of A.x[0] of type Int is (40).toShort().toInt()
2021-03-12 08:06:25,085 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:25,085 [main:66] - Compilation checking started
2021-03-12 08:06:25,350 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    (40).toShort().toInt()++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:25,351 [main:53] - replacing (A.x, IntArray)
2021-03-12 08:06:25,351 [main:50] - replacing A.x IntArray
2021-03-12 08:06:25,351 [main:54] - Getting value of type IntArray
2021-03-12 08:06:25,445 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:06:25,553 [main:43] - GENERATING CALL OF fun IntArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Int): IntArray = TODO()
2021-03-12 08:06:25,555 [main:61] - WITHOUT TYPE PARAMS = fun IntArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Int): IntArray = TODO()
2021-03-12 08:06:25,878 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:25,879 [main:302] - generating value of type = Function1<Int, Int> false depth = 3
2021-03-12 08:06:25,879 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:06:25,879 [main:95] - GENERATED = IntArray(-951586974, {a: Int -> -701689671})
2021-03-12 08:06:25,879 [main:58] - GENERATED VALUE OF TYPE IntArray = IntArray(-951586974, {a: Int -> -701689671})
2021-03-12 08:06:25,880 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:26,268 [main:67] - randomType = Set<Collection<UInt>>
2021-03-12 08:06:26,268 [main:106] - GETTING IntArray from IntArray
2021-03-12 08:06:26,279 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]]
2021-03-12 08:06:26,279 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.copyInto(destination: kotlin.IntArray, destinationOffset: kotlin.Int = ..., startIndex: kotlin.Int = ..., endIndex: kotlin.Int = ...): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a7fa6a6]
2021-03-12 08:06:26,372 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:06:26,462 [main:43] - GENERATING CALL OF fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:06:26,464 [main:61] - WITHOUT TYPE PARAMS = fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:06:26,550 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:26,550 [main:95] - GENERATED = intArrayOf(-667427500)
2021-03-12 08:06:26,630 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:26,731 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:26,819 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:26,820 [main:117] - GENERATED CALL = (xx).copyInto(intArrayOf(-667427500), 376693427, 1237569349, 1454062519)
2021-03-12 08:06:26,820 [main:113] - Case = [public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]]
2021-03-12 08:06:26,820 [main:149] - GENERATING call of type public fun kotlin.IntArray.reversedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54a5728b]
2021-03-12 08:06:26,820 [main:117] - GENERATED CALL = (xx).reversedArray()
2021-03-12 08:06:26,820 [main:113] - Case = [public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]]
2021-03-12 08:06:26,820 [main:149] - GENERATING call of type public fun kotlin.IntArray.copyOfRange(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3a58cf8f]
2021-03-12 08:06:26,900 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:26,980 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:26,981 [main:117] - GENERATED CALL = (xx).copyOfRange(1463759249, 1415134439)
2021-03-12 08:06:26,981 [main:113] - Case = [public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]]
2021-03-12 08:06:26,981 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.copyOf(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5784649f]
2021-03-12 08:06:26,981 [main:117] - GENERATED CALL = (xx).copyOf()
2021-03-12 08:06:26,981 [main:113] - Case = [public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]]
2021-03-12 08:06:26,981 [main:149] - GENERATING call of type public inline operator fun kotlin.IntArray.plus(element: kotlin.Int): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e69185]
2021-03-12 08:06:27,060 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:27,060 [main:117] - GENERATED CALL = (xx).plus(890520495)
2021-03-12 08:06:27,060 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]]
2021-03-12 08:06:27,060 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ca84e7f]
2021-03-12 08:06:27,139 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Unit> false depth = 0
2021-03-12 08:06:27,139 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:06:27,221 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:06:27,222 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:06:27,385 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:06:27,385 [main:95] - GENERATED = print("jnjsx")
2021-03-12 08:06:27,386 [main:117] - GENERATED CALL = (xx).onEachIndexed({a: Int, b: Int -> print("jnjsx")})
2021-03-12 08:06:27,386 [main:113] - Case = [public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]]
2021-03-12 08:06:27,386 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArray(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6be9e443]
2021-03-12 08:06:27,386 [main:117] - GENERATED CALL = (xx).sortedArray()
2021-03-12 08:06:27,386 [main:113] - Case = [public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]]
2021-03-12 08:06:27,386 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortedArrayDescending(): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@216a0542]
2021-03-12 08:06:27,386 [main:117] - GENERATED CALL = (xx).sortedArrayDescending()
2021-03-12 08:06:27,386 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]]
2021-03-12 08:06:27,387 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.onEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7201a392]
2021-03-12 08:06:27,529 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 08:06:27,530 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:06:27,635 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:06:27,637 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:06:27,808 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:06:27,809 [main:95] - GENERATED = check(true)
2021-03-12 08:06:27,809 [main:117] - GENERATED CALL = (xx).onEach({a: Int -> check(true)})
2021-03-12 08:06:27,810 [main:113] - Case = [public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]]
2021-03-12 08:06:27,810 [main:149] - GENERATING call of type public fun kotlin.IntArray.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.IntArray defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@141d9b6e]
2021-03-12 08:06:27,890 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-12 08:06:27,974 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Collection<Int> = TODO()
2021-03-12 08:06:27,975 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Collection<Int> = TODO()
2021-03-12 08:06:28,058 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-12 08:06:28,059 [main:117] - GENERATED CALL = (xx).sliceArray(arrayListOf<Int>())
2021-03-12 08:06:28,059 [main:61] - replacement of A.x of type IntArray is (xx).copyOf()
2021-03-12 08:06:28,156 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:28,157 [main:66] - Compilation checking started
2021-03-12 08:06:28,372 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${(xx).copyOf()[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:28,373 [main:53] - replacing (0, Int)
2021-03-12 08:06:28,373 [main:50] - replacing 0 Int
2021-03-12 08:06:28,373 [main:54] - Getting value of type Int
2021-03-12 08:06:28,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:28,453 [main:58] - GENERATED VALUE OF TYPE Int = 1112088507
2021-03-12 08:06:28,453 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:28,633 [main:67] - randomType = ULong?
2021-03-12 08:06:28,712 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:06:28,752 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@314ec8]
2021-03-12 08:06:28,830 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:06:28,831 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@581d1c66]
2021-03-12 08:06:28,909 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:28,910 [main:78] - Generated call from random type = (2522003562247209898.toULong())?.compareTo(79.toUByte()).rotateLeft(1192616361)
2021-03-12 08:06:28,911 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:28,920 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0]]
2021-03-12 08:06:28,920 [main:117] - GENERATED CALL = (A.xx).size
2021-03-12 08:06:28,920 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@bd9e37b]]
2021-03-12 08:06:28,920 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@bd9e37b]
2021-03-12 08:06:28,920 [main:117] - GENERATED CALL = (A.xx).size.countOneBits()
2021-03-12 08:06:28,921 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bc7c8c7]]
2021-03-12 08:06:28,921 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bc7c8c7]
2021-03-12 08:06:29,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:29,113 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:29,114 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:29,114 [main:117] - GENERATED CALL = (A.xx).getOrElse(1316055335, {a: Int -> -1988102411})
2021-03-12 08:06:29,114 [main:113] - Case = [public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]]
2021-03-12 08:06:29,115 [main:149] - GENERATING call of type public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]
2021-03-12 08:06:29,197 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:29,198 [main:117] - GENERATED CALL = (A.xx).lastIndexOf(1235815759)
2021-03-12 08:06:29,198 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]]
2021-03-12 08:06:29,198 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]
2021-03-12 08:06:29,279 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:29,279 [main:117] - GENERATED CALL = (A.xx).size.xor(-1453843086)
2021-03-12 08:06:29,279 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50dffc4]]
2021-03-12 08:06:29,279 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@50dffc4]
2021-03-12 08:06:29,359 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:06:29,360 [main:117] - GENERATED CALL = (A.xx).size.compareTo(-28)
2021-03-12 08:06:29,360 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]]
2021-03-12 08:06:29,360 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]
2021-03-12 08:06:29,441 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:29,519 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:29,520 [main:117] - GENERATED CALL = (A.xx).size.coerceIn(-1994844032, -745804885)
2021-03-12 08:06:29,520 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]]
2021-03-12 08:06:29,520 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 08:06:29,520 [main:117] - GENERATED CALL = (A.xx).size.inv()
2021-03-12 08:06:29,520 [main:113] - Case = [public inline fun kotlin.IntArray.reduceIndexed(operation: (index: kotlin.Int, acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7300db1c]]
2021-03-12 08:06:29,520 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceIndexed(operation: (index: kotlin.Int, acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7300db1c]
2021-03-12 08:06:29,598 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:06:29,598 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:29,599 [main:117] - GENERATED CALL = (A.xx).reduceIndexed({a: Int, b: Int, c: Int -> 1474617874})
2021-03-12 08:06:29,599 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@46972b69]]
2021-03-12 08:06:29,599 [main:117] - GENERATED CALL = (A.xx).size.absoluteValue
2021-03-12 08:06:29,600 [main:61] - replacement of 0 of type Int is (A.xx).getOrElse(1316055335, {a: Int -> -1988102411})
2021-03-12 08:06:29,695 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:29,695 [main:53] - replacing (0, Int)
2021-03-12 08:06:29,695 [main:50] - replacing 0 Int
2021-03-12 08:06:29,695 [main:54] - Getting value of type Int
2021-03-12 08:06:29,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:29,786 [main:58] - GENERATED VALUE OF TYPE Int = 861667515
2021-03-12 08:06:29,786 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:29,874 [main:67] - randomType = Pair<A?, Int>
2021-03-12 08:06:29,951 [main:302] - generating value of type = Pair<A?, Int> false depth = 0
2021-03-12 08:06:30,032 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: A?, second: Int): Pair<A?, Int> = TODO()
2021-03-12 08:06:30,033 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: A?, second: Int): Pair<A?, Int> = TODO()
2021-03-12 08:06:30,113 [main:302] - generating value of type = A false depth = 3
2021-03-12 08:06:30,114 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:30,114 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:30,114 [main:95] - GENERATED = Pair<A?, Int>(A, 1547128708)
2021-03-12 08:06:30,126 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d291100]
2021-03-12 08:06:30,127 [main:78] - Generated call from random type = (Pair<A?, Int>(A, 1547128708)).second.unaryMinus()
2021-03-12 08:06:30,128 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:30,137 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component1(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1fa39f96]]
2021-03-12 08:06:30,137 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component1(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1fa39f96]
2021-03-12 08:06:30,137 [main:117] - GENERATED CALL = (A.xx).component1()
2021-03-12 08:06:30,137 [main:113] - Case = [public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]]
2021-03-12 08:06:30,137 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]
2021-03-12 08:06:30,216 [main:302] - generating value of type = Function2<Int, [@kotlin.ParameterName] Int, Int> false depth = 0
2021-03-12 08:06:30,216 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:30,217 [main:117] - GENERATED CALL = (A.xx).reduceRight({a: Int, b: Int -> 507667948})
2021-03-12 08:06:30,217 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@46972b69]]
2021-03-12 08:06:30,217 [main:117] - GENERATED CALL = (A.xx).size.absoluteValue
2021-03-12 08:06:30,217 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component2(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2f3ec9]]
2021-03-12 08:06:30,218 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component2(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2f3ec9]
2021-03-12 08:06:30,218 [main:117] - GENERATED CALL = (A.xx).component2()
2021-03-12 08:06:30,218 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13d4bf8]]
2021-03-12 08:06:30,218 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13d4bf8]
2021-03-12 08:06:30,218 [main:117] - GENERATED CALL = (A.xx).size.countTrailingZeroBits()
2021-03-12 08:06:30,218 [main:113] - Case = [public fun kotlin.IntArray.first(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e378d3]]
2021-03-12 08:06:30,218 [main:149] - GENERATING call of type public fun kotlin.IntArray.first(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27e378d3]
2021-03-12 08:06:30,218 [main:117] - GENERATED CALL = (A.xx).first()
2021-03-12 08:06:30,218 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]]
2021-03-12 08:06:30,218 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]
2021-03-12 08:06:30,338 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:06:30,338 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:06:30,339 [main:117] - GENERATED CALL = (A.xx).indexOfFirst({a: Int -> true})
2021-03-12 08:06:30,339 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e74a546]]
2021-03-12 08:06:30,339 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e74a546]
2021-03-12 08:06:30,339 [main:117] - GENERATED CALL = (A.xx).size.unaryPlus()
2021-03-12 08:06:30,339 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]]
2021-03-12 08:06:30,339 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5553f7f7]
2021-03-12 08:06:30,432 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:30,433 [main:117] - GENERATED CALL = (A.xx).size.ushr(-1967623148)
2021-03-12 08:06:30,433 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e], public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]]
2021-03-12 08:06:30,433 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e]
2021-03-12 08:06:30,433 [main:149] - GENERATING call of type public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]
2021-03-12 08:06:30,434 [main:117] - GENERATED CALL = (A.xx).iterator().next()
2021-03-12 08:06:30,434 [main:61] - replacement of 0 of type Int is (A.xx).size.unaryPlus()
2021-03-12 08:06:30,525 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:30,526 [main:53] - replacing (1, Int)
2021-03-12 08:06:30,526 [main:50] - replacing 1 Int
2021-03-12 08:06:30,526 [main:54] - Getting value of type Int
2021-03-12 08:06:30,612 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:30,612 [main:58] - GENERATED VALUE OF TYPE Int = 775994513
2021-03-12 08:06:30,612 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:30,613 [main:67] - randomType = A
2021-03-12 08:06:30,693 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:06:30,693 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:30,701 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component2(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a2f3ec9]
2021-03-12 08:06:30,701 [main:78] - Generated call from random type = (A).xx.component2()
2021-03-12 08:06:30,702 [main:106] - GETTING Int from IntArray
2021-03-12 08:06:30,709 [main:113] - Case = [public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]]
2021-03-12 08:06:30,709 [main:149] - GENERATING call of type public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]
2021-03-12 08:06:30,787 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:30,787 [main:117] - GENERATED CALL = (A.xx).lastIndexOf(-1833412297)
2021-03-12 08:06:30,787 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7ee60b]]
2021-03-12 08:06:30,788 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4b7ee60b]
2021-03-12 08:06:30,871 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:30,872 [main:117] - GENERATED CALL = (A.xx).size.coerceAtLeast(-923621479)
2021-03-12 08:06:30,872 [main:113] - Case = [public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]]
2021-03-12 08:06:30,872 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduce(operation: (acc: kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67ee5b15]
2021-03-12 08:06:30,956 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Int> false depth = 0
2021-03-12 08:06:30,956 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:30,957 [main:117] - GENERATED CALL = (A.xx).reduce({a: Int, b: Int -> -1456014535})
2021-03-12 08:06:30,957 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d291100]]
2021-03-12 08:06:30,957 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d291100]
2021-03-12 08:06:30,957 [main:117] - GENERATED CALL = (A.xx).size.unaryMinus()
2021-03-12 08:06:30,957 [main:113] - Case = [public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]]
2021-03-12 08:06:30,957 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.reduceRight(operation: (kotlin.Int, acc: kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@257490d2]
2021-03-12 08:06:31,062 [main:302] - generating value of type = Function2<Int, [@kotlin.ParameterName] Int, Int> false depth = 0
2021-03-12 08:06:31,062 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:31,063 [main:117] - GENERATED CALL = (A.xx).reduceRight({a: Int, b: Int -> 728854550})
2021-03-12 08:06:31,063 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.sumOf(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@311831f6]]
2021-03-12 08:06:31,063 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.sumOf(selector: (kotlin.Int) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@311831f6]
2021-03-12 08:06:31,154 [main:302] - generating value of type = Function1<Int, Int> false depth = 0
2021-03-12 08:06:31,155 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:06:31,155 [main:117] - GENERATED CALL = (A.xx).sumOf({a: Int -> -1519138907})
2021-03-12 08:06:31,155 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0]]
2021-03-12 08:06:31,156 [main:117] - GENERATED CALL = (A.xx).size
2021-03-12 08:06:31,156 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component3(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@775d38ff]]
2021-03-12 08:06:31,156 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.IntArray.component3(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@775d38ff]
2021-03-12 08:06:31,156 [main:117] - GENERATED CALL = (A.xx).component3()
2021-03-12 08:06:31,156 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e], public abstract fun nextInt(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@22f06e87]]
2021-03-12 08:06:31,156 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e]
2021-03-12 08:06:31,156 [main:149] - GENERATING call of type public abstract fun nextInt(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@22f06e87]
2021-03-12 08:06:31,156 [main:117] - GENERATED CALL = (A.xx).iterator().nextInt()
2021-03-12 08:06:31,156 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]]
2021-03-12 08:06:31,156 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4515c6f]
2021-03-12 08:06:31,156 [main:117] - GENERATED CALL = (A.xx).size.inc()
2021-03-12 08:06:31,157 [main:61] - replacement of 1 of type Int is (A.xx).size.inc()
2021-03-12 08:06:31,237 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:31,238 [main:66] - Compilation checking started
2021-03-12 08:06:31,552 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += (A.xx).size.inc()
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn(1975343703, 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:31,631 [main:119] - TRYING TO REPLACE CONSTANT 0.4699393101963091
2021-03-12 08:06:31,710 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 08:06:31,710 [main:66] - Compilation checking started
2021-03-12 08:06:31,984 [main:119] - TRYING TO REPLACE CONSTANT 1975343703
2021-03-12 08:06:32,065 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:32,065 [main:66] - Compilation checking started
2021-03-12 08:06:32,387 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += (A.xx).size.inc()
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn((A.xx).size.inc(), 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:32,387 [main:119] - TRYING TO REPLACE CONSTANT 487666217
2021-03-12 08:06:32,479 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:06:32,479 [main:66] - Compilation checking started
2021-03-12 08:06:32,769 [main:119] - TRYING TO REPLACE CONSTANT 1264883389
2021-03-12 08:06:32,850 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:06:32,850 [main:66] - Compilation checking started
2021-03-12 08:06:33,132 [main:119] - TRYING TO REPLACE CONSTANT 303594057
2021-03-12 08:06:33,212 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:06:33,212 [main:66] - Compilation checking started
2021-03-12 08:06:33,462 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += (A.xx).size.inc()
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, coerceIn(1264883389, 303594057))}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn((A.xx).size.inc(), 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(446934106)

    return "OK"
}


2021-03-12 08:06:33,462 [main:119] - TRYING TO REPLACE CONSTANT 446934106
2021-03-12 08:06:33,549 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:06:33,549 [main:66] - Compilation checking started
2021-03-12 08:06:33,903 [main:53] - Result = true
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += (A.xx).size.inc()
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn((A.xx).size.inc(), 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(2)

    return "OK"
}


2021-03-12 08:06:33,903 [main:119] - TRYING TO REPLACE CONSTANT 1182581280
2021-03-12 08:06:33,995 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:06:33,996 [main:66] - Compilation checking started
2021-03-12 08:06:34,201 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += (A.xx).size.inc()
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(86)) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (size != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn((A.xx).size.inc(), 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(2)

    return "OK"
}


2021-03-12 08:06:34,201 [main:119] - TRYING TO REPLACE CONSTANT 86
2021-03-12 08:06:34,288 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:06:34,289 [main:66] - Compilation checking started
2021-03-12 08:06:34,517 [main:49] - Result = false
Text:
import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += (A.xx).size.inc()
    if (A.x[(0.4699393101963091).toInt().unaryMinus()] != (hashMapOf<Function2<Host, Char, Host>, Set<A?>>()).size.plus(coerceIn(1264883389, 303594057))) return "Fail 1: ${(A.xx).size.coerceIn(1264883389, 303594057)}"

    A.x[0]++
    if (-1182581280 != 2) return "Fail 2: ${A.x[(A.xx).size.coerceIn((A.xx).size.inc(), 487666217)]}"

    ++A.x[0]
    if (true) return (A.xx).size.toString(2)

    return "OK"
}


2021-03-12 08:06:34,552 [main:41] - AFTER TRY 0 res = import Host.x

object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}
2021-03-12 08:06:34,706 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:34,707 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:34,882 [main:43] - Try №0
2021-03-12 08:06:36,440 [main:69] - Trying to insert fun fu0(): String
2021-03-12 08:06:36,554 [main:66] - Compilation checking started
2021-03-12 08:06:37,236 [main:103] - Trying to change 18 nodes
2021-03-12 08:06:37,237 [main:107] - replacing (with(HashMap<String, Kla0>()) {
        put("result", object : Kla0 {
            override fun fu0(): String = "OK"
        })
        this
    }, HashMap<String, Kla0>)
2021-03-12 08:06:37,237 [main:50] - replacing with(HashMap<String, Kla0>()) {
        put("result", object : Kla0 {
            override fun fu0(): String = "OK"
        })
        this
    } HashMap<String, Kla0>
2021-03-12 08:06:37,237 [main:54] - Getting value of type HashMap<String, Kla0>
2021-03-12 08:06:37,352 [main:302] - generating value of type = HashMap<String, Kla0> false depth = 0
2021-03-12 08:06:37,486 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<String, Kla0>): HashMap<String, Kla0> = TODO()
2021-03-12 08:06:37,488 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<String, Kla0>): HashMap<String, Kla0> = TODO()
2021-03-12 08:06:37,709 [main:302] - generating value of type = Map<String, Kla0> false depth = 3
2021-03-12 08:06:37,813 [main:43] - GENERATING CALL OF fun <K, V> mapOf(pair: kotlin.Pair<String, Kla0>): Map<Strg, Kla0> = TODO()
2021-03-12 08:06:37,815 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(pair: kotlin.Pair<String, Kla0>): Map<Strg, Kla0> = TODO()
2021-03-12 08:06:38,021 [main:302] - generating value of type = Pair<String, Kla0> false depth = 6
2021-03-12 08:06:38,121 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Kla0): Pair<String, Kla0> = TODO()
2021-03-12 08:06:38,122 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Kla0): Pair<String, Kla0> = TODO()
2021-03-12 08:06:38,221 [main:302] - generating value of type = String true depth = 9
2021-03-12 08:06:38,222 [main:302] - generating value of type = Kla0 false depth = 9
2021-03-12 08:06:38,222 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu0(): String
}
2021-03-12 08:06:38,457 [main:95] - GENERATED = Pair<String, Kla0>("hahyq", TODO())
2021-03-12 08:06:38,457 [main:95] - GENERATED = mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO()))
2021-03-12 08:06:38,458 [main:95] - GENERATED = LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
2021-03-12 08:06:38,458 [main:58] - GENERATED VALUE OF TYPE HashMap<String, Kla0> = LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
2021-03-12 08:06:38,458 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:38,604 [main:67] - randomType = Host
2021-03-12 08:06:38,717 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:06:38,718 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:38,790 [main:106] - GETTING HashMap<String, Kla0> from IntArray
2021-03-12 08:06:38,803 [main:106] - GETTING HashMap<String, Kla0> from Int
2021-03-12 08:06:38,845 [main:106] - GETTING HashMap<String, Kla0> from A
2021-03-12 08:06:38,855 [main:106] - GETTING HashMap<String, Kla0> from Int
2021-03-12 08:06:38,858 [main:106] - GETTING HashMap<String, Kla0> from IntArray
2021-03-12 08:06:38,861 [main:106] - GETTING HashMap<String, Kla0> from Int
2021-03-12 08:06:38,861 [main:114] - replacement of with(HashMap<String, Kla0>()) {
        put("result", object : Kla0 {
            override fun fu0(): String = "OK"
        })
        this
    } of type HashMap<String, Kla0> is LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
2021-03-12 08:06:38,954 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:06:38,955 [main:66] - Compilation checking started
2021-03-12 08:06:39,372 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
}

fun box194(): String {
    val prope1 = prope0["result"]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return prope1.fu0()
}


2021-03-12 08:06:39,372 [main:107] - replacing (prope0["result"]!!, Kla0)
2021-03-12 08:06:39,372 [main:50] - replacing prope0["result"]!! Kla0
2021-03-12 08:06:39,372 [main:54] - Getting value of type Kla0
2021-03-12 08:06:39,496 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:06:39,497 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu0(): String
}
2021-03-12 08:06:39,726 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 08:06:39,726 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:39,728 [main:67] - randomType = Kla0
2021-03-12 08:06:39,729 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:39,790 [main:106] - GETTING Kla0 from IntArray
2021-03-12 08:06:39,803 [main:106] - GETTING Kla0 from A
2021-03-12 08:06:39,811 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:39,812 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:39,813 [main:106] - GETTING Kla0 from IntArray
2021-03-12 08:06:39,813 [main:114] - replacement of prope0["result"]!! of type Kla0 is TODO()
2021-03-12 08:06:39,905 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:06:39,905 [main:66] - Compilation checking started
2021-03-12 08:06:40,167 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
}

fun box194(): String {
    val prope1 = TODO()

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return prope1.fu0()
}


2021-03-12 08:06:40,168 [main:107] - replacing (lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
}, Lazy<HashMap<String, Kla0>>)
2021-03-12 08:06:40,168 [main:50] - replacing lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
} Lazy<HashMap<String, Kla0>>
2021-03-12 08:06:40,168 [main:54] - Getting value of type Lazy<HashMap<String, Kla0>>
2021-03-12 08:06:40,288 [main:302] - generating value of type = Lazy<HashMap<String, Kla0>> false depth = 0
2021-03-12 08:06:40,383 [main:43] - GENERATING CALL OF fun <T> lazy(lock: kotlin.Any?, initializer: ()->HashMap<String, Kla0>): Lazy<HashMap<Strg, Kla0>> = TODO()
2021-03-12 08:06:40,385 [main:61] - WITHOUT TYPE PARAMS = fun <T> lazy(lock: kotlin.Any?, initializer: ()->HashMap<String, Kla0>): Lazy<HashMap<Strg, Kla0>> = TODO()
2021-03-12 08:06:40,696 [main:302] - generating value of type = Any false depth = 3
2021-03-12 08:06:40,696 [main:302] - generating value of type = Function0<HashMap<String, Kla0>> false depth = 3
2021-03-12 08:06:40,697 [main:302] - generating value of type = HashMap<String, Kla0> false depth = 4
2021-03-12 08:06:40,812 [main:43] - GENERATING CALL OF fun <V> linkedStringMapOf(pairs: Pair<String, Kla0>): HashMap<Strg, Kla0> = TODO()
2021-03-12 08:06:40,814 [main:61] - WITHOUT TYPE PARAMS = fun <V> linkedStringMapOf(pairs: Pair<String, Kla0>): HashMap<Strg, Kla0> = TODO()
2021-03-12 08:06:40,962 [main:302] - generating value of type = Pair<String, Kla0> false depth = 7
2021-03-12 08:06:41,085 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Kla0): Pair<String, Kla0> = TODO()
2021-03-12 08:06:41,087 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Kla0): Pair<String, Kla0> = TODO()
2021-03-12 08:06:41,220 [main:302] - generating value of type = String true depth = 10
2021-03-12 08:06:41,221 [main:302] - generating value of type = Kla0 false depth = 10
2021-03-12 08:06:41,221 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu0(): String
}
2021-03-12 08:06:41,400 [main:95] - GENERATED = Pair<String, Kla0>("jdacw", TODO())
2021-03-12 08:06:41,400 [main:95] - GENERATED = linkedStringMapOf<Kla0>(Pair<String, Kla0>("jdacw", TODO()))
2021-03-12 08:06:41,400 [main:95] - GENERATED = lazy<HashMap<String, Kla0>>("jhqwl", { linkedStringMapOf<Kla0>(Pair<String, Kla0>("jdacw", TODO()))})
2021-03-12 08:06:41,400 [main:58] - GENERATED VALUE OF TYPE Lazy<HashMap<String, Kla0>> = lazy<HashMap<String, Kla0>>("jhqwl", { linkedStringMapOf<Kla0>(Pair<String, Kla0>("jdacw", TODO()))})
2021-03-12 08:06:41,400 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:41,599 [main:67] - randomType = Host?
2021-03-12 08:06:41,691 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:06:41,692 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:41,705 [main:106] - GETTING Lazy<HashMap<String, Kla0>> from IntArray
2021-03-12 08:06:41,719 [main:106] - GETTING Lazy<HashMap<String, Kla0>> from A
2021-03-12 08:06:41,729 [main:106] - GETTING Lazy<HashMap<String, Kla0>> from Int
2021-03-12 08:06:41,786 [main:106] - GETTING Lazy<HashMap<String, Kla0>> from Int
2021-03-12 08:06:41,788 [main:106] - GETTING Lazy<HashMap<String, Kla0>> from IntArray
2021-03-12 08:06:41,790 [main:106] - GETTING Lazy<HashMap<String, Kla0>> from Int
2021-03-12 08:06:41,790 [main:114] - replacement of lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
} of type Lazy<HashMap<String, Kla0>> is lazy<HashMap<String, Kla0>>("jhqwl", { linkedStringMapOf<Kla0>(Pair<String, Kla0>("jdacw", TODO()))})
2021-03-12 08:06:41,910 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:06:41,911 [main:66] - Compilation checking started
2021-03-12 08:06:42,237 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy<HashMap<String, Kla0>>("jhqwl", { linkedStringMapOf<Kla0>(Pair<String, Kla0>("jdacw", TODO()))})

fun box194(): String {
    val prope1 = prope0["result"]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return prope1.fu0()
}


2021-03-12 08:06:42,238 [main:107] - replacing (prope0, HashMap<String, Kla0>)
2021-03-12 08:06:42,238 [main:50] - replacing prope0 HashMap<String, Kla0>
2021-03-12 08:06:42,238 [main:54] - Getting value of type HashMap<String, Kla0>
2021-03-12 08:06:42,336 [main:302] - generating value of type = HashMap<String, Kla0> false depth = 0
2021-03-12 08:06:42,435 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Strg, Kla0> = TODO()
2021-03-12 08:06:42,437 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Strg, Kla0> = TODO()
2021-03-12 08:06:42,533 [main:95] - GENERATED = hashMapOf<String, Kla0>()
2021-03-12 08:06:42,533 [main:58] - GENERATED VALUE OF TYPE HashMap<String, Kla0> = hashMapOf<String, Kla0>()
2021-03-12 08:06:42,533 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:42,735 [main:67] - randomType = UShort?
2021-03-12 08:06:42,831 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:06:42,884 [main:106] - GETTING HashMap<String, Kla0> from IntArray
2021-03-12 08:06:42,902 [main:106] - GETTING HashMap<String, Kla0> from Int
2021-03-12 08:06:42,964 [main:106] - GETTING HashMap<String, Kla0> from IntArray
2021-03-12 08:06:42,969 [main:106] - GETTING HashMap<String, Kla0> from Int
2021-03-12 08:06:42,973 [main:106] - GETTING HashMap<String, Kla0> from A
2021-03-12 08:06:42,986 [main:106] - GETTING HashMap<String, Kla0> from Int
2021-03-12 08:06:42,986 [main:114] - replacement of prope0 of type HashMap<String, Kla0> is hashMapOf<String, Kla0>()
2021-03-12 08:06:43,084 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:06:43,084 [main:66] - Compilation checking started
2021-03-12 08:06:43,537 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()["result"]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return prope1.fu0()
}


2021-03-12 08:06:43,538 [main:107] - replacing ("result", String)
2021-03-12 08:06:43,538 [main:50] - replacing "result" String
2021-03-12 08:06:43,538 [main:54] - Getting value of type String
2021-03-12 08:06:43,632 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:06:43,632 [main:58] - GENERATED VALUE OF TYPE String = "viggi"
2021-03-12 08:06:43,632 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:43,634 [main:67] - randomType = Kla0
2021-03-12 08:06:43,635 [main:106] - GETTING String from IntArray
2021-03-12 08:06:43,648 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]]
2021-03-12 08:06:43,648 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:06:43,649 [main:117] - GENERATED CALL = (A.xx).contentToString()
2021-03-12 08:06:43,649 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:06:43,649 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:06:43,650 [main:117] - GENERATED CALL = (A.xx).size.toString(A.x[0]++)
2021-03-12 08:06:43,650 [main:113] - Case = [public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]]
2021-03-12 08:06:43,650 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:06:43,745 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:43,841 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:43,936 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:44,027 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:44,122 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:44,212 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:06:44,213 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:06:44,467 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:06:44,468 [main:95] - GENERATED = StringBuilder("bnawz")
2021-03-12 08:06:44,615 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:06:44,616 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:06:44,623 [main:117] - GENERATED CALL = (A.xx).joinToString("vswtr", "xjins", StringBuilder(), -2041930268, StringBuilder("bnawz"), {a: Int -> StringBuilder()})
2021-03-12 08:06:44,623 [main:114] - replacement of "result" of type String is (A.xx).contentToString()
2021-03-12 08:06:44,744 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:44,744 [main:66] - Compilation checking started
2021-03-12 08:06:45,110 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return prope1.fu0()
}


2021-03-12 08:06:45,111 [main:107] - replacing (prope1, Kla0)
2021-03-12 08:06:45,111 [main:50] - replacing prope1 Kla0
2021-03-12 08:06:45,111 [main:54] - Getting value of type Kla0
2021-03-12 08:06:45,233 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:06:45,234 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu0(): String
}
2021-03-12 08:06:45,430 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 08:06:45,431 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:45,432 [main:67] - randomType = Kla0
2021-03-12 08:06:45,433 [main:106] - GETTING Kla0 from IntArray
2021-03-12 08:06:45,443 [main:106] - GETTING Kla0 from A
2021-03-12 08:06:45,449 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:45,511 [main:106] - GETTING Kla0 from IntArray
2021-03-12 08:06:45,513 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:45,514 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:45,514 [main:114] - replacement of prope1 of type Kla0 is TODO()
2021-03-12 08:06:45,621 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:06:45,622 [main:66] - Compilation checking started
2021-03-12 08:06:45,907 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return TODO().fu0()
}


2021-03-12 08:06:45,908 [main:107] - replacing (hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!, Kla0)
2021-03-12 08:06:45,908 [main:50] - replacing hashMapOf<String, Kla0>()[(A.xx).contentToString()]!! Kla0
2021-03-12 08:06:45,908 [main:54] - Getting value of type Kla0
2021-03-12 08:06:46,011 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:06:46,011 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu0(): String
}
2021-03-12 08:06:46,196 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 08:06:46,196 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:46,290 [main:67] - randomType = Double
2021-03-12 08:06:46,380 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:06:46,421 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:46,455 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:46,456 [main:106] - GETTING Kla0 from IntArray
2021-03-12 08:06:46,462 [main:106] - GETTING Kla0 from IntArray
2021-03-12 08:06:46,463 [main:106] - GETTING Kla0 from A
2021-03-12 08:06:46,468 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:46,468 [main:114] - replacement of hashMapOf<String, Kla0>()[(A.xx).contentToString()]!! of type Kla0 is TODO()
2021-03-12 08:06:46,551 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:06:46,552 [main:66] - Compilation checking started
2021-03-12 08:06:46,763 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
}

fun box194(): String {
    val prope1 = TODO()

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return prope1.fu0()
}


2021-03-12 08:06:46,763 [main:107] - replacing ({
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
}, Function0<HashMap<String, Kla0>>)
2021-03-12 08:06:46,763 [main:50] - replacing {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
} Function0<HashMap<String, Kla0>>
2021-03-12 08:06:46,763 [main:54] - Getting value of type Function0<HashMap<String, Kla0>>
2021-03-12 08:06:46,853 [main:302] - generating value of type = Function0<HashMap<String, Kla0>> false depth = 0
2021-03-12 08:06:46,853 [main:302] - generating value of type = HashMap<String, Kla0> false depth = 1
2021-03-12 08:06:46,952 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<String, Kla0>): HashMap<Strg, Kla0> = TODO()
2021-03-12 08:06:46,953 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<String, Kla0>): HashMap<Strg, Kla0> = TODO()
2021-03-12 08:06:47,066 [main:302] - generating value of type = Pair<String, Kla0> false depth = 4
2021-03-12 08:06:47,161 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Kla0): Pair<String, Kla0> = TODO()
2021-03-12 08:06:47,162 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Kla0): Pair<String, Kla0> = TODO()
2021-03-12 08:06:47,259 [main:302] - generating value of type = String true depth = 7
2021-03-12 08:06:47,260 [main:302] - generating value of type = Kla0 false depth = 7
2021-03-12 08:06:47,260 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu0(): String
}
2021-03-12 08:06:47,437 [main:95] - GENERATED = Pair<String, Kla0>("pmlle", TODO())
2021-03-12 08:06:47,437 [main:95] - GENERATED = hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))
2021-03-12 08:06:47,437 [main:58] - GENERATED VALUE OF TYPE Function0<HashMap<String, Kla0>> = { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}
2021-03-12 08:06:47,437 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:47,620 [main:67] - randomType = Short?
2021-03-12 08:06:47,711 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:06:47,763 [main:106] - GETTING Function0<HashMap<String, Kla0>> from Int
2021-03-12 08:06:47,805 [main:106] - GETTING Function0<HashMap<String, Kla0>> from IntArray
2021-03-12 08:06:47,814 [main:106] - GETTING Function0<HashMap<String, Kla0>> from IntArray
2021-03-12 08:06:47,816 [main:106] - GETTING Function0<HashMap<String, Kla0>> from Int
2021-03-12 08:06:47,817 [main:106] - GETTING Function0<HashMap<String, Kla0>> from Int
2021-03-12 08:06:47,819 [main:106] - GETTING Function0<HashMap<String, Kla0>> from A
2021-03-12 08:06:47,823 [main:114] - replacement of {
    LinkedHashMap<String, Kla0>(mapOf<String, Kla0>(Pair<String, Kla0>("hahyq", TODO())))
} of type Function0<HashMap<String, Kla0>> is { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}
2021-03-12 08:06:47,908 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:06:47,908 [main:66] - Compilation checking started
2021-03-12 08:06:48,274 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return prope1.fu0()
}


2021-03-12 08:06:48,275 [main:107] - replacing (prope1.fu0(), String)
2021-03-12 08:06:48,275 [main:50] - replacing prope1.fu0() String
2021-03-12 08:06:48,275 [main:54] - Getting value of type String
2021-03-12 08:06:48,394 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:06:48,394 [main:58] - GENERATED VALUE OF TYPE String = "vordo"
2021-03-12 08:06:48,395 [main:61] - GENERATED IS CALL =false
2021-03-12 08:06:48,499 [main:67] - randomType = A?
2021-03-12 08:06:48,589 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:06:48,590 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:48,595 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:06:48,680 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:48,772 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:06:48,773 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:06:48,952 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:06:48,953 [main:95] - GENERATED = StringBuilder("zvvdf")
2021-03-12 08:06:49,043 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:49,136 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:49,265 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:06:49,266 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:06:49,468 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:06:49,474 [main:95] - GENERATED = StringBuilder("vehmb")
2021-03-12 08:06:49,579 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:49,664 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:49,753 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:06:49,753 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:06:49,841 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:49,842 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:50,016 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:06:50,017 [main:95] - GENERATED = StringBuilder(-1040070823)
2021-03-12 08:06:50,017 [main:78] - Generated call from random type = (A)?.xx.joinToString(StringBuilder("zvvdf"), "nxdav", StringBuilder("vehmb"), -1156686198, "tnbsu", {a: Int -> StringBuilder(-1040070823)})
2021-03-12 08:06:50,018 [main:106] - GETTING String from IntArray
2021-03-12 08:06:50,030 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:06:50,030 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:06:50,119 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:06:50,120 [main:117] - GENERATED CALL = (A.xx).size.toString(1148145711)
2021-03-12 08:06:50,120 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]]
2021-03-12 08:06:50,120 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:06:50,120 [main:117] - GENERATED CALL = (A.xx).contentToString()
2021-03-12 08:06:50,120 [main:113] - Case = [public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]]
2021-03-12 08:06:50,120 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:06:50,231 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:50,326 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:06:50,327 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:06:50,514 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:06:50,605 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:50,606 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:50,785 [main:302] - generating value of type = Int true depth = 6
2021-03-12 08:06:50,785 [main:95] - GENERATED = StringBuilder(-1655116831)
2021-03-12 08:06:50,785 [main:95] - GENERATED = StringBuilder(StringBuilder(-1655116831))
2021-03-12 08:06:50,870 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:50,955 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:50,956 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:06:51,182 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:06:51,183 [main:95] - GENERATED = StringBuilder(-477810092)
2021-03-12 08:06:51,309 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:51,394 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:06:51,395 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:06:51,567 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:06:51,567 [main:95] - GENERATED = StringBuilder("leeui")
2021-03-12 08:06:51,653 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:06:51,742 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:06:51,743 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:06:51,747 [main:117] - GENERATED CALL = (A.xx).joinToString(StringBuilder(StringBuilder(-1655116831)), StringBuilder(-477810092), StringBuilder("leeui"), A.x[0], "abrng", {a: Int -> StringBuilder()})
2021-03-12 08:06:51,747 [main:114] - replacement of prope1.fu0() of type String is (A.xx).joinToString(StringBuilder(StringBuilder(-1655116831)), StringBuilder(-477810092), StringBuilder("leeui"), A.x[0], "abrng", {a: Int -> StringBuilder()})
2021-03-12 08:06:51,828 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:06:51,828 [main:66] - Compilation checking started
2021-03-12 08:06:52,235 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(-1655116831)), StringBuilder(-477810092), StringBuilder("leeui"), A.x[0], "abrng", {a: Int -> StringBuilder()})
}


2021-03-12 08:06:52,236 [main:107] - replacing (prope1, Kla0)
2021-03-12 08:06:52,236 [main:50] - replacing prope1 Kla0
2021-03-12 08:06:52,236 [main:54] - Getting value of type Kla0
2021-03-12 08:06:52,367 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:06:52,367 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu0(): String
}
2021-03-12 08:06:52,563 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 08:06:52,563 [main:61] - GENERATED IS CALL =true
2021-03-12 08:06:52,844 [main:67] - randomType = LinkedHashMap<Kla0, UInt?>
2021-03-12 08:06:52,936 [main:302] - generating value of type = LinkedHashMap<Kla0, UInt?> false depth = 0
2021-03-12 08:06:53,029 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla0, UInt?> = TODO()
2021-03-12 08:06:53,031 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla0, UInt?> = TODO()
2021-03-12 08:06:53,121 [main:95] - GENERATED = linkedMapOf<Kla0, UInt?>()
2021-03-12 08:06:53,262 [main:106] - GETTING Kla0 from A
2021-03-12 08:06:53,267 [main:106] - GETTING Kla0 from IntArray
2021-03-12 08:06:53,274 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:53,303 [main:106] - GETTING Kla0 from IntArray
2021-03-12 08:06:53,304 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:53,304 [main:106] - GETTING Kla0 from Int
2021-03-12 08:06:53,304 [main:114] - replacement of prope1 of type Kla0 is TODO()
2021-03-12 08:06:53,390 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:06:53,390 [main:66] - Compilation checking started
2021-03-12 08:06:53,645 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    TODO().javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(-1655116831)), StringBuilder(-477810092), StringBuilder("leeui"), A.x[0], "abrng", {a: Int -> StringBuilder()})
}


2021-03-12 08:06:53,745 [main:141] - TRYING TO REPLACE CONSTANT 0
2021-03-12 08:06:53,835 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(ARRAY_ACCESS_EXPRESSION)
2021-03-12 08:06:53,835 [main:66] - Compilation checking started
2021-03-12 08:06:54,168 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(-1655116831)), StringBuilder(-477810092), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}


2021-03-12 08:06:54,169 [main:141] - TRYING TO REPLACE CONSTANT 477810092
2021-03-12 08:06:54,261 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 08:06:54,261 [main:66] - Compilation checking started
2021-03-12 08:06:54,598 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(-1655116831)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}


2021-03-12 08:06:54,598 [main:141] - TRYING TO REPLACE CONSTANT 1655116831
2021-03-12 08:06:54,684 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 08:06:54,684 [main:66] - Compilation checking started
2021-03-12 08:06:55,027 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}


2021-03-12 08:06:55,027 [main:41] - AFTER TRY 1 res = import Host.x
import java.util.HashMap


object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}


2021-03-12 08:06:55,225 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:06:55,226 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:06:55,226 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu0(): String
}
2021-03-12 08:06:55,601 [main:43] - Try №1
2021-03-12 08:07:06,236 [main:48] - Already checked
2021-03-12 08:07:10,297 [main:69] - Trying to insert abstract fun fu7(exception: Throwable)
2021-03-12 08:07:10,402 [main:66] - Compilation checking started
2021-03-12 08:07:11,468 [main:103] - Trying to change 167 nodes
2021-03-12 08:07:11,469 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"), String)
2021-03-12 08:07:11,469 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n") String
2021-03-12 08:07:11,469 [main:54] - Getting value of type String
2021-03-12 08:07:11,642 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:07:11,644 [main:58] - GENERATED VALUE OF TYPE String = "krknq"
2021-03-12 08:07:11,645 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:11,653 [main:67] - randomType = Kla7
2021-03-12 08:07:11,803 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 08:07:11,806 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 08:07:11,815 [main:106] - GETTING String from IntArray
2021-03-12 08:07:11,828 [main:113] - Case = [public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]]
2021-03-12 08:07:11,828 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:07:11,977 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:07:12,130 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:07:12,133 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:07:12,443 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:07:12,446 [main:95] - GENERATED = StringBuilder(493516992)
2021-03-12 08:07:12,595 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:07:12,739 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:07:12,887 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:13,036 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:07:13,188 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:07:13,191 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:07:13,570 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:07:13,573 [main:95] - GENERATED = StringBuilder("cptzv")
2021-03-12 08:07:13,720 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:07:13,722 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:07:13,870 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:07:13,873 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:07:14,187 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 08:07:14,192 [main:95] - GENERATED = StringBuilder("ayvco")
2021-03-12 08:07:14,192 [main:117] - GENERATED CALL = (A.xx).joinToString(StringBuilder(493516992), "lgkkd", StringBuilder(), 933640932, StringBuilder("cptzv"), {a: Int -> StringBuilder("ayvco")})
2021-03-12 08:07:14,192 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:07:14,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:07:14,339 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:14,342 [main:117] - GENERATED CALL = (A.xx).size.toString(1540187507)
2021-03-12 08:07:14,342 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]]
2021-03-12 08:07:14,342 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:07:14,342 [main:117] - GENERATED CALL = (A.xx).contentToString()
2021-03-12 08:07:14,342 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n") of type String is (A.xx).contentToString()
2021-03-12 08:07:14,481 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:07:14,482 [main:66] - Compilation checking started
2021-03-12 08:07:15,219 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (prope12.fu6() as Kla1).s.fu2()
    }
    prope2?.resume(Kla1(42))
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:07:15,221 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 08:07:15,222 [main:50] - replacing numberOfSuspensions Int
2021-03-12 08:07:15,222 [main:54] - Getting value of type Int
2021-03-12 08:07:15,359 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:15,361 [main:58] - GENERATED VALUE OF TYPE Int = -2043512767
2021-03-12 08:07:15,361 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:15,370 [main:67] - randomType = A
2021-03-12 08:07:15,540 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:07:15,543 [main:112] - generating klass A text = object A {
    var xx = intArrayOf(0)
}
2021-03-12 08:07:15,550 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@18548b0a]
2021-03-12 08:07:15,551 [main:78] - Generated call from random type = (A).xx.count()
2021-03-12 08:07:15,551 [main:106] - GETTING Int from Int
2021-03-12 08:07:15,605 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5ac214]]
2021-03-12 08:07:15,606 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316]
2021-03-12 08:07:15,606 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5ac214]
2021-03-12 08:07:15,751 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:15,754 [main:117] - GENERATED CALL = (++A.x[0]).toByte().compareTo(-108)
2021-03-12 08:07:15,754 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]]
2021-03-12 08:07:15,754 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:15,754 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53d22605]
2021-03-12 08:07:15,754 [main:117] - GENERATED CALL = (++A.x[0]).toInt().coerceAtMost(A.x[0])
2021-03-12 08:07:15,754 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]]
2021-03-12 08:07:15,754 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:15,754 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]
2021-03-12 08:07:15,754 [main:117] - GENERATED CALL = (++A.x[0]).toInt().countLeadingZeroBits()
2021-03-12 08:07:15,755 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]]
2021-03-12 08:07:15,755 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:07:15,755 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]
2021-03-12 08:07:15,755 [main:117] - GENERATED CALL = (++A.x[0]).compareTo(A.x[0]++).xor(A.x[0])
2021-03-12 08:07:15,755 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b831495], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76ac1cf0]]
2021-03-12 08:07:15,755 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b831495]
2021-03-12 08:07:15,891 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:07:15,894 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76ac1cf0]
2021-03-12 08:07:15,894 [main:117] - GENERATED CALL = (++A.x[0]).div(1818415622854918522).countOneBits()
2021-03-12 08:07:15,894 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d8abe58]]
2021-03-12 08:07:15,894 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4]
2021-03-12 08:07:15,894 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d8abe58]
2021-03-12 08:07:15,894 [main:117] - GENERATED CALL = (++A.x[0]).toShort().countOneBits()
2021-03-12 08:07:15,894 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c9ba66]]
2021-03-12 08:07:15,894 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:15,894 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62c9ba66]
2021-03-12 08:07:16,038 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:16,040 [main:117] - GENERATED CALL = (++A.x[0]).toInt().or(206079691)
2021-03-12 08:07:16,041 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a5d4375]]
2021-03-12 08:07:16,041 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:16,041 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a5d4375]
2021-03-12 08:07:16,174 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:16,177 [main:117] - GENERATED CALL = (++A.x[0]).toInt().div(-126)
2021-03-12 08:07:16,177 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]]
2021-03-12 08:07:16,177 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:07:16,310 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:16,312 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f6fe1c9]
2021-03-12 08:07:16,312 [main:117] - GENERATED CALL = (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0])
2021-03-12 08:07:16,312 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]]
2021-03-12 08:07:16,312 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:16,313 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 08:07:16,313 [main:117] - GENERATED CALL = (++A.x[0]).toInt().inv()
2021-03-12 08:07:16,313 [main:114] - replacement of numberOfSuspensions of type Int is (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0])
2021-03-12 08:07:16,445 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:07:16,446 [main:66] - Compilation checking started
2021-03-12 08:07:17,124 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (prope12.fu6() as Kla1).s.fu2()
    }
    prope2?.resume(Kla1(42))
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:07:17,128 [main:107] - replacing (true, Boolean)
2021-03-12 08:07:17,128 [main:50] - replacing true Boolean
2021-03-12 08:07:17,128 [main:54] - Getting value of type Boolean
2021-03-12 08:07:17,291 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:17,294 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:07:17,294 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:17,945 [main:67] - randomType = MutableMap<UShort, UByte?>
2021-03-12 08:07:17,946 [main:106] - GETTING Boolean from Kla0
2021-03-12 08:07:17,952 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2831cf5e]]
2021-03-12 08:07:17,952 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:18,091 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:18,092 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2831cf5e]
2021-03-12 08:07:18,225 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:18,228 [main:117] - GENERATED CALL = (prope1).equals("nhpvr").or(false)
2021-03-12 08:07:18,228 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4d9aeec1]]
2021-03-12 08:07:18,228 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:18,228 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4d9aeec1]
2021-03-12 08:07:18,363 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:18,363 [main:117] - GENERATED CALL = (prope1).fu0().equals("cdrdx")
2021-03-12 08:07:18,363 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25dcae12]]
2021-03-12 08:07:18,363 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:18,363 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25dcae12]
2021-03-12 08:07:18,499 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:18,501 [main:117] - GENERATED CALL = (prope1).fu0().endsWith((A.xx).contentToString(), true)
2021-03-12 08:07:18,501 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]]
2021-03-12 08:07:18,501 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:18,635 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:18,635 [main:117] - GENERATED CALL = (prope1).equals("hjfcc")
2021-03-12 08:07:18,635 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@862d03]]
2021-03-12 08:07:18,635 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:18,635 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@862d03]
2021-03-12 08:07:18,636 [main:117] - GENERATED CALL = (prope1).fu0().matches((A.xx).contentToString())
2021-03-12 08:07:18,636 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]]
2021-03-12 08:07:18,636 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:18,770 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:18,771 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]
2021-03-12 08:07:18,913 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:18,913 [main:117] - GENERATED CALL = (prope1).equals("postu").equals("takfk")
2021-03-12 08:07:18,913 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@793c77f]]
2021-03-12 08:07:18,913 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:19,050 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:19,050 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@793c77f]
2021-03-12 08:07:19,186 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:19,188 [main:117] - GENERATED CALL = (prope1).equals("nximp").xor(true)
2021-03-12 08:07:19,189 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]]
2021-03-12 08:07:19,189 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:19,351 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:19,352 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]
2021-03-12 08:07:19,494 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:19,496 [main:117] - GENERATED CALL = (prope1).equals("kammm").and(false)
2021-03-12 08:07:19,496 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77558084]]
2021-03-12 08:07:19,496 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:19,496 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77558084]
2021-03-12 08:07:19,497 [main:117] - GENERATED CALL = (prope1).fu0().toBoolean()
2021-03-12 08:07:19,497 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]]
2021-03-12 08:07:19,497 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:19,632 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:19,632 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]
2021-03-12 08:07:19,632 [main:117] - GENERATED CALL = (prope1).equals("wprsn").not()
2021-03-12 08:07:19,632 [main:114] - replacement of true of type Boolean is (prope1).fu0().equals("cdrdx")
2021-03-12 08:07:19,769 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:07:19,770 [main:66] - Compilation checking started
2021-03-12 08:07:20,476 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (prope12.fu6() as Kla1).s.fu2()
    }
    prope2?.resume(Kla1(42))
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:07:20,479 [main:107] - replacing (prope2?.resume(Kla1(42)), Unit?)
2021-03-12 08:07:20,480 [main:50] - replacing prope2?.resume(Kla1(42)) Unit?
2021-03-12 08:07:20,480 [main:54] - Getting value of type Unit?
2021-03-12 08:07:20,622 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 08:07:20,781 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:20,786 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:21,270 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:07:21,272 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-12 08:07:21,274 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 08:07:21,419 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:21,422 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:21,758 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-12 08:07:21,761 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 08:07:21,910 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:07:21,914 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:07:22,208 [main:302] - generating value of type = Boolean true depth = 11
2021-03-12 08:07:22,210 [main:95] - GENERATED = check(true)
2021-03-12 08:07:22,210 [main:95] - GENERATED = contract({ check(true)})
2021-03-12 08:07:22,211 [main:95] - GENERATED = repeat(1372551711, {a: Int -> contract({ check(true)})})
2021-03-12 08:07:22,211 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(1372551711, {a: Int -> contract({ check(true)})})
2021-03-12 08:07:22,211 [main:61] - GENERATED IS CALL =true
2021-03-12 08:07:22,359 [main:67] - randomType = Short
2021-03-12 08:07:22,493 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:07:22,531 [main:106] - GETTING Unit? from IntArray
2021-03-12 08:07:22,539 [main:113] - Case = [public fun kotlin.IntArray.sortDescending(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3f88de11]]
2021-03-12 08:07:22,539 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortDescending(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3f88de11]
2021-03-12 08:07:22,539 [main:117] - GENERATED CALL = ((A.xx))?.sortDescending()
2021-03-12 08:07:22,539 [main:113] - Case = [@kotlin.js.library public fun kotlin.IntArray.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@75314e1c]]
2021-03-12 08:07:22,539 [main:149] - GENERATING call of type @kotlin.js.library public fun kotlin.IntArray.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@75314e1c]
2021-03-12 08:07:22,539 [main:117] - GENERATED CALL = ((A.xx))?.sort()
2021-03-12 08:07:22,539 [main:113] - Case = [public inline fun kotlin.IntArray.forEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7bc847dd]]
2021-03-12 08:07:22,539 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.forEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7bc847dd]
2021-03-12 08:07:22,674 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 08:07:22,676 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:07:22,817 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:22,820 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:23,266 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:07:23,268 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 08:07:23,270 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:07:23,412 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:23,415 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:23,908 [main:302] - generating value of type = Int true depth = 8
2021-03-12 08:07:23,910 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 08:07:23,912 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 08:07:24,051 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:24,054 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:24,347 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 12
2021-03-12 08:07:24,349 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 08:07:24,487 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:07:24,490 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:07:24,944 [main:302] - generating value of type = Boolean true depth = 16
2021-03-12 08:07:24,944 [main:385] - Cant generate call of fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:07:24,944 [main:95] - GENERATED = contract({ })
2021-03-12 08:07:24,944 [main:95] - GENERATED = repeat(246604603, {a: Int -> contract({ })})
2021-03-12 08:07:24,945 [main:95] - GENERATED = repeat(-353615131, {a: Int -> repeat(246604603, {a: Int -> contract({ })})})
2021-03-12 08:07:24,945 [main:117] - GENERATED CALL = ((A.xx))?.forEach({a: Int -> repeat(-353615131, {a: Int -> repeat(246604603, {a: Int -> contract({ })})})})
2021-03-12 08:07:24,945 [main:113] - Case = [public fun kotlin.IntArray.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5146191a]]
2021-03-12 08:07:24,945 [main:149] - GENERATING call of type public fun kotlin.IntArray.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5146191a]
2021-03-12 08:07:24,945 [main:117] - GENERATED CALL = ((A.xx))?.reverse()
2021-03-12 08:07:24,945 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.IntArray.fill(element: kotlin.Int, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d7479ae]]
2021-03-12 08:07:24,946 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.IntArray.fill(element: kotlin.Int, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d7479ae]
2021-03-12 08:07:25,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:25,097 [main:117] - GENERATED CALL = ((A.xx))?.fill(++A.x[0], -657037011, ++A.x[0])
2021-03-12 08:07:25,097 [main:113] - Case = [public inline fun kotlin.IntArray.forEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f2717b3]]
2021-03-12 08:07:25,097 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.forEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f2717b3]
2021-03-12 08:07:25,238 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Unit> false depth = 0
2021-03-12 08:07:25,240 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:07:25,386 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:07:25,389 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:07:25,695 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:07:25,698 [main:95] - GENERATED = check(true)
2021-03-12 08:07:25,698 [main:117] - GENERATED CALL = ((A.xx))?.forEachIndexed({a: Int, b: Int -> check(true)})
2021-03-12 08:07:25,698 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478]]
2021-03-12 08:07:25,698 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478]
2021-03-12 08:07:25,698 [main:117] - GENERATED CALL = ((A.xx))?.set(A.x[0], ++A.x[0])
2021-03-12 08:07:25,698 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.IntArray.shuffle(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@37d3415a]]
2021-03-12 08:07:25,698 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.IntArray.shuffle(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@37d3415a]
2021-03-12 08:07:25,698 [main:117] - GENERATED CALL = ((A.xx))?.shuffle()
2021-03-12 08:07:25,698 [main:114] - replacement of prope2?.resume(Kla1(42)) of type Unit? is ((A.xx))?.reverse()
2021-03-12 08:07:25,855 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 08:07:25,855 [main:66] - Compilation checking started
2021-03-12 08:07:26,538 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (prope12.fu6() as Kla1).s.fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:07:26,540 [main:107] - replacing (prope5, String?)
2021-03-12 08:07:26,540 [main:50] - replacing prope5 String?
2021-03-12 08:07:26,540 [main:54] - Getting value of type String?
2021-03-12 08:07:26,681 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:07:26,683 [main:58] - GENERATED VALUE OF TYPE String? = "fashf"
2021-03-12 08:07:26,683 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:27,202 [main:67] - randomType = HashMap<Kla4, Float>
2021-03-12 08:07:27,335 [main:302] - generating value of type = HashMap<Kla4, Float> false depth = 0
2021-03-12 08:07:27,474 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla4, Float>): HashMap<Kla4, Float> = TODO()
2021-03-12 08:07:27,477 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla4, Float>): HashMap<Kla4, Float> = TODO()
2021-03-12 08:07:27,617 [main:302] - generating value of type = Pair<Kla4, Float> false depth = 3
2021-03-12 08:07:27,760 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla4, second: Float): Pair<Kla4, Float> = TODO()
2021-03-12 08:07:27,764 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla4, second: Float): Pair<Kla4, Float> = TODO()
2021-03-12 08:07:27,904 [main:302] - generating value of type = Kla4 false depth = 6
2021-03-12 08:07:27,906 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}
2021-03-12 08:07:28,046 [main:194] - Type params = []
2021-03-12 08:07:28,185 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-12 08:07:28,356 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:28,359 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:28,661 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-12 08:07:28,811 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:28,814 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:29,280 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 08:07:29,423 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:07:29,427 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:07:29,884 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:07:29,884 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:29,884 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:29,885 [main:302] - generating value of type = Float true depth = 6
2021-03-12 08:07:29,887 [main:95] - GENERATED = Pair<Kla4, Float>(Kla4(), 0.47073102f)
2021-03-12 08:07:29,887 [main:95] - GENERATED = linkedMapOf<Kla4, Float>(Pair<Kla4, Float>(Kla4(), 0.47073102f))
2021-03-12 08:07:30,010 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:07:30,146 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:30,149 [main:78] - Generated call from random type = (linkedMapOf<Kla4, Float>(Pair<Kla4, Float>(Kla4(), 0.47073102f))).size.toString(-939305060)
2021-03-12 08:07:30,150 [main:106] - GETTING String? from Int
2021-03-12 08:07:30,187 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b831495], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf73df9]]
2021-03-12 08:07:30,187 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b831495]
2021-03-12 08:07:30,326 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:07:30,328 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf73df9]
2021-03-12 08:07:30,328 [main:117] - GENERATED CALL = (A.x[0])?.div(-8252426576224212841).toString(++A.x[0])
2021-03-12 08:07:30,328 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36d25311]]
2021-03-12 08:07:30,328 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:07:30,329 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36d25311]
2021-03-12 08:07:30,329 [main:117] - GENERATED CALL = (A.x[0])?.toChar().plus((A.xx).contentToString())
2021-03-12 08:07:30,329 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a879080]]
2021-03-12 08:07:30,329 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:07:30,329 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a879080]
2021-03-12 08:07:30,329 [main:117] - GENERATED CALL = (A.x[0])?.toChar().uppercase()
2021-03-12 08:07:30,329 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43a0a19a]]
2021-03-12 08:07:30,329 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:07:30,329 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43a0a19a]
2021-03-12 08:07:30,329 [main:117] - GENERATED CALL = (A.x[0])?.toChar().lowercase()
2021-03-12 08:07:30,329 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633f6371]]
2021-03-12 08:07:30,329 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:07:30,330 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633f6371]
2021-03-12 08:07:30,330 [main:117] - GENERATED CALL = (A.x[0])?.toChar().titlecase()
2021-03-12 08:07:30,330 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:07:30,330 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:07:30,330 [main:117] - GENERATED CALL = (A.x[0])?.toString(++A.x[0])
2021-03-12 08:07:30,330 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e751a4]]
2021-03-12 08:07:30,330 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316]
2021-03-12 08:07:30,330 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e751a4]
2021-03-12 08:07:30,330 [main:117] - GENERATED CALL = (A.x[0])?.toByte().toString(++A.x[0])
2021-03-12 08:07:30,330 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7d6cc2]]
2021-03-12 08:07:30,330 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4]
2021-03-12 08:07:30,330 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7d6cc2]
2021-03-12 08:07:30,475 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:30,478 [main:117] - GENERATED CALL = (A.x[0])?.toShort().toString(883891944)
2021-03-12 08:07:30,478 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7dcc664d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf73df9]]
2021-03-12 08:07:30,478 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7dcc664d]
2021-03-12 08:07:30,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf73df9]
2021-03-12 08:07:30,638 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:30,640 [main:117] - GENERATED CALL = (A.x[0])?.toLong().toString(1186953126)
2021-03-12 08:07:30,640 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:07:30,640 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:07:30,640 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:07:30,641 [main:117] - GENERATED CALL = (A.x[0])?.compareTo(++A.x[0]).toString(++A.x[0])
2021-03-12 08:07:30,641 [main:114] - replacement of prope5 of type String? is (A.x[0])?.div(-8252426576224212841).toString(++A.x[0])
2021-03-12 08:07:30,776 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:07:30,776 [main:66] - Compilation checking started
2021-03-12 08:07:31,204 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        (A.x[0])?.div(-8252426576224212841).toString(++A.x[0]) = (prope12.fu6() as Kla1).s.fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:07:31,206 [main:107] - replacing (0, Int)
2021-03-12 08:07:31,207 [main:50] - replacing 0 Int
2021-03-12 08:07:31,207 [main:54] - Getting value of type Int
2021-03-12 08:07:31,341 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:31,343 [main:58] - GENERATED VALUE OF TYPE Int = -32693847
2021-03-12 08:07:31,343 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:31,801 [main:67] - randomType = Map<Short, Short>
2021-03-12 08:07:31,802 [main:106] - GETTING Int from Int
2021-03-12 08:07:31,831 [main:113] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]]
2021-03-12 08:07:31,831 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 08:07:31,832 [main:117] - GENERATED CALL = (++A.x[0]).inv()
2021-03-12 08:07:31,832 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 08:07:31,832 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:07:31,970 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:31,973 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 08:07:32,116 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:32,119 [main:117] - GENERATED CALL = (++A.x[0]).compareTo(502616106).times(-52)
2021-03-12 08:07:32,119 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13d4bf8]]
2021-03-12 08:07:32,119 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:07:32,261 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:32,263 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13d4bf8]
2021-03-12 08:07:32,263 [main:117] - GENERATED CALL = (++A.x[0]).compareTo(-971332214).countTrailingZeroBits()
2021-03-12 08:07:32,264 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7dcc664d], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@db11056]]
2021-03-12 08:07:32,264 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7dcc664d]
2021-03-12 08:07:32,264 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@db11056]
2021-03-12 08:07:32,264 [main:117] - GENERATED CALL = (++A.x[0]).toLong().toInt()
2021-03-12 08:07:32,264 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]]
2021-03-12 08:07:32,264 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:32,264 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]
2021-03-12 08:07:32,264 [main:117] - GENERATED CALL = (++A.x[0]).toInt().countLeadingZeroBits()
2021-03-12 08:07:32,264 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5307be53]]
2021-03-12 08:07:32,264 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4]
2021-03-12 08:07:32,264 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5307be53]
2021-03-12 08:07:32,411 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:32,413 [main:117] - GENERATED CALL = (++A.x[0]).toShort().minus(91)
2021-03-12 08:07:32,414 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]]
2021-03-12 08:07:32,414 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:07:32,414 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d5f038]
2021-03-12 08:07:32,559 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:32,562 [main:117] - GENERATED CALL = (++A.x[0]).compareTo(A.x[0]++).rem(43)
2021-03-12 08:07:32,562 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@235d6e6c]]
2021-03-12 08:07:32,562 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316]
2021-03-12 08:07:32,562 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@235d6e6c]
2021-03-12 08:07:32,562 [main:117] - GENERATED CALL = (++A.x[0]).toByte().unaryMinus()
2021-03-12 08:07:32,563 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@399bcd19]]
2021-03-12 08:07:32,563 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:07:32,563 [main:117] - GENERATED CALL = (++A.x[0]).compareTo(++A.x[0]).sign
2021-03-12 08:07:32,563 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]]
2021-03-12 08:07:32,563 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:32,563 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:07:32,708 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:32,711 [main:117] - GENERATED CALL = (++A.x[0]).toInt().plus(-10)
2021-03-12 08:07:32,711 [main:114] - replacement of 0 of type Int is (++A.x[0]).toLong().toInt()
2021-03-12 08:07:32,847 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:07:32,847 [main:66] - Compilation checking started
2021-03-12 08:07:33,544 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (prope12.fu6() as Kla1).s.fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:07:33,547 [main:107] - replacing (checkFinished && !prope9, Boolean)
2021-03-12 08:07:33,547 [main:50] - replacing checkFinished && !prope9 Boolean
2021-03-12 08:07:33,547 [main:54] - Getting value of type Boolean
2021-03-12 08:07:33,718 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:33,721 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:07:33,722 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:33,890 [main:67] - randomType = Host
2021-03-12 08:07:34,040 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:07:34,042 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:07:34,047 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun kotlin.IntArray.contentEquals(other: kotlin.IntArray): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d1f65db]
2021-03-12 08:07:34,182 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:07:34,322 [main:43] - GENERATING CALL OF fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:07:34,325 [main:61] - WITHOUT TYPE PARAMS = fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:07:34,468 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:07:34,470 [main:95] - GENERATED = intArrayOf(1224523211)
2021-03-12 08:07:34,470 [main:78] - Generated call from random type = (Host).x.contentEquals(intArrayOf(1224523211))
2021-03-12 08:07:34,471 [main:106] - GETTING Boolean from Kla0?
2021-03-12 08:07:34,476 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@496bac6a]]
2021-03-12 08:07:34,476 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:34,476 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@496bac6a]
2021-03-12 08:07:34,613 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:07:34,751 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:34,754 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().startsWith("hfies", false)
2021-03-12 08:07:34,754 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]]
2021-03-12 08:07:34,754 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:34,887 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:34,887 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("gxuok")
2021-03-12 08:07:34,887 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]]
2021-03-12 08:07:34,887 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:35,021 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:35,021 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]
2021-03-12 08:07:35,154 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:35,157 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("lflff").and(false)
2021-03-12 08:07:35,157 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4d9aeec1]]
2021-03-12 08:07:35,157 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:35,157 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4d9aeec1]
2021-03-12 08:07:35,291 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:35,292 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().equals("bdnfx")
2021-03-12 08:07:35,292 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@793c77f]]
2021-03-12 08:07:35,292 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:35,426 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:35,426 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@793c77f]
2021-03-12 08:07:35,568 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:35,571 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("hpopp").xor(false)
2021-03-12 08:07:35,571 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]]
2021-03-12 08:07:35,571 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:35,734 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:35,734 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]
2021-03-12 08:07:35,869 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:35,869 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("zvlrx").equals("raajk")
2021-03-12 08:07:35,869 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@862d03]]
2021-03-12 08:07:35,869 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:35,869 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@862d03]
2021-03-12 08:07:35,870 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().matches((A.xx).contentToString())
2021-03-12 08:07:35,870 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77558084]]
2021-03-12 08:07:35,870 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:35,870 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77558084]
2021-03-12 08:07:35,870 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().toBoolean()
2021-03-12 08:07:35,870 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25dcae12]]
2021-03-12 08:07:35,870 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:07:35,870 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25dcae12]
2021-03-12 08:07:36,008 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:36,011 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().endsWith((A.xx).contentToString(), true)
2021-03-12 08:07:36,011 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]]
2021-03-12 08:07:36,011 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:07:36,151 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:07:36,152 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]
2021-03-12 08:07:36,152 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("pxllr").not()
2021-03-12 08:07:36,152 [main:114] - replacement of checkFinished && !prope9 of type Boolean is (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().matches((A.xx).contentToString())
2021-03-12 08:07:36,290 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:07:36,291 [main:66] - Compilation checking started
2021-03-12 08:07:36,730 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (prope12.fu6() as Kla1).s.fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().matches((A.xx).contentToString())) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:07:36,732 [main:107] - replacing (exception, Throwable)
2021-03-12 08:07:36,733 [main:50] - replacing exception Throwable
2021-03-12 08:07:36,733 [main:54] - Getting value of type Throwable
2021-03-12 08:07:36,876 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:07:36,882 [main:58] - GENERATED VALUE OF TYPE Throwable = UnsupportedOperationException()
2021-03-12 08:07:36,882 [main:61] - GENERATED IS CALL =true
2021-03-12 08:07:37,048 [main:67] - randomType = Set<Kla1>
2021-03-12 08:07:37,049 [main:106] - GETTING Throwable from IntArray
2021-03-12 08:07:37,057 [main:106] - GETTING Throwable from String
2021-03-12 08:07:37,077 [main:106] - GETTING Throwable from Int
2021-03-12 08:07:37,106 [main:106] - GETTING Throwable from Int
2021-03-12 08:07:37,108 [main:106] - GETTING Throwable from Int
2021-03-12 08:07:37,108 [main:106] - GETTING Throwable from Kla0?
2021-03-12 08:07:37,114 [main:106] - GETTING Throwable from Kla0
2021-03-12 08:07:37,118 [main:106] - GETTING Throwable from HashMap<String, Kla0>
2021-03-12 08:07:37,233 [main:106] - GETTING Throwable from IntArray
2021-03-12 08:07:37,234 [main:106] - GETTING Throwable from IntArray
2021-03-12 08:07:37,235 [main:106] - GETTING Throwable from IntArray
2021-03-12 08:07:37,236 [main:106] - GETTING Throwable from A
2021-03-12 08:07:37,242 [main:114] - replacement of exception of type Throwable is UnsupportedOperationException()
2021-03-12 08:07:37,386 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:07:37,386 [main:66] - Compilation checking started
2021-03-12 08:07:38,045 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (prope12.fu6() as Kla1).s.fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:07:38,048 [main:107] - replacing ((prope12.fu6() as Kla1).s, Int?)
2021-03-12 08:07:38,048 [main:50] - replacing (prope12.fu6() as Kla1).s Int?
2021-03-12 08:07:38,048 [main:54] - Getting value of type Int?
2021-03-12 08:07:38,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:38,202 [main:58] - GENERATED VALUE OF TYPE Int? = 814445025
2021-03-12 08:07:38,202 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:38,583 [main:67] - randomType = Collection<UShort>
2021-03-12 08:07:38,584 [main:106] - GETTING Int? from IntArray
2021-03-12 08:07:38,593 [main:113] - Case = [public fun kotlin.IntArray.indexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a5eac38]]
2021-03-12 08:07:38,593 [main:149] - GENERATING call of type public fun kotlin.IntArray.indexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2a5eac38]
2021-03-12 08:07:38,594 [main:117] - GENERATED CALL = (A.xx)?.indexOf(++A.x[0])
2021-03-12 08:07:38,594 [main:113] - Case = [public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]]
2021-03-12 08:07:38,594 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.indexOfFirst(predicate: (kotlin.Int) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d694d9a]
2021-03-12 08:07:38,730 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 0
2021-03-12 08:07:38,732 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:07:38,735 [main:117] - GENERATED CALL = (A.xx)?.indexOfFirst({a: Int -> false})
2021-03-12 08:07:38,735 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]]
2021-03-12 08:07:38,735 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]
2021-03-12 08:07:38,735 [main:117] - GENERATED CALL = (A.xx)?.size.xor(A.x[0])
2021-03-12 08:07:38,735 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]]
2021-03-12 08:07:38,735 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 08:07:38,735 [main:117] - GENERATED CALL = (A.xx)?.size.inv()
2021-03-12 08:07:38,735 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e], public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]]
2021-03-12 08:07:38,735 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e]
2021-03-12 08:07:38,735 [main:149] - GENERATING call of type public final fun next(): kotlin.Int defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@7a258942]
2021-03-12 08:07:38,735 [main:117] - GENERATED CALL = (A.xx)?.iterator().next()
2021-03-12 08:07:38,735 [main:113] - Case = [public fun kotlin.IntArray.elementAt(index: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fed1f7f]]
2021-03-12 08:07:38,735 [main:149] - GENERATING call of type public fun kotlin.IntArray.elementAt(index: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fed1f7f]
2021-03-12 08:07:38,736 [main:117] - GENERATED CALL = (A.xx)?.elementAt(A.x[0])
2021-03-12 08:07:38,736 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]]
2021-03-12 08:07:38,736 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b7cf3fe]
2021-03-12 08:07:38,736 [main:117] - GENERATED CALL = (A.xx)?.size.countLeadingZeroBits()
2021-03-12 08:07:38,736 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2d1a0f]]
2021-03-12 08:07:38,736 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2d1a0f]
2021-03-12 08:07:38,736 [main:117] - GENERATED CALL = (A.xx)?.size.takeHighestOneBit()
2021-03-12 08:07:38,736 [main:113] - Case = [public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]]
2021-03-12 08:07:38,736 [main:149] - GENERATING call of type public fun kotlin.IntArray.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7005489a]
2021-03-12 08:07:38,736 [main:117] - GENERATED CALL = (A.xx)?.sum()
2021-03-12 08:07:38,736 [main:113] - Case = [public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]]
2021-03-12 08:07:38,736 [main:149] - GENERATING call of type public fun kotlin.IntArray.lastIndexOf(element: kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5a2f57d1]
2021-03-12 08:07:38,736 [main:117] - GENERATED CALL = (A.xx)?.lastIndexOf(++A.x[0])
2021-03-12 08:07:38,736 [main:114] - replacement of (prope12.fu6() as Kla1).s of type Int? is (A.xx)?.iterator().next()
2021-03-12 08:07:38,876 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:07:38,876 [main:66] - Compilation checking started
2021-03-12 08:07:39,544 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:07:39,547 [main:107] - replacing (prope6.exceptionOrNull()?.let(x), Unit?)
2021-03-12 08:07:39,548 [main:50] - replacing prope6.exceptionOrNull()?.let(x) Unit?
2021-03-12 08:07:39,548 [main:54] - Getting value of type Unit?
2021-03-12 08:07:39,714 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 08:07:39,863 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:07:39,869 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:07:40,335 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 08:07:40,338 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 08:07:40,340 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:07:40,340 [main:95] - GENERATED = require(false, { "dyahp"})
2021-03-12 08:07:40,340 [main:58] - GENERATED VALUE OF TYPE Unit? = require(false, { "dyahp"})
2021-03-12 08:07:40,340 [main:61] - GENERATED IS CALL =true
2021-03-12 08:07:40,493 [main:67] - randomType = Float
2021-03-12 08:07:40,632 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:07:40,663 [main:106] - GETTING Unit? from Kla0
2021-03-12 08:07:40,668 [main:106] - GETTING Unit? from IntArray
2021-03-12 08:07:40,674 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478]]
2021-03-12 08:07:40,674 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478]
2021-03-12 08:07:40,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:40,814 [main:117] - GENERATED CALL = (A.x)?.set(A.x[0], -1622567631)
2021-03-12 08:07:40,814 [main:113] - Case = [public inline fun kotlin.IntArray.forEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7bc847dd]]
2021-03-12 08:07:40,814 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.forEach(action: (kotlin.Int) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7bc847dd]
2021-03-12 08:07:40,951 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 08:07:40,954 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:07:41,117 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:07:41,121 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:07:41,415 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:07:41,415 [main:95] - GENERATED = print("rgrkk")
2021-03-12 08:07:41,415 [main:117] - GENERATED CALL = (A.x)?.forEach({a: Int -> print("rgrkk")})
2021-03-12 08:07:41,415 [main:113] - Case = [public fun kotlin.IntArray.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5146191a]]
2021-03-12 08:07:41,415 [main:149] - GENERATING call of type public fun kotlin.IntArray.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5146191a]
2021-03-12 08:07:41,416 [main:117] - GENERATED CALL = (A.x)?.reverse()
2021-03-12 08:07:41,416 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.IntArray.shuffle(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@37d3415a]]
2021-03-12 08:07:41,416 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.IntArray.shuffle(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@37d3415a]
2021-03-12 08:07:41,416 [main:117] - GENERATED CALL = (A.x)?.shuffle()
2021-03-12 08:07:41,416 [main:113] - Case = [public inline fun kotlin.IntArray.forEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f2717b3]]
2021-03-12 08:07:41,416 [main:149] - GENERATING call of type public inline fun kotlin.IntArray.forEachIndexed(action: (index: kotlin.Int, kotlin.Int) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f2717b3]
2021-03-12 08:07:41,552 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Int, Unit> false depth = 0
2021-03-12 08:07:41,555 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:07:41,704 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:41,707 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:07:42,007 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 08:07:42,009 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:07:42,153 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:07:42,156 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:07:42,452 [main:302] - generating value of type = Any false depth = 8
2021-03-12 08:07:42,453 [main:95] - GENERATED = print("wcqit")
2021-03-12 08:07:42,453 [main:95] - GENERATED = contract({ print("wcqit")})
2021-03-12 08:07:42,453 [main:117] - GENERATED CALL = (A.x)?.forEachIndexed({a: Int, b: Int -> contract({ print("wcqit")})})
2021-03-12 08:07:42,453 [main:113] - Case = [@kotlin.js.library public fun kotlin.IntArray.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@75314e1c]]
2021-03-12 08:07:42,453 [main:149] - GENERATING call of type @kotlin.js.library public fun kotlin.IntArray.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@75314e1c]
2021-03-12 08:07:42,453 [main:117] - GENERATED CALL = (A.x)?.sort()
2021-03-12 08:07:42,453 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.IntArray.fill(element: kotlin.Int, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d7479ae]]
2021-03-12 08:07:42,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.IntArray.fill(element: kotlin.Int, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d7479ae]
2021-03-12 08:07:42,592 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:42,595 [main:117] - GENERATED CALL = (A.x)?.fill(A.x[0], 1047426273, A.x[0]++)
2021-03-12 08:07:42,595 [main:113] - Case = [public fun kotlin.IntArray.sortDescending(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3f88de11]]
2021-03-12 08:07:42,595 [main:149] - GENERATING call of type public fun kotlin.IntArray.sortDescending(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3f88de11]
2021-03-12 08:07:42,595 [main:117] - GENERATED CALL = (A.x)?.sortDescending()
2021-03-12 08:07:42,595 [main:114] - replacement of prope6.exceptionOrNull()?.let(x) of type Unit? is (A.x)?.reverse()
2021-03-12 08:07:42,732 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 08:07:42,732 [main:66] - Compilation checking started
2021-03-12 08:07:43,383 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = fu1()
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:07:43,385 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 08:07:43,385 [main:50] - replacing it Continuation<Unit>
2021-03-12 08:07:43,386 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 08:07:43,526 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 08:07:43,694 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:07:43,698 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:07:44,174 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:07:44,320 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:44,323 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:44,628 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:07:44,778 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:44,781 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:45,254 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 08:07:45,402 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:07:45,406 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:07:45,878 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:07:45,878 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:45,878 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:45,878 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:07:45,878 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 08:07:46,047 [main:67] - randomType = HashSet<String>
2021-03-12 08:07:46,234 [main:302] - generating value of type = HashSet<String> false depth = 0
2021-03-12 08:07:46,388 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Strg> = TODO()
2021-03-12 08:07:46,392 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Strg> = TODO()
2021-03-12 08:07:46,542 [main:95] - GENERATED = linkedSetOf<String>()
2021-03-12 08:07:46,669 [main:106] - GETTING Continuation<Unit> from IntArray
2021-03-12 08:07:46,676 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:07:46,705 [main:106] - GETTING Continuation<Unit> from IntArray
2021-03-12 08:07:46,706 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:07:46,707 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 08:07:46,724 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:07:46,725 [main:106] - GETTING Continuation<Unit> from IntArray
2021-03-12 08:07:46,727 [main:106] - GETTING Continuation<Unit> from Kla0
2021-03-12 08:07:46,732 [main:106] - GETTING Continuation<Unit> from IntArray
2021-03-12 08:07:46,733 [main:106] - GETTING Continuation<Unit> from A
2021-03-12 08:07:46,738 [main:106] - GETTING Continuation<Unit> from HashMap<String, Kla0>
2021-03-12 08:07:46,820 [main:106] - GETTING Continuation<Unit> from Kla0?
2021-03-12 08:07:46,824 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 08:07:46,824 [main:107] - replacing (prope2, Continuation<*>)
2021-03-12 08:07:46,824 [main:50] - replacing prope2 Continuation<*>
2021-03-12 08:07:46,824 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:07:46,964 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:07:47,127 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:07:47,130 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:07:47,592 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:07:47,736 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:47,739 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:48,049 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:07:48,199 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:48,203 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:48,674 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:48,674 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:48,674 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:07:48,674 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:07:49,012 [main:67] - randomType = ArrayList<Byte>
2021-03-12 08:07:49,151 [main:302] - generating value of type = ArrayList<Byte> false depth = 0
2021-03-12 08:07:49,293 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Byte): ArrayList<Byte> = TODO()
2021-03-12 08:07:49,297 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Byte): ArrayList<Byte> = TODO()
2021-03-12 08:07:49,439 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 08:07:49,442 [main:95] - GENERATED = arrayListOf<Byte>(76)
2021-03-12 08:07:49,559 [main:106] - GETTING Continuation<*> from A
2021-03-12 08:07:49,564 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:07:49,580 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:07:49,587 [main:106] - GETTING Continuation<*> from Kla0?
2021-03-12 08:07:49,592 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:07:49,621 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 08:07:49,626 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:07:49,626 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:07:49,628 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:07:49,628 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:07:49,629 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:07:49,630 [main:106] - GETTING Continuation<*> from HashMap<String, Kla0>
2021-03-12 08:07:49,711 [main:111] - Cant find and generate replacement for prope2 type Continuation<*>
2021-03-12 08:07:49,712 [main:107] - replacing (fu1(), Kla1)
2021-03-12 08:07:49,712 [main:50] - replacing fu1() Kla1
2021-03-12 08:07:49,712 [main:54] - Getting value of type Kla1
2021-03-12 08:07:49,851 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:07:49,854 [main:112] - generating klass Kla1 text = inline class Kla1(val s: Int?)
2021-03-12 08:07:49,993 [main:194] - Type params = []
2021-03-12 08:07:50,131 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:07:50,134 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1(-1079269376)
2021-03-12 08:07:50,134 [main:61] - GENERATED IS CALL =true
2021-03-12 08:07:50,292 [main:67] - randomType = UShort
2021-03-12 08:07:50,435 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:07:50,466 [main:106] - GETTING Kla1 from IntArray
2021-03-12 08:07:50,473 [main:106] - GETTING Kla1 from HashMap<String, Kla0>
2021-03-12 08:07:50,555 [main:106] - GETTING Kla1 from IntArray
2021-03-12 08:07:50,555 [main:106] - GETTING Kla1 from A
2021-03-12 08:07:50,559 [main:106] - GETTING Kla1 from IntArray
2021-03-12 08:07:50,560 [main:106] - GETTING Kla1 from Int
2021-03-12 08:07:50,589 [main:106] - GETTING Kla1 from IntArray
2021-03-12 08:07:50,590 [main:106] - GETTING Kla1 from Int
2021-03-12 08:07:50,590 [main:106] - GETTING Kla1 from Int
2021-03-12 08:07:50,591 [main:106] - GETTING Kla1 from String
2021-03-12 08:07:50,607 [main:106] - GETTING Kla1 from Kla0?
2021-03-12 08:07:50,612 [main:106] - GETTING Kla1 from Kla0
2021-03-12 08:07:50,615 [main:114] - replacement of fu1() of type Kla1 is Kla1(-1079269376)
2021-03-12 08:07:50,754 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:07:50,755 [main:66] - Compilation checking started
2021-03-12 08:07:51,408 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:07:51,410 [main:107] - replacing (prope2, Continuation<*>)
2021-03-12 08:07:51,410 [main:50] - replacing prope2 Continuation<*>
2021-03-12 08:07:51,410 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:07:51,554 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:07:51,697 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:07:51,700 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:07:52,175 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:07:52,318 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:52,321 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:52,626 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:07:52,772 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:52,776 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:53,242 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 08:07:53,386 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:07:53,390 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:07:53,854 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:07:53,854 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:07:53,854 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:07:53,854 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:07:53,854 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:07:53,864 [main:67] - randomType = Kla5
2021-03-12 08:07:54,026 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:07:54,029 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-12 08:07:54,044 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 08:07:54,049 [main:106] - GETTING Continuation<*> from Kla0?
2021-03-12 08:07:54,053 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:07:54,062 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:07:54,080 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:07:54,126 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:07:54,127 [main:106] - GETTING Continuation<*> from HashMap<String, Kla0>
2021-03-12 08:07:54,209 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:07:54,210 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:07:54,211 [main:106] - GETTING Continuation<*> from A
2021-03-12 08:07:54,215 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:07:54,216 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:07:54,216 [main:111] - Cant find and generate replacement for prope2 type Continuation<*>
2021-03-12 08:07:54,216 [main:107] - replacing (0, Int)
2021-03-12 08:07:54,216 [main:50] - replacing 0 Int
2021-03-12 08:07:54,216 [main:54] - Getting value of type Int
2021-03-12 08:07:54,359 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:07:54,362 [main:58] - GENERATED VALUE OF TYPE Int = 1112228210
2021-03-12 08:07:54,362 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:54,371 [main:67] - randomType = Kla7
2021-03-12 08:07:54,513 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 08:07:54,516 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}
2021-03-12 08:07:54,520 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@572571e0]
2021-03-12 08:07:54,659 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]
2021-03-12 08:07:54,798 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:07:54,801 [main:78] - Generated call from random type = (Kla7()).equals(null).compareTo(false)
2021-03-12 08:07:54,801 [main:106] - GETTING Int from Int
2021-03-12 08:07:54,831 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@70eb3e24]]
2021-03-12 08:07:54,831 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316]
2021-03-12 08:07:54,831 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@70eb3e24]
2021-03-12 08:07:54,831 [main:117] - GENERATED CALL = (++A.x[0]).toByte().countTrailingZeroBits()
2021-03-12 08:07:54,831 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f61f9f0], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@76906d44]]
2021-03-12 08:07:54,831 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f61f9f0]
2021-03-12 08:07:54,969 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:07:54,972 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@76906d44]
2021-03-12 08:07:54,972 [main:117] - GENERATED CALL = (++A.x[0]).div(0.8542477019438106).roundToInt()
2021-03-12 08:07:54,972 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]]
2021-03-12 08:07:54,972 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:54,972 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]
2021-03-12 08:07:54,972 [main:117] - GENERATED CALL = (++A.x[0]).toInt().shl(++A.x[0])
2021-03-12 08:07:54,972 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@581d1c66]]
2021-03-12 08:07:54,972 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:54,973 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@581d1c66]
2021-03-12 08:07:54,973 [main:117] - GENERATED CALL = (++A.x[0]).toInt().rotateLeft(A.x[0]++)
2021-03-12 08:07:54,973 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ef5a994]]
2021-03-12 08:07:54,973 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4]
2021-03-12 08:07:54,973 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ef5a994]
2021-03-12 08:07:54,973 [main:117] - GENERATED CALL = (++A.x[0]).toShort().countLeadingZeroBits()
2021-03-12 08:07:54,973 [main:113] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 08:07:54,973 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 08:07:55,111 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:55,114 [main:117] - GENERATED CALL = (++A.x[0]).times(116)
2021-03-12 08:07:55,114 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6630ba5a]]
2021-03-12 08:07:55,114 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4]
2021-03-12 08:07:55,114 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6630ba5a]
2021-03-12 08:07:55,251 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:55,254 [main:117] - GENERATED CALL = (++A.x[0]).toShort().compareTo(68)
2021-03-12 08:07:55,254 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@617fea5b]]
2021-03-12 08:07:55,254 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316]
2021-03-12 08:07:55,254 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@617fea5b]
2021-03-12 08:07:55,254 [main:117] - GENERATED CALL = (++A.x[0]).toByte().unaryPlus()
2021-03-12 08:07:55,254 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 08:07:55,254 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:07:55,254 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 08:07:55,391 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:55,393 [main:117] - GENERATED CALL = (++A.x[0]).toInt().times(-58)
2021-03-12 08:07:55,394 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4354490d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@71c5f29c]]
2021-03-12 08:07:55,394 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4354490d]
2021-03-12 08:07:55,533 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:07:55,536 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@71c5f29c]
2021-03-12 08:07:55,536 [main:117] - GENERATED CALL = (++A.x[0]).rangeTo(42).random()
2021-03-12 08:07:55,536 [main:114] - replacement of 0 of type Int is 1112228210
2021-03-12 08:07:55,674 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:07:55,674 [main:66] - Compilation checking started
2021-03-12 08:07:56,293 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:07:56,296 [main:107] - replacing (", got ", String)
2021-03-12 08:07:56,296 [main:50] - replacing ", got " String
2021-03-12 08:07:56,296 [main:54] - Getting value of type String
2021-03-12 08:07:56,458 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:07:56,461 [main:58] - GENERATED VALUE OF TYPE String = "cklix"
2021-03-12 08:07:56,461 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:56,828 [main:67] - randomType = Sequence<Char>
2021-03-12 08:07:56,829 [main:106] - GETTING String from A
2021-03-12 08:07:56,834 [main:113] - Case = [public final var xx: kotlin.IntArray defined in A[PropertyDescriptorImpl@373a2a07], public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]]
2021-03-12 08:07:56,834 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:07:56,971 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:07:57,115 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:07:57,262 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:07:57,265 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:07:57,568 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:07:57,710 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:07:57,713 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:07:58,009 [main:302] - generating value of type = Int true depth = 6
2021-03-12 08:07:58,012 [main:95] - GENERATED = StringBuilder(-294625282)
2021-03-12 08:07:58,012 [main:95] - GENERATED = StringBuilder(StringBuilder(-294625282))
2021-03-12 08:07:58,149 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:07:58,291 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:07:58,295 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:07:58,592 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:07:58,597 [main:95] - GENERATED = StringBuilder("tudms")
2021-03-12 08:07:58,735 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:07:58,880 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:07:58,883 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:07:58,888 [main:117] - GENERATED CALL = (A).xx.joinToString(StringBuilder(), StringBuilder(StringBuilder(-294625282)), StringBuilder("tudms"), A.x[0]++, "nvoml", {a: Int -> "xdmgi"})
2021-03-12 08:07:58,888 [main:113] - Case = [public final var xx: kotlin.IntArray defined in A[PropertyDescriptorImpl@373a2a07], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]]
2021-03-12 08:07:58,888 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:07:58,888 [main:117] - GENERATED CALL = (A).xx.contentToString()
2021-03-12 08:07:58,888 [main:114] - replacement of ", got " of type String is "cklix"
2021-03-12 08:07:59,029 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:07:59,029 [main:66] - Compilation checking started
2021-03-12 08:07:59,715 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:07:59,718 [main:107] - replacing (suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}, Ty0)
2021-03-12 08:07:59,719 [main:50] - replacing suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
} Ty0
2021-03-12 08:07:59,719 [main:54] - Getting value of type Ty0
2021-03-12 08:07:59,878 [main:58] - GENERATED VALUE OF TYPE Ty0 = null
2021-03-12 08:07:59,878 [main:61] - GENERATED IS CALL =false
2021-03-12 08:07:59,883 [main:67] - randomType = Long
2021-03-12 08:08:00,036 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:08:00,077 [main:106] - GETTING Ty0 from Kla0
2021-03-12 08:08:00,081 [main:106] - GETTING Ty0 from Kla0?
2021-03-12 08:08:00,085 [main:106] - GETTING Ty0 from HashMap<String, Kla0>
2021-03-12 08:08:00,165 [main:106] - GETTING Ty0 from Int
2021-03-12 08:08:00,194 [main:106] - GETTING Ty0 from A
2021-03-12 08:08:00,198 [main:106] - GETTING Ty0 from IntArray
2021-03-12 08:08:00,205 [main:106] - GETTING Ty0 from Int
2021-03-12 08:08:00,205 [main:106] - GETTING Ty0 from IntArray
2021-03-12 08:08:00,206 [main:106] - GETTING Ty0 from IntArray
2021-03-12 08:08:00,206 [main:106] - GETTING Ty0 from String
2021-03-12 08:08:00,223 [main:106] - GETTING Ty0 from IntArray
2021-03-12 08:08:00,224 [main:106] - GETTING Ty0 from Int
2021-03-12 08:08:00,224 [main:114] - replacement of suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
} of type Ty0 is null
2021-03-12 08:08:00,360 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(NULL)
2021-03-12 08:08:00,360 [main:66] - Compilation checking started
2021-03-12 08:08:00,771 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = null

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:00,773 [main:107] - replacing (it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx"), Boolean)
2021-03-12 08:08:00,773 [main:50] - replacing it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") Boolean
2021-03-12 08:08:00,773 [main:54] - Getting value of type Boolean
2021-03-12 08:08:00,913 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:00,916 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:08:00,916 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:01,703 [main:67] - randomType = MutableMap<Char?, LinkedHashSet<Boolean>>
2021-03-12 08:08:01,704 [main:106] - GETTING Boolean from Kla0?
2021-03-12 08:08:01,708 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]]
2021-03-12 08:08:01,708 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:01,845 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:01,845 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]
2021-03-12 08:08:01,981 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:01,981 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("sgdng").equals("hbjld")
2021-03-12 08:08:01,981 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@862d03]]
2021-03-12 08:08:01,981 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:01,981 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@862d03]
2021-03-12 08:08:01,981 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().matches((A.xx).contentToString())
2021-03-12 08:08:01,981 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2831cf5e]]
2021-03-12 08:08:01,981 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:02,119 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:02,119 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2831cf5e]
2021-03-12 08:08:02,258 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:02,261 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("aomnw").or(true)
2021-03-12 08:08:02,261 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]]
2021-03-12 08:08:02,261 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:02,439 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:02,439 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]
2021-03-12 08:08:02,581 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:02,584 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("mmowf").and(true)
2021-03-12 08:08:02,584 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@793c77f]]
2021-03-12 08:08:02,584 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:02,721 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:02,721 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@793c77f]
2021-03-12 08:08:02,857 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:02,860 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("oirsy").xor(false)
2021-03-12 08:08:02,860 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]]
2021-03-12 08:08:02,860 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:02,997 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals(null)
2021-03-12 08:08:02,997 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77558084]]
2021-03-12 08:08:02,997 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:02,998 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77558084]
2021-03-12 08:08:02,998 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().toBoolean()
2021-03-12 08:08:02,998 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4d9aeec1]]
2021-03-12 08:08:02,998 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:02,998 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4d9aeec1]
2021-03-12 08:08:03,138 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:03,139 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().equals("labnk")
2021-03-12 08:08:03,139 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25dcae12]]
2021-03-12 08:08:03,139 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:03,139 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25dcae12]
2021-03-12 08:08:03,275 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:08:03,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:03,416 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().endsWith("trfja", true)
2021-03-12 08:08:03,416 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]]
2021-03-12 08:08:03,416 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:03,551 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:03,552 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]
2021-03-12 08:08:03,552 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("botpi").not()
2021-03-12 08:08:03,552 [main:114] - replacement of it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") of type Boolean is (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("sgdng").equals("hbjld")
2021-03-12 08:08:03,688 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:03,688 [main:66] - Compilation checking started
2021-03-12 08:08:04,105 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("sgdng").equals("hbjld") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { prope2.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:04,107 [main:107] - replacing (prope2, Continuation<*>)
2021-03-12 08:08:04,107 [main:50] - replacing prope2 Continuation<*>
2021-03-12 08:08:04,107 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:08:04,249 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:08:04,392 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:08:04,395 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:08:04,852 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:08:04,993 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:08:04,996 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:08:05,342 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:08:05,486 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:08:05,489 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:08:05,950 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:08:05,950 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:08:05,950 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:08:05,950 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:08:05,959 [main:67] - randomType = Kla7
2021-03-12 08:08:06,098 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 08:08:06,100 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}
2021-03-12 08:08:06,108 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:08:06,146 [main:106] - GETTING Continuation<*> from A
2021-03-12 08:08:06,151 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:08:06,151 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:08:06,158 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:08:06,159 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:08:06,176 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:08:06,176 [main:106] - GETTING Continuation<*> from IntArray
2021-03-12 08:08:06,177 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:08:06,178 [main:106] - GETTING Continuation<*> from HashMap<String, Kla0>
2021-03-12 08:08:06,260 [main:106] - GETTING Continuation<*> from Kla0?
2021-03-12 08:08:06,265 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 08:08:06,268 [main:111] - Cant find and generate replacement for prope2 type Continuation<*>
2021-03-12 08:08:06,268 [main:107] - replacing ({ prope2.resume(Unit) }, Function0<Unit>)
2021-03-12 08:08:06,268 [main:50] - replacing { prope2.resume(Unit) } Function0<Unit>
2021-03-12 08:08:06,268 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:08:06,404 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:08:06,406 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:08:06,546 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:08:06,549 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:08:06,842 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:08:06,844 [main:95] - GENERATED = check(true)
2021-03-12 08:08:06,845 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 08:08:06,845 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:06,995 [main:67] - randomType = Char
2021-03-12 08:08:07,133 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:08:07,153 [main:106] - GETTING Function0<Unit> from IntArray
2021-03-12 08:08:07,160 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:08:07,189 [main:106] - GETTING Function0<Unit> from A
2021-03-12 08:08:07,194 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:08:07,195 [main:106] - GETTING Function0<Unit> from IntArray
2021-03-12 08:08:07,196 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 08:08:07,201 [main:106] - GETTING Function0<Unit> from IntArray
2021-03-12 08:08:07,202 [main:106] - GETTING Function0<Unit> from Kla0?
2021-03-12 08:08:07,207 [main:106] - GETTING Function0<Unit> from IntArray
2021-03-12 08:08:07,208 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:08:07,225 [main:106] - GETTING Function0<Unit> from HashMap<String, Kla0>
2021-03-12 08:08:07,306 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:08:07,306 [main:114] - replacement of { prope2.resume(Unit) } of type Function0<Unit> is { check(true)}
2021-03-12 08:08:07,444 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:08:07,445 [main:66] - Compilation checking started
2021-03-12 08:08:08,111 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { check(true)}
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:08,113 [main:107] - replacing (1, Int)
2021-03-12 08:08:08,113 [main:50] - replacing 1 Int
2021-03-12 08:08:08,113 [main:54] - Getting value of type Int
2021-03-12 08:08:08,264 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:08:08,266 [main:58] - GENERATED VALUE OF TYPE Int = 391020129
2021-03-12 08:08:08,266 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:08,276 [main:67] - randomType = Kla5
2021-03-12 08:08:08,413 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:08:08,415 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-12 08:08:08,435 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2fc353ec]
2021-03-12 08:08:08,435 [main:78] - Generated call from random type = (Kla5()).prope6?.hashCode()!!
2021-03-12 08:08:08,435 [main:106] - GETTING Int from Int
2021-03-12 08:08:08,476 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f61f9f0], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@76906d44]]
2021-03-12 08:08:08,476 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f61f9f0]
2021-03-12 08:08:08,613 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:08:08,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@76906d44]
2021-03-12 08:08:08,616 [main:117] - GENERATED CALL = (A.x[0]).div(0.03847751284347212).roundToInt()
2021-03-12 08:08:08,616 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a5d4375]]
2021-03-12 08:08:08,616 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a5d4375]
2021-03-12 08:08:08,756 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:08:08,758 [main:117] - GENERATED CALL = (A.x[0]).div(53)
2021-03-12 08:08:08,758 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@46972b69]]
2021-03-12 08:08:08,758 [main:117] - GENERATED CALL = (A.x[0]).absoluteValue
2021-03-12 08:08:08,758 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]]
2021-03-12 08:08:08,758 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:08:08,759 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:08:08,894 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:08:08,896 [main:117] - GENERATED CALL = (A.x[0]).compareTo(A.x[0]).plus(109)
2021-03-12 08:08:08,897 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1e09740d]]
2021-03-12 08:08:08,897 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316]
2021-03-12 08:08:08,897 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1e09740d]
2021-03-12 08:08:09,034 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:08:09,037 [main:117] - GENERATED CALL = (A.x[0]).toByte().times(-108)
2021-03-12 08:08:09,037 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@556ecae8], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@465f49f2]]
2021-03-12 08:08:09,037 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@556ecae8]
2021-03-12 08:08:09,174 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:08:09,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@465f49f2]
2021-03-12 08:08:09,176 [main:117] - GENERATED CALL = (A.x[0]).div(0.40199685f).toBits()
2021-03-12 08:08:09,176 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]]
2021-03-12 08:08:09,176 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861]
2021-03-12 08:08:09,311 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:09,311 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]
2021-03-12 08:08:09,445 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:09,448 [main:117] - GENERATED CALL = (A.x[0]).equals("rfnhb").compareTo(true)
2021-03-12 08:08:09,448 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@21aab942], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6d7625db]]
2021-03-12 08:08:09,448 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@21aab942]
2021-03-12 08:08:09,448 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6d7625db]
2021-03-12 08:08:09,583 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:08:09,585 [main:117] - GENERATED CALL = (A.x[0]).toFloat().compareTo(59)
2021-03-12 08:08:09,585 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]]
2021-03-12 08:08:09,585 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:08:09,585 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19d27788]
2021-03-12 08:08:09,723 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:08:09,726 [main:117] - GENERATED CALL = (A.x[0]).toInt().plus(-45)
2021-03-12 08:08:09,726 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4354490d], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@3b4f666f]]
2021-03-12 08:08:09,726 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4354490d]
2021-03-12 08:08:09,862 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:08:09,864 [main:117] - GENERATED CALL = (A.x[0]).rangeTo(41).first
2021-03-12 08:08:09,867 [main:114] - replacement of 1 of type Int is (A.x[0]).rangeTo(41).first
2021-03-12 08:08:10,003 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:10,003 [main:66] - Compilation checking started
2021-03-12 08:08:10,643 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { check(true)}
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:10,645 [main:107] - replacing ({
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }, Unit?)
2021-03-12 08:08:10,645 [main:50] - replacing {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    } Unit?
2021-03-12 08:08:10,645 [main:54] - Getting value of type Unit?
2021-03-12 08:08:10,792 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 08:08:10,798 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-12 08:08:10,798 [main:61] - GENERATED IS CALL =true
2021-03-12 08:08:10,976 [main:67] - randomType = Host
2021-03-12 08:08:11,114 [main:302] - generating value of type = Host false depth = 0
2021-03-12 08:08:11,116 [main:112] - generating klass Host text = object Host {
    val A.x get() = A.xx
}
2021-03-12 08:08:11,121 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478]
2021-03-12 08:08:11,256 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:08:11,397 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:08:11,399 [main:78] - Generated call from random type = (Host).x.set(619885763, -1372758833)
2021-03-12 08:08:11,400 [main:114] - replacement of {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    } of type Unit? is (Host).x.set(619885763, -1372758833)
2021-03-12 08:08:11,536 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:11,536 [main:66] - Compilation checking started
2021-03-12 08:08:11,541 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:08:11,541 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) (Host).x.set(619885763, -1372758833)
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("Continuation " + prope2 + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { check(true)}
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:11,544 [main:107] - replacing ("Continuation " + prope2, String)
2021-03-12 08:08:11,545 [main:50] - replacing "Continuation " + prope2 String
2021-03-12 08:08:11,545 [main:54] - Getting value of type String
2021-03-12 08:08:11,681 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:08:11,684 [main:58] - GENERATED VALUE OF TYPE String = "xllhh"
2021-03-12 08:08:11,684 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:11,689 [main:67] - randomType = Int
2021-03-12 08:08:11,825 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:08:11,857 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:08:11,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a879080]
2021-03-12 08:08:11,857 [main:78] - Generated call from random type = (2115431681).toChar().uppercase()
2021-03-12 08:08:11,858 [main:106] - GETTING String from IntArray
2021-03-12 08:08:11,864 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:08:11,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:08:11,864 [main:117] - GENERATED CALL = (A.xx).size.toString(++A.x[0])
2021-03-12 08:08:11,865 [main:113] - Case = [public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]]
2021-03-12 08:08:11,865 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:08:12,003 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:08:12,144 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:08:12,285 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:08:12,288 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:08:12,583 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:08:12,589 [main:95] - GENERATED = StringBuilder("xuyxj")
2021-03-12 08:08:12,725 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:08:12,866 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:08:13,007 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:08:13,009 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:08:13,151 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:08:13,154 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:08:13,450 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:08:13,452 [main:95] - GENERATED = StringBuilder(1020248808)
2021-03-12 08:08:13,453 [main:117] - GENERATED CALL = (A.xx).joinToString("ljlwr", StringBuilder("xuyxj"), "jzdbq", A.x[0], "glxoc", {a: Int -> StringBuilder(1020248808)})
2021-03-12 08:08:13,453 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]]
2021-03-12 08:08:13,453 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:08:13,453 [main:117] - GENERATED CALL = (A.xx).contentToString()
2021-03-12 08:08:13,453 [main:114] - replacement of "Continuation " + prope2 of type String is (A.xx).size.toString(++A.x[0])
2021-03-12 08:08:13,618 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:13,619 [main:66] - Compilation checking started
2021-03-12 08:08:14,240 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope2 ->
        prope8++
        prope10 = { check(true)}
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:14,242 [main:107] - replacing ({ prope2 ->
        prope8++
        prope10 = { check(true)}
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 08:08:14,242 [main:50] - replacing { prope2 ->
        prope8++
        prope10 = { check(true)}
    } Function1<Continuation<Unit>, Unit>
2021-03-12 08:08:14,242 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 08:08:14,388 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 08:08:14,391 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:08:14,534 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:08:14,537 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:08:14,841 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:08:14,844 [main:95] - GENERATED = check(true)
2021-03-12 08:08:14,844 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(true)}
2021-03-12 08:08:14,844 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:15,163 [main:67] - randomType = Kla2<Long?>
2021-03-12 08:08:15,164 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from HashMap<String, Kla0>
2021-03-12 08:08:15,246 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 08:08:15,252 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:08:15,269 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:08:15,298 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:08:15,300 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntArray
2021-03-12 08:08:15,308 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntArray
2021-03-12 08:08:15,309 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntArray
2021-03-12 08:08:15,311 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:08:15,312 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0?
2021-03-12 08:08:15,318 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from A
2021-03-12 08:08:15,323 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntArray
2021-03-12 08:08:15,323 [main:114] - replacement of { prope2 ->
        prope8++
        prope10 = { check(true)}
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(true)}
2021-03-12 08:08:15,459 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:08:15,459 [main:66] - Compilation checking started
2021-03-12 08:08:16,086 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:16,089 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 08:08:16,089 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 08:08:16,089 [main:54] - Getting value of type String
2021-03-12 08:08:16,241 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:08:16,244 [main:58] - GENERATED VALUE OF TYPE String = "kgsux"
2021-03-12 08:08:16,244 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:16,907 [main:67] - randomType = MutableMap<Byte, Kla2<Char>>
2021-03-12 08:08:16,908 [main:106] - GETTING String from HashMap<String, Kla0>
2021-03-12 08:08:16,991 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@32549958], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:08:16,991 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:08:17,128 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:08:17,131 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()).size.toString(-416628235)
2021-03-12 08:08:17,131 [main:113] - Case = [public open fun get(key: kotlin.String): Kla0? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@70d5c0f4], public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]]
2021-03-12 08:08:17,131 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): Kla0? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@70d5c0f4]
2021-03-12 08:08:17,131 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:17,131 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()).get((A.xx).contentToString())?.fu0()
2021-03-12 08:08:17,131 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (hashMapOf<String, Kla0>()).size.toString(-416628235)
2021-03-12 08:08:17,267 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:17,267 [main:66] - Compilation checking started
2021-03-12 08:08:17,877 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:17,879 [main:107] - replacing (true, Boolean)
2021-03-12 08:08:17,880 [main:50] - replacing true Boolean
2021-03-12 08:08:17,880 [main:54] - Getting value of type Boolean
2021-03-12 08:08:18,026 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:18,029 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:08:18,029 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:18,533 [main:67] - randomType = Map<String, Array<ULong>>
2021-03-12 08:08:18,534 [main:106] - GETTING Boolean from Int
2021-03-12 08:08:18,578 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7dcc664d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3e1e44a5]]
2021-03-12 08:08:18,578 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7dcc664d]
2021-03-12 08:08:18,578 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3e1e44a5]
2021-03-12 08:08:18,726 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:18,726 [main:117] - GENERATED CALL = (A.x[0]++).toLong().equals("pthxj")
2021-03-12 08:08:18,726 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861]]
2021-03-12 08:08:18,726 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:08:18,726 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861]
2021-03-12 08:08:18,868 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:18,868 [main:117] - GENERATED CALL = (A.x[0]++).toInt().equals("nhblu")
2021-03-12 08:08:18,868 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@793c77f]]
2021-03-12 08:08:18,868 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861]
2021-03-12 08:08:19,006 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:19,007 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@793c77f]
2021-03-12 08:08:19,145 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:19,148 [main:117] - GENERATED CALL = (A.x[0]++).equals("picne").xor(true)
2021-03-12 08:08:19,148 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75c0763c]]
2021-03-12 08:08:19,148 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:08:19,148 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75c0763c]
2021-03-12 08:08:19,148 [main:117] - GENERATED CALL = (A.x[0]++).toChar().isSurrogate()
2021-03-12 08:08:19,148 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@395560bc]]
2021-03-12 08:08:19,148 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:08:19,148 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@395560bc]
2021-03-12 08:08:19,148 [main:117] - GENERATED CALL = (A.x[0]++).toChar().isDigit()
2021-03-12 08:08:19,148 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f61f9f0], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2a143bc4]]
2021-03-12 08:08:19,148 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f61f9f0]
2021-03-12 08:08:19,286 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:08:19,289 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2a143bc4]
2021-03-12 08:08:19,289 [main:117] - GENERATED CALL = (A.x[0]++).div(0.7601887645232928).isNaN()
2021-03-12 08:08:19,289 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10639457]]
2021-03-12 08:08:19,289 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:08:19,289 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10639457]
2021-03-12 08:08:19,289 [main:117] - GENERATED CALL = (A.x[0]++).toChar().isDefined()
2021-03-12 08:08:19,289 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@771dee77]]
2021-03-12 08:08:19,289 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:08:19,289 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@771dee77]
2021-03-12 08:08:19,290 [main:117] - GENERATED CALL = (A.x[0]++).toChar().isLowerCase()
2021-03-12 08:08:19,290 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f61f9f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@79cbbf19]]
2021-03-12 08:08:19,290 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f61f9f0]
2021-03-12 08:08:19,428 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:08:19,430 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@79cbbf19]
2021-03-12 08:08:19,576 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:19,576 [main:117] - GENERATED CALL = (A.x[0]++).div(0.04427154219306351).equals("frhsh")
2021-03-12 08:08:19,576 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]]
2021-03-12 08:08:19,576 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37ca9861]
2021-03-12 08:08:19,741 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]
2021-03-12 08:08:19,880 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:19,880 [main:117] - GENERATED CALL = (A.x[0]++).equals(null).equals("edkbd")
2021-03-12 08:08:19,880 [main:114] - replacement of true of type Boolean is (A.x[0]++).div(0.7601887645232928).isNaN()
2021-03-12 08:08:20,018 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:20,019 [main:66] - Compilation checking started
2021-03-12 08:08:20,816 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:20,819 [main:107] - replacing ({ it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") }, Function0<Boolean>)
2021-03-12 08:08:20,819 [main:50] - replacing { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } Function0<Boolean>
2021-03-12 08:08:20,819 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 08:08:20,977 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 08:08:20,980 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:08:20,982 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 08:08:20,982 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:21,311 [main:67] - randomType = MutableMap<Boolean, Double>
2021-03-12 08:08:21,312 [main:106] - GETTING Function0<Boolean> from IntArray
2021-03-12 08:08:21,320 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 08:08:21,349 [main:106] - GETTING Function0<Boolean> from Kla0?
2021-03-12 08:08:21,354 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 08:08:21,355 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 08:08:21,360 [main:106] - GETTING Function0<Boolean> from A
2021-03-12 08:08:21,365 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 08:08:21,366 [main:106] - GETTING Function0<Boolean> from IntArray
2021-03-12 08:08:21,367 [main:106] - GETTING Function0<Boolean> from IntArray
2021-03-12 08:08:21,368 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 08:08:21,385 [main:106] - GETTING Function0<Boolean> from HashMap<String, Kla0>
2021-03-12 08:08:21,466 [main:106] - GETTING Function0<Boolean> from IntArray
2021-03-12 08:08:21,466 [main:114] - replacement of { it?.methodName?.startsWith(method) == (prope1).fu0().equals("cdrdx") } of type Function0<Boolean> is { true}
2021-03-12 08:08:21,606 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:08:21,606 [main:66] - Compilation checking started
2021-03-12 08:08:22,223 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:22,226 [main:107] - replacing (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]), Boolean)
2021-03-12 08:08:22,226 [main:50] - replacing prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]) Boolean
2021-03-12 08:08:22,226 [main:54] - Getting value of type Boolean
2021-03-12 08:08:22,382 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:22,385 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:08:22,385 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:22,549 [main:67] - randomType = Kla8?
2021-03-12 08:08:22,689 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 08:08:22,692 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:08:22,699 [main:149] - GENERATING call of type public final fun fu12(): kotlin.Unit defined in Kla8[SimpleFunctionDescriptorImpl@3a87a343]
2021-03-12 08:08:22,699 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-12 08:08:22,838 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:22,839 [main:78] - Generated call from random type = (Kla8())?.fu12().equals("xwddk")
2021-03-12 08:08:22,839 [main:114] - replacement of prope8 != (++A.x[0]).compareTo(1241795903).coerceIn(++A.x[0], ++A.x[0]) of type Boolean is (Kla8())?.fu12().equals("xwddk")
2021-03-12 08:08:23,001 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:23,001 [main:66] - Compilation checking started
2021-03-12 08:08:23,592 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:23,594 [main:107] - replacing (this == 42, Boolean)
2021-03-12 08:08:23,594 [main:50] - replacing this == 42 Boolean
2021-03-12 08:08:23,594 [main:54] - Getting value of type Boolean
2021-03-12 08:08:23,733 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:23,735 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:08:23,735 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:23,888 [main:67] - randomType = Float
2021-03-12 08:08:24,024 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:08:24,060 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7b9675be]
2021-03-12 08:08:24,060 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6dc50bc]
2021-03-12 08:08:24,201 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:24,201 [main:78] - Generated call from random type = (0.36415607f).toByte().equals("wlkow")
2021-03-12 08:08:24,202 [main:106] - GETTING Boolean from Kla0?
2021-03-12 08:08:24,209 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25dcae12]]
2021-03-12 08:08:24,209 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:24,209 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25dcae12]
2021-03-12 08:08:24,346 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:24,349 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().endsWith((A.xx).contentToString(), false)
2021-03-12 08:08:24,349 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77558084]]
2021-03-12 08:08:24,349 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:24,349 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77558084]
2021-03-12 08:08:24,349 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().toBoolean()
2021-03-12 08:08:24,350 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@496bac6a]]
2021-03-12 08:08:24,350 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:24,350 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@496bac6a]
2021-03-12 08:08:24,486 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:24,488 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().startsWith((A.xx).contentToString(), true)
2021-03-12 08:08:24,488 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]]
2021-03-12 08:08:24,488 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:24,624 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:24,625 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("igdcx")
2021-03-12 08:08:24,625 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]]
2021-03-12 08:08:24,625 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:24,762 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:24,762 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]
2021-03-12 08:08:24,898 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:24,901 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("hzlqz").and(false)
2021-03-12 08:08:24,901 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@862d03]]
2021-03-12 08:08:24,901 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:24,901 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@862d03]
2021-03-12 08:08:24,901 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().matches((A.xx).contentToString())
2021-03-12 08:08:24,901 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]]
2021-03-12 08:08:24,901 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:25,037 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:25,037 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]
2021-03-12 08:08:25,038 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("acehb").not()
2021-03-12 08:08:25,038 [main:113] - Case = [public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4d9aeec1]]
2021-03-12 08:08:25,038 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:25,038 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4d9aeec1]
2021-03-12 08:08:25,174 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:25,174 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().equals("bszyv")
2021-03-12 08:08:25,174 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2831cf5e]]
2021-03-12 08:08:25,174 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:25,311 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:25,311 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2831cf5e]
2021-03-12 08:08:25,448 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:25,450 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals("fovyt").or(false)
2021-03-12 08:08:25,450 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]]
2021-03-12 08:08:25,450 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@7539e0a8]
2021-03-12 08:08:25,587 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e7b3952]
2021-03-12 08:08:25,724 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:25,724 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).equals(null).equals("thlqx")
2021-03-12 08:08:25,724 [main:114] - replacement of this == 42 of type Boolean is (hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().matches((A.xx).contentToString())
2021-03-12 08:08:25,861 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:25,861 [main:66] - Compilation checking started
2021-03-12 08:08:26,329 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if ((hashMapOf<String, Kla0>()[(A.xx).contentToString()]).fu0().matches((A.xx).contentToString())) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:26,331 [main:107] - replacing (prope6, Result<Any?>)
2021-03-12 08:08:26,331 [main:50] - replacing prope6 Result<Any?>
2021-03-12 08:08:26,331 [main:54] - Getting value of type Result<Any?>
2021-03-12 08:08:26,477 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 08:08:26,633 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:08:26,637 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:08:26,952 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 08:08:26,955 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:08:26,955 [main:95] - GENERATED = runCatching<Any?>({ "dcabw"})
2021-03-12 08:08:26,955 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "dcabw"})
2021-03-12 08:08:26,955 [main:61] - GENERATED IS CALL =true
2021-03-12 08:08:26,960 [main:67] - randomType = String
2021-03-12 08:08:27,099 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:08:27,120 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:08:27,156 [main:106] - GETTING Result<Any?> from Kla0?
2021-03-12 08:08:27,162 [main:106] - GETTING Result<Any?> from IntArray
2021-03-12 08:08:27,169 [main:106] - GETTING Result<Any?> from IntArray
2021-03-12 08:08:27,170 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:08:27,172 [main:106] - GETTING Result<Any?> from String
2021-03-12 08:08:27,190 [main:106] - GETTING Result<Any?> from IntArray
2021-03-12 08:08:27,191 [main:106] - GETTING Result<Any?> from Kla0
2021-03-12 08:08:27,196 [main:106] - GETTING Result<Any?> from A
2021-03-12 08:08:27,201 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:08:27,203 [main:106] - GETTING Result<Any?> from HashMap<String, Kla0>
2021-03-12 08:08:27,284 [main:106] - GETTING Result<Any?> from IntArray
2021-03-12 08:08:27,285 [main:114] - replacement of prope6 of type Result<Any?> is runCatching<Any?>({ "dcabw"})
2021-03-12 08:08:27,429 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:08:27,429 [main:66] - Compilation checking started
2021-03-12 08:08:28,117 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
runCatching<Any?>({ "dcabw"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:28,120 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-12 08:08:28,121 [main:50] - replacing prope6 Result<Ty0>
2021-03-12 08:08:28,121 [main:54] - Getting value of type Result<Ty0>
2021-03-12 08:08:28,274 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 08:08:28,418 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:28,422 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:28,729 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:28,729 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 08:08:29,411 [main:67] - randomType = Array<ArrayList<Long>>?
2021-03-12 08:08:29,558 [main:302] - generating value of type = Array<ArrayList<Long>> false depth = 0
2021-03-12 08:08:29,705 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<ArrayList<Long>> = TODO()
2021-03-12 08:08:29,708 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<ArrayList<Long>> = TODO()
2021-03-12 08:08:29,855 [main:95] - GENERATED = emptyArray<ArrayList<Long>>()
2021-03-12 08:08:29,877 [main:106] - GETTING Result<Ty0> from Kla0
2021-03-12 08:08:29,883 [main:106] - GETTING Result<Ty0> from HashMap<String, Kla0>
2021-03-12 08:08:29,965 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:29,995 [main:106] - GETTING Result<Ty0> from A
2021-03-12 08:08:30,000 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:30,001 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:30,008 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:30,009 [main:106] - GETTING Result<Ty0> from String
2021-03-12 08:08:30,026 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:30,028 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:30,029 [main:106] - GETTING Result<Ty0> from Kla0?
2021-03-12 08:08:30,034 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:30,034 [main:111] - Cant find and generate replacement for prope6 type Result<Ty0>
2021-03-12 08:08:30,034 [main:107] - replacing ({
        fu9(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 08:08:30,034 [main:50] - replacing {
        fu9(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 08:08:30,034 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 08:08:30,175 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 08:08:30,177 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:08:30,322 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:08:30,325 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:08:30,636 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 08:08:30,639 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:08:30,783 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:08:30,786 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:08:31,092 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 08:08:31,095 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 08:08:31,239 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:08:31,242 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:08:31,543 [main:302] - generating value of type = Any false depth = 12
2021-03-12 08:08:31,543 [main:95] - GENERATED = println("zixzd")
2021-03-12 08:08:31,543 [main:95] - GENERATED = contract({ println("zixzd")})
2021-03-12 08:08:31,543 [main:95] - GENERATED = contract({ contract({ println("zixzd")})})
2021-03-12 08:08:31,543 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> contract({ contract({ println("zixzd")})})}
2021-03-12 08:08:31,543 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:33,053 [main:67] - randomType = Function2<Boolean?, Function1<Triple<Kla9, Byte?, String>, Float>, Kla3?>
2021-03-12 08:08:33,055 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:08:33,088 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 08:08:33,093 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntArray
2021-03-12 08:08:33,101 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntArray
2021-03-12 08:08:33,103 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from A
2021-03-12 08:08:33,108 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:08:33,110 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntArray
2021-03-12 08:08:33,111 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:08:33,129 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:08:33,130 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from HashMap<String, Kla0>
2021-03-12 08:08:33,214 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0?
2021-03-12 08:08:33,220 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntArray
2021-03-12 08:08:33,220 [main:114] - replacement of {
        fu9(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> contract({ contract({ println("zixzd")})})}
2021-03-12 08:08:33,365 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:08:33,365 [main:66] - Compilation checking started
2021-03-12 08:08:33,801 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
runCatching<Any?>({ "dcabw"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> contract({ contract({ println("zixzd")})})}

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:33,803 [main:107] - replacing (false, Boolean)
2021-03-12 08:08:33,803 [main:50] - replacing false Boolean
2021-03-12 08:08:33,803 [main:54] - Getting value of type Boolean
2021-03-12 08:08:33,943 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:33,946 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:08:33,946 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:34,759 [main:67] - randomType = Function2<ULong, ULong, List<ULong>>
2021-03-12 08:08:34,760 [main:106] - GETTING Boolean from IntArray
2021-03-12 08:08:34,767 [main:113] - Case = [public fun kotlin.IntArray.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@44328a5e]]
2021-03-12 08:08:34,767 [main:149] - GENERATING call of type public fun kotlin.IntArray.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@44328a5e]
2021-03-12 08:08:34,767 [main:117] - GENERATED CALL = (A.x).none()
2021-03-12 08:08:34,767 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72c7381]]
2021-03-12 08:08:34,767 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72c7381]
2021-03-12 08:08:34,768 [main:117] - GENERATED CALL = (A.x).isNotEmpty()
2021-03-12 08:08:34,768 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun kotlin.IntArray.contentEquals(other: kotlin.IntArray): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d1f65db]]
2021-03-12 08:08:34,768 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun kotlin.IntArray.contentEquals(other: kotlin.IntArray): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d1f65db]
2021-03-12 08:08:34,907 [main:302] - generating value of type = IntArray false depth = 0
2021-03-12 08:08:35,065 [main:43] - GENERATING CALL OF fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:08:35,068 [main:61] - WITHOUT TYPE PARAMS = fun intArrayOf(elements: Int): IntArray = TODO()
2021-03-12 08:08:35,243 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:08:35,246 [main:95] - GENERATED = intArrayOf(-427605365)
2021-03-12 08:08:35,246 [main:117] - GENERATED CALL = (A.x).contentEquals(intArrayOf(-427605365))
2021-03-12 08:08:35,246 [main:113] - Case = [public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@6aa65574]]
2021-03-12 08:08:35,246 [main:149] - GENERATING call of type public final operator fun iterator(): kotlin.collections.IntIterator defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@2b553f2e]
2021-03-12 08:08:35,246 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@6aa65574]
2021-03-12 08:08:35,385 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:35,385 [main:117] - GENERATED CALL = (A.x).iterator().equals("fuzsb")
2021-03-12 08:08:35,385 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]]
2021-03-12 08:08:35,385 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]
2021-03-12 08:08:35,523 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:35,524 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d87905e]
2021-03-12 08:08:35,524 [main:117] - GENERATED CALL = (A.x).equals("xnndj").not()
2021-03-12 08:08:35,524 [main:113] - Case = [public operator fun kotlin.IntArray.contains(element: kotlin.Int): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61fe7da7]]
2021-03-12 08:08:35,524 [main:149] - GENERATING call of type public operator fun kotlin.IntArray.contains(element: kotlin.Int): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 08:08:35,524 [main:117] - GENERATED CALL = (A.x).contains(++A.x[0])
2021-03-12 08:08:35,524 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.IntArray.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@63323f91]]
2021-03-12 08:08:35,524 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.IntArray.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@63323f91]
2021-03-12 08:08:35,524 [main:117] - GENERATED CALL = (A.x).isEmpty()
2021-03-12 08:08:35,524 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2831cf5e]]
2021-03-12 08:08:35,524 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]
2021-03-12 08:08:35,664 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:35,664 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2831cf5e]
2021-03-12 08:08:35,805 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:35,807 [main:117] - GENERATED CALL = (A.x).equals("lyuuf").or(true)
2021-03-12 08:08:35,807 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]]
2021-03-12 08:08:35,807 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@320f451]
2021-03-12 08:08:35,945 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:35,946 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@781d9257]
2021-03-12 08:08:36,085 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:36,088 [main:117] - GENERATED CALL = (A.x).equals("ozvpx").and(false)
2021-03-12 08:08:36,088 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5f77b570]]
2021-03-12 08:08:36,088 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in kotlin.IntArray[DeserializedSimpleFunctionDescriptor@3cd39478]
2021-03-12 08:08:36,088 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-12 08:08:36,228 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:36,228 [main:117] - GENERATED CALL = (A.x).set(++A.x[0], A.x[0]++).equals("vfpkz")
2021-03-12 08:08:36,228 [main:114] - replacement of false of type Boolean is (A.x).equals("xnndj").not()
2021-03-12 08:08:36,366 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:36,367 [main:66] - Compilation checking started
2021-03-12 08:08:37,017 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
runCatching<Any?>({ "dcabw"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = (A.x).equals("xnndj").not()

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:37,020 [main:107] - replacing (runCatching<Any?>({ "dcabw"}).getOrThrow(), Any?)
2021-03-12 08:08:37,020 [main:50] - replacing runCatching<Any?>({ "dcabw"}).getOrThrow() Any?
2021-03-12 08:08:37,020 [main:54] - Getting value of type Any?
2021-03-12 08:08:37,171 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:37,171 [main:58] - GENERATED VALUE OF TYPE Any? = "lrxpm"
2021-03-12 08:08:37,171 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:37,822 [main:67] - randomType = Kla2<Kla2<Char?>>
2021-03-12 08:08:37,824 [main:106] - GETTING Any? from Int
2021-03-12 08:08:37,865 [main:106] - GETTING Any? from Int
2021-03-12 08:08:37,866 [main:106] - GETTING Any? from String
2021-03-12 08:08:37,883 [main:106] - GETTING Any? from HashMap<String, Kla0>
2021-03-12 08:08:37,963 [main:106] - GETTING Any? from Kla0?
2021-03-12 08:08:37,968 [main:106] - GETTING Any? from Kla0
2021-03-12 08:08:37,973 [main:106] - GETTING Any? from A
2021-03-12 08:08:37,977 [main:106] - GETTING Any? from Int
2021-03-12 08:08:37,978 [main:106] - GETTING Any? from IntArray
2021-03-12 08:08:37,986 [main:106] - GETTING Any? from IntArray
2021-03-12 08:08:37,987 [main:106] - GETTING Any? from IntArray
2021-03-12 08:08:37,988 [main:106] - GETTING Any? from IntArray
2021-03-12 08:08:37,988 [main:114] - replacement of runCatching<Any?>({ "dcabw"}).getOrThrow() of type Any? is "lrxpm"
2021-03-12 08:08:38,130 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:08:38,131 [main:66] - Compilation checking started
2021-03-12 08:08:38,764 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
"lrxpm"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = (A.x).equals("xnndj").not()

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:38,766 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:08:38,766 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:08:38,766 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:08:38,905 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:08:38,911 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:08:38,926 [main:67] - randomType = Kla0?
2021-03-12 08:08:38,927 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:08:38,957 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:08:38,958 [main:106] - GETTING EmptyCoroutineContext from Kla0?
2021-03-12 08:08:38,962 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 08:08:38,967 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 08:08:38,971 [main:106] - GETTING EmptyCoroutineContext from IntArray
2021-03-12 08:08:38,978 [main:106] - GETTING EmptyCoroutineContext from IntArray
2021-03-12 08:08:38,978 [main:106] - GETTING EmptyCoroutineContext from IntArray
2021-03-12 08:08:38,979 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:08:38,980 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 08:08:38,996 [main:106] - GETTING EmptyCoroutineContext from HashMap<String, Kla0>
2021-03-12 08:08:39,081 [main:106] - GETTING EmptyCoroutineContext from IntArray
2021-03-12 08:08:39,081 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 08:08:39,081 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-12 08:08:39,081 [main:50] - replacing prope6 Result<Ty0>
2021-03-12 08:08:39,081 [main:54] - Getting value of type Result<Ty0>
2021-03-12 08:08:39,220 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 08:08:39,366 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:39,369 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:39,676 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:39,676 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 08:08:39,857 [main:67] - randomType = UInt
2021-03-12 08:08:40,000 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:08:40,030 [main:106] - GETTING Result<Ty0> from String
2021-03-12 08:08:40,047 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:40,054 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:40,087 [main:106] - GETTING Result<Ty0> from HashMap<String, Kla0>
2021-03-12 08:08:40,170 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:40,172 [main:106] - GETTING Result<Ty0> from A
2021-03-12 08:08:40,177 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:40,178 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:40,179 [main:106] - GETTING Result<Ty0> from Kla0
2021-03-12 08:08:40,185 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:40,186 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:40,187 [main:106] - GETTING Result<Ty0> from Kla0?
2021-03-12 08:08:40,191 [main:111] - Cant find and generate replacement for prope6 type Result<Ty0>
2021-03-12 08:08:40,191 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 08:08:40,192 [main:50] - replacing it Continuation<Unit>
2021-03-12 08:08:40,192 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 08:08:40,329 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 08:08:40,472 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:08:40,476 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:08:40,942 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:08:41,091 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:08:41,095 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:08:41,445 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:08:41,592 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:08:41,595 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:08:42,078 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:08:42,078 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:08:42,078 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:08:42,078 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 08:08:42,398 [main:67] - randomType = Sequence<UInt>
2021-03-12 08:08:42,399 [main:106] - GETTING Continuation<Unit> from Kla0?
2021-03-12 08:08:42,405 [main:106] - GETTING Continuation<Unit> from IntArray
2021-03-12 08:08:42,412 [main:106] - GETTING Continuation<Unit> from HashMap<String, Kla0>
2021-03-12 08:08:42,493 [main:106] - GETTING Continuation<Unit> from A
2021-03-12 08:08:42,498 [main:106] - GETTING Continuation<Unit> from Kla0
2021-03-12 08:08:42,503 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:08:42,532 [main:106] - GETTING Continuation<Unit> from IntArray
2021-03-12 08:08:42,533 [main:106] - GETTING Continuation<Unit> from IntArray
2021-03-12 08:08:42,534 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 08:08:42,550 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:08:42,551 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:08:42,552 [main:106] - GETTING Continuation<Unit> from IntArray
2021-03-12 08:08:42,552 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 08:08:42,552 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8, String)
2021-03-12 08:08:42,553 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8 String
2021-03-12 08:08:42,553 [main:54] - Getting value of type String
2021-03-12 08:08:42,702 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:08:42,704 [main:58] - GENERATED VALUE OF TYPE String = "voogv"
2021-03-12 08:08:42,705 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:43,023 [main:67] - randomType = Function1<Double, UInt>
2021-03-12 08:08:43,024 [main:106] - GETTING String from HashMap<String, Kla0>
2021-03-12 08:08:43,109 [main:113] - Case = [public open fun get(key: kotlin.String): Kla0? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@70d5c0f4], public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]]
2021-03-12 08:08:43,109 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): Kla0? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@70d5c0f4]
2021-03-12 08:08:43,109 [main:149] - GENERATING call of type public abstract fun fu0(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@19e684c9]
2021-03-12 08:08:43,109 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()).get((A.xx).contentToString())?.fu0()
2021-03-12 08:08:43,109 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@32549958], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:08:43,109 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:08:43,110 [main:117] - GENERATED CALL = (hashMapOf<String, Kla0>()).size.toString(A.x[0])
2021-03-12 08:08:43,110 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8 of type String is (hashMapOf<String, Kla0>()).size.toString(A.x[0])
2021-03-12 08:08:43,246 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:43,247 [main:66] - Compilation checking started
2021-03-12 08:08:43,869 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
"lrxpm"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235))
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = (A.x).equals("xnndj").not()

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error((hashMapOf<String, Kla0>()).size.toString(A.x[0]))
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:43,871 [main:107] - replacing ((A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235), String)
2021-03-12 08:08:43,871 [main:50] - replacing (A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235) String
2021-03-12 08:08:43,871 [main:54] - Getting value of type String
2021-03-12 08:08:44,016 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:08:44,018 [main:58] - GENERATED VALUE OF TYPE String = "idpjp"
2021-03-12 08:08:44,018 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:44,029 [main:67] - randomType = Kla1
2021-03-12 08:08:44,174 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:08:44,177 [main:112] - generating klass Kla1 text = inline class Kla1(val s: Int?)
2021-03-12 08:08:44,344 [main:194] - Type params = []
2021-03-12 08:08:44,483 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:08:44,493 [main:106] - GETTING String from IntArray
2021-03-12 08:08:44,501 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]]
2021-03-12 08:08:44,501 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun kotlin.IntArray.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40f42ae]
2021-03-12 08:08:44,502 [main:117] - GENERATED CALL = (A.xx).contentToString()
2021-03-12 08:08:44,502 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.IntArray[DeserializedPropertyDescriptor@350867b0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:08:44,502 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:08:44,502 [main:117] - GENERATED CALL = (A.xx).size.toString(++A.x[0])
2021-03-12 08:08:44,502 [main:113] - Case = [public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]]
2021-03-12 08:08:44,502 [main:149] - GENERATING call of type public fun kotlin.IntArray.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((kotlin.Int) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e37e758]
2021-03-12 08:08:44,640 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:08:44,794 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:08:44,937 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:08:44,940 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 08:08:45,241 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 08:08:45,247 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 08:08:45,386 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:08:45,531 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:08:45,680 [main:302] - generating value of type = Function1<Int, CharSequence> false depth = 0
2021-03-12 08:08:45,682 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:08:45,688 [main:117] - GENERATED CALL = (A.xx).joinToString("ngffj", StringBuilder(StringBuilder()), "biasn", ++A.x[0], "ecphf", {a: Int -> StringBuilder()})
2021-03-12 08:08:45,688 [main:114] - replacement of (A.xx).size.toString(++A.x[0]) + (hashMapOf<String, Kla0>()).size.toString(-416628235) of type String is "idpjp"
2021-03-12 08:08:45,828 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:08:45,828 [main:66] - Compilation checking started
2021-03-12 08:08:46,427 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
"lrxpm"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("idpjp")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = (A.x).equals("xnndj").not()

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error((hashMapOf<String, Kla0>()).size.toString(A.x[0]))
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:46,429 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-12 08:08:46,429 [main:50] - replacing prope6 Result<Ty0>
2021-03-12 08:08:46,429 [main:54] - Getting value of type Result<Ty0>
2021-03-12 08:08:46,573 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 08:08:46,717 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:46,720 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:47,023 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:08:47,023 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 08:08:47,352 [main:67] - randomType = Set<UByte>
2021-03-12 08:08:47,353 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:47,363 [main:106] - GETTING Result<Ty0> from Kla0
2021-03-12 08:08:47,368 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:47,369 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:47,370 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:47,406 [main:106] - GETTING Result<Ty0> from IntArray
2021-03-12 08:08:47,407 [main:106] - GETTING Result<Ty0> from A
2021-03-12 08:08:47,414 [main:106] - GETTING Result<Ty0> from Kla0?
2021-03-12 08:08:47,420 [main:106] - GETTING Result<Ty0> from String
2021-03-12 08:08:47,440 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:47,441 [main:106] - GETTING Result<Ty0> from HashMap<String, Kla0>
2021-03-12 08:08:47,572 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:08:47,572 [main:111] - Cant find and generate replacement for prope6 type Result<Ty0>
2021-03-12 08:08:47,572 [main:107] - replacing (prope5, String?)
2021-03-12 08:08:47,572 [main:50] - replacing prope5 String?
2021-03-12 08:08:47,572 [main:54] - Getting value of type String?
2021-03-12 08:08:47,710 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:08:47,713 [main:58] - GENERATED VALUE OF TYPE String? = "ppfrx"
2021-03-12 08:08:47,713 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:47,723 [main:67] - randomType = Kla7
2021-03-12 08:08:47,860 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 08:08:47,863 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("idpjp")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}
2021-03-12 08:08:47,869 [main:106] - GETTING String? from Int
2021-03-12 08:08:47,897 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b831495], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf73df9]]
2021-03-12 08:08:47,897 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b831495]
2021-03-12 08:08:48,035 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:08:48,038 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf73df9]
2021-03-12 08:08:48,038 [main:117] - GENERATED CALL = (A.x[0])?.div(-2371032698050783815).toString(A.x[0]++)
2021-03-12 08:08:48,038 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633f6371]]
2021-03-12 08:08:48,038 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:08:48,038 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@633f6371]
2021-03-12 08:08:48,039 [main:117] - GENERATED CALL = (A.x[0])?.toChar().titlecase()
2021-03-12 08:08:48,039 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e751a4]]
2021-03-12 08:08:48,039 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@105df316]
2021-03-12 08:08:48,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e751a4]
2021-03-12 08:08:48,039 [main:117] - GENERATED CALL = (A.x[0])?.toByte().toString(A.x[0])
2021-03-12 08:08:48,039 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:08:48,039 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cea19ad]
2021-03-12 08:08:48,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:08:48,039 [main:117] - GENERATED CALL = (A.x[0])?.toInt().toString(A.x[0])
2021-03-12 08:08:48,039 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43a0a19a]]
2021-03-12 08:08:48,039 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:08:48,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43a0a19a]
2021-03-12 08:08:48,040 [main:117] - GENERATED CALL = (A.x[0])?.toChar().lowercase()
2021-03-12 08:08:48,040 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a879080]]
2021-03-12 08:08:48,040 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 08:08:48,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a879080]
2021-03-12 08:08:48,040 [main:117] - GENERATED CALL = (A.x[0])?.toChar().uppercase()
2021-03-12 08:08:48,040 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:08:48,040 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@517b41f]
2021-03-12 08:08:48,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:08:48,040 [main:117] - GENERATED CALL = (A.x[0])?.compareTo(++A.x[0]).toString(++A.x[0])
2021-03-12 08:08:48,040 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]]
2021-03-12 08:08:48,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8eceb]
2021-03-12 08:08:48,041 [main:117] - GENERATED CALL = (A.x[0])?.toString(A.x[0]++)
2021-03-12 08:08:48,041 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7d6cc2]]
2021-03-12 08:08:48,041 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6603bbe4]
2021-03-12 08:08:48,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e7d6cc2]
2021-03-12 08:08:48,041 [main:117] - GENERATED CALL = (A.x[0])?.toShort().toString(A.x[0]++)
2021-03-12 08:08:48,041 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7dcc664d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf73df9]]
2021-03-12 08:08:48,041 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7dcc664d]
2021-03-12 08:08:48,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cf73df9]
2021-03-12 08:08:48,041 [main:117] - GENERATED CALL = (A.x[0])?.toLong().toString(A.x[0]++)
2021-03-12 08:08:48,041 [main:114] - replacement of prope5 of type String? is (A.x[0])?.toShort().toString(A.x[0]++)
2021-03-12 08:08:48,178 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:48,179 [main:66] - Compilation checking started
2021-03-12 08:08:48,606 [main:49] - Result = false
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $this"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        (A.x[0])?.toShort().toString(A.x[0]++) = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
"lrxpm"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("idpjp")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = (A.x).equals("xnndj").not()

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error((hashMapOf<String, Kla0>()).size.toString(A.x[0]))
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:48,608 [main:107] - replacing (this, Int?)
2021-03-12 08:08:48,608 [main:50] - replacing this Int?
2021-03-12 08:08:48,608 [main:54] - Getting value of type Int?
2021-03-12 08:08:48,747 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:08:48,750 [main:58] - GENERATED VALUE OF TYPE Int? = 1738628027
2021-03-12 08:08:48,750 [main:61] - GENERATED IS CALL =false
2021-03-12 08:08:48,760 [main:67] - randomType = Kla5
2021-03-12 08:08:48,898 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:08:48,901 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-12 08:08:48,915 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@5f0803a8]
2021-03-12 08:08:49,052 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:08:49,053 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7438377f]
2021-03-12 08:08:49,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:49,194 [main:78] - Generated call from random type = (Kla5()).equals("tlycp").compareTo(true)
2021-03-12 08:08:49,195 [main:106] - GETTING Int? from String
2021-03-12 08:08:49,211 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@626e293b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 08:08:49,212 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 08:08:49,349 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:08:49,352 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.length.times(3)
2021-03-12 08:08:49,352 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@626e293b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]]
2021-03-12 08:08:49,352 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1005e930]
2021-03-12 08:08:49,352 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.length.xor(A.x[0])
2021-03-12 08:08:49,352 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@626e293b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c8a47f3]]
2021-03-12 08:08:49,352 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c8a47f3]
2021-03-12 08:08:49,353 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.length.dec()
2021-03-12 08:08:49,353 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2152f5c6]]
2021-03-12 08:08:49,353 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2152f5c6]
2021-03-12 08:08:49,491 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:08:49,494 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:08:49,497 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.indexOfFirst({a: Char -> true})
2021-03-12 08:08:49,497 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c49b303]]
2021-03-12 08:08:49,497 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c49b303]
2021-03-12 08:08:49,638 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:49,641 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.compareTo((A.xx).contentToString(), false)
2021-03-12 08:08:49,641 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33a3fae], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c8570d1]]
2021-03-12 08:08:49,641 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33a3fae]
2021-03-12 08:08:49,641 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c8570d1]
2021-03-12 08:08:49,779 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:08:49,782 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:08:49,785 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.subSequence(++A.x[0], A.x[0]++).indexOfLast({a: Char -> false})
2021-03-12 08:08:49,785 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fedfb83]]
2021-03-12 08:08:49,785 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fedfb83]
2021-03-12 08:08:49,785 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.count()
2021-03-12 08:08:49,785 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33a3fae], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29997841]]
2021-03-12 08:08:49,785 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33a3fae]
2021-03-12 08:08:49,924 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:08:49,927 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29997841]
2021-03-12 08:08:50,065 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 08:08:50,208 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 08:08:50,212 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 08:08:50,359 [main:302] - generating value of type = Char true depth = 3
2021-03-12 08:08:50,361 [main:95] - GENERATED = charArrayOf('踘')
2021-03-12 08:08:50,499 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:08:50,502 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.subSequence(A.x[0]++, -221537823).indexOfAny(charArrayOf('踘'), ++A.x[0], true)
2021-03-12 08:08:50,502 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33a3fae], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@6068ca28]]
2021-03-12 08:08:50,502 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33a3fae]
2021-03-12 08:08:50,503 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.subSequence(A.x[0]++, A.x[0]++).lastIndex
2021-03-12 08:08:50,503 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c9ee095], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@4ac5c328]]
2021-03-12 08:08:50,503 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c9ee095]
2021-03-12 08:08:50,503 [main:117] - GENERATED CALL = ((A.xx).contentToString())?.get(A.x[0]++).code
2021-03-12 08:08:50,503 [main:114] - replacement of this of type Int? is ((A.xx).contentToString())?.subSequence(A.x[0]++, -221537823).indexOfAny(charArrayOf('踘'), ++A.x[0], true)
2021-03-12 08:08:50,664 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:08:50,665 [main:66] - Compilation checking started
2021-03-12 08:08:51,290 [main:53] - Result = true
Text:
import Host.x
import java.util.HashMap
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



object A {
    var xx = intArrayOf(0)
}

object Host {
    val A.x get() = A.xx
}

fun box(): String {
    A.x[0] += 1
    if (A.x[0] != 1) return "Fail 1: ${A.x[0]}"

    A.x[0]++
    if (A.x[0] != 2) return "Fail 2: ${A.x[0]}"

    ++A.x[0]
    if (A.x[0] != 3) return "Fail 3: ${A.x[0]}"

    return "OK"
}

interface Kla0 {
    fun fu0(): String
}

val prope0 by lazy { hashMapOf<String, Kla0>(Pair<String, Kla0>("pmlle", TODO()))}

fun box194(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!

    // Check that reflection won't fail
    prope1.javaClass.getEnclosingMethod().toString()

    return (A.xx).joinToString(StringBuilder(StringBuilder(0)), StringBuilder(0), StringBuilder("leeui"), A.x[A.x[0]], "abrng", {a: Int -> StringBuilder()})
}

inline class Kla1(val s: Int?)

var prope2: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope2 = it as Continuation<Any>
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!! $((A.xx).contentToString())?.subSequence(A.x[0]++, -221537823).indexOfAny(charArrayOf('踘'), ++A.x[0], true)"

interface Kla2<Ty0> {
    suspend fun fu6(): Ty0
}

class Kla3 : Kla2<Kla1> {
    override suspend fun fu6(): Kla1 = Kla1(-1079269376)
}

fun fu3(prope2: suspend () -> Unit) {
    prope2.startCoroutine(Kla4)
}

fun box272(): String {
    val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
var prope5: String? = null
    fu3 {
        val prope12: Kla2<*> = Kla3()
        prope5 = (A.xx)?.iterator().next().fu2()
    }
    ((A.xx))?.reverse()
    return prope5!!
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
(A.x)?.reverse()
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope6: Result<Any?>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
"lrxpm"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu7(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope2: Continuation<*>) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
if (prope2 !is CoroutineStackFrame) error("idpjp")
        prope7.clear()
        var prope11: CoroutineStackFrame? = prope2
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope7.find { true} ?: error((A.xx).contentToString())
    }
}

val prope3 = Kla7()

class Kla8 {
    private var prope8 = 1112228210
    var prope9 = (A.x).equals("xnndj").not()

    var prope10: () -> Unit = {}

    fun fu12() {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope8 = (++A.x[0]).toLong().toInt()
        prope9 = false
        prope10 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(true)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
for (i in (A.x[0]).rangeTo(41).first..numberOfSuspensions) {
            if (prope8 != i) error((hashMapOf<String, Kla0>()).size.toString(A.x[0]))
            prope10()
        }
        if ((Kla8())?.fu12().equals("xwddk"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "cklix" + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
prope4.prope10 = {
            prope4.prope9 = (A.x[0]++).div(0.7601887645232928).isNaN()
        }
    }

    override fun fu7(exception: Throwable) {
        val prope1 = hashMapOf<String, Kla0>()[(A.xx).contentToString()]!!
throw UnsupportedOperationException()
    }
}


2021-03-12 08:08:51,293 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-12 08:08:51,293 [main:50] - replacing prope6 Result<Ty0>
2021-03-12 08:08:51,293 [main:54] - Getting value of type Result<Ty0>
