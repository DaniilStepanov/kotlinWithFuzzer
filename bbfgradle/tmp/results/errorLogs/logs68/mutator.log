2021-03-12 02:47:28,531 [main:66] - Compilation checking started
2021-03-12 02:47:29,832 [main:112] - generating klass A text = class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}
2021-03-12 02:47:30,149 [main:45] - Trying to change 5 nodes
2021-03-12 02:47:30,152 [main:53] - replacing ("O", String)
2021-03-12 02:47:30,152 [main:50] - replacing "O" String
2021-03-12 02:47:30,153 [main:54] - Getting value of type String
2021-03-12 02:47:30,247 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:30,251 [main:58] - GENERATED VALUE OF TYPE String = "btfea"
2021-03-12 02:47:30,252 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:31,740 [main:67] - randomType = Function2<Sequence<Boolean>, Float, LinkedHashMap<A, String>>
2021-03-12 02:47:31,741 [main:106] - GETTING String from String
2021-03-12 02:47:31,854 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79f9d0bc]]
2021-03-12 02:47:31,855 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79f9d0bc]
2021-03-12 02:47:31,932 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:32,006 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:32,007 [main:117] - GENERATED CALL = (A().prop).substringBeforeLast('굋', "imwlp")
2021-03-12 02:47:32,007 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@309b7b53]]
2021-03-12 02:47:32,007 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@309b7b53]
2021-03-12 02:47:32,097 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:32,099 [main:117] - GENERATED CALL = (A().prop).takeLast(-384513591)
2021-03-12 02:47:32,099 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5d2971]]
2021-03-12 02:47:32,100 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b5d2971]
2021-03-12 02:47:32,176 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:32,250 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:32,323 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:47:32,423 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 02:47:32,428 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 02:47:32,603 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:47:32,604 [main:95] - GENERATED = StringBuilder("easbi")
2021-03-12 02:47:32,605 [main:117] - GENERATED CALL = (A().prop).replaceRange(-1665191583, -469387570, StringBuilder("easbi"))
2021-03-12 02:47:32,605 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@661f4394]]
2021-03-12 02:47:32,606 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@661f4394]
2021-03-12 02:47:32,704 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:32,794 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:32,796 [main:117] - GENERATED CALL = (A().prop).padEnd(-136647222, '㦓')
2021-03-12 02:47:32,796 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a5814b0]]
2021-03-12 02:47:32,796 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a5814b0]
2021-03-12 02:47:32,867 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:47:32,953 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 02:47:32,955 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 02:47:33,138 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:47:33,139 [main:95] - GENERATED = StringBuilder("zucad")
2021-03-12 02:47:33,245 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:33,247 [main:117] - GENERATED CALL = (A().prop).commonSuffixWith(StringBuilder("zucad"), false)
2021-03-12 02:47:33,248 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ee48aa9]]
2021-03-12 02:47:33,248 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ee48aa9]
2021-03-12 02:47:33,322 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:33,323 [main:117] - GENERATED CALL = (A().prop).substring(68824897)
2021-03-12 02:47:33,324 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 02:47:33,324 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 02:47:33,419 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:33,530 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:33,532 [main:117] - GENERATED CALL = (A().prop).replaceAfter('⟔', prop, "nyykx")
2021-03-12 02:47:33,532 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@182f15b4]]
2021-03-12 02:47:33,533 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@182f15b4]
2021-03-12 02:47:33,644 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:33,714 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:33,784 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:33,785 [main:117] - GENERATED CALL = (A().prop).replaceBefore('봭', "uibrh", "lfpst")
2021-03-12 02:47:33,785 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52f17199]]
2021-03-12 02:47:33,785 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52f17199]
2021-03-12 02:47:33,786 [main:117] - GENERATED CALL = (A().prop).trimIndent()
2021-03-12 02:47:33,786 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]]
2021-03-12 02:47:33,786 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]
2021-03-12 02:47:33,787 [main:117] - GENERATED CALL = (A().prop).prependIndent(prop)
2021-03-12 02:47:33,787 [main:61] - replacement of "O" of type String is (A().prop).substring(68824897)
2021-03-12 02:47:33,877 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:33,878 [main:66] - Compilation checking started
2021-03-12 02:47:34,161 [main:49] - Result = false
Text:
class A {
    public var prop = (A().prop).substring(68824897)
        private set

    fun test() {
        { prop }()
    }
}


2021-03-12 02:47:34,163 [main:53] - replacing ({ prop }, Function0<String>)
2021-03-12 02:47:34,163 [main:50] - replacing { prop } Function0<String>
2021-03-12 02:47:34,163 [main:54] - Getting value of type Function0<String>
2021-03-12 02:47:34,255 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 02:47:34,255 [main:302] - generating value of type = String true depth = 1
2021-03-12 02:47:34,255 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "nbmxk"}
2021-03-12 02:47:34,256 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:34,349 [main:67] - randomType = UInt
2021-03-12 02:47:34,425 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 02:47:34,515 [main:106] - GETTING Function0<String> from String
2021-03-12 02:47:34,561 [main:106] - GETTING Function0<String> from String
2021-03-12 02:47:34,561 [main:61] - replacement of { prop } of type Function0<String> is { "nbmxk"}
2021-03-12 02:47:34,644 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 02:47:34,644 [main:66] - Compilation checking started
2021-03-12 02:47:34,921 [main:53] - Result = true
Text:
class A {
    public var prop = "O"
        private set

    fun test() {
        { "nbmxk"}()
    }
}


2021-03-12 02:47:34,922 [main:53] - replacing (prop, String)
2021-03-12 02:47:34,922 [main:50] - replacing prop String
2021-03-12 02:47:34,922 [main:54] - Getting value of type String
2021-03-12 02:47:35,012 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:35,012 [main:58] - GENERATED VALUE OF TYPE String = "hkhst"
2021-03-12 02:47:35,013 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:35,112 [main:67] - randomType = Boolean
2021-03-12 02:47:35,189 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:35,204 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7f0bc723]
2021-03-12 02:47:35,276 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:35,276 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]
2021-03-12 02:47:35,367 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:35,368 [main:78] - Generated call from random type = (false).compareTo(true).toString(632889516)
2021-03-12 02:47:35,369 [main:61] - replacement of prop of type String is (false).compareTo(true).toString(632889516)
2021-03-12 02:47:35,443 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:35,539 [main:41] - AFTER TRY 0 res = class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}
2021-03-12 02:47:35,687 [main:112] - generating klass A text = class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}
2021-03-12 02:47:35,880 [main:43] - Try №0
2021-03-12 02:47:37,516 [main:69] - Trying to insert private fun fu0() = "K"
2021-03-12 02:47:37,621 [main:66] - Compilation checking started
2021-03-12 02:47:38,205 [main:103] - Trying to change 12 nodes
2021-03-12 02:47:38,205 [main:107] - replacing ({
        prope0 + fu0()
    }(), String)
2021-03-12 02:47:38,205 [main:50] - replacing {
        prope0 + fu0()
    }() String
2021-03-12 02:47:38,205 [main:54] - Getting value of type String
2021-03-12 02:47:38,296 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:38,296 [main:58] - GENERATED VALUE OF TYPE String = "zpmfo"
2021-03-12 02:47:38,297 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:38,382 [main:67] - randomType = Boolean
2021-03-12 02:47:38,462 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:38,473 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7f0bc723]
2021-03-12 02:47:38,556 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:38,557 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]
2021-03-12 02:47:38,641 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:38,642 [main:78] - Generated call from random type = (false).compareTo(false).toString(1998911667)
2021-03-12 02:47:38,642 [main:114] - replacement of {
        prope0 + fu0()
    }() of type String is (false).compareTo(false).toString(1998911667)
2021-03-12 02:47:38,722 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:38,722 [main:66] - Compilation checking started
2021-03-12 02:47:39,150 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = "O"

private fun fu0() = "K"

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals(1, prope1.declaredMethods.size, "Facade should have only box and getProp methods")
    assertEquals("box", prope1.declaredMethods.first().name, "Facade should have only box method")

    return (false).compareTo(false).toString(1998911667)
}


2021-03-12 02:47:39,151 [main:107] - replacing ("box", String)
2021-03-12 02:47:39,151 [main:50] - replacing "box" String
2021-03-12 02:47:39,151 [main:54] - Getting value of type String
2021-03-12 02:47:39,258 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:39,259 [main:58] - GENERATED VALUE OF TYPE String = "cudpg"
2021-03-12 02:47:39,259 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:39,260 [main:67] - randomType = String
2021-03-12 02:47:39,348 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:39,382 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5766a13e]
2021-03-12 02:47:39,464 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:39,547 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:39,634 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:39,635 [main:78] - Generated call from random type = ("hevkr").replace('ᵺ', '', true)
2021-03-12 02:47:39,635 [main:106] - GETTING String from String
2021-03-12 02:47:39,668 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48912b12]]
2021-03-12 02:47:39,668 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48912b12]
2021-03-12 02:47:39,669 [main:117] - GENERATED CALL = (A().prop).decapitalize()
2021-03-12 02:47:39,670 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]]
2021-03-12 02:47:39,670 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]
2021-03-12 02:47:39,670 [main:117] - GENERATED CALL = (A().prop).prependIndent(A().prop)
2021-03-12 02:47:39,671 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32202735]]
2021-03-12 02:47:39,671 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32202735]
2021-03-12 02:47:39,766 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:39,767 [main:117] - GENERATED CALL = (A().prop).drop(-1333576419)
2021-03-12 02:47:39,768 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@362b4352]]
2021-03-12 02:47:39,768 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@362b4352]
2021-03-12 02:47:39,847 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:47:39,848 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:47:39,849 [main:117] - GENERATED CALL = (A().prop).takeWhile({a: Char -> true})
2021-03-12 02:47:39,849 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@250c2993]]
2021-03-12 02:47:39,849 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@250c2993]
2021-03-12 02:47:39,849 [main:117] - GENERATED CALL = (A().prop).toUpperCase()
2021-03-12 02:47:39,850 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@605ca0a8]]
2021-03-12 02:47:39,850 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@605ca0a8]
2021-03-12 02:47:39,850 [main:117] - GENERATED CALL = (A().prop).toLowerCase()
2021-03-12 02:47:39,850 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79f9d0bc]]
2021-03-12 02:47:39,850 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79f9d0bc]
2021-03-12 02:47:39,931 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:39,932 [main:117] - GENERATED CALL = (A().prop).substringBeforeLast('ꔃ', A().prop)
2021-03-12 02:47:39,932 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bfeb0f]]
2021-03-12 02:47:39,932 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bfeb0f]
2021-03-12 02:47:40,012 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:40,014 [main:117] - GENERATED CALL = (A().prop).replaceAfterLast('悮', A().prop, A().prop)
2021-03-12 02:47:40,014 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b535c0d]]
2021-03-12 02:47:40,014 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b535c0d]
2021-03-12 02:47:40,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:40,194 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:40,195 [main:117] - GENERATED CALL = (A().prop).removeRange(2090660471, -223096171)
2021-03-12 02:47:40,196 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]]
2021-03-12 02:47:40,196 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca]
2021-03-12 02:47:40,285 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:40,286 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]
2021-03-12 02:47:40,287 [main:117] - GENERATED CALL = (A().prop).get(-484878537).lowercase()
2021-03-12 02:47:40,287 [main:114] - replacement of "box" of type String is (A().prop).removeRange(2090660471, -223096171)
2021-03-12 02:47:40,426 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:40,427 [main:66] - Compilation checking started
2021-03-12 02:47:40,860 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = "O"

private fun fu0() = "K"

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals(1, prope1.declaredMethods.size, "Facade should have only box and getProp methods")
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, "Facade should have only box method")

    return (false).compareTo(false).toString(1998911667)
}


2021-03-12 02:47:40,861 [main:107] - replacing ("Facade should have only box and getProp methods", String)
2021-03-12 02:47:40,861 [main:50] - replacing "Facade should have only box and getProp methods" String
2021-03-12 02:47:40,861 [main:54] - Getting value of type String
2021-03-12 02:47:40,954 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:40,955 [main:58] - GENERATED VALUE OF TYPE String = "iiinr"
2021-03-12 02:47:40,955 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:41,246 [main:67] - randomType = LinkedHashMap<UInt, A>
2021-03-12 02:47:41,332 [main:302] - generating value of type = LinkedHashMap<UInt, A> false depth = 0
2021-03-12 02:47:41,423 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<UInt, A> = TODO()
2021-03-12 02:47:41,424 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<UInt, A> = TODO()
2021-03-12 02:47:41,510 [main:95] - GENERATED = linkedMapOf<UInt, A>()
2021-03-12 02:47:41,750 [main:149] - GENERATING call of type public open fun get(key: kotlin.UInt): A? defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@467de92f]
2021-03-12 02:47:41,839 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 02:47:41,841 [main:78] - Generated call from random type = (linkedMapOf<UInt, A>()).get(1830488711.toUInt())?.prop!!
2021-03-12 02:47:41,841 [main:106] - GETTING String from String
2021-03-12 02:47:41,874 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38fdd33c]]
2021-03-12 02:47:41,874 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38fdd33c]
2021-03-12 02:47:41,875 [main:117] - GENERATED CALL = (A().prop).trimEnd()
2021-03-12 02:47:41,875 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32202735]]
2021-03-12 02:47:41,876 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32202735]
2021-03-12 02:47:41,960 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:41,961 [main:117] - GENERATED CALL = (A().prop).drop(758786845)
2021-03-12 02:47:41,962 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1447051c]]
2021-03-12 02:47:41,962 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:47:42,092 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:42,190 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:42,191 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1447051c]
2021-03-12 02:47:42,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:42,279 [main:117] - GENERATED CALL = (A().prop).subSequence(991335883, -201441207).repeat(-2055952194)
2021-03-12 02:47:42,279 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bfeb0f]]
2021-03-12 02:47:42,279 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bfeb0f]
2021-03-12 02:47:42,359 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:42,360 [main:117] - GENERATED CALL = (A().prop).replaceAfterLast('䨱', A().prop, A().prop)
2021-03-12 02:47:42,360 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a5814b0]]
2021-03-12 02:47:42,361 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:47:42,442 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:42,543 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:42,544 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a5814b0]
2021-03-12 02:47:42,638 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:47:42,730 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:42,731 [main:117] - GENERATED CALL = (A().prop).subSequence(111336749, -46008132).commonSuffixWith("txjci", false)
2021-03-12 02:47:42,732 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ef7cd8c]]
2021-03-12 02:47:42,732 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ef7cd8c]
2021-03-12 02:47:42,817 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 02:47:42,817 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:47:42,818 [main:117] - GENERATED CALL = (A().prop).filterIndexed({a: Int, b: Char -> false})
2021-03-12 02:47:42,818 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@605ca0a8]]
2021-03-12 02:47:42,818 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@605ca0a8]
2021-03-12 02:47:42,819 [main:117] - GENERATED CALL = (A().prop).toLowerCase()
2021-03-12 02:47:42,819 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1447051c]]
2021-03-12 02:47:42,819 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1447051c]
2021-03-12 02:47:42,902 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:42,903 [main:117] - GENERATED CALL = (A().prop).repeat(1672176744)
2021-03-12 02:47:42,903 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bb0a1f0]]
2021-03-12 02:47:42,903 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:47:42,984 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:43,080 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:43,081 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bb0a1f0]
2021-03-12 02:47:43,174 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 02:47:43,262 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 02:47:43,264 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 02:47:43,565 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:47:43,565 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 02:47:43,656 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<RegexOption>): Set<RegexOption> = TODO()
2021-03-12 02:47:43,658 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<RegexOption>): Set<RegexOption> = TODO()
2021-03-12 02:47:43,827 [main:302] - generating value of type = Collection<RegexOption> false depth = 6
2021-03-12 02:47:43,913 [main:43] - GENERATING CALL OF fun <T> listOf(): Collection<RegexOption> = TODO()
2021-03-12 02:47:43,915 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Collection<RegexOption> = TODO()
2021-03-12 02:47:43,997 [main:95] - GENERATED = listOf<RegexOption>()
2021-03-12 02:47:43,997 [main:95] - GENERATED = LinkedHashSet<RegexOption>(listOf<RegexOption>())
2021-03-12 02:47:43,997 [main:95] - GENERATED = Regex("uermd", LinkedHashSet<RegexOption>(listOf<RegexOption>()))
2021-03-12 02:47:44,097 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 02:47:44,098 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 02:47:44,102 [main:117] - GENERATED CALL = (A().prop).subSequence(798804635, 482629156).replace(Regex("uermd", LinkedHashSet<RegexOption>(listOf<RegexOption>())), {a: MatchResult -> "zitkh"})
2021-03-12 02:47:44,103 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@362b4352]]
2021-03-12 02:47:44,103 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@362b4352]
2021-03-12 02:47:44,191 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:47:44,191 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:47:44,192 [main:117] - GENERATED CALL = (A().prop).takeWhile({a: Char -> true})
2021-03-12 02:47:44,192 [main:114] - replacement of "Facade should have only box and getProp methods" of type String is (A().prop).toLowerCase()
2021-03-12 02:47:44,273 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:44,274 [main:66] - Compilation checking started
2021-03-12 02:47:44,664 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = "O"

private fun fu0() = "K"

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals(1, prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, "Facade should have only box method")

    return (false).compareTo(false).toString(1998911667)
}


2021-03-12 02:47:44,665 [main:107] - replacing ("Facade should have only box method", String)
2021-03-12 02:47:44,665 [main:50] - replacing "Facade should have only box method" String
2021-03-12 02:47:44,665 [main:54] - Getting value of type String
2021-03-12 02:47:44,744 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:44,744 [main:58] - GENERATED VALUE OF TYPE String = "ukwxh"
2021-03-12 02:47:44,744 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:44,745 [main:67] - randomType = A
2021-03-12 02:47:44,823 [main:302] - generating value of type = A false depth = 0
2021-03-12 02:47:44,823 [main:112] - generating klass A text = class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}
2021-03-12 02:47:44,841 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]
2021-03-12 02:47:44,841 [main:78] - Generated call from random type = (A()).prop.prependIndent(A().prop)
2021-03-12 02:47:44,841 [main:106] - GETTING String from String
2021-03-12 02:47:44,870 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a5814b0]]
2021-03-12 02:47:44,871 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:47:44,950 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:45,029 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:45,030 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a5814b0]
2021-03-12 02:47:45,110 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:47:45,195 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:45,196 [main:117] - GENERATED CALL = (A().prop).subSequence(-1452032650, 246767238).commonSuffixWith("uifjr", true)
2021-03-12 02:47:45,196 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@661f4394]]
2021-03-12 02:47:45,196 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@661f4394]
2021-03-12 02:47:45,275 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:45,364 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:45,365 [main:117] - GENERATED CALL = (A().prop).padEnd(-1971897737, '栮')
2021-03-12 02:47:45,366 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b12e290]]
2021-03-12 02:47:45,366 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b12e290]
2021-03-12 02:47:45,366 [main:117] - GENERATED CALL = (A().prop).replaceIndent(A().prop)
2021-03-12 02:47:45,366 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]]
2021-03-12 02:47:45,366 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:47:45,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]
2021-03-12 02:47:45,454 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:45,455 [main:117] - GENERATED CALL = (A().prop).compareTo(A().prop).toString(-84317093)
2021-03-12 02:47:45,455 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59171b78]]
2021-03-12 02:47:45,455 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:47:45,540 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:45,618 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:45,619 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59171b78]
2021-03-12 02:47:45,697 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:45,789 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:45,790 [main:117] - GENERATED CALL = (A().prop).subSequence(973168497, -1100048969).substring(-478526082, -732589529)
2021-03-12 02:47:45,790 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fdae51]]
2021-03-12 02:47:45,790 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fdae51]
2021-03-12 02:47:45,881 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:47:45,882 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:47:45,882 [main:117] - GENERATED CALL = (A().prop).dropLastWhile({a: Char -> true})
2021-03-12 02:47:45,883 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9a4326]]
2021-03-12 02:47:45,883 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9a4326]
2021-03-12 02:47:45,965 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:46,046 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:46,047 [main:117] - GENERATED CALL = (A().prop).substringBefore('篨', "hfduu")
2021-03-12 02:47:46,047 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe6174b]]
2021-03-12 02:47:46,047 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe6174b]
2021-03-12 02:47:46,128 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:47:46,128 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:47:46,129 [main:117] - GENERATED CALL = (A().prop).filterNot({a: Char -> false})
2021-03-12 02:47:46,129 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c41a44d]]
2021-03-12 02:47:46,129 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c41a44d]
2021-03-12 02:47:46,222 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:47:46,227 [main:117] - GENERATED CALL = (A().prop).removeSuffix("uldfz")
2021-03-12 02:47:46,227 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d36f3fb]]
2021-03-12 02:47:46,227 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d36f3fb]
2021-03-12 02:47:46,227 [main:117] - GENERATED CALL = (A().prop).capitalize()
2021-03-12 02:47:46,227 [main:114] - replacement of "Facade should have only box method" of type String is (A().prop).capitalize()
2021-03-12 02:47:46,314 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:46,315 [main:66] - Compilation checking started
2021-03-12 02:47:46,669 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = "O"

private fun fu0() = "K"

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals(1, prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo(false).toString(1998911667)
}


2021-03-12 02:47:46,669 [main:107] - replacing ("O", String)
2021-03-12 02:47:46,669 [main:50] - replacing "O" String
2021-03-12 02:47:46,669 [main:54] - Getting value of type String
2021-03-12 02:47:46,758 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:46,758 [main:58] - GENERATED VALUE OF TYPE String = "rsoqd"
2021-03-12 02:47:46,758 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:46,848 [main:67] - randomType = Collection<A>
2021-03-12 02:47:46,848 [main:106] - GETTING String from String
2021-03-12 02:47:46,881 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]]
2021-03-12 02:47:46,881 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca]
2021-03-12 02:47:46,970 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:46,971 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]
2021-03-12 02:47:46,971 [main:117] - GENERATED CALL = (A().prop).get(2055233341).lowercase()
2021-03-12 02:47:46,971 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b96a8e9]]
2021-03-12 02:47:46,972 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca]
2021-03-12 02:47:47,076 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:47,077 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b96a8e9]
2021-03-12 02:47:47,078 [main:117] - GENERATED CALL = (A().prop).get(-1552665940).titlecase()
2021-03-12 02:47:47,078 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e65f778]]
2021-03-12 02:47:47,078 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca]
2021-03-12 02:47:47,169 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:47,169 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e65f778]
2021-03-12 02:47:47,170 [main:117] - GENERATED CALL = (A().prop).get(-61687136).uppercase()
2021-03-12 02:47:47,170 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79f9d0bc]]
2021-03-12 02:47:47,170 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79f9d0bc]
2021-03-12 02:47:47,248 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:47,327 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:47,328 [main:117] - GENERATED CALL = (A().prop).substringBeforeLast('ㅾ', "beiii")
2021-03-12 02:47:47,328 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb54425]]
2021-03-12 02:47:47,328 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb54425]
2021-03-12 02:47:47,408 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:47,409 [main:117] - GENERATED CALL = (A().prop).replaceIndentByMargin(A().prop, "hlevr")
2021-03-12 02:47:47,409 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fdde3bc]]
2021-03-12 02:47:47,410 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fdde3bc]
2021-03-12 02:47:47,410 [main:117] - GENERATED CALL = (A().prop).trim()
2021-03-12 02:47:47,410 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ef0f34f]]
2021-03-12 02:47:47,410 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ef0f34f]
2021-03-12 02:47:47,489 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:47:47,489 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:47:47,490 [main:117] - GENERATED CALL = (A().prop).filter({a: Char -> false})
2021-03-12 02:47:47,490 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59cd81de]]
2021-03-12 02:47:47,491 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59cd81de]
2021-03-12 02:47:47,491 [main:117] - GENERATED CALL = (A().prop).uppercase()
2021-03-12 02:47:47,491 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32202735]]
2021-03-12 02:47:47,491 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32202735]
2021-03-12 02:47:47,568 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:47,569 [main:117] - GENERATED CALL = (A().prop).drop(1186012704)
2021-03-12 02:47:47,569 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bfeb0f]]
2021-03-12 02:47:47,569 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bfeb0f]
2021-03-12 02:47:47,692 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:47,780 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:47,781 [main:117] - GENERATED CALL = (A().prop).replaceAfterLast('ൻ', "qxyzo", A().prop)
2021-03-12 02:47:47,781 [main:114] - replacement of "O" of type String is (A().prop).uppercase()
2021-03-12 02:47:47,863 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:47,864 [main:66] - Compilation checking started
2021-03-12 02:47:48,203 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = "K"

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals(1, prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo(false).toString(1998911667)
}


2021-03-12 02:47:48,204 [main:107] - replacing ("K", String)
2021-03-12 02:47:48,204 [main:50] - replacing "K" String
2021-03-12 02:47:48,204 [main:54] - Getting value of type String
2021-03-12 02:47:48,291 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:48,292 [main:58] - GENERATED VALUE OF TYPE String = "ikyor"
2021-03-12 02:47:48,292 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:48,390 [main:67] - randomType = Array<A>
2021-03-12 02:47:48,488 [main:302] - generating value of type = Array<A> false depth = 0
2021-03-12 02:47:48,576 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: A): Array<A> = TODO()
2021-03-12 02:47:48,579 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: A): Array<A> = TODO()
2021-03-12 02:47:48,681 [main:302] - generating value of type = A false depth = 3
2021-03-12 02:47:48,681 [main:112] - generating klass A text = class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}
2021-03-12 02:47:48,682 [main:95] - GENERATED = arrayOf<A>(A())
2021-03-12 02:47:48,702 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]
2021-03-12 02:47:48,797 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:48,798 [main:78] - Generated call from random type = (arrayOf<A>(A())).size.toString(-161629628)
2021-03-12 02:47:48,798 [main:106] - GETTING String from String
2021-03-12 02:47:48,839 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a5814b0]]
2021-03-12 02:47:48,840 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:47:48,918 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:49,000 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:49,001 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a5814b0]
2021-03-12 02:47:49,084 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:47:49,220 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:47:49,221 [main:117] - GENERATED CALL = (A().prop).subSequence(1750922248, 1827169629).commonSuffixWith("idxlw", false)
2021-03-12 02:47:49,221 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]]
2021-03-12 02:47:49,221 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]
2021-03-12 02:47:49,316 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:49,317 [main:117] - GENERATED CALL = (A().prop).prependIndent("tfnrj")
2021-03-12 02:47:49,317 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bd82725]]
2021-03-12 02:47:49,317 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bd82725]
2021-03-12 02:47:49,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:49,399 [main:117] - GENERATED CALL = (A().prop).dropLast(368472557)
2021-03-12 02:47:49,399 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38fdd33c]]
2021-03-12 02:47:49,399 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38fdd33c]
2021-03-12 02:47:49,399 [main:117] - GENERATED CALL = (A().prop).trimEnd()
2021-03-12 02:47:49,399 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c41a44d]]
2021-03-12 02:47:49,399 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c41a44d]
2021-03-12 02:47:49,480 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:47:49,485 [main:117] - GENERATED CALL = (A().prop).removeSuffix("fsvgo")
2021-03-12 02:47:49,485 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe6174b]]
2021-03-12 02:47:49,485 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fe6174b]
2021-03-12 02:47:49,564 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:47:49,564 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:47:49,565 [main:117] - GENERATED CALL = (A().prop).filterNot({a: Char -> false})
2021-03-12 02:47:49,565 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]]
2021-03-12 02:47:49,565 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca]
2021-03-12 02:47:49,643 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:49,644 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]
2021-03-12 02:47:49,644 [main:117] - GENERATED CALL = (A().prop).get(-297209712).lowercase()
2021-03-12 02:47:49,644 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fdde3bc]]
2021-03-12 02:47:49,644 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fdde3bc]
2021-03-12 02:47:49,644 [main:117] - GENERATED CALL = (A().prop).trim()
2021-03-12 02:47:49,644 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@182f15b4]]
2021-03-12 02:47:49,645 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@182f15b4]
2021-03-12 02:47:49,737 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:49,738 [main:117] - GENERATED CALL = (A().prop).replaceBefore('䕮', A().prop, A().prop)
2021-03-12 02:47:49,738 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bfeb0f]]
2021-03-12 02:47:49,738 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57bfeb0f]
2021-03-12 02:47:49,834 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:47:49,916 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:49,917 [main:117] - GENERATED CALL = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")
2021-03-12 02:47:49,917 [main:114] - replacement of "K" of type String is (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")
2021-03-12 02:47:49,996 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:49,997 [main:66] - Compilation checking started
2021-03-12 02:47:50,367 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals(1, prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo(false).toString(1998911667)
}


2021-03-12 02:47:50,367 [main:107] - replacing (1, Int)
2021-03-12 02:47:50,367 [main:50] - replacing 1 Int
2021-03-12 02:47:50,367 [main:54] - Getting value of type Int
2021-03-12 02:47:50,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:50,449 [main:58] - GENERATED VALUE OF TYPE Int = -35676766
2021-03-12 02:47:50,449 [main:61] - GENERATED IS CALL =false
2021-03-12 02:47:51,019 [main:67] - randomType = Triple<Map<Long, UInt>, Char, Double>
2021-03-12 02:47:51,103 [main:302] - generating value of type = Triple<Map<Long, UInt>, Char, Double> false depth = 0
2021-03-12 02:47:51,189 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Map<Long, UInt>, second: Char, third: Double): Triple<Map<Long, UInt>, Char, Double> = TODO()
2021-03-12 02:47:51,191 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Map<Long, UInt>, second: Char, third: Double): Triple<Map<Long, UInt>, Char, Double> = TODO()
2021-03-12 02:47:51,282 [main:302] - generating value of type = Map<Long, UInt> false depth = 3
2021-03-12 02:47:51,392 [main:43] - GENERATING CALL OF fun <K, V> buildMap(capacity: kotlin.Int, builderAction: kotlin.collections.MutableMap<Long, UInt>.()->kotlin.Unit): Map<Long, UInt> = TODO()
2021-03-12 02:47:51,394 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> buildMap(capacity: kotlin.Int, builderAction: kotlin.collections.MutableMap<Long, UInt>.()->kotlin.Unit): Map<Long, UInt> = TODO()
2021-03-12 02:47:51,689 [main:302] - generating value of type = Int true depth = 6
2021-03-12 02:47:51,689 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableMap<Long, UInt>, Unit> false depth = 6
2021-03-12 02:47:51,690 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 02:47:51,788 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 02:47:51,790 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 02:47:52,096 [main:302] - generating value of type = Boolean true depth = 10
2021-03-12 02:47:52,096 [main:302] - generating value of type = Function0<Any> false depth = 10
2021-03-12 02:47:52,098 [main:302] - generating value of type = Any false depth = 11
2021-03-12 02:47:52,098 [main:95] - GENERATED = require(false, { "djbpf"})
2021-03-12 02:47:52,099 [main:95] - GENERATED = buildMap<Long, UInt>(-1328918328, { require(false, { "djbpf"})})
2021-03-12 02:47:52,099 [main:302] - generating value of type = Char true depth = 3
2021-03-12 02:47:52,099 [main:302] - generating value of type = Double true depth = 3
2021-03-12 02:47:52,100 [main:95] - GENERATED = Triple<Map<Long, UInt>, Char, Double>(buildMap<Long, UInt>(-1328918328, { require(false, { "djbpf"})}), '학', 0.9356234125307252)
2021-03-12 02:47:52,132 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1dfac43a]
2021-03-12 02:47:52,134 [main:78] - Generated call from random type = (Triple<Map<Long, UInt>, Char, Double>(buildMap<Long, UInt>(-1328918328, { require(false, { "djbpf"})}), '학', 0.9356234125307252)).third.roundToInt()
2021-03-12 02:47:52,135 [main:106] - GETTING Int from String
2021-03-12 02:47:52,179 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8235997], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5925f653]]
2021-03-12 02:47:52,179 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5925f653]
2021-03-12 02:47:52,180 [main:117] - GENERATED CALL = (A().prop).length.dec()
2021-03-12 02:47:52,180 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d9edbad]]
2021-03-12 02:47:52,180 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:47:52,180 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d9edbad]
2021-03-12 02:47:52,181 [main:117] - GENERATED CALL = (A().prop).compareTo(A().prop).inv()
2021-03-12 02:47:52,181 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3128baef]]
2021-03-12 02:47:52,181 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:47:52,282 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:52,283 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3128baef]
2021-03-12 02:47:52,283 [main:117] - GENERATED CALL = (A().prop).compareTo("ejyub").unaryMinus()
2021-03-12 02:47:52,283 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8235997], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c7045f5]]
2021-03-12 02:47:52,283 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c7045f5]
2021-03-12 02:47:52,366 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:52,367 [main:117] - GENERATED CALL = (A().prop).length.ushr(1330895929)
2021-03-12 02:47:52,367 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@29cb45df]]
2021-03-12 02:47:52,367 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:47:52,446 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:52,447 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@29cb45df]
2021-03-12 02:47:52,528 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:52,529 [main:117] - GENERATED CALL = (A().prop).compareTo("cejyd").shr(1828081797)
2021-03-12 02:47:52,529 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc74629]]
2021-03-12 02:47:52,529 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:47:52,608 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:52,687 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:52,688 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc74629]
2021-03-12 02:47:52,783 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 02:47:52,784 [main:302] - generating value of type = Int true depth = 1
2021-03-12 02:47:52,785 [main:117] - GENERATED CALL = (A().prop).subSequence(-1604484786, 924541336).sumBy({a: Char -> -730137336})
2021-03-12 02:47:52,785 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c7045f5]]
2021-03-12 02:47:52,785 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:47:52,785 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c7045f5]
2021-03-12 02:47:52,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:52,873 [main:117] - GENERATED CALL = (A().prop).compareTo(A().prop).ushr(1195327874)
2021-03-12 02:47:52,874 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f3f734f]]
2021-03-12 02:47:52,874 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:47:52,955 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:47:52,956 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f3f734f]
2021-03-12 02:47:52,956 [main:117] - GENERATED CALL = (A().prop).compareTo("dtznl").takeLowestOneBit()
2021-03-12 02:47:52,956 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2de0349a]]
2021-03-12 02:47:52,956 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:47:53,033 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:53,112 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:47:53,112 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2de0349a]
2021-03-12 02:47:53,113 [main:117] - GENERATED CALL = (A().prop).subSequence(647231771, -1723738580).count()
2021-03-12 02:47:53,113 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8235997], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d9edbad]]
2021-03-12 02:47:53,113 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d9edbad]
2021-03-12 02:47:53,113 [main:117] - GENERATED CALL = (A().prop).length.inv()
2021-03-12 02:47:53,113 [main:114] - replacement of 1 of type Int is (A().prop).length.dec()
2021-03-12 02:47:53,192 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:47:53,192 [main:66] - Compilation checking started
2021-03-12 02:47:53,559 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo(false).toString(1998911667)
}


2021-03-12 02:47:53,647 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 02:47:53,736 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 02:47:53,736 [main:66] - Compilation checking started
2021-03-12 02:47:54,117 [main:141] - TRYING TO REPLACE CONSTANT 1998911667
2021-03-12 02:47:54,194 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 02:47:54,195 [main:66] - Compilation checking started
2021-03-12 02:47:54,501 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo(false).toString(2090660471)
}


2021-03-12 02:47:54,501 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 02:47:54,578 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 02:47:54,578 [main:66] - Compilation checking started
2021-03-12 02:47:54,904 [main:53] - Result = true
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}


2021-03-12 02:47:54,904 [main:141] - TRYING TO REPLACE CONSTANT 2090660471
2021-03-12 02:47:54,982 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 02:47:54,982 [main:66] - Compilation checking started
2021-03-12 02:47:55,314 [main:141] - TRYING TO REPLACE CONSTANT 223096171
2021-03-12 02:47:55,397 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 02:47:55,397 [main:66] - Compilation checking started
2021-03-12 02:47:55,634 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, length), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}


2021-03-12 02:47:55,634 [main:141] - TRYING TO REPLACE CONSTANT '䓽'
2021-03-12 02:47:55,737 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 02:47:55,738 [main:66] - Compilation checking started
2021-03-12 02:47:56,099 [main:41] - AFTER TRY 1 res = 
import kotlin.test.assertEquals
class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}


2021-03-12 02:47:56,261 [main:112] - generating klass A text = class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}
2021-03-12 02:47:56,442 [main:43] - Try №1
2021-03-12 02:48:13,354 [main:48] - Already checked
2021-03-12 02:48:13,601 [main:48] - Already checked
2021-03-12 02:48:19,959 [main:69] - Trying to insert abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
2021-03-12 02:48:20,061 [main:66] - Compilation checking started
2021-03-12 02:48:21,317 [main:103] - Trying to change 248 nodes
2021-03-12 02:48:21,317 [main:107] - replacing (prope7, Kla0)
2021-03-12 02:48:21,318 [main:50] - replacing prope7 Kla0
2021-03-12 02:48:21,318 [main:54] - Getting value of type Kla0
2021-03-12 02:48:21,512 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 02:48:21,515 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}
2021-03-12 02:48:21,515 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 02:48:21,515 [main:61] - GENERATED IS CALL =true
2021-03-12 02:48:21,719 [main:67] - randomType = ULong
2021-03-12 02:48:21,891 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 02:48:21,948 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:21,976 [main:106] - GETTING Kla0 from Int
2021-03-12 02:48:22,025 [main:106] - GETTING Kla0 from A
2021-03-12 02:48:22,035 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:22,036 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:22,037 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:22,038 [main:106] - GETTING Kla0 from Boolean
2021-03-12 02:48:22,051 [main:106] - GETTING Kla0 from Int
2021-03-12 02:48:22,051 [main:114] - replacement of prope7 of type Kla0 is Kla0()
2021-03-12 02:48:22,224 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:48:22,225 [main:66] - Compilation checking started
2021-03-12 02:48:22,727 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            Kla0().prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:22,731 [main:107] - replacing (data, Ty1)
2021-03-12 02:48:22,731 [main:50] - replacing data Ty1
2021-03-12 02:48:22,732 [main:54] - Getting value of type Ty1
2021-03-12 02:48:22,905 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 02:48:22,912 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 02:48:23,125 [main:67] - randomType = Kla7?
2021-03-12 02:48:23,292 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 02:48:23,296 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 02:48:23,307 [main:106] - GETTING Ty1 from String
2021-03-12 02:48:23,334 [main:106] - GETTING Ty1 from String
2021-03-12 02:48:23,335 [main:106] - GETTING Ty1 from A
2021-03-12 02:48:23,344 [main:106] - GETTING Ty1 from Int
2021-03-12 02:48:23,390 [main:106] - GETTING Ty1 from Boolean
2021-03-12 02:48:23,402 [main:106] - GETTING Ty1 from String
2021-03-12 02:48:23,403 [main:106] - GETTING Ty1 from String
2021-03-12 02:48:23,404 [main:106] - GETTING Ty1 from Int
2021-03-12 02:48:23,404 [main:111] - Cant find and generate replacement for data type Ty1
2021-03-12 02:48:23,404 [main:107] - replacing ({
        prope8.getOrThrow()
    }, Any?)
2021-03-12 02:48:23,404 [main:50] - replacing {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    } Any?
2021-03-12 02:48:23,405 [main:54] - Getting value of type Any?
2021-03-12 02:48:23,576 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:48:23,576 [main:58] - GENERATED VALUE OF TYPE Any? = "fjuwx"
2021-03-12 02:48:23,576 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:23,589 [main:67] - randomType = Kla0
2021-03-12 02:48:23,761 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 02:48:23,764 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}
2021-03-12 02:48:23,781 [main:106] - GETTING Any? from Boolean
2021-03-12 02:48:23,794 [main:106] - GETTING Any? from String
2021-03-12 02:48:23,838 [main:106] - GETTING Any? from A
2021-03-12 02:48:23,847 [main:106] - GETTING Any? from String
2021-03-12 02:48:23,848 [main:106] - GETTING Any? from Int
2021-03-12 02:48:23,893 [main:106] - GETTING Any? from Int
2021-03-12 02:48:23,895 [main:106] - GETTING Any? from String
2021-03-12 02:48:23,896 [main:106] - GETTING Any? from String
2021-03-12 02:48:23,896 [main:114] - replacement of {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    } of type Any? is "fjuwx"
2021-03-12 02:48:24,064 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 02:48:24,064 [main:66] - Compilation checking started
2021-03-12 02:48:24,070 [main:71] - Wrong syntax or breaks conditions
2021-03-12 02:48:24,071 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) "fjuwx"
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:24,074 [main:107] - replacing ("OK", String)
2021-03-12 02:48:24,075 [main:50] - replacing "OK" String
2021-03-12 02:48:24,075 [main:54] - Getting value of type String
2021-03-12 02:48:24,241 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:48:24,244 [main:58] - GENERATED VALUE OF TYPE String = "inids"
2021-03-12 02:48:24,244 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:24,829 [main:67] - randomType = List<UByte>
2021-03-12 02:48:24,830 [main:106] - GETTING String from Int
2021-03-12 02:48:24,883 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e16e6c3], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36728835]]
2021-03-12 02:48:24,883 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e16e6c3]
2021-03-12 02:48:24,884 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36728835]
2021-03-12 02:48:24,884 [main:117] - GENERATED CALL = ((false).compareTo((false))).toByte().toString((A().prop).length)
2021-03-12 02:48:24,884 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26feae9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c7892cf]]
2021-03-12 02:48:24,884 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26feae9d]
2021-03-12 02:48:24,884 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c7892cf]
2021-03-12 02:48:24,884 [main:117] - GENERATED CALL = ((false).compareTo((false))).toShort().toString((A().prop).length)
2021-03-12 02:48:24,884 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]]
2021-03-12 02:48:24,885 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c]
2021-03-12 02:48:24,885 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]
2021-03-12 02:48:25,044 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:25,048 [main:117] - GENERATED CALL = ((false).compareTo((false))).toInt().toString(1752535824)
2021-03-12 02:48:25,048 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c0e1290], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e65f778]]
2021-03-12 02:48:25,048 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c0e1290]
2021-03-12 02:48:25,048 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e65f778]
2021-03-12 02:48:25,048 [main:117] - GENERATED CALL = ((false).compareTo((false))).toChar().uppercase()
2021-03-12 02:48:25,048 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e0fbc9], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@505fb215]]
2021-03-12 02:48:25,048 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e0fbc9]
2021-03-12 02:48:25,049 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@505fb215]
2021-03-12 02:48:25,049 [main:117] - GENERATED CALL = ((false).compareTo((false))).toLong().toString((false).compareTo((false)))
2021-03-12 02:48:25,049 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dfb23a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@505fb215]]
2021-03-12 02:48:25,049 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dfb23a6]
2021-03-12 02:48:25,260 [main:302] - generating value of type = Long true depth = 0
2021-03-12 02:48:25,264 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@505fb215]
2021-03-12 02:48:25,264 [main:117] - GENERATED CALL = ((false).compareTo((false))).div(-4223216512643308265).toString((false).compareTo((false)))
2021-03-12 02:48:25,264 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c0e1290], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]]
2021-03-12 02:48:25,264 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c0e1290]
2021-03-12 02:48:25,264 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]
2021-03-12 02:48:25,265 [main:117] - GENERATED CALL = ((false).compareTo((false))).toChar().lowercase()
2021-03-12 02:48:25,265 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]]
2021-03-12 02:48:25,265 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]
2021-03-12 02:48:25,439 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:25,444 [main:117] - GENERATED CALL = ((false).compareTo((false))).toString(351434850)
2021-03-12 02:48:25,444 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c0e1290], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b96a8e9]]
2021-03-12 02:48:25,444 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c0e1290]
2021-03-12 02:48:25,444 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b96a8e9]
2021-03-12 02:48:25,444 [main:117] - GENERATED CALL = ((false).compareTo((false))).toChar().titlecase()
2021-03-12 02:48:25,445 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]]
2021-03-12 02:48:25,445 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640]
2021-03-12 02:48:25,445 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]
2021-03-12 02:48:25,445 [main:117] - GENERATED CALL = ((false).compareTo((false))).compareTo((A().prop).length).toString((false).compareTo((false)))
2021-03-12 02:48:25,445 [main:114] - replacement of "OK" of type String is ((false).compareTo((false))).toShort().toString((A().prop).length)
2021-03-12 02:48:25,611 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:48:25,611 [main:66] - Compilation checking started
2021-03-12 02:48:26,096 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5(((false).compareTo((false))).toShort().toString((A().prop).length))
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:26,100 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 02:48:26,101 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 02:48:26,101 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 02:48:26,284 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 02:48:26,287 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:48:26,291 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 02:48:26,291 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:26,304 [main:67] - randomType = Kla6
2021-03-12 02:48:26,472 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 02:48:26,475 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}
2021-03-12 02:48:26,482 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 02:48:26,529 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 02:48:26,544 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 02:48:26,641 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 02:48:26,643 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 02:48:26,644 [main:106] - GETTING Function0<Boolean> from A
2021-03-12 02:48:26,654 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 02:48:26,655 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 02:48:26,656 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-12 02:48:26,819 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 02:48:26,819 [main:66] - Compilation checking started
2021-03-12 02:48:27,297 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:27,303 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 02:48:27,304 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 02:48:27,304 [main:54] - Getting value of type IntRange
2021-03-12 02:48:27,486 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 02:48:27,656 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 02:48:27,661 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 02:48:28,222 [main:302] - generating value of type = Int true depth = 3
2021-03-12 02:48:28,228 [main:302] - generating value of type = Int true depth = 3
2021-03-12 02:48:28,234 [main:95] - GENERATED = IntRange(-1362787329, -219619069)
2021-03-12 02:48:28,234 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-1362787329, -219619069)
2021-03-12 02:48:28,234 [main:61] - GENERATED IS CALL =true
2021-03-12 02:48:28,427 [main:67] - randomType = Short
2021-03-12 02:48:28,595 [main:302] - generating value of type = Short true depth = 0
2021-03-12 02:48:28,628 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5f133735]
2021-03-12 02:48:28,790 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:28,794 [main:78] - Generated call from random type = (29663).rangeTo(-22)
2021-03-12 02:48:28,795 [main:106] - GETTING IntRange from Int
2021-03-12 02:48:28,841 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1aea51fe]]
2021-03-12 02:48:28,841 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c]
2021-03-12 02:48:28,842 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1aea51fe]
2021-03-12 02:48:29,005 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:29,009 [main:117] - GENERATED CALL = ((false).compareTo((false))).toInt().rangeTo(72)
2021-03-12 02:48:29,009 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26feae9d], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5f133735]]
2021-03-12 02:48:29,009 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26feae9d]
2021-03-12 02:48:29,010 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5f133735]
2021-03-12 02:48:29,168 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:29,171 [main:117] - GENERATED CALL = ((false).compareTo((false))).toShort().rangeTo(26)
2021-03-12 02:48:29,171 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e16e6c3], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@22f9d577]]
2021-03-12 02:48:29,171 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e16e6c3]
2021-03-12 02:48:29,171 [main:149] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@22f9d577]
2021-03-12 02:48:29,332 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:29,336 [main:117] - GENERATED CALL = ((false).compareTo((false))).toByte().until(-48)
2021-03-12 02:48:29,336 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2f900d97]]
2021-03-12 02:48:29,336 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640]
2021-03-12 02:48:29,510 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:29,513 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2f900d97]
2021-03-12 02:48:29,679 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:29,683 [main:117] - GENERATED CALL = ((false).compareTo((false))).compareTo(679157754).until(126)
2021-03-12 02:48:29,683 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26feae9d], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@717a02a2]]
2021-03-12 02:48:29,683 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26feae9d]
2021-03-12 02:48:29,683 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@717a02a2]
2021-03-12 02:48:29,855 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:29,859 [main:117] - GENERATED CALL = ((false).compareTo((false))).toShort().until(105)
2021-03-12 02:48:29,859 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2f900d97]]
2021-03-12 02:48:29,859 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c]
2021-03-12 02:48:29,860 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2f900d97]
2021-03-12 02:48:30,015 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:30,019 [main:117] - GENERATED CALL = ((false).compareTo((false))).toInt().until(45)
2021-03-12 02:48:30,019 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1aea51fe]]
2021-03-12 02:48:30,019 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640]
2021-03-12 02:48:30,195 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:30,199 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1aea51fe]
2021-03-12 02:48:30,369 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:30,373 [main:117] - GENERATED CALL = ((false).compareTo((false))).compareTo(-2029903526).rangeTo(-25)
2021-03-12 02:48:30,373 [main:113] - Case = [public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2f900d97]]
2021-03-12 02:48:30,373 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2f900d97]
2021-03-12 02:48:30,537 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:30,541 [main:117] - GENERATED CALL = ((false).compareTo((false))).until(81)
2021-03-12 02:48:30,541 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1aea51fe]]
2021-03-12 02:48:30,541 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1aea51fe]
2021-03-12 02:48:30,760 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:30,764 [main:117] - GENERATED CALL = ((false).compareTo((false))).rangeTo(74)
2021-03-12 02:48:30,764 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e16e6c3], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4a4840a1]]
2021-03-12 02:48:30,765 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e16e6c3]
2021-03-12 02:48:30,765 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4a4840a1]
2021-03-12 02:48:30,929 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:30,933 [main:117] - GENERATED CALL = ((false).compareTo((false))).toByte().rangeTo(-100)
2021-03-12 02:48:30,933 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is ((false).compareTo((false))).rangeTo(74)
2021-03-12 02:48:31,094 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:48:31,094 [main:66] - Compilation checking started
2021-03-12 02:48:31,568 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in ((false).compareTo((false))).rangeTo(74)) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:31,571 [main:107] - replacing (prope7, Kla0)
2021-03-12 02:48:31,571 [main:50] - replacing prope7 Kla0
2021-03-12 02:48:31,571 [main:54] - Getting value of type Kla0
2021-03-12 02:48:31,730 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 02:48:31,733 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}
2021-03-12 02:48:31,733 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 02:48:31,733 [main:61] - GENERATED IS CALL =true
2021-03-12 02:48:31,941 [main:67] - randomType = Short
2021-03-12 02:48:32,115 [main:302] - generating value of type = Short true depth = 0
2021-03-12 02:48:32,171 [main:106] - GETTING Kla0 from A
2021-03-12 02:48:32,181 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:32,210 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:32,210 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:32,211 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:32,212 [main:106] - GETTING Kla0 from Int
2021-03-12 02:48:32,266 [main:106] - GETTING Kla0 from Int
2021-03-12 02:48:32,267 [main:106] - GETTING Kla0 from Boolean
2021-03-12 02:48:32,280 [main:114] - replacement of prope7 of type Kla0 is Kla0()
2021-03-12 02:48:32,441 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:48:32,442 [main:66] - Compilation checking started
2021-03-12 02:48:32,893 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = Kla0().prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:32,905 [main:107] - replacing (Kla6(), Kla6)
2021-03-12 02:48:32,905 [main:50] - replacing Kla6() Kla6
2021-03-12 02:48:32,906 [main:54] - Getting value of type Kla6
2021-03-12 02:48:33,061 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 02:48:33,064 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}
2021-03-12 02:48:33,065 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-12 02:48:33,065 [main:61] - GENERATED IS CALL =true
2021-03-12 02:48:33,241 [main:67] - randomType = Byte
2021-03-12 02:48:33,394 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:33,433 [main:106] - GETTING Kla6 from String
2021-03-12 02:48:33,449 [main:106] - GETTING Kla6 from String
2021-03-12 02:48:33,450 [main:106] - GETTING Kla6 from String
2021-03-12 02:48:33,450 [main:106] - GETTING Kla6 from String
2021-03-12 02:48:33,451 [main:106] - GETTING Kla6 from A
2021-03-12 02:48:33,457 [main:106] - GETTING Kla6 from Boolean
2021-03-12 02:48:33,464 [main:106] - GETTING Kla6 from Int
2021-03-12 02:48:33,495 [main:106] - GETTING Kla6 from Int
2021-03-12 02:48:33,496 [main:114] - replacement of Kla6() of type Kla6 is Kla6()
2021-03-12 02:48:33,654 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:48:33,657 [main:107] - replacing ({
            continuation.resume(value)
        }, Function0<Unit>)
2021-03-12 02:48:33,657 [main:50] - replacing {
            continuation.resume(value)
        } Function0<Unit>
2021-03-12 02:48:33,657 [main:54] - Getting value of type Function0<Unit>
2021-03-12 02:48:33,820 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 02:48:33,824 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 02:48:34,017 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 02:48:34,023 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 02:48:34,379 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 02:48:34,383 [main:95] - GENERATED = check(false)
2021-03-12 02:48:34,383 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 02:48:34,383 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:34,390 [main:67] - randomType = Int
2021-03-12 02:48:34,546 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:34,588 [main:106] - GETTING Function0<Unit> from String
2021-03-12 02:48:34,605 [main:106] - GETTING Function0<Unit> from String
2021-03-12 02:48:34,606 [main:106] - GETTING Function0<Unit> from A
2021-03-12 02:48:34,612 [main:106] - GETTING Function0<Unit> from String
2021-03-12 02:48:34,613 [main:106] - GETTING Function0<Unit> from String
2021-03-12 02:48:34,614 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 02:48:34,623 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 02:48:34,652 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 02:48:34,653 [main:114] - replacement of {
            continuation.resume(value)
        } of type Function0<Unit> is { check(false)}
2021-03-12 02:48:34,806 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 02:48:34,806 [main:66] - Compilation checking started
2021-03-12 02:48:35,268 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = { check(false)}
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:35,272 [main:107] - replacing (prope14, Continuation<Unit>)
2021-03-12 02:48:35,272 [main:50] - replacing prope14 Continuation<Unit>
2021-03-12 02:48:35,272 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 02:48:35,443 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 02:48:35,621 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 02:48:35,626 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 02:48:36,217 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 02:48:36,382 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:36,387 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:36,752 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 02:48:36,921 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:36,925 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:37,521 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 02:48:37,695 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 02:48:37,699 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 02:48:38,256 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 02:48:38,256 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:38,258 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:38,258 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 02:48:38,258 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 02:48:38,667 [main:67] - randomType = MutableMap<Boolean?, A>
2021-03-12 02:48:38,669 [main:106] - GETTING Continuation<Unit> from A
2021-03-12 02:48:38,679 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 02:48:38,734 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 02:48:38,760 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 02:48:38,761 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 02:48:38,762 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 02:48:38,762 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 02:48:38,763 [main:106] - GETTING Continuation<Unit> from Boolean
2021-03-12 02:48:38,772 [main:111] - Cant find and generate replacement for prope14 type Continuation<Unit>
2021-03-12 02:48:38,772 [main:107] - replacing (prope7, Kla0)
2021-03-12 02:48:38,772 [main:50] - replacing prope7 Kla0
2021-03-12 02:48:38,772 [main:54] - Getting value of type Kla0
2021-03-12 02:48:38,926 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 02:48:38,930 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}
2021-03-12 02:48:38,930 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 02:48:38,930 [main:61] - GENERATED IS CALL =true
2021-03-12 02:48:38,937 [main:67] - randomType = Char
2021-03-12 02:48:39,093 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:48:39,120 [main:106] - GETTING Kla0 from A
2021-03-12 02:48:39,126 [main:106] - GETTING Kla0 from Boolean
2021-03-12 02:48:39,136 [main:106] - GETTING Kla0 from Int
2021-03-12 02:48:39,173 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:39,190 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:39,191 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:39,192 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:39,192 [main:106] - GETTING Kla0 from Int
2021-03-12 02:48:39,192 [main:114] - replacement of prope7 of type Kla0 is Kla0()
2021-03-12 02:48:39,348 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:48:39,348 [main:66] - Compilation checking started
2021-03-12 02:48:39,801 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        Kla0().prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:39,804 [main:107] - replacing (prope3, Kla7)
2021-03-12 02:48:39,804 [main:50] - replacing prope3 Kla7
2021-03-12 02:48:39,804 [main:54] - Getting value of type Kla7
2021-03-12 02:48:39,965 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 02:48:39,969 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 02:48:39,969 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 02:48:39,969 [main:61] - GENERATED IS CALL =true
2021-03-12 02:48:40,697 [main:67] - randomType = Function2<Kla7, UByte?, Double>
2021-03-12 02:48:40,698 [main:106] - GETTING Kla7 from Int
2021-03-12 02:48:40,735 [main:106] - GETTING Kla7 from String
2021-03-12 02:48:40,759 [main:106] - GETTING Kla7 from String
2021-03-12 02:48:40,759 [main:106] - GETTING Kla7 from Int
2021-03-12 02:48:40,760 [main:106] - GETTING Kla7 from String
2021-03-12 02:48:40,760 [main:106] - GETTING Kla7 from String
2021-03-12 02:48:40,761 [main:106] - GETTING Kla7 from Boolean
2021-03-12 02:48:40,773 [main:106] - GETTING Kla7 from A
2021-03-12 02:48:40,781 [main:114] - replacement of prope3 of type Kla7 is Kla7()
2021-03-12 02:48:40,933 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:48:40,933 [main:66] - Compilation checking started
2021-03-12 02:48:41,427 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            Kla7().prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:41,430 [main:107] - replacing ({
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-12 02:48:41,430 [main:50] - replacing {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-12 02:48:41,430 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-12 02:48:41,585 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-12 02:48:41,589 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 02:48:41,753 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 02:48:41,758 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 02:48:42,298 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 02:48:42,302 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 02:48:42,305 [main:302] - generating value of type = Any false depth = 5
2021-03-12 02:48:42,306 [main:95] - GENERATED = require(true, { "adhfi"})
2021-03-12 02:48:42,306 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> require(true, { "adhfi"})}
2021-03-12 02:48:42,306 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:42,320 [main:67] - randomType = Kla3
2021-03-12 02:48:42,473 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 02:48:42,476 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}
2021-03-12 02:48:42,644 [main:194] - Type params = []
2021-03-12 02:48:42,799 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 02:48:42,961 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:42,966 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:43,325 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 02:48:43,499 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:43,503 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:44,114 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:44,115 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:44,139 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-12 02:48:44,173 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Int
2021-03-12 02:48:44,226 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-12 02:48:44,230 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-12 02:48:44,233 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Boolean
2021-03-12 02:48:44,249 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Int
2021-03-12 02:48:44,253 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from A
2021-03-12 02:48:44,265 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-12 02:48:44,265 [main:114] - replacement of {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> require(true, { "adhfi"})}
2021-03-12 02:48:44,414 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 02:48:44,414 [main:66] - Compilation checking started
2021-03-12 02:48:44,885 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {a: Kla0 -> require(true, { "adhfi"})}
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:44,888 [main:107] - replacing (prope8.getOrThrow(), Ty0)
2021-03-12 02:48:44,888 [main:50] - replacing prope8.getOrThrow() Ty0
2021-03-12 02:48:44,889 [main:54] - Getting value of type Ty0
2021-03-12 02:48:45,045 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 02:48:45,051 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 02:48:45,237 [main:67] - randomType = Kla3?
2021-03-12 02:48:45,403 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 02:48:45,406 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}
2021-03-12 02:48:45,559 [main:194] - Type params = []
2021-03-12 02:48:45,710 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 02:48:45,867 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:45,871 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:46,234 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 02:48:46,395 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:46,400 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:46,946 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:48:46,946 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:48:46,963 [main:106] - GETTING Ty0 from String
2021-03-12 02:48:46,986 [main:106] - GETTING Ty0 from A
2021-03-12 02:48:46,994 [main:106] - GETTING Ty0 from String
2021-03-12 02:48:46,995 [main:106] - GETTING Ty0 from Int
2021-03-12 02:48:47,041 [main:106] - GETTING Ty0 from Int
2021-03-12 02:48:47,042 [main:106] - GETTING Ty0 from String
2021-03-12 02:48:47,043 [main:106] - GETTING Ty0 from Boolean
2021-03-12 02:48:47,055 [main:106] - GETTING Ty0 from String
2021-03-12 02:48:47,056 [main:111] - Cant find and generate replacement for prope8.getOrThrow() type Ty0
2021-03-12 02:48:47,056 [main:107] - replacing (1, Int)
2021-03-12 02:48:47,056 [main:50] - replacing 1 Int
2021-03-12 02:48:47,056 [main:54] - Getting value of type Int
2021-03-12 02:48:47,209 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:47,213 [main:58] - GENERATED VALUE OF TYPE Int = 1202275016
2021-03-12 02:48:47,213 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:47,226 [main:67] - randomType = Kla4
2021-03-12 02:48:47,379 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 02:48:47,382 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}
2021-03-12 02:48:47,396 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@36230674]
2021-03-12 02:48:47,547 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:48:47,547 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7f0bc723]
2021-03-12 02:48:47,705 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:48:47,708 [main:78] - Generated call from random type = (Kla4()).equals("mopir").compareTo(false)
2021-03-12 02:48:47,709 [main:106] - GETTING Int from Int
2021-03-12 02:48:47,744 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c293dea]]
2021-03-12 02:48:47,744 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c]
2021-03-12 02:48:47,744 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c293dea]
2021-03-12 02:48:47,897 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:47,900 [main:117] - GENERATED CALL = ((A().prop).length).toInt().minus(76)
2021-03-12 02:48:47,901 [main:113] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3128baef]]
2021-03-12 02:48:47,901 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3128baef]
2021-03-12 02:48:47,901 [main:117] - GENERATED CALL = ((A().prop).length).unaryMinus()
2021-03-12 02:48:47,901 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bbe9eb4]]
2021-03-12 02:48:47,901 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bbe9eb4]
2021-03-12 02:48:47,901 [main:117] - GENERATED CALL = ((A().prop).length).inc()
2021-03-12 02:48:47,901 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@38d7e9ec], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]]
2021-03-12 02:48:47,901 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@38d7e9ec]
2021-03-12 02:48:47,901 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]
2021-03-12 02:48:47,902 [main:117] - GENERATED CALL = ((A().prop).length).toFloat().toRawBits()
2021-03-12 02:48:47,902 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@586c03c4]]
2021-03-12 02:48:47,902 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640]
2021-03-12 02:48:47,902 [main:117] - GENERATED CALL = ((A().prop).length).compareTo((A().prop).length).absoluteValue
2021-03-12 02:48:47,902 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@45870d00]]
2021-03-12 02:48:47,902 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c]
2021-03-12 02:48:47,902 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@45870d00]
2021-03-12 02:48:47,902 [main:117] - GENERATED CALL = ((A().prop).length).toInt().coerceAtLeast((false).compareTo((false)))
2021-03-12 02:48:47,902 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37c3aee0]]
2021-03-12 02:48:47,903 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37c3aee0]
2021-03-12 02:48:48,065 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:48,069 [main:117] - GENERATED CALL = ((A().prop).length).coerceIn((A().prop).length, -1897429315)
2021-03-12 02:48:48,069 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d80cec3], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1dfac43a]]
2021-03-12 02:48:48,069 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d80cec3]
2021-03-12 02:48:48,221 [main:302] - generating value of type = Double true depth = 0
2021-03-12 02:48:48,225 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1dfac43a]
2021-03-12 02:48:48,225 [main:117] - GENERATED CALL = ((A().prop).length).div(0.8320052273764748).roundToInt()
2021-03-12 02:48:48,225 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5925f653]]
2021-03-12 02:48:48,225 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b14192c]
2021-03-12 02:48:48,225 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5925f653]
2021-03-12 02:48:48,226 [main:117] - GENERATED CALL = ((A().prop).length).toInt().dec()
2021-03-12 02:48:48,226 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d9edbad]]
2021-03-12 02:48:48,226 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6dcb0640]
2021-03-12 02:48:48,226 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d9edbad]
2021-03-12 02:48:48,226 [main:117] - GENERATED CALL = ((A().prop).length).compareTo((false).compareTo((false))).inv()
2021-03-12 02:48:48,226 [main:114] - replacement of 1 of type Int is ((A().prop).length).toInt().dec()
2021-03-12 02:48:48,384 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:48:48,385 [main:66] - Compilation checking started
2021-03-12 02:48:48,855 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in ((A().prop).length).toInt().dec()..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:48,858 [main:107] - replacing (!dispatcher.fu6(value, continuation), Boolean)
2021-03-12 02:48:48,858 [main:50] - replacing !dispatcher.fu6(value, continuation) Boolean
2021-03-12 02:48:48,859 [main:54] - Getting value of type Boolean
2021-03-12 02:48:49,014 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:48:49,018 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 02:48:49,018 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:49,199 [main:67] - randomType = UShort
2021-03-12 02:48:49,350 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 02:48:49,380 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@17029431]
2021-03-12 02:48:49,380 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@b2dc176]
2021-03-12 02:48:49,533 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:48:49,533 [main:78] - Generated call from random type = (28695.toUShort()).toShort().equals("oenaw")
2021-03-12 02:48:49,534 [main:106] - GETTING Boolean from String
2021-03-12 02:48:49,561 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9580c3]]
2021-03-12 02:48:49,561 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:48:49,718 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:49,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:49,888 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9580c3]
2021-03-12 02:48:49,888 [main:117] - GENERATED CALL = (fu0()).subSequence(-1569080341, 1585528468).isEmpty()
2021-03-12 02:48:49,888 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9580c3]]
2021-03-12 02:48:49,888 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9580c3]
2021-03-12 02:48:49,888 [main:117] - GENERATED CALL = (fu0()).isEmpty()
2021-03-12 02:48:49,888 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@495b3de0]]
2021-03-12 02:48:49,888 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@495b3de0]
2021-03-12 02:48:50,046 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:48:50,046 [main:117] - GENERATED CALL = (fu0()).equals("onoop")
2021-03-12 02:48:50,046 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24b1c780]]
2021-03-12 02:48:50,046 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24b1c780]
2021-03-12 02:48:50,047 [main:117] - GENERATED CALL = (fu0()).isNotEmpty()
2021-03-12 02:48:50,047 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49df5f7c]]
2021-03-12 02:48:50,047 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:48:50,047 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49df5f7c]
2021-03-12 02:48:50,204 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:48:50,208 [main:117] - GENERATED CALL = (fu0()).subSequence((A().prop).length, (false).compareTo((false))).endsWith('⨧', (false))
2021-03-12 02:48:50,208 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302eb20]]
2021-03-12 02:48:50,208 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@302eb20]
2021-03-12 02:48:50,208 [main:117] - GENERATED CALL = (fu0()).toBoolean()
2021-03-12 02:48:50,208 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511df995]]
2021-03-12 02:48:50,208 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca]
2021-03-12 02:48:50,209 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@511df995]
2021-03-12 02:48:50,209 [main:117] - GENERATED CALL = (fu0()).get((false).compareTo((false))).isDigit()
2021-03-12 02:48:50,209 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@495b3de0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@416a6d16]]
2021-03-12 02:48:50,209 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@495b3de0]
2021-03-12 02:48:50,374 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:48:50,375 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@416a6d16]
2021-03-12 02:48:50,536 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:48:50,539 [main:117] - GENERATED CALL = (fu0()).equals("pvciw").and(true)
2021-03-12 02:48:50,539 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7889c5f8]]
2021-03-12 02:48:50,540 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca]
2021-03-12 02:48:50,540 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7889c5f8]
2021-03-12 02:48:50,540 [main:117] - GENERATED CALL = (fu0()).get((false).compareTo((false))).isLowerCase()
2021-03-12 02:48:50,540 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d5a0bf9]]
2021-03-12 02:48:50,540 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:48:50,695 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:50,698 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d5a0bf9]
2021-03-12 02:48:50,699 [main:117] - GENERATED CALL = (fu0()).subSequence((false).compareTo((false)), -284693262).isNotBlank()
2021-03-12 02:48:50,699 [main:114] - replacement of !dispatcher.fu6(value, continuation) of type Boolean is (fu0()).isEmpty()
2021-03-12 02:48:50,849 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:48:50,850 [main:66] - Compilation checking started
2021-03-12 02:48:51,316 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        private var prope0 = (A().prop).uppercase()
if ((fu0()).isEmpty())
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:51,319 [main:107] - replacing (i, Int)
2021-03-12 02:48:51,319 [main:50] - replacing i Int
2021-03-12 02:48:51,319 [main:54] - Getting value of type Int
2021-03-12 02:48:51,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:51,483 [main:58] - GENERATED VALUE OF TYPE Int = 932239389
2021-03-12 02:48:51,483 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:51,497 [main:67] - randomType = A
2021-03-12 02:48:51,646 [main:302] - generating value of type = A false depth = 0
2021-03-12 02:48:51,650 [main:112] - generating klass A text = class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}
2021-03-12 02:48:51,658 [main:78] - Generated call from random type = (A()).prop.length
2021-03-12 02:48:51,659 [main:106] - GETTING Int from String
2021-03-12 02:48:51,674 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8235997], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@48c1ac8a]]
2021-03-12 02:48:51,675 [main:117] - GENERATED CALL = ((A().prop)).length.sign
2021-03-12 02:48:51,675 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3128baef]]
2021-03-12 02:48:51,675 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:48:51,675 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3128baef]
2021-03-12 02:48:51,676 [main:117] - GENERATED CALL = ((A().prop)).compareTo(private var prope0 = (A().prop).uppercase().unaryMinus()
2021-03-12 02:48:51,676 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bd97e7e]]
2021-03-12 02:48:51,676 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:48:51,835 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:48:51,840 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4bd97e7e]
2021-03-12 02:48:52,018 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:48:52,022 [main:117] - GENERATED CALL = ((A().prop)).compareTo("rtwdr").div(20)
2021-03-12 02:48:52,022 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1989fdbd]]
2021-03-12 02:48:52,022 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:48:52,022 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1989fdbd]
2021-03-12 02:48:52,175 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:48:52,178 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:48:52,182 [main:117] - GENERATED CALL = ((A().prop)).subSequence((false).compareTo((false)), (false).compareTo((false))).indexOfFirst({a: Char -> true})
2021-03-12 02:48:52,182 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@82feb0b]]
2021-03-12 02:48:52,182 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:48:52,336 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:52,494 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:52,498 [main:117] - GENERATED CALL = ((A().prop)).subSequence(797235584, -642537011).length
2021-03-12 02:48:52,498 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8235997], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d9edbad]]
2021-03-12 02:48:52,498 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d9edbad]
2021-03-12 02:48:52,498 [main:117] - GENERATED CALL = ((A().prop)).length.inv()
2021-03-12 02:48:52,498 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8235997], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f2984cb]]
2021-03-12 02:48:52,498 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f2984cb]
2021-03-12 02:48:52,498 [main:117] - GENERATED CALL = ((A().prop)).length.unaryPlus()
2021-03-12 02:48:52,498 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6439cf9a]]
2021-03-12 02:48:52,499 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6439cf9a]
2021-03-12 02:48:52,660 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 02:48:52,828 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 02:48:52,833 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 02:48:52,993 [main:302] - generating value of type = Char true depth = 3
2021-03-12 02:48:52,997 [main:95] - GENERATED = charArrayOf('筥')
2021-03-12 02:48:52,997 [main:117] - GENERATED CALL = ((A().prop)).lastIndexOfAny(charArrayOf('筥'), (false).compareTo((false)), (false))
2021-03-12 02:48:52,998 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8235997], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c7045f5]]
2021-03-12 02:48:52,998 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c7045f5]
2021-03-12 02:48:53,151 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:48:53,154 [main:117] - GENERATED CALL = ((A().prop)).length.ushr(-799425687)
2021-03-12 02:48:53,155 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd9e09]]
2021-03-12 02:48:53,155 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@14c84fd6]
2021-03-12 02:48:53,155 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd9e09]
2021-03-12 02:48:53,155 [main:117] - GENERATED CALL = ((A().prop)).compareTo(A().prop).rotateRight((A().prop).length)
2021-03-12 02:48:53,155 [main:114] - replacement of i of type Int is ((A().prop)).length.ushr(-799425687)
2021-03-12 02:48:53,313 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:48:53,313 [main:66] - Compilation checking started
2021-03-12 02:48:53,783 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        private var prope0 = (A().prop).uppercase()
if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + ((A().prop)).length.ushr(-799425687) + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:53,786 [main:107] - replacing (this, Kla4)
2021-03-12 02:48:53,787 [main:50] - replacing this Kla4
2021-03-12 02:48:53,787 [main:54] - Getting value of type Kla4
2021-03-12 02:48:53,948 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 02:48:53,952 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}
2021-03-12 02:48:53,952 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 02:48:53,952 [main:61] - GENERATED IS CALL =true
2021-03-12 02:48:54,142 [main:67] - randomType = Kla6?
2021-03-12 02:48:54,292 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 02:48:54,295 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}
2021-03-12 02:48:54,301 [main:106] - GETTING Kla4 from Int
2021-03-12 02:48:54,341 [main:106] - GETTING Kla4 from String
2021-03-12 02:48:54,357 [main:106] - GETTING Kla4 from String
2021-03-12 02:48:54,358 [main:106] - GETTING Kla4 from Boolean
2021-03-12 02:48:54,367 [main:106] - GETTING Kla4 from String
2021-03-12 02:48:54,367 [main:106] - GETTING Kla4 from Int
2021-03-12 02:48:54,368 [main:106] - GETTING Kla4 from A
2021-03-12 02:48:54,373 [main:106] - GETTING Kla4 from String
2021-03-12 02:48:54,373 [main:114] - replacement of this of type Kla4 is Kla4()
2021-03-12 02:48:54,523 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:48:54,523 [main:66] - Compilation checking started
2021-03-12 02:48:54,999 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        private var prope0 = (A().prop).uppercase()
if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
Kla4().prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:55,002 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 02:48:55,002 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 02:48:55,002 [main:54] - Getting value of type Boolean
2021-03-12 02:48:55,154 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:48:55,158 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 02:48:55,158 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:55,328 [main:67] - randomType = Short
2021-03-12 02:48:55,478 [main:302] - generating value of type = Short true depth = 0
2021-03-12 02:48:55,515 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@b2dc176]
2021-03-12 02:48:55,665 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:48:55,665 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@416a6d16]
2021-03-12 02:48:55,815 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:48:55,819 [main:78] - Generated call from random type = (6759).equals("ddkse").and(true)
2021-03-12 02:48:55,819 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (6759).equals("ddkse").and(true)
2021-03-12 02:48:55,982 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:48:55,983 [main:66] - Compilation checking started
2021-03-12 02:48:56,444 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        private var prope0 = (A().prop).uppercase()
if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { (6759).equals("ddkse").and(true) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:56,447 [main:107] - replacing (value, String)
2021-03-12 02:48:56,447 [main:50] - replacing value String
2021-03-12 02:48:56,447 [main:54] - Getting value of type String
2021-03-12 02:48:56,598 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:48:56,602 [main:58] - GENERATED VALUE OF TYPE String = "kuorc"
2021-03-12 02:48:56,602 [main:61] - GENERATED IS CALL =false
2021-03-12 02:48:56,962 [main:67] - randomType = ArrayList<Double>
2021-03-12 02:48:57,114 [main:302] - generating value of type = ArrayList<Double> false depth = 0
2021-03-12 02:48:57,271 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Double> = TODO()
2021-03-12 02:48:57,275 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Double> = TODO()
2021-03-12 02:48:57,442 [main:95] - GENERATED = arrayListOf<Double>()
2021-03-12 02:48:57,624 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@903646c]
2021-03-12 02:48:57,624 [main:78] - Generated call from random type = (arrayListOf<Double>()).size.toString((false).compareTo((false)))
2021-03-12 02:48:57,624 [main:106] - GETTING String from String
2021-03-12 02:48:57,642 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b535c0d]]
2021-03-12 02:48:57,642 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b535c0d]
2021-03-12 02:48:57,642 [main:117] - GENERATED CALL = (A().prop).removeRange((A().prop).length, (false).compareTo((false)))
2021-03-12 02:48:57,642 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9a4326]]
2021-03-12 02:48:57,642 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9a4326]
2021-03-12 02:48:57,793 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:48:57,796 [main:117] - GENERATED CALL = (A().prop).substringBefore('랳', A().prop)
2021-03-12 02:48:57,797 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]]
2021-03-12 02:48:57,797 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eea1511]
2021-03-12 02:48:57,797 [main:117] - GENERATED CALL = (A().prop).prependIndent(A().prop)
2021-03-12 02:48:57,797 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38fdd33c]]
2021-03-12 02:48:57,797 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38fdd33c]
2021-03-12 02:48:57,797 [main:117] - GENERATED CALL = (A().prop).trimEnd()
2021-03-12 02:48:57,797 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53e3f3b8]]
2021-03-12 02:48:57,797 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53e3f3b8]
2021-03-12 02:48:57,797 [main:117] - GENERATED CALL = (A().prop).trimMargin(A().prop)
2021-03-12 02:48:57,797 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52f17199]]
2021-03-12 02:48:57,798 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52f17199]
2021-03-12 02:48:57,798 [main:117] - GENERATED CALL = (A().prop).trimIndent()
2021-03-12 02:48:57,798 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@250c2993]]
2021-03-12 02:48:57,798 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@250c2993]
2021-03-12 02:48:57,798 [main:117] - GENERATED CALL = (A().prop).toUpperCase()
2021-03-12 02:48:57,798 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]]
2021-03-12 02:48:57,798 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@52abfdca]
2021-03-12 02:48:57,798 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c251ec7]
2021-03-12 02:48:57,798 [main:117] - GENERATED CALL = (A().prop).get((false).compareTo((false))).lowercase()
2021-03-12 02:48:57,798 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2437813d]]
2021-03-12 02:48:57,798 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:48:57,798 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2437813d]
2021-03-12 02:48:57,952 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:48:57,959 [main:117] - GENERATED CALL = (A().prop).subSequence((A().prop).length, (false).compareTo((false))).commonPrefixWith("euwgn", (false))
2021-03-12 02:48:57,959 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59171b78]]
2021-03-12 02:48:57,959 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@45547014]
2021-03-12 02:48:57,959 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59171b78]
2021-03-12 02:48:57,960 [main:117] - GENERATED CALL = (A().prop).subSequence((A().prop).length, (false).compareTo((false))).substring((A().prop).length, (false).compareTo((false)))
2021-03-12 02:48:57,960 [main:114] - replacement of value of type String is (A().prop).toUpperCase()
2021-03-12 02:48:58,111 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:48:58,111 [main:66] - Compilation checking started
2021-03-12 02:48:58,542 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($(A().prop).toUpperCase());"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        private var prope0 = (A().prop).uppercase()
if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:58,545 [main:107] - replacing (prope7, Kla0)
2021-03-12 02:48:58,546 [main:50] - replacing prope7 Kla0
2021-03-12 02:48:58,546 [main:54] - Getting value of type Kla0
2021-03-12 02:48:58,700 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 02:48:58,703 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}
2021-03-12 02:48:58,703 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 02:48:58,703 [main:61] - GENERATED IS CALL =true
2021-03-12 02:48:59,065 [main:67] - randomType = ULong?
2021-03-12 02:48:59,217 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 02:48:59,251 [main:106] - GETTING Kla0 from Int
2021-03-12 02:48:59,280 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:59,296 [main:106] - GETTING Kla0 from A
2021-03-12 02:48:59,301 [main:106] - GETTING Kla0 from Int
2021-03-12 02:48:59,302 [main:106] - GETTING Kla0 from Boolean
2021-03-12 02:48:59,310 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:59,311 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:59,311 [main:106] - GETTING Kla0 from String
2021-03-12 02:48:59,311 [main:114] - replacement of prope7 of type Kla0 is Kla0()
2021-03-12 02:48:59,460 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:48:59,460 [main:66] - Compilation checking started
2021-03-12 02:48:59,893 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        private var prope0 = (A().prop).uppercase()
if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = Kla0().prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:48:59,896 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 02:48:59,897 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 02:48:59,897 [main:54] - Getting value of type Throwable?
2021-03-12 02:49:00,048 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 02:49:00,207 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 02:49:00,212 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 02:49:00,735 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:49:00,739 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 02:49:00,893 [main:43] - GENERATING CALL OF fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 02:49:00,898 [main:61] - WITHOUT TYPE PARAMS = fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 02:49:01,242 [main:302] - generating value of type = String true depth = 6
2021-03-12 02:49:01,248 [main:95] - GENERATED = CharacterCodingException("awduo")
2021-03-12 02:49:01,248 [main:95] - GENERATED = AssertionError("xpreu", CharacterCodingException("awduo"))
2021-03-12 02:49:01,248 [main:58] - GENERATED VALUE OF TYPE Throwable? = AssertionError("xpreu", CharacterCodingException("awduo"))
2021-03-12 02:49:01,248 [main:61] - GENERATED IS CALL =true
2021-03-12 02:49:01,441 [main:67] - randomType = Sequence<Kla7>
2021-03-12 02:49:01,442 [main:106] - GETTING Throwable? from Int
2021-03-12 02:49:01,479 [main:106] - GETTING Throwable? from Boolean
2021-03-12 02:49:01,489 [main:106] - GETTING Throwable? from String
2021-03-12 02:49:01,511 [main:106] - GETTING Throwable? from String
2021-03-12 02:49:01,512 [main:106] - GETTING Throwable? from String
2021-03-12 02:49:01,513 [main:106] - GETTING Throwable? from A
2021-03-12 02:49:01,520 [main:106] - GETTING Throwable? from Int
2021-03-12 02:49:01,521 [main:106] - GETTING Throwable? from String
2021-03-12 02:49:01,521 [main:114] - replacement of exceptionOrNull() of type Throwable? is AssertionError("xpreu", CharacterCodingException("awduo"))
2021-03-12 02:49:01,680 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:49:01,680 [main:66] - Compilation checking started
2021-03-12 02:49:02,215 [main:49] - Result = false
Text:

import kotlin.test.assertEquals
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

class A {
    public var prop = "O"
        private set

    fun test() {
        { prop }()
    }
}

private var prope0 = (A().prop).uppercase()

private fun fu0() = (A().prop).replaceAfterLast('䓽', A().prop, "gimxo")

fun box554(): String {

    val prope1 = Class.forName("test.TestKt")
    assertEquals((A().prop).length.dec(), prope1.declaredMethods.size, (A().prop).toLowerCase())
    assertEquals((A().prop).removeRange(2090660471, -223096171), prope1.declaredMethods.first().name, (A().prop).capitalize())

    return (false).compareTo((false)).toString(2090660471)
}

class Kla0 {
    var prope4 = ""
    var prope5 = 0

    var prope6: (() -> Unit)? = null

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = suspendCoroutine { continuation ->
        prope4 += "suspend($value);"
        prope6 = {
            continuation.resume(value)
        }
    }

    suspend fun fu5(value: String): Unit = suspendCoroutine { continuation ->
        prope4 += "error($value);"
        prope6 = {
            continuation.resumeWithException(RuntimeException(value))
        }
    }
}

abstract class Kla1 : AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {
    abstract fun <Ty0> fu6(value: Ty0, continuation: Continuation<Ty0>): Boolean
    abstract fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean
    override fun <Ty0> interceptContinuation(continuation: Continuation<Ty0>): Continuation<Ty0> = Kla2(this, continuation)
}

private class Kla2<Ty0>(
        val dispatcher: Kla1,
        val continuation: Continuation<Ty0>
): Kla5<Ty0>() {
    override val context: CoroutineContext = continuation.context

    override fun resume(value: Ty0) {
        private var prope0 = (A().prop).uppercase()
if (!dispatcher.fu6(value, continuation))
            continuation.resume(value)
    }

    override fun resumeWithException(exception: Throwable) {
        if (!dispatcher.fu7(exception, continuation))
            continuation.resumeWithException(exception)
    }
}

fun fu1(prope14: suspend Kla0.() -> Unit): String {
    val prope7 = Kla0()
    prope14.startCoroutine(prope7, Kla3(object: Kla1() {
        private fun fu6(block: () -> Unit) {
            private var prope0 = (A().prop).uppercase()
val prope17 = prope7.prope5++
            prope7.prope4 += "before $prope17;"
            block()
            prope7.prope4 += "after $prope17;"
        }

        override fun <Ty1> fu6(data: Ty1, continuation: Continuation<Ty1>): Boolean {
            private var prope0 = (A().prop).uppercase()
fu6 {
                continuation.resume(data)
            }
            return true
        }

        override fun fu7(exception: Throwable, continuation: Continuation<*>): Boolean {
            fu6 {
                continuation.resumeWithException(exception)
            }
            return true
        }
    }))

    while (prope7.prope6 != null) {
        val prope14 = prope7.prope6!!
        prope7.prope6 = null
        prope14()
    }

    return prope7.prope4
}

fun box906(): String {
    private var prope0 = (A().prop).uppercase()
var prope8 = fu1 {
        val prope15 = fu4("O")
        val prope16 = fu4("K")
        prope4 += "$prope15$prope16;"
    }
    if (prope8 != "before 0;suspend(O);after 0;before 1;suspend(K);after 1;before 2;OK;after 2;") return "fail1: $prope8"

    prope8 = fu1 {
        try {
            fu5("OK")
            prope4 += "ignore;"
        }
        catch (e: RuntimeException) {
            prope4 += "${e.message};"
        }
    }
    if (prope8 != "before 0;error(OK);after 0;before 1;OK;after 1;") return "fail2: $prope8"

    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
x(prope8.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        prope8.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
prope8.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Any?>) {
        private var prope0 = (A().prop).uppercase()
this.prope8 = prope8.getOrThrow()
    }

    var prope8: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope8: Result<Ty0>) {
        private var prope0 = (A().prop).uppercase()
if (prope8.isSuccess) {
            resume(prope8.getOrThrow())
        } else {
            resumeWithException(prope8.AssertionError("xpreu", CharacterCodingException("awduo"))!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope14: Continuation<*>) {
        if (prope14 !is CoroutineStackFrame) error("Continuation " + prope14 + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope13: CoroutineStackFrame? = prope14
        while (prope13 != null) {
            prope9.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu11(method: String) {
        private var prope0 = (A().prop).uppercase()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu13() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope14 ->
        prope10++
        prope12 = { prope14.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        private var prope0 = (A().prop).uppercase()
for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        private var prope0 = (A().prop).uppercase()
prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:49:02,220 [main:107] - replacing (ContinuationInterceptor, Key)
2021-03-12 02:49:02,220 [main:50] - replacing ContinuationInterceptor Key
2021-03-12 02:49:02,220 [main:54] - Getting value of type Key
2021-03-12 02:49:02,408 [main:302] - generating value of type = Key false depth = 0
