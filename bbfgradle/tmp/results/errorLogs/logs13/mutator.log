2021-03-11 12:21:23,519 [main:66] - Compilation checking started
2021-03-11 12:21:25,528 [main:112] - generating klass X text = object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}
2021-03-11 12:21:25,529 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}
2021-03-11 12:21:25,530 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:21:25,875 [main:52] - Trying to change 53 nodes
2021-03-11 12:21:25,875 [main:56] - replacing ("K", String)
2021-03-11 12:21:25,876 [main:38] - replacing "K" String
2021-03-11 12:21:25,876 [main:42] - Getting value of type String
2021-03-11 12:21:26,004 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:26,008 [main:46] - GENERATED VALUE OF TYPE String = "dlanf"
2021-03-11 12:21:26,009 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:26,719 [main:55] - randomType = HashMap<X, Float>
2021-03-11 12:21:26,862 [main:302] - generating value of type = HashMap<X, Float> false depth = 0
2021-03-11 12:21:27,054 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<X, Float> = TODO()
2021-03-11 12:21:27,057 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<X, Float> = TODO()
2021-03-11 12:21:27,497 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:21:27,497 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:21:27,499 [main:95] - GENERATED = LinkedHashMap<X, Float>(1293922444, 0.91319066f)
2021-03-11 12:21:27,774 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:21:27,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:27,890 [main:66] - Generated call from random type = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
2021-03-11 12:21:27,890 [main:63] - replacement of "K" of type String is (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
2021-03-11 12:21:28,001 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:28,002 [main:66] - Compilation checking started
2021-03-11 12:21:28,702 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:28,705 [main:56] - replacing ("", String)
2021-03-11 12:21:28,706 [main:38] - replacing "" String
2021-03-11 12:21:28,706 [main:42] - Getting value of type String
2021-03-11 12:21:28,880 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:28,881 [main:46] - GENERATED VALUE OF TYPE String = "vuquu"
2021-03-11 12:21:28,881 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:29,919 [main:55] - randomType = Set<Function2<UShort, UShort, HashSet<A?>?>>
2021-03-11 12:21:29,922 [main:94] - GETTING String from X
2021-03-11 12:21:29,942 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]]
2021-03-11 12:21:29,942 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]
2021-03-11 12:21:30,064 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:30,173 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:30,174 [main:105] - GENERATED CALL = (X).O.removeRange(1210331152, -324572970)
2021-03-11 12:21:30,174 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:21:30,175 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:21:30,175 [main:105] - GENERATED CALL = (X).O.trimIndent()
2021-03-11 12:21:30,176 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]]
2021-03-11 12:21:30,176 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]
2021-03-11 12:21:30,283 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:21:30,284 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:30,285 [main:105] - GENERATED CALL = (X).O.filterIndexed({a: Int, b: Char -> false})
2021-03-11 12:21:30,285 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]]
2021-03-11 12:21:30,285 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:21:30,411 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:21:30,412 [main:105] - GENERATED CALL = (X).O.plus("rjsaq")
2021-03-11 12:21:30,412 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25549b6a]]
2021-03-11 12:21:30,412 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25549b6a]
2021-03-11 12:21:30,536 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:30,653 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:30,765 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:30,766 [main:105] - GENERATED CALL = (X).O.replaceBefore('ç¤­', "ybdmi", "ozojx")
2021-03-11 12:21:30,766 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:21:30,766 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:21:30,894 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:21:30,895 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:30,896 [main:105] - GENERATED CALL = (X).O.filter({a: Char -> true})
2021-03-11 12:21:30,896 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aff196a]]
2021-03-11 12:21:30,896 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aff196a]
2021-03-11 12:21:31,017 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:31,018 [main:105] - GENERATED CALL = (X).O.replaceIndent("bannw")
2021-03-11 12:21:31,018 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]]
2021-03-11 12:21:31,018 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]
2021-03-11 12:21:31,018 [main:105] - GENERATED CALL = (X).O.lowercase()
2021-03-11 12:21:31,018 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]]
2021-03-11 12:21:31,019 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]
2021-03-11 12:21:31,123 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:31,225 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:31,331 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:31,332 [main:105] - GENERATED CALL = (X).O.replaceAfter('Ò', "xllay", "nzbyl")
2021-03-11 12:21:31,332 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b178a27]]
2021-03-11 12:21:31,332 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b178a27]
2021-03-11 12:21:31,332 [main:105] - GENERATED CALL = (X).O.trimEnd()
2021-03-11 12:21:31,333 [main:63] - replacement of "" of type String is (X).O.removeRange(1210331152, -324572970)
2021-03-11 12:21:31,469 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:31,470 [main:66] - Compilation checking started
2021-03-11 12:21:32,153 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:32,156 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:32,156 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:32,157 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:32,273 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:32,274 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:32,399 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:32,402 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:32,654 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:21:32,655 [main:95] - GENERATED = require(true)
2021-03-11 12:21:32,655 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> require(true)}
2021-03-11 12:21:32,655 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:32,775 [main:55] - randomType = UByte
2021-03-11 12:21:32,887 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:21:32,974 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:33,025 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:33,040 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:33,064 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:33,077 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:33,093 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> require(true)}
2021-03-11 12:21:33,201 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:33,202 [main:66] - Compilation checking started
2021-03-11 12:21:33,537 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> require(true)}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:33,539 [main:56] - replacing (K, String)
2021-03-11 12:21:33,539 [main:38] - replacing K String
2021-03-11 12:21:33,540 [main:42] - Getting value of type String
2021-03-11 12:21:33,650 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:33,651 [main:46] - GENERATED VALUE OF TYPE String = "mnqbg"
2021-03-11 12:21:33,651 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:33,888 [main:55] - randomType = Set<Pair<B, B>>
2021-03-11 12:21:33,889 [main:94] - GETTING String from X
2021-03-11 12:21:33,897 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]]
2021-03-11 12:21:33,897 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]
2021-03-11 12:21:34,002 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:34,107 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:34,108 [main:105] - GENERATED CALL = (X).O.padStart(-23473745, 'ä´')
2021-03-11 12:21:34,109 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]]
2021-03-11 12:21:34,109 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]
2021-03-11 12:21:34,272 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:21:34,392 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:21:34,395 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:21:34,513 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:21:34,514 [main:95] - GENERATED = setOfNotNull<Int>(2034075168)
2021-03-11 12:21:34,514 [main:105] - GENERATED CALL = (X).O.slice(setOfNotNull<Int>(2034075168))
2021-03-11 12:21:34,514 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]]
2021-03-11 12:21:34,514 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]
2021-03-11 12:21:34,613 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:34,712 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:34,834 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:34,835 [main:105] - GENERATED CALL = (X).O.replace('ëª¯', 'å±³', true)
2021-03-11 12:21:34,835 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@317da447]]
2021-03-11 12:21:34,835 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@317da447]
2021-03-11 12:21:34,937 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:35,036 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:35,037 [main:105] - GENERATED CALL = (X).O.replaceIndentByMargin("lhpxb", "vgavn")
2021-03-11 12:21:35,037 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]]
2021-03-11 12:21:35,037 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]
2021-03-11 12:21:35,134 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:21:35,134 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:35,135 [main:105] - GENERATED CALL = (X).O.dropWhile({a: Char -> true})
2021-03-11 12:21:35,135 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6356e336]]
2021-03-11 12:21:35,135 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6356e336]
2021-03-11 12:21:35,231 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:21:35,236 [main:105] - GENERATED CALL = (X).O.removeSuffix("eduxw")
2021-03-11 12:21:35,236 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:21:35,236 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:21:35,367 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:21:35,368 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:35,369 [main:105] - GENERATED CALL = (X).O.takeWhile({a: Char -> false})
2021-03-11 12:21:35,370 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f84a5c8]]
2021-03-11 12:21:35,370 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f84a5c8]
2021-03-11 12:21:35,487 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:35,602 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:35,699 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:35,700 [main:105] - GENERATED CALL = (X).O.replaceAfterLast('ê® ', "yrpmu", "lmlyo")
2021-03-11 12:21:35,700 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@308b60ba]]
2021-03-11 12:21:35,701 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@308b60ba]
2021-03-11 12:21:35,797 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:21:35,797 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:35,798 [main:105] - GENERATED CALL = (X).O.dropLastWhile({a: Char -> false})
2021-03-11 12:21:35,799 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]]
2021-03-11 12:21:35,799 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]
2021-03-11 12:21:35,940 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:36,043 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:36,044 [main:105] - GENERATED CALL = (X).O.substringAfter('ä­', "alzim")
2021-03-11 12:21:36,044 [main:63] - replacement of K of type String is (X).O.removeSuffix("eduxw")
2021-03-11 12:21:36,144 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:36,144 [main:66] - Compilation checking started
2021-03-11 12:21:36,438 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        (X).O.removeSuffix("eduxw") = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:36,439 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:36,439 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:36,440 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:36,539 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:36,539 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:36,650 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:36,651 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:36,842 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:21:36,843 [main:95] - GENERATED = check(false)
2021-03-11 12:21:36,843 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> check(false)}
2021-03-11 12:21:36,843 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:36,943 [main:55] - randomType = Int?
2021-03-11 12:21:37,044 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:37,113 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:37,129 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:37,160 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:37,171 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:37,192 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:37,192 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> check(false)}
2021-03-11 12:21:37,292 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:37,292 [main:66] - Compilation checking started
2021-03-11 12:21:37,556 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> check(false)}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:37,557 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:37,557 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:37,557 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:37,647 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:37,648 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:37,741 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:37,743 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:37,934 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:21:37,934 [main:95] - GENERATED = require(false)
2021-03-11 12:21:37,934 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> require(false)}
2021-03-11 12:21:37,935 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:38,036 [main:55] - randomType = UShort
2021-03-11 12:21:38,157 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:21:38,221 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:38,242 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:38,286 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:38,300 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:38,314 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:38,326 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> require(false)}
2021-03-11 12:21:38,443 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:38,443 [main:66] - Compilation checking started
2021-03-11 12:21:38,715 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") {a: KProperty<*>, b: String, c: String -> require(false)}
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:38,717 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:38,717 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:38,717 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:38,812 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:38,813 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:38,920 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:38,922 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:39,268 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:21:39,268 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 12:21:39,268 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:21:39,379 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:21:39,381 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:21:39,721 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:21:39,721 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 12:21:39,721 [main:302] - generating value of type = Any false depth = 9
2021-03-11 12:21:39,722 [main:95] - GENERATED = check(false, { "wdxus"})
2021-03-11 12:21:39,722 [main:95] - GENERATED = repeat(-146826338, {a: Int -> check(false, { "wdxus"})})
2021-03-11 12:21:39,722 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> repeat(-146826338, {a: Int -> check(false, { "wdxus"})})}
2021-03-11 12:21:39,723 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:39,723 [main:55] - randomType = A
2021-03-11 12:21:39,817 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:21:39,817 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}
2021-03-11 12:21:39,836 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:39,873 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:39,885 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:39,904 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:39,915 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:39,919 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> repeat(-146826338, {a: Int -> check(false, { "wdxus"})})}
2021-03-11 12:21:40,017 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:40,017 [main:66] - Compilation checking started
2021-03-11 12:21:40,284 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> repeat(-146826338, {a: Int -> check(false, { "wdxus"})})}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:40,286 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:40,286 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:40,286 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:40,395 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:40,395 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:40,496 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:40,497 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:40,714 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:21:40,714 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:21:40,820 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:21:40,822 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:21:41,053 [main:302] - generating value of type = Any false depth = 8
2021-03-11 12:21:41,053 [main:95] - GENERATED = println("rrmfz")
2021-03-11 12:21:41,053 [main:95] - GENERATED = contract({ println("rrmfz")})
2021-03-11 12:21:41,053 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> contract({ println("rrmfz")})}
2021-03-11 12:21:41,054 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:41,055 [main:55] - randomType = A
2021-03-11 12:21:41,149 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:21:41,149 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}
2021-03-11 12:21:41,169 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:41,211 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:41,222 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:41,240 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:41,264 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:41,264 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> contract({ println("rrmfz")})}
2021-03-11 12:21:41,373 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:41,374 [main:66] - Compilation checking started
2021-03-11 12:21:41,664 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") {a: KProperty<*>, b: String, c: String -> contract({ println("rrmfz")})}
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:41,666 [main:56] - replacing ("O", String)
2021-03-11 12:21:41,666 [main:38] - replacing "O" String
2021-03-11 12:21:41,666 [main:42] - Getting value of type String
2021-03-11 12:21:41,769 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:41,770 [main:46] - GENERATED VALUE OF TYPE String = "qvtim"
2021-03-11 12:21:41,770 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:41,771 [main:55] - randomType = X
2021-03-11 12:21:41,865 [main:302] - generating value of type = X false depth = 0
2021-03-11 12:21:41,867 [main:112] - generating klass X text = object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}
2021-03-11 12:21:41,874 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]
2021-03-11 12:21:41,963 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:21:42,055 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:21:42,056 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:21:42,257 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:21:42,261 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 12:21:42,262 [main:66] - Generated call from random type = (X).O.removeSurrounding(StringBuilder(StringBuilder()))
2021-03-11 12:21:42,262 [main:63] - replacement of "O" of type String is (X).O.removeSurrounding(StringBuilder(StringBuilder()))
2021-03-11 12:21:42,351 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:42,352 [main:66] - Compilation checking started
2021-03-11 12:21:42,814 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:42,816 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:42,816 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:42,816 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:42,935 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:42,936 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:43,033 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:43,035 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:43,257 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:21:43,257 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:21:43,266 [main:95] - GENERATED = contract({ println()})
2021-03-11 12:21:43,266 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> contract({ println()})}
2021-03-11 12:21:43,267 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:43,372 [main:55] - randomType = Char
2021-03-11 12:21:43,462 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:43,509 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:43,536 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:43,582 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:43,594 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:43,605 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:43,613 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> contract({ println()})}
2021-03-11 12:21:43,711 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:43,711 [main:66] - Compilation checking started
2021-03-11 12:21:43,995 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> contract({ println()})}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:43,997 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:43,997 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:43,997 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:44,109 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:44,110 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:44,256 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:44,258 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:44,455 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:21:44,455 [main:95] - GENERATED = require(true)
2021-03-11 12:21:44,455 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> require(true)}
2021-03-11 12:21:44,455 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:44,560 [main:55] - randomType = Map<Float, X>
2021-03-11 12:21:44,573 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:44,599 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:44,644 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:44,655 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:44,666 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:44,674 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> require(true)}
2021-03-11 12:21:44,765 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:44,766 [main:66] - Compilation checking started
2021-03-11 12:21:45,024 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> require(true)}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:45,026 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:45,026 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:45,026 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:45,122 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:45,123 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:45,127 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> println()}
2021-03-11 12:21:45,127 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:45,128 [main:55] - randomType = Float
2021-03-11 12:21:45,235 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:21:45,298 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:45,335 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:45,353 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:45,377 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:45,389 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:45,389 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> println()}
2021-03-11 12:21:45,476 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:45,477 [main:66] - Compilation checking started
2021-03-11 12:21:45,728 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) {a: KProperty<*>, b: String, c: String -> println()}
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:45,730 [main:56] - replacing (Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:21:45,730 [main:38] - replacing Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:21:45,730 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:21:45,825 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:21:45,931 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:21:45,932 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:21:46,032 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:21:46,032 [main:95] - GENERATED = ObservableProperty<String>("myinp")
2021-03-11 12:21:46,032 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("myinp")
2021-03-11 12:21:46,032 [main:49] - GENERATED IS CALL =true
2021-03-11 12:21:46,033 [main:55] - randomType = A
2021-03-11 12:21:46,128 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:21:46,129 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}
2021-03-11 12:21:46,135 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:21:46,151 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:21:46,171 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:21:46,172 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:21:46,173 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:21:46,178 [main:63] - replacement of Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("myinp")
2021-03-11 12:21:46,269 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:21:46,270 [main:66] - Compilation checking started
2021-03-11 12:21:46,491 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by ObservableProperty<String>("myinp")
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + B().K


2021-03-11 12:21:46,493 [main:56] - replacing (B().K

, String)
2021-03-11 12:21:46,493 [main:38] - replacing B().K

 String
2021-03-11 12:21:46,493 [main:42] - Getting value of type String
2021-03-11 12:21:46,588 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:46,588 [main:46] - GENERATED VALUE OF TYPE String = "agkel"
2021-03-11 12:21:46,588 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:46,688 [main:55] - randomType = Double
2021-03-11 12:21:46,783 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:21:46,819 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89]
2021-03-11 12:21:46,819 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:21:46,907 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:46,907 [main:66] - Generated call from random type = (0.5505827760950972).toInt().toString(2039407244)
2021-03-11 12:21:46,908 [main:94] - GETTING String from X
2021-03-11 12:21:46,916 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]]
2021-03-11 12:21:46,916 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]
2021-03-11 12:21:46,916 [main:105] - GENERATED CALL = (X).O.lowercase()
2021-03-11 12:21:46,916 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49928448]]
2021-03-11 12:21:46,916 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49928448]
2021-03-11 12:21:46,917 [main:105] - GENERATED CALL = (X).O.toUpperCase()
2021-03-11 12:21:46,917 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675656b7]]
2021-03-11 12:21:46,917 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675656b7]
2021-03-11 12:21:46,917 [main:105] - GENERATED CALL = (X).O.decapitalize()
2021-03-11 12:21:46,917 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5]]
2021-03-11 12:21:46,917 [main:105] - GENERATED CALL = (X).O
2021-03-11 12:21:46,917 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:21:46,917 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:21:46,917 [main:105] - GENERATED CALL = (X).O.trimIndent()
2021-03-11 12:21:46,918 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96a81f0]]
2021-03-11 12:21:46,918 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96a81f0]
2021-03-11 12:21:47,009 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:47,118 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:47,119 [main:105] - GENERATED CALL = (X).O.substringBefore('ç¨', "eqziv")
2021-03-11 12:21:47,119 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]]
2021-03-11 12:21:47,119 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]
2021-03-11 12:21:47,119 [main:105] - GENERATED CALL = (X).O.reversed()
2021-03-11 12:21:47,119 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]]
2021-03-11 12:21:47,119 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]
2021-03-11 12:21:47,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:47,303 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:47,303 [main:105] - GENERATED CALL = (X).O.padEnd(-1825065147, 'é¿¢')
2021-03-11 12:21:47,304 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]]
2021-03-11 12:21:47,304 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]
2021-03-11 12:21:47,393 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:47,482 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:47,575 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:47,576 [main:105] - GENERATED CALL = (X).O.replaceAfter('ì¨¢', "stlbk", "coawg")
2021-03-11 12:21:47,576 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cbf9b7]]
2021-03-11 12:21:47,576 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cbf9b7]
2021-03-11 12:21:47,674 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:47,674 [main:105] - GENERATED CALL = (X).O.prependIndent("llucq")
2021-03-11 12:21:47,675 [main:63] - replacement of B().K

 of type String is (X).O.trimIndent()
2021-03-11 12:21:47,771 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:47,771 [main:66] - Compilation checking started
2021-03-11 12:21:48,178 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()
2021-03-11 12:21:48,180 [main:56] - replacing (Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:21:48,180 [main:38] - replacing Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:21:48,180 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:21:48,280 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:21:48,390 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:21:48,391 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:21:48,498 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:21:48,498 [main:95] - GENERATED = ObservableProperty<String>("wcswn")
2021-03-11 12:21:48,499 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("wcswn")
2021-03-11 12:21:48,499 [main:49] - GENERATED IS CALL =true
2021-03-11 12:21:49,677 [main:55] - randomType = Function2<Function1<HashMap<Float?, ArrayList<Double>>, Double>, UInt, ArrayDeque<Short?>>
2021-03-11 12:21:49,679 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:21:49,688 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:21:49,707 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:21:49,708 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:21:49,717 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:21:49,717 [main:63] - replacement of Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("wcswn")
2021-03-11 12:21:49,816 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:21:49,817 [main:66] - Compilation checking started
2021-03-11 12:21:50,066 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by ObservableProperty<String>("wcswn")
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:21:50,067 [main:56] - replacing (K, String)
2021-03-11 12:21:50,067 [main:38] - replacing K String
2021-03-11 12:21:50,067 [main:42] - Getting value of type String
2021-03-11 12:21:50,161 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:50,162 [main:46] - GENERATED VALUE OF TYPE String = "jwhjp"
2021-03-11 12:21:50,162 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:50,259 [main:55] - randomType = Short
2021-03-11 12:21:50,350 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:21:50,398 [main:137] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5356476a]
2021-03-11 12:21:50,398 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3af215]
2021-03-11 12:21:50,486 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:50,487 [main:66] - Generated call from random type = (-13537).toShort().toString(1958537140)
2021-03-11 12:21:50,487 [main:94] - GETTING String from String
2021-03-11 12:21:50,515 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]]
2021-03-11 12:21:50,515 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]
2021-03-11 12:21:50,515 [main:105] - GENERATED CALL = (X.O).trimStart()
2021-03-11 12:21:50,515 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]]
2021-03-11 12:21:50,515 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]
2021-03-11 12:21:50,611 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:50,705 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:50,792 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:50,793 [main:105] - GENERATED CALL = (X.O).replaceBeforeLast('å¬', "bdcpw", "xpmfx")
2021-03-11 12:21:50,793 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]]
2021-03-11 12:21:50,793 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]
2021-03-11 12:21:50,884 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:50,972 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:51,059 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:51,060 [main:105] - GENERATED CALL = (X.O).replace('è»', 'ï', true)
2021-03-11 12:21:51,060 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:21:51,060 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:21:51,060 [main:105] - GENERATED CALL = (X.O).trimIndent()
2021-03-11 12:21:51,060 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]]
2021-03-11 12:21:51,060 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]
2021-03-11 12:21:51,060 [main:105] - GENERATED CALL = (X.O).uppercase()
2021-03-11 12:21:51,060 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]]
2021-03-11 12:21:51,060 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]
2021-03-11 12:21:51,150 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:21:51,155 [main:105] - GENERATED CALL = (X.O).removeSurrounding("hlzzf")
2021-03-11 12:21:51,155 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@436b57bd]]
2021-03-11 12:21:51,155 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f]
2021-03-11 12:21:51,264 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:51,265 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@436b57bd]
2021-03-11 12:21:51,265 [main:105] - GENERATED CALL = (X.O).get(-1040730556).lowercase()
2021-03-11 12:21:51,265 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:21:51,265 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:21:51,375 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:21:51,375 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:51,376 [main:105] - GENERATED CALL = (X.O).filter({a: Char -> true})
2021-03-11 12:21:51,376 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]]
2021-03-11 12:21:51,376 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]
2021-03-11 12:21:51,469 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:51,470 [main:105] - GENERATED CALL = (X.O).takeLast(1245100640)
2021-03-11 12:21:51,470 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]]
2021-03-11 12:21:51,470 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:21:51,562 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:51,659 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:51,661 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]
2021-03-11 12:21:51,753 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:21:51,866 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:51,867 [main:105] - GENERATED CALL = (X.O).subSequence(1842959110, -499768214).commonSuffixWith(StringBuilder(), true)
2021-03-11 12:21:51,867 [main:63] - replacement of K of type String is (X.O).replace('è»', 'ï', true)
2021-03-11 12:21:51,962 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:51,962 [main:66] - Compilation checking started
2021-03-11 12:21:52,243 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        (X.O).replace('è»', 'ï', true) = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:21:52,245 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:52,245 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:52,245 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:52,335 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:52,336 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:52,427 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:52,428 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:52,716 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:21:52,716 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 12:21:52,717 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:21:52,807 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:52,808 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:53,104 [main:302] - generating value of type = Int true depth = 8
2021-03-11 12:21:53,105 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 12:21:53,105 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 12:21:53,210 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:53,211 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:21:53,534 [main:302] - generating value of type = Int true depth = 12
2021-03-11 12:21:53,535 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-11 12:21:53,535 [main:302] - generating value of type = Unit false depth = 13
2021-03-11 12:21:53,630 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:21:53,631 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:21:53,809 [main:302] - generating value of type = Any false depth = 16
2021-03-11 12:21:53,809 [main:385] - Cant generate call of fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:21:53,809 [main:95] - GENERATED = repeat(1748454734, {a: Int -> })
2021-03-11 12:21:53,809 [main:95] - GENERATED = repeat(1671338685, {a: Int -> repeat(1748454734, {a: Int -> })})
2021-03-11 12:21:53,810 [main:95] - GENERATED = repeat(-241247744, {a: Int -> repeat(1671338685, {a: Int -> repeat(1748454734, {a: Int -> })})})
2021-03-11 12:21:53,810 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> repeat(-241247744, {a: Int -> repeat(1671338685, {a: Int -> repeat(1748454734, {a: Int -> })})})}
2021-03-11 12:21:53,810 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:54,114 [main:55] - randomType = Function2<Byte, A, Float?>
2021-03-11 12:21:54,142 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:54,191 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:54,216 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:54,233 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:54,245 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:54,245 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> repeat(-241247744, {a: Int -> repeat(1671338685, {a: Int -> repeat(1748454734, {a: Int -> })})})}
2021-03-11 12:21:54,326 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:54,327 [main:66] - Compilation checking started
2021-03-11 12:21:54,582 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) {a: KProperty<*>, b: String, c: String -> repeat(-241247744, {a: Int -> repeat(1671338685, {a: Int -> repeat(1748454734, {a: Int -> })})})}
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:21:54,584 [main:56] - replacing (K, String)
2021-03-11 12:21:54,584 [main:38] - replacing K String
2021-03-11 12:21:54,584 [main:42] - Getting value of type String
2021-03-11 12:21:54,667 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:54,667 [main:46] - GENERATED VALUE OF TYPE String = "kvzfm"
2021-03-11 12:21:54,668 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:54,755 [main:55] - randomType = Boolean
2021-03-11 12:21:54,835 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:54,843 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60235ace]
2021-03-11 12:21:54,938 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:54,939 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:21:55,037 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:55,038 [main:66] - Generated call from random type = (true).compareTo(true).toString(1707155463)
2021-03-11 12:21:55,039 [main:94] - GETTING String from B
2021-03-11 12:21:55,051 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]]
2021-03-11 12:21:55,052 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]
2021-03-11 12:21:55,133 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:55,134 [main:105] - GENERATED CALL = (B()).K.takeLast(1930898518)
2021-03-11 12:21:55,134 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@317da447]]
2021-03-11 12:21:55,134 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@317da447]
2021-03-11 12:21:55,215 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:55,297 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:55,298 [main:105] - GENERATED CALL = (B()).K.replaceIndentByMargin("fqlgj", "vxxsl")
2021-03-11 12:21:55,298 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]]
2021-03-11 12:21:55,298 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]
2021-03-11 12:21:55,381 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:55,466 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:55,565 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:55,566 [main:105] - GENERATED CALL = (B()).K.replace('à¦¹', 'ì±¬', false)
2021-03-11 12:21:55,566 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]]
2021-03-11 12:21:55,566 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]
2021-03-11 12:21:55,678 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:55,766 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:55,767 [main:105] - GENERATED CALL = (B()).K.padEnd(-1553275169, 'æµ')
2021-03-11 12:21:55,767 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]]
2021-03-11 12:21:55,767 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]
2021-03-11 12:21:55,768 [main:105] - GENERATED CALL = (B()).K.trimStart()
2021-03-11 12:21:55,768 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]]
2021-03-11 12:21:55,768 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]
2021-03-11 12:21:55,850 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:55,851 [main:105] - GENERATED CALL = (B()).K.concat("hppeg")
2021-03-11 12:21:55,851 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795c8413]]
2021-03-11 12:21:55,851 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795c8413]
2021-03-11 12:21:55,952 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:56,044 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:56,134 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:21:56,135 [main:105] - GENERATED CALL = (B()).K.replaceFirst('æ±¿', 'ïª', false)
2021-03-11 12:21:56,135 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]]
2021-03-11 12:21:56,135 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]
2021-03-11 12:21:56,231 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:21:56,232 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:56,233 [main:105] - GENERATED CALL = (B()).K.filterIndexed({a: Int, b: Char -> true})
2021-03-11 12:21:56,233 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]]
2021-03-11 12:21:56,233 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]
2021-03-11 12:21:56,332 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:21:56,332 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:21:56,333 [main:105] - GENERATED CALL = (B()).K.dropWhile({a: Char -> true})
2021-03-11 12:21:56,333 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]]
2021-03-11 12:21:56,333 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]
2021-03-11 12:21:56,424 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:56,518 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:56,519 [main:105] - GENERATED CALL = (B()).K.padStart(-1574242231, 'æ')
2021-03-11 12:21:56,519 [main:63] - replacement of K of type String is (B()).K.padStart(-1574242231, 'æ')
2021-03-11 12:21:56,612 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:56,612 [main:66] - Compilation checking started
2021-03-11 12:21:56,837 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        (B()).K.padStart(-1574242231, 'æ') = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:21:56,838 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:21:56,838 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:56,838 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:21:56,949 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:21:56,949 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:21:57,043 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:57,045 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:21:57,221 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:21:57,222 [main:95] - GENERATED = check(true)
2021-03-11 12:21:57,222 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> check(true)}
2021-03-11 12:21:57,222 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:57,634 [main:55] - randomType = Triple<B, UByte, UShort>
2021-03-11 12:21:57,714 [main:302] - generating value of type = Triple<B, UByte, UShort> false depth = 0
2021-03-11 12:21:57,799 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: B, second: UByte, third: UShort): Triple<B, UByte, UShort> = TODO()
2021-03-11 12:21:57,800 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: B, second: UByte, third: UShort): Triple<B, UByte, UShort> = TODO()
2021-03-11 12:21:57,884 [main:302] - generating value of type = B false depth = 3
2021-03-11 12:21:57,884 [main:112] - generating klass B text = class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}
2021-03-11 12:21:57,884 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 12:21:57,884 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 12:21:57,885 [main:95] - GENERATED = Triple<B, UByte, UShort>(B(), 5.toUByte(), 19204.toUShort())
2021-03-11 12:21:57,915 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:21:57,931 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:57,961 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:21:57,980 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:57,991 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:21:57,991 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> check(true)}
2021-03-11 12:21:58,072 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:21:58,072 [main:66] - Compilation checking started
2021-03-11 12:21:58,294 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> check(true)}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:21:58,295 [main:56] - replacing (K, String)
2021-03-11 12:21:58,295 [main:38] - replacing K String
2021-03-11 12:21:58,296 [main:42] - Getting value of type String
2021-03-11 12:21:58,382 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:58,382 [main:46] - GENERATED VALUE OF TYPE String = "jhuoh"
2021-03-11 12:21:58,382 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:58,384 [main:55] - randomType = A
2021-03-11 12:21:58,467 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:21:58,467 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}
2021-03-11 12:21:58,474 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f84a5c8]
2021-03-11 12:21:58,558 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:58,639 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:58,722 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:58,723 [main:66] - Generated call from random type = (A()).K.replaceAfterLast('æ¨', "wxhaw", "pmwbr")
2021-03-11 12:21:58,723 [main:63] - replacement of K of type String is (A()).K.replaceAfterLast('æ¨', "wxhaw", "pmwbr")
2021-03-11 12:21:58,803 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:21:58,803 [main:66] - Compilation checking started
2021-03-11 12:21:59,029 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        (A()).K.replaceAfterLast('æ¨', "wxhaw", "pmwbr") = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:21:59,031 [main:56] - replacing (K, String)
2021-03-11 12:21:59,031 [main:38] - replacing K String
2021-03-11 12:21:59,031 [main:42] - Getting value of type String
2021-03-11 12:21:59,115 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:59,115 [main:46] - GENERATED VALUE OF TYPE String = "bjdqx"
2021-03-11 12:21:59,115 [main:49] - GENERATED IS CALL =false
2021-03-11 12:21:59,473 [main:55] - randomType = Map<Char?, ULong>
2021-03-11 12:21:59,474 [main:94] - GETTING String from B
2021-03-11 12:21:59,482 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b178a27]]
2021-03-11 12:21:59,482 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b178a27]
2021-03-11 12:21:59,482 [main:105] - GENERATED CALL = (B()).K.trimEnd()
2021-03-11 12:21:59,482 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cbf9b7]]
2021-03-11 12:21:59,483 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cbf9b7]
2021-03-11 12:21:59,561 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:21:59,562 [main:105] - GENERATED CALL = (B()).K.prependIndent("ypkce")
2021-03-11 12:21:59,562 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]]
2021-03-11 12:21:59,562 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]
2021-03-11 12:21:59,671 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:59,761 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:21:59,762 [main:105] - GENERATED CALL = (B()).K.padEnd(-1496706935, 'á¯')
2021-03-11 12:21:59,762 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]]
2021-03-11 12:21:59,762 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]
2021-03-11 12:21:59,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:59,927 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:21:59,927 [main:105] - GENERATED CALL = (B()).K.removeRange(-1835183511, 1780292988)
2021-03-11 12:21:59,928 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]]
2021-03-11 12:21:59,928 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]
2021-03-11 12:21:59,928 [main:105] - GENERATED CALL = (B()).K.toLowerCase()
2021-03-11 12:21:59,928 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6715a7]]
2021-03-11 12:21:59,928 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6715a7]
2021-03-11 12:22:00,011 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:00,012 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:00,012 [main:105] - GENERATED CALL = (B()).K.takeLastWhile({a: Char -> false})
2021-03-11 12:22:00,013 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:22:00,013 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:22:00,095 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:00,095 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:00,095 [main:105] - GENERATED CALL = (B()).K.takeWhile({a: Char -> true})
2021-03-11 12:22:00,096 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]]
2021-03-11 12:22:00,096 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]
2021-03-11 12:22:00,175 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:00,175 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:00,176 [main:105] - GENERATED CALL = (B()).K.dropWhile({a: Char -> false})
2021-03-11 12:22:00,176 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]]
2021-03-11 12:22:00,176 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:22:00,274 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:22:00,275 [main:105] - GENERATED CALL = (B()).K.plus("yspce")
2021-03-11 12:22:00,275 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]]
2021-03-11 12:22:00,275 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]
2021-03-11 12:22:00,368 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:00,452 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:00,452 [main:105] - GENERATED CALL = (B()).K.substringAfter('ï«²', "sebdf")
2021-03-11 12:22:00,453 [main:63] - replacement of K of type String is (B()).K.dropWhile({a: Char -> false})
2021-03-11 12:22:00,535 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:00,536 [main:66] - Compilation checking started
2021-03-11 12:22:00,765 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        (B()).K.dropWhile({a: Char -> false}) = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:22:00,767 [main:56] - replacing (Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:22:00,767 [main:38] - replacing Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:22:00,767 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:22:00,847 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:22:00,937 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:00,939 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:01,039 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:22:01,039 [main:95] - GENERATED = ObservableProperty<String>("mtkju")
2021-03-11 12:22:01,040 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("mtkju")
2021-03-11 12:22:01,040 [main:49] - GENERATED IS CALL =true
2021-03-11 12:22:01,285 [main:55] - randomType = Sequence<B>
2021-03-11 12:22:01,286 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:22:01,293 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:01,315 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:01,316 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:01,317 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:22:01,328 [main:63] - replacement of Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("mtkju")
2021-03-11 12:22:01,411 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:22:01,411 [main:66] - Compilation checking started
2021-03-11 12:22:01,601 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by ObservableProperty<String>("mtkju")
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:22:01,602 [main:56] - replacing (K, String)
2021-03-11 12:22:01,602 [main:38] - replacing K String
2021-03-11 12:22:01,602 [main:42] - Getting value of type String
2021-03-11 12:22:01,681 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:01,681 [main:46] - GENERATED VALUE OF TYPE String = "xktef"
2021-03-11 12:22:01,682 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:01,765 [main:55] - randomType = UByte
2021-03-11 12:22:01,858 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:22:01,902 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3e6fe888]
2021-03-11 12:22:01,903 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521fe088]
2021-03-11 12:22:01,987 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:01,987 [main:66] - Generated call from random type = (98.toUByte()).toByte().toString(616453303)
2021-03-11 12:22:01,988 [main:94] - GETTING String from B
2021-03-11 12:22:02,002 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@317da447]]
2021-03-11 12:22:02,003 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@317da447]
2021-03-11 12:22:02,085 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:02,170 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:02,170 [main:105] - GENERATED CALL = (B()).K.replaceIndentByMargin("mgjnl", "vayby")
2021-03-11 12:22:02,170 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]]
2021-03-11 12:22:02,171 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]
2021-03-11 12:22:02,254 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:02,333 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:02,334 [main:105] - GENERATED CALL = (B()).K.removeRange(-1307851699, 555591827)
2021-03-11 12:22:02,334 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]]
2021-03-11 12:22:02,334 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]
2021-03-11 12:22:02,413 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:02,413 [main:105] - GENERATED CALL = (B()).K.dropLast(-561107843)
2021-03-11 12:22:02,413 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6356e336]]
2021-03-11 12:22:02,413 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6356e336]
2021-03-11 12:22:02,491 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:02,495 [main:105] - GENERATED CALL = (B()).K.removeSuffix("ymbct")
2021-03-11 12:22:02,495 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]]
2021-03-11 12:22:02,495 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:22:02,595 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:22:02,595 [main:105] - GENERATED CALL = (B()).K.plus("rnugh")
2021-03-11 12:22:02,595 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]]
2021-03-11 12:22:02,595 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]
2021-03-11 12:22:02,595 [main:105] - GENERATED CALL = (B()).K.trim()
2021-03-11 12:22:02,596 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]]
2021-03-11 12:22:02,596 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]
2021-03-11 12:22:02,686 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:02,686 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:02,687 [main:105] - GENERATED CALL = (B()).K.filterNot({a: Char -> true})
2021-03-11 12:22:02,687 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]]
2021-03-11 12:22:02,687 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]
2021-03-11 12:22:02,687 [main:105] - GENERATED CALL = (B()).K.toLowerCase()
2021-03-11 12:22:02,687 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@308b60ba]]
2021-03-11 12:22:02,687 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@308b60ba]
2021-03-11 12:22:02,768 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:02,768 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:02,769 [main:105] - GENERATED CALL = (B()).K.dropLastWhile({a: Char -> true})
2021-03-11 12:22:02,769 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@5bc0d62d], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:22:02,769 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:22:02,850 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:02,850 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:02,851 [main:105] - GENERATED CALL = (B()).K.takeWhile({a: Char -> false})
2021-03-11 12:22:02,851 [main:63] - replacement of K of type String is (B()).K.trim()
2021-03-11 12:22:02,934 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:02,934 [main:66] - Compilation checking started
2021-03-11 12:22:03,147 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        (B()).K.trim() = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:22:03,149 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:22:03,149 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:03,149 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:03,229 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:22:03,230 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:22:03,314 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:22:03,315 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:22:03,586 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:22:03,586 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:22:03,586 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:22:03,587 [main:95] - GENERATED = require(true, { "smybr"})
2021-03-11 12:22:03,587 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> require(true, { "smybr"})}
2021-03-11 12:22:03,587 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:03,588 [main:55] - randomType = A
2021-03-11 12:22:03,667 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:22:03,668 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}
2021-03-11 12:22:03,686 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:03,722 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:22:03,743 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:22:03,760 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:03,771 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:03,771 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> require(true, { "smybr"})}
2021-03-11 12:22:03,849 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:22:03,850 [main:66] - Compilation checking started
2021-03-11 12:22:04,058 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) {a: KProperty<*>, b: String, c: String -> require(true, { "smybr"})}
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:22:04,060 [main:56] - replacing (Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:22:04,060 [main:38] - replacing Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:22:04,060 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:22:04,143 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:22:04,225 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:04,226 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:04,324 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:22:04,325 [main:95] - GENERATED = ObservableProperty<String>("dkztt")
2021-03-11 12:22:04,325 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("dkztt")
2021-03-11 12:22:04,325 [main:49] - GENERATED IS CALL =true
2021-03-11 12:22:04,325 [main:55] - randomType = String
2021-03-11 12:22:04,405 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:04,434 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:04,461 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:22:04,468 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:22:04,478 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:04,479 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:04,479 [main:63] - replacement of Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("dkztt")
2021-03-11 12:22:04,563 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:22:04,563 [main:66] - Compilation checking started
2021-03-11 12:22:04,747 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by ObservableProperty<String>("dkztt")
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        X.O + (X).O.trimIndent()


2021-03-11 12:22:04,748 [main:56] - replacing (X.O, String)
2021-03-11 12:22:04,748 [main:38] - replacing X.O String
2021-03-11 12:22:04,748 [main:42] - Getting value of type String
2021-03-11 12:22:04,830 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:04,830 [main:46] - GENERATED VALUE OF TYPE String = "yonhj"
2021-03-11 12:22:04,830 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:04,997 [main:55] - randomType = MutableMap<UInt, String>
2021-03-11 12:22:04,998 [main:94] - GETTING String from X
2021-03-11 12:22:05,003 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]]
2021-03-11 12:22:05,003 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]
2021-03-11 12:22:05,082 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:05,082 [main:105] - GENERATED CALL = (X).O.dropLast(-194788374)
2021-03-11 12:22:05,082 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]]
2021-03-11 12:22:05,082 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]
2021-03-11 12:22:05,160 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:05,161 [main:105] - GENERATED CALL = (X).O.concat("czxpp")
2021-03-11 12:22:05,161 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]]
2021-03-11 12:22:05,161 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]
2021-03-11 12:22:05,161 [main:105] - GENERATED CALL = (X).O.lowercase()
2021-03-11 12:22:05,161 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]]
2021-03-11 12:22:05,161 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]
2021-03-11 12:22:05,256 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:05,336 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:05,415 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:05,416 [main:105] - GENERATED CALL = (X).O.replace('é¬', 'ç³¨', true)
2021-03-11 12:22:05,416 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:22:05,416 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:22:05,499 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:05,500 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:05,500 [main:105] - GENERATED CALL = (X).O.takeWhile({a: Char -> false})
2021-03-11 12:22:05,500 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]]
2021-03-11 12:22:05,501 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]
2021-03-11 12:22:05,585 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:05,667 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:05,748 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:05,752 [main:105] - GENERATED CALL = (X).O.replaceRange(-1845404774, 1267328021, "bqwgk")
2021-03-11 12:22:05,752 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]]
2021-03-11 12:22:05,752 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]
2021-03-11 12:22:05,752 [main:105] - GENERATED CALL = (X).O.uppercase()
2021-03-11 12:22:05,752 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6715a7]]
2021-03-11 12:22:05,752 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6715a7]
2021-03-11 12:22:05,835 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:05,836 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:05,836 [main:105] - GENERATED CALL = (X).O.takeLastWhile({a: Char -> false})
2021-03-11 12:22:05,837 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]]
2021-03-11 12:22:05,837 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]
2021-03-11 12:22:05,920 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:06,006 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:06,007 [main:105] - GENERATED CALL = (X).O.removeRange(-1905522168, 766651140)
2021-03-11 12:22:06,007 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795c8413]]
2021-03-11 12:22:06,007 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795c8413]
2021-03-11 12:22:06,146 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:06,275 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:06,356 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:06,357 [main:105] - GENERATED CALL = (X).O.replaceFirst('èº', 'â', false)
2021-03-11 12:22:06,357 [main:63] - replacement of X.O of type String is (X).O.removeRange(-1905522168, 766651140)
2021-03-11 12:22:06,436 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:06,436 [main:66] - Compilation checking started
2021-03-11 12:22:06,787 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:06,789 [main:56] - replacing (K, String)
2021-03-11 12:22:06,790 [main:38] - replacing K String
2021-03-11 12:22:06,790 [main:42] - Getting value of type String
2021-03-11 12:22:06,872 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:06,872 [main:46] - GENERATED VALUE OF TYPE String = "zzmfy"
2021-03-11 12:22:06,872 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:06,873 [main:55] - randomType = A
2021-03-11 12:22:06,951 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:22:06,951 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}
2021-03-11 12:22:06,956 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]
2021-03-11 12:22:07,038 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:07,039 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:07,040 [main:66] - Generated call from random type = (A()).K.filterNot({a: Char -> false})
2021-03-11 12:22:07,040 [main:94] - GETTING String from String
2021-03-11 12:22:07,076 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]]
2021-03-11 12:22:07,076 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]
2021-03-11 12:22:07,182 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:07,183 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:07,185 [main:105] - GENERATED CALL = (X.O).dropWhile({a: Char -> true})
2021-03-11 12:22:07,185 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]]
2021-03-11 12:22:07,185 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]
2021-03-11 12:22:07,185 [main:105] - GENERATED CALL = (X.O).trimStart()
2021-03-11 12:22:07,185 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]]
2021-03-11 12:22:07,185 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]
2021-03-11 12:22:07,270 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:07,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:07,352 [main:105] - GENERATED CALL = (X.O).commonPrefixWith("eogir", true)
2021-03-11 12:22:07,352 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:22:07,352 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:22:07,432 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:07,432 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:07,433 [main:105] - GENERATED CALL = (X.O).takeWhile({a: Char -> true})
2021-03-11 12:22:07,433 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]]
2021-03-11 12:22:07,433 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]
2021-03-11 12:22:07,522 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:07,603 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:07,603 [main:105] - GENERATED CALL = (X.O).commonSuffixWith("wwisr", true)
2021-03-11 12:22:07,603 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]]
2021-03-11 12:22:07,603 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]
2021-03-11 12:22:07,681 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:07,767 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:07,845 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:07,845 [main:105] - GENERATED CALL = (X.O).replaceBeforeLast('ê¢¥', "yprit", "axmid")
2021-03-11 12:22:07,845 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]]
2021-03-11 12:22:07,845 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]
2021-03-11 12:22:07,953 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:08,059 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:08,141 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:08,224 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:22:08,225 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:22:08,391 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:22:08,395 [main:95] - GENERATED = StringBuilder("hqmkg")
2021-03-11 12:22:08,395 [main:105] - GENERATED CALL = (X.O).replaceRange(-694440060, -1145585084, StringBuilder("hqmkg"))
2021-03-11 12:22:08,395 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]]
2021-03-11 12:22:08,395 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]
2021-03-11 12:22:08,395 [main:105] - GENERATED CALL = (X.O).lowercase()
2021-03-11 12:22:08,395 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6715a7]]
2021-03-11 12:22:08,395 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6715a7]
2021-03-11 12:22:08,477 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:08,478 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:08,478 [main:105] - GENERATED CALL = (X.O).takeLastWhile({a: Char -> true})
2021-03-11 12:22:08,478 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]]
2021-03-11 12:22:08,478 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:22:08,560 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:08,659 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:08,659 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]
2021-03-11 12:22:08,749 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:08,832 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:22:08,834 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:22:08,999 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:22:08,999 [main:95] - GENERATED = StringBuilder("qijzu")
2021-03-11 12:22:09,078 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:09,079 [main:105] - GENERATED CALL = (X.O).subSequence(1421647154, -929411080).commonSuffixWith(StringBuilder("qijzu"), true)
2021-03-11 12:22:09,079 [main:63] - replacement of K of type String is (A()).K.filterNot({a: Char -> false})
2021-03-11 12:22:09,157 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:09,157 [main:66] - Compilation checking started
2021-03-11 12:22:09,380 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        (A()).K.filterNot({a: Char -> false}) = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:09,381 [main:56] - replacing (K, String)
2021-03-11 12:22:09,382 [main:38] - replacing K String
2021-03-11 12:22:09,382 [main:42] - Getting value of type String
2021-03-11 12:22:09,463 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:09,464 [main:46] - GENERATED VALUE OF TYPE String = "xnxwe"
2021-03-11 12:22:09,464 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:09,465 [main:55] - randomType = Float
2021-03-11 12:22:09,608 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:22:09,691 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4364c347]
2021-03-11 12:22:09,691 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@436b57bd]
2021-03-11 12:22:09,691 [main:66] - Generated call from random type = (0.51963276f).toChar().lowercase()
2021-03-11 12:22:09,692 [main:94] - GETTING String from X
2021-03-11 12:22:09,698 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6356e336]]
2021-03-11 12:22:09,698 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6356e336]
2021-03-11 12:22:09,784 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:09,790 [main:105] - GENERATED CALL = (X).O.removeSuffix(StringBuilder())
2021-03-11 12:22:09,790 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]]
2021-03-11 12:22:09,790 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]
2021-03-11 12:22:09,790 [main:105] - GENERATED CALL = (X).O.lowercase()
2021-03-11 12:22:09,790 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]]
2021-03-11 12:22:09,790 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]
2021-03-11 12:22:09,790 [main:105] - GENERATED CALL = (X).O.toLowerCase()
2021-03-11 12:22:09,791 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5]]
2021-03-11 12:22:09,791 [main:105] - GENERATED CALL = (X).O
2021-03-11 12:22:09,791 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]]
2021-03-11 12:22:09,791 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]
2021-03-11 12:22:09,791 [main:105] - GENERATED CALL = (X).O.trim()
2021-03-11 12:22:09,791 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]]
2021-03-11 12:22:09,791 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]
2021-03-11 12:22:09,878 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:09,966 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:10,044 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:10,044 [main:105] - GENERATED CALL = (X).O.replaceBeforeLast('ê³', "rbhro", "kwlai")
2021-03-11 12:22:10,044 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]]
2021-03-11 12:22:10,044 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]
2021-03-11 12:22:10,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:10,201 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:10,202 [main:105] - GENERATED CALL = (X).O.padEnd(-712239525, 'ì¨')
2021-03-11 12:22:10,202 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]]
2021-03-11 12:22:10,202 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]
2021-03-11 12:22:10,202 [main:105] - GENERATED CALL = (X).O.trimStart()
2021-03-11 12:22:10,202 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:22:10,202 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:22:10,203 [main:105] - GENERATED CALL = (X).O.trimIndent()
2021-03-11 12:22:10,203 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@4ae97cd5], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]]
2021-03-11 12:22:10,203 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]
2021-03-11 12:22:10,299 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:10,389 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:10,390 [main:105] - GENERATED CALL = (X).O.substringAfterLast('í', "yoliz")
2021-03-11 12:22:10,390 [main:63] - replacement of K of type String is "xnxwe"
2021-03-11 12:22:10,469 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:22:10,469 [main:66] - Compilation checking started
2021-03-11 12:22:10,670 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        "xnxwe" = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:10,672 [main:56] - replacing (Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:22:10,672 [main:38] - replacing Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:22:10,672 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:22:10,751 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:22:10,833 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:10,834 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:10,922 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:22:10,923 [main:95] - GENERATED = ObservableProperty<String>("vvhau")
2021-03-11 12:22:10,923 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("vvhau")
2021-03-11 12:22:10,923 [main:49] - GENERATED IS CALL =true
2021-03-11 12:22:11,034 [main:55] - randomType = B
2021-03-11 12:22:11,121 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:22:11,122 [main:112] - generating klass B text = class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}
2021-03-11 12:22:11,135 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:11,163 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:11,164 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:22:11,173 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:22:11,178 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:11,178 [main:63] - replacement of Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("vvhau")
2021-03-11 12:22:11,255 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:22:11,255 [main:66] - Compilation checking started
2021-03-11 12:22:11,431 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by ObservableProperty<String>("vvhau")
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:11,433 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:22:11,433 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:11,433 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:11,512 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:22:11,513 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:22:11,595 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:22:11,596 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:22:11,783 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:22:11,784 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:22:11,866 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:22:11,867 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:22:12,029 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:22:12,030 [main:95] - GENERATED = require(false)
2021-03-11 12:22:12,030 [main:95] - GENERATED = contract({ require(false)})
2021-03-11 12:22:12,030 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> contract({ require(false)})}
2021-03-11 12:22:12,030 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:12,111 [main:55] - randomType = Long
2021-03-11 12:22:12,191 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:22:12,248 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:22:12,264 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:12,294 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:22:12,314 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:12,325 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:12,325 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> contract({ require(false)})}
2021-03-11 12:22:12,403 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:22:12,403 [main:66] - Compilation checking started
2021-03-11 12:22:12,622 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) {a: KProperty<*>, b: String, c: String -> contract({ require(false)})}
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:12,624 [main:56] - replacing (Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:22:12,624 [main:38] - replacing Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:22:12,624 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:22:12,702 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:22:12,788 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:12,789 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:12,871 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:22:12,871 [main:95] - GENERATED = ObservableProperty<String>("whdng")
2021-03-11 12:22:12,871 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("whdng")
2021-03-11 12:22:12,872 [main:49] - GENERATED IS CALL =true
2021-03-11 12:22:12,872 [main:55] - randomType = String
2021-03-11 12:22:12,951 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:12,975 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:12,996 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:22:13,007 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:22:13,015 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:13,017 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:13,017 [main:63] - replacement of Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("whdng")
2021-03-11 12:22:13,095 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:22:13,096 [main:66] - Compilation checking started
2021-03-11 12:22:13,293 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by ObservableProperty<String>("whdng")
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:13,294 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:22:13,294 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:13,295 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:13,379 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:22:13,379 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:22:13,481 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:22:13,482 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:22:13,647 [main:95] - GENERATED = println(null)
2021-03-11 12:22:13,647 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> println(null)}
2021-03-11 12:22:13,647 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:13,730 [main:55] - randomType = UInt
2021-03-11 12:22:13,809 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:22:13,858 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:22:13,874 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:13,902 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:13,913 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:13,924 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:22:13,934 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> println(null)}
2021-03-11 12:22:14,012 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:22:14,012 [main:66] - Compilation checking started
2021-03-11 12:22:14,228 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> println(null)}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:14,230 [main:56] - replacing (K, String)
2021-03-11 12:22:14,230 [main:38] - replacing K String
2021-03-11 12:22:14,230 [main:42] - Getting value of type String
2021-03-11 12:22:14,313 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:14,313 [main:46] - GENERATED VALUE OF TYPE String = "ezyma"
2021-03-11 12:22:14,313 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:14,490 [main:55] - randomType = B?
2021-03-11 12:22:14,569 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:22:14,570 [main:112] - generating klass B text = class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}
2021-03-11 12:22:14,581 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]
2021-03-11 12:22:14,659 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:22:14,743 [main:43] - GENERATING CALL OF fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): Iterable<Int> = TODO()
2021-03-11 12:22:14,744 [main:61] - WITHOUT TYPE PARAMS = fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): Iterable<Int> = TODO()
2021-03-11 12:22:15,000 [main:302] - generating value of type = Long true depth = 3
2021-03-11 12:22:15,001 [main:302] - generating value of type = Long true depth = 3
2021-03-11 12:22:15,001 [main:95] - GENERATED = LongRange(5951401755587044370, -3584043775040974532)
2021-03-11 12:22:15,002 [main:66] - Generated call from random type = (B())?.K.slice(LongRange(5951401755587044370, -3584043775040974532))
2021-03-11 12:22:15,002 [main:63] - replacement of K of type String is (B())?.K.slice(LongRange(5951401755587044370, -3584043775040974532))
2021-03-11 12:22:15,081 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:15,082 [main:66] - Compilation checking started
2021-03-11 12:22:15,362 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        (B())?.K.slice(LongRange(5951401755587044370, -3584043775040974532)) = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:15,365 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:22:15,365 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:15,365 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:15,456 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:22:15,456 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:22:15,546 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:22:15,547 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:22:15,714 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:22:15,714 [main:95] - GENERATED = check(true)
2021-03-11 12:22:15,714 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> check(true)}
2021-03-11 12:22:15,715 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:15,796 [main:55] - randomType = String?
2021-03-11 12:22:15,876 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:15,911 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:15,950 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:15,961 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:22:15,979 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:15,991 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:22:16,003 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> check(true)}
2021-03-11 12:22:16,082 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:22:16,083 [main:66] - Compilation checking started
2021-03-11 12:22:16,281 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> check(true)}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:16,283 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:22:16,283 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:16,283 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:16,384 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:22:16,385 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:22:16,388 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> println()}
2021-03-11 12:22:16,389 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:16,474 [main:55] - randomType = Char
2021-03-11 12:22:16,554 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:16,583 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:22:16,603 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:16,632 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:22:16,647 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:16,658 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:16,658 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> println()}
2021-03-11 12:22:16,736 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:22:16,737 [main:66] - Compilation checking started
2021-03-11 12:22:16,930 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) {a: KProperty<*>, b: String, c: String -> println()}
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:16,931 [main:56] - replacing (Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:22:16,931 [main:38] - replacing Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:22:16,931 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:22:17,010 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:22:17,093 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:17,094 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:17,174 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:22:17,175 [main:95] - GENERATED = ObservableProperty<String>("bagqo")
2021-03-11 12:22:17,175 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("bagqo")
2021-03-11 12:22:17,175 [main:49] - GENERATED IS CALL =true
2021-03-11 12:22:17,255 [main:55] - randomType = B
2021-03-11 12:22:17,334 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:22:17,334 [main:112] - generating klass B text = class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}
2021-03-11 12:22:17,343 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:22:17,351 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:22:17,356 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:17,395 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:17,396 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:17,396 [main:63] - replacement of Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("bagqo")
2021-03-11 12:22:17,474 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:22:17,475 [main:66] - Compilation checking started
2021-03-11 12:22:17,656 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by ObservableProperty<String>("bagqo")
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:17,658 [main:56] - replacing (Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:22:17,658 [main:38] - replacing Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:22:17,658 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:22:17,737 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:22:17,818 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:17,819 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:17,903 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:22:17,904 [main:95] - GENERATED = ObservableProperty<String>("osvci")
2021-03-11 12:22:17,904 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("osvci")
2021-03-11 12:22:17,904 [main:49] - GENERATED IS CALL =true
2021-03-11 12:22:17,989 [main:55] - randomType = ArrayDeque<X>
2021-03-11 12:22:18,068 [main:302] - generating value of type = ArrayDeque<X> false depth = 0
2021-03-11 12:22:18,152 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<X> = TODO()
2021-03-11 12:22:18,153 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<X> = TODO()
2021-03-11 12:22:18,234 [main:95] - GENERATED = ArrayDeque<X>()
2021-03-11 12:22:18,434 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:22:18,442 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:22:18,460 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:18,495 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:18,496 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:18,496 [main:63] - replacement of Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("osvci")
2021-03-11 12:22:18,607 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:22:18,608 [main:66] - Compilation checking started
2021-03-11 12:22:18,824 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by ObservableProperty<String>("osvci")
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:18,826 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:22:18,826 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:18,826 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:18,908 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:22:18,908 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:22:18,998 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:22:18,999 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:22:19,253 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:22:19,254 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 12:22:19,255 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:22:19,259 [main:95] - GENERATED = repeat(-551537594, {a: Int -> println()})
2021-03-11 12:22:19,259 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> repeat(-551537594, {a: Int -> println()})}
2021-03-11 12:22:19,259 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:19,260 [main:55] - randomType = A
2021-03-11 12:22:19,339 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:22:19,339 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}
2021-03-11 12:22:19,361 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:19,411 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:19,422 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:22:19,445 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:19,457 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:22:19,463 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> repeat(-551537594, {a: Int -> println()})}
2021-03-11 12:22:19,543 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:22:19,544 [main:66] - Compilation checking started
2021-03-11 12:22:19,778 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) {a: KProperty<*>, b: String, c: String -> repeat(-551537594, {a: Int -> println()})}
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:19,780 [main:56] - replacing ({ prop, old, new -> }, Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>)
2021-03-11 12:22:19,780 [main:38] - replacing { prop, old, new -> } Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:19,780 [main:42] - Getting value of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit>
2021-03-11 12:22:19,881 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-11 12:22:19,881 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:22:19,974 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:22:19,975 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:22:20,221 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:22:20,222 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:22:20,222 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:22:20,222 [main:95] - GENERATED = require(false, { "vpgqd"})
2021-03-11 12:22:20,222 [main:46] - GENERATED VALUE OF TYPE Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> = {a: KProperty<*>, b: String, c: String -> require(false, { "vpgqd"})}
2021-03-11 12:22:20,222 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:20,223 [main:55] - randomType = A
2021-03-11 12:22:20,302 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:22:20,303 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}
2021-03-11 12:22:20,320 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:20,350 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from B
2021-03-11 12:22:20,369 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:20,380 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from String
2021-03-11 12:22:20,391 [main:94] - GETTING Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> from X
2021-03-11 12:22:20,397 [main:63] - replacement of { prop, old, new -> } of type Function3<[@kotlin.ParameterName] KProperty<*>, [@kotlin.ParameterName] String, [@kotlin.ParameterName] String, Unit> is {a: KProperty<*>, b: String, c: String -> require(false, { "vpgqd"})}
2021-03-11 12:22:20,474 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:22:20,475 [main:66] - Compilation checking started
2021-03-11 12:22:20,671 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) {a: KProperty<*>, b: String, c: String -> require(false, { "vpgqd"})}
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:20,673 [main:56] - replacing (Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }, ReadWriteProperty<Any?, String>)
2021-03-11 12:22:20,673 [main:38] - replacing Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } ReadWriteProperty<Any?, String>
2021-03-11 12:22:20,673 [main:42] - Getting value of type ReadWriteProperty<Any?, String>
2021-03-11 12:22:20,752 [main:302] - generating value of type = ReadWriteProperty<Any?, String> false depth = 0
2021-03-11 12:22:20,835 [main:43] - GENERATING CALL OF fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:20,836 [main:61] - WITHOUT TYPE PARAMS = fun <V> ObservableProperty(initialValue: String): ReadWriteProperty<Any?, String> = TODO()
2021-03-11 12:22:20,937 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:22:20,937 [main:95] - GENERATED = ObservableProperty<String>("hjicm")
2021-03-11 12:22:20,937 [main:46] - GENERATED VALUE OF TYPE ReadWriteProperty<Any?, String> = ObservableProperty<String>("hjicm")
2021-03-11 12:22:20,937 [main:49] - GENERATED IS CALL =true
2021-03-11 12:22:21,018 [main:55] - randomType = B
2021-03-11 12:22:21,096 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:22:21,096 [main:112] - generating klass B text = class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}
2021-03-11 12:22:21,106 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:21,125 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:21,127 [main:94] - GETTING ReadWriteProperty<Any?, String> from X
2021-03-11 12:22:21,135 [main:94] - GETTING ReadWriteProperty<Any?, String> from B
2021-03-11 12:22:21,147 [main:94] - GETTING ReadWriteProperty<Any?, String> from String
2021-03-11 12:22:21,147 [main:63] - replacement of Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> } of type ReadWriteProperty<Any?, String> is ObservableProperty<String>("hjicm")
2021-03-11 12:22:21,228 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:22:21,228 [main:66] - Compilation checking started
2021-03-11 12:22:21,409 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by ObservableProperty<String>("hjicm")
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(772860907)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:21,492 [main:90] - TRYING TO REPLACE CONSTANT 772860907
2021-03-11 12:22:21,570 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:22:21,571 [main:66] - Compilation checking started
2021-03-11 12:22:21,916 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(1293922444, 0.91319066f)).size.toString(1905522168)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:21,916 [main:90] - TRYING TO REPLACE CONSTANT 1293922444
2021-03-11 12:22:21,994 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:22:21,994 [main:66] - Compilation checking started
2021-03-11 12:22:22,319 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1210331152, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(766651140, 0.91319066f)).size.toString(1905522168)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:22,320 [main:90] - TRYING TO REPLACE CONSTANT 0.91319066f
2021-03-11 12:22:22,402 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:22:22,403 [main:66] - Compilation checking started
2021-03-11 12:22:22,710 [main:90] - TRYING TO REPLACE CONSTANT 1210331152
2021-03-11 12:22:22,790 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:22:22,790 [main:66] - Compilation checking started
2021-03-11 12:22:23,093 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1905522168, -324572970)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(766651140, 0.91319066f)).size.toString(1905522168)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:23,094 [main:90] - TRYING TO REPLACE CONSTANT 324572970
2021-03-11 12:22:23,172 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:22:23,172 [main:66] - Compilation checking started
2021-03-11 12:22:23,489 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1905522168, 772860907)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(766651140, 0.91319066f)).size.toString(1905522168)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 766651140) + (X).O.trimIndent()


2021-03-11 12:22:23,489 [main:90] - TRYING TO REPLACE CONSTANT 766651140
2021-03-11 12:22:23,568 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:22:23,568 [main:66] - Compilation checking started
2021-03-11 12:22:23,867 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1905522168, 772860907)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(766651140, 0.91319066f)).size.toString(1905522168)
    }
}

fun box(): String =
        (X).O.removeRange(-1905522168, 1905522168) + (X).O.trimIndent()


2021-03-11 12:22:23,868 [main:90] - TRYING TO REPLACE CONSTANT 1905522168
2021-03-11 12:22:23,950 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:22:23,950 [main:66] - Compilation checking started
2021-03-11 12:22:24,246 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable((X).O.removeSurrounding(StringBuilder(StringBuilder()))) { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable((X).O.removeRange(1905522168, 772860907)) { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = (LinkedHashMap<X, Float>(766651140, 0.91319066f)).size.toString(1905522168)
    }
}

fun box(): String =
        (X).O.removeRange(772860907, 1905522168) + (X).O.trimIndent()


2021-03-11 12:22:24,271 [main:46] - AFTER TRY 0 res = import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K
2021-03-11 12:22:24,418 [main:112] - generating klass X text = object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}
2021-03-11 12:22:24,419 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}
2021-03-11 12:22:24,419 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:22:24,569 [main:48] - Try â0
2021-03-11 12:22:25,330 [main:71] - Trying to insert inline fun fu0(capturedParam: String, lambda: () -> String = { capturedParam }): String {
    return lambda()
}
2021-03-11 12:22:25,434 [main:66] - Compilation checking started
2021-03-11 12:22:25,997 [main:99] - Trying to change 6 nodes
2021-03-11 12:22:25,997 [main:103] - replacing ({ capturedParam }, Function0<String>)
2021-03-11 12:22:25,997 [main:38] - replacing { capturedParam } Function0<String>
2021-03-11 12:22:25,998 [main:42] - Getting value of type Function0<String>
2021-03-11 12:22:26,081 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 12:22:26,082 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:22:26,082 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "yilea"}
2021-03-11 12:22:26,082 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:26,083 [main:55] - randomType = B
2021-03-11 12:22:26,163 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:22:26,163 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:22:26,178 [main:94] - GETTING Function0<String> from String
2021-03-11 12:22:26,209 [main:94] - GETTING Function0<String> from String
2021-03-11 12:22:26,210 [main:94] - GETTING Function0<String> from String
2021-03-11 12:22:26,211 [main:94] - GETTING Function0<String> from X
2021-03-11 12:22:26,219 [main:94] - GETTING Function0<String> from B
2021-03-11 12:22:26,232 [main:110] - replacement of { capturedParam } of type Function0<String> is { "yilea"}
2021-03-11 12:22:26,313 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:22:26,313 [main:66] - Compilation checking started
2021-03-11 12:22:26,644 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return lambda()
}

fun box792(): String {
    return fu0("OK")
}


2021-03-11 12:22:26,644 [main:103] - replacing ("OK", String)
2021-03-11 12:22:26,645 [main:38] - replacing "OK" String
2021-03-11 12:22:26,645 [main:42] - Getting value of type String
2021-03-11 12:22:26,762 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:26,762 [main:46] - GENERATED VALUE OF TYPE String = "rgucq"
2021-03-11 12:22:26,762 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:26,846 [main:55] - randomType = Int
2021-03-11 12:22:26,925 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:26,977 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@546329a5]
2021-03-11 12:22:26,977 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521fe088]
2021-03-11 12:22:27,055 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:27,055 [main:66] - Generated call from random type = (-534533548).toByte().toString(-1058749707)
2021-03-11 12:22:27,055 [main:94] - GETTING String from String
2021-03-11 12:22:27,081 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f84a5c8]]
2021-03-11 12:22:27,081 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f84a5c8]
2021-03-11 12:22:27,156 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:27,232 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:27,308 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:27,309 [main:105] - GENERATED CALL = (X.O).replaceAfterLast('ë¯', "wvgif", "qsjnh")
2021-03-11 12:22:27,309 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e58a5e]]
2021-03-11 12:22:27,309 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e58a5e]
2021-03-11 12:22:27,384 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:27,384 [main:105] - GENERATED CALL = (X.O).drop(-1672092894)
2021-03-11 12:22:27,384 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]]
2021-03-11 12:22:27,384 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]
2021-03-11 12:22:27,459 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:22:27,459 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:27,460 [main:105] - GENERATED CALL = (X.O).filterIndexed({a: Int, b: Char -> true})
2021-03-11 12:22:27,460 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49928448]]
2021-03-11 12:22:27,460 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49928448]
2021-03-11 12:22:27,460 [main:105] - GENERATED CALL = (X.O).toUpperCase()
2021-03-11 12:22:27,460 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]]
2021-03-11 12:22:27,460 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]
2021-03-11 12:22:27,536 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:27,614 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:22:27,615 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:22:27,799 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:22:27,800 [main:95] - GENERATED = StringBuilder(-1991040188)
2021-03-11 12:22:27,882 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:27,882 [main:105] - GENERATED CALL = (X.O).commonSuffixWith(StringBuilder(-1991040188), false)
2021-03-11 12:22:27,882 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]]
2021-03-11 12:22:27,882 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]
2021-03-11 12:22:27,967 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:28,047 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:22:28,047 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:22:28,205 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:22:28,205 [main:95] - GENERATED = StringBuilder(-1158895570)
2021-03-11 12:22:28,205 [main:105] - GENERATED CALL = (X.O).removeSurrounding(StringBuilder(-1158895570))
2021-03-11 12:22:28,205 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]]
2021-03-11 12:22:28,205 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]
2021-03-11 12:22:28,284 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:28,284 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:28,285 [main:105] - GENERATED CALL = (X.O).dropWhile({a: Char -> true})
2021-03-11 12:22:28,285 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96a81f0]]
2021-03-11 12:22:28,285 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96a81f0]
2021-03-11 12:22:28,360 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:28,435 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:28,436 [main:105] - GENERATED CALL = (X.O).substringBefore('î«', "dqfat")
2021-03-11 12:22:28,436 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]]
2021-03-11 12:22:28,436 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]
2021-03-11 12:22:28,436 [main:105] - GENERATED CALL = (X.O).uppercase()
2021-03-11 12:22:28,436 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]]
2021-03-11 12:22:28,436 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]
2021-03-11 12:22:28,511 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:28,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:28,661 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:28,665 [main:105] - GENERATED CALL = (X.O).replaceRange(-1688668915, -1248242211, "nzqow")
2021-03-11 12:22:28,665 [main:110] - replacement of "OK" of type String is (X.O).replaceRange(-1688668915, -1248242211, "nzqow")
2021-03-11 12:22:28,767 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:28,768 [main:66] - Compilation checking started
2021-03-11 12:22:29,155 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return lambda()
}

fun box792(): String {
    return fu0((X.O).replaceRange(-1688668915, -1248242211, "nzqow"))
}


2021-03-11 12:22:29,155 [main:103] - replacing (lambda, Function0<String>)
2021-03-11 12:22:29,155 [main:38] - replacing lambda Function0<String>
2021-03-11 12:22:29,155 [main:42] - Getting value of type Function0<String>
2021-03-11 12:22:29,232 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 12:22:29,232 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:22:29,232 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "ziarh"}
2021-03-11 12:22:29,232 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:30,008 [main:55] - randomType = Function2<LinkedHashSet<MutableMap<A?, UByte>?>, Long, Float?>
2021-03-11 12:22:30,009 [main:94] - GETTING Function0<String> from String
2021-03-11 12:22:30,040 [main:94] - GETTING Function0<String> from String
2021-03-11 12:22:30,042 [main:94] - GETTING Function0<String> from X
2021-03-11 12:22:30,050 [main:94] - GETTING Function0<String> from B
2021-03-11 12:22:30,066 [main:94] - GETTING Function0<String> from String
2021-03-11 12:22:30,066 [main:110] - replacement of lambda of type Function0<String> is { "ziarh"}
2021-03-11 12:22:30,184 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:22:30,184 [main:66] - Compilation checking started
2021-03-11 12:22:30,540 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return { "ziarh"}()
}

fun box792(): String {
    return fu0((X.O).replaceRange(-1688668915, -1248242211, "nzqow"))
}


2021-03-11 12:22:30,541 [main:103] - replacing ({ "ziarh"}(), String)
2021-03-11 12:22:30,541 [main:38] - replacing { "ziarh"}() String
2021-03-11 12:22:30,541 [main:42] - Getting value of type String
2021-03-11 12:22:30,621 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:30,622 [main:46] - GENERATED VALUE OF TYPE String = "gswzi"
2021-03-11 12:22:30,622 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:30,704 [main:55] - randomType = Char
2021-03-11 12:22:30,783 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:30,808 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e3d2b5]
2021-03-11 12:22:30,809 [main:66] - Generated call from random type = ('ë').uppercase()
2021-03-11 12:22:30,809 [main:94] - GETTING String from String
2021-03-11 12:22:30,829 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]]
2021-03-11 12:22:30,829 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]
2021-03-11 12:22:30,911 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:30,911 [main:105] - GENERATED CALL = (A().K).substring(-281038663)
2021-03-11 12:22:30,911 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]]
2021-03-11 12:22:30,912 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]
2021-03-11 12:22:30,991 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:31,073 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:22:31,074 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:22:31,236 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:22:31,236 [main:95] - GENERATED = StringBuilder(858293956)
2021-03-11 12:22:31,335 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:31,336 [main:105] - GENERATED CALL = (A().K).commonPrefixWith(StringBuilder(858293956), false)
2021-03-11 12:22:31,336 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]]
2021-03-11 12:22:31,336 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]
2021-03-11 12:22:31,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:31,414 [main:105] - GENERATED CALL = (A().K).repeat(2076418335)
2021-03-11 12:22:31,414 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@10e9b3c1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]]
2021-03-11 12:22:31,414 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:22:31,495 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:31,495 [main:105] - GENERATED CALL = (A().K).length.toString(-1346700839)
2021-03-11 12:22:31,495 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]]
2021-03-11 12:22:31,496 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]
2021-03-11 12:22:31,572 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:31,573 [main:105] - GENERATED CALL = (A().K).concat("gehfh")
2021-03-11 12:22:31,573 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]]
2021-03-11 12:22:31,573 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]
2021-03-11 12:22:31,650 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:31,725 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:31,725 [main:105] - GENERATED CALL = (A().K).padEnd(1065584589, 'á¥»')
2021-03-11 12:22:31,725 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]]
2021-03-11 12:22:31,725 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]
2021-03-11 12:22:31,801 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:31,879 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:31,880 [main:105] - GENERATED CALL = (A().K).padStart(-1497333565, 'â¼')
2021-03-11 12:22:31,880 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]]
2021-03-11 12:22:31,880 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]
2021-03-11 12:22:31,880 [main:105] - GENERATED CALL = (A().K).trim()
2021-03-11 12:22:31,880 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]]
2021-03-11 12:22:31,880 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]
2021-03-11 12:22:31,957 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:22:32,039 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 12:22:32,040 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 12:22:32,118 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:22:32,119 [main:95] - GENERATED = listOfNotNull<Int>(1178036274)
2021-03-11 12:22:32,119 [main:105] - GENERATED CALL = (A().K).slice(listOfNotNull<Int>(1178036274))
2021-03-11 12:22:32,119 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27b4ac45]]
2021-03-11 12:22:32,119 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27b4ac45]
2021-03-11 12:22:32,119 [main:105] - GENERATED CALL = (A().K).capitalize()
2021-03-11 12:22:32,119 [main:110] - replacement of { "ziarh"}() of type String is (A().K).slice(listOfNotNull<Int>(1178036274))
2021-03-11 12:22:32,224 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:32,224 [main:66] - Compilation checking started
2021-03-11 12:22:32,640 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return fu0((X.O).replaceRange(-1688668915, -1248242211, "nzqow"))
}


2021-03-11 12:22:32,641 [main:103] - replacing (fu0((X.O).replaceRange(-1688668915, -1248242211, "nzqow")), String)
2021-03-11 12:22:32,641 [main:38] - replacing fu0((X.O).replaceRange(-1688668915, -1248242211, "nzqow")) String
2021-03-11 12:22:32,641 [main:42] - Getting value of type String
2021-03-11 12:22:32,733 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:32,734 [main:46] - GENERATED VALUE OF TYPE String = "aryeh"
2021-03-11 12:22:32,734 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:32,843 [main:55] - randomType = B?
2021-03-11 12:22:32,950 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:22:32,950 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:22:32,966 [main:66] - Generated call from random type = (B())?.K
2021-03-11 12:22:32,967 [main:94] - GETTING String from B
2021-03-11 12:22:32,983 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e58a5e]]
2021-03-11 12:22:32,983 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e58a5e]
2021-03-11 12:22:33,077 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:33,077 [main:105] - GENERATED CALL = (B()).K.drop(-166723559)
2021-03-11 12:22:33,078 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96a81f0]]
2021-03-11 12:22:33,078 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96a81f0]
2021-03-11 12:22:33,174 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:33,259 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:33,259 [main:105] - GENERATED CALL = (B()).K.substringBefore('â¾', "fxipj")
2021-03-11 12:22:33,259 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:22:33,260 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:22:33,342 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:33,343 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:33,343 [main:105] - GENERATED CALL = (B()).K.takeWhile({a: Char -> true})
2021-03-11 12:22:33,344 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]]
2021-03-11 12:22:33,344 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]
2021-03-11 12:22:33,428 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:33,554 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:33,554 [main:105] - GENERATED CALL = (B()).K.padEnd(-1822351463, 'é¥')
2021-03-11 12:22:33,555 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]]
2021-03-11 12:22:33,555 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]
2021-03-11 12:22:33,638 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:33,723 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:33,724 [main:105] - GENERATED CALL = (B()).K.substringAfterLast('å', "qvzae")
2021-03-11 12:22:33,724 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]]
2021-03-11 12:22:33,724 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]
2021-03-11 12:22:33,807 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:33,808 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:33,808 [main:105] - GENERATED CALL = (B()).K.filterNot({a: Char -> false})
2021-03-11 12:22:33,808 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25549b6a]]
2021-03-11 12:22:33,809 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25549b6a]
2021-03-11 12:22:33,892 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:33,975 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:34,057 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:34,058 [main:105] - GENERATED CALL = (B()).K.replaceBefore('ê««', "qijbb", "tqoae")
2021-03-11 12:22:34,058 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]]
2021-03-11 12:22:34,058 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]
2021-03-11 12:22:34,139 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:22:34,229 [main:43] - GENERATING CALL OF fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-11 12:22:34,230 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-11 12:22:34,313 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:22:34,313 [main:95] - GENERATED = listOf<Int>(-1065625168)
2021-03-11 12:22:34,314 [main:105] - GENERATED CALL = (B()).K.slice(listOf<Int>(-1065625168))
2021-03-11 12:22:34,314 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:22:34,314 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:22:34,314 [main:105] - GENERATED CALL = (B()).K.trimIndent()
2021-03-11 12:22:34,314 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@548b8df3], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]]
2021-03-11 12:22:34,314 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:22:34,394 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:22:34,395 [main:105] - GENERATED CALL = (B()).K.plus("uslww")
2021-03-11 12:22:34,395 [main:110] - replacement of fu0((X.O).replaceRange(-1688668915, -1248242211, "nzqow")) of type String is (B()).K.substringBefore('â¾', "fxipj")
2021-03-11 12:22:34,503 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:34,503 [main:66] - Compilation checking started
2021-03-11 12:22:34,870 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}


2021-03-11 12:22:34,950 [main:137] - TRYING TO REPLACE CONSTANT 1178036274
2021-03-11 12:22:35,026 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:22:35,026 [main:66] - Compilation checking started
2021-03-11 12:22:35,341 [main:137] - TRYING TO REPLACE CONSTANT 'â¾'
2021-03-11 12:22:35,426 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 12:22:35,426 [main:66] - Compilation checking started
2021-03-11 12:22:35,741 [main:46] - AFTER TRY 1 res = import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}


2021-03-11 12:22:35,924 [main:112] - generating klass X text = object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}
2021-03-11 12:22:35,925 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}
2021-03-11 12:22:35,925 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:22:36,104 [main:43] - GENERATING CALL OF inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}
2021-03-11 12:22:36,104 [main:61] - WITHOUT TYPE PARAMS = inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}
2021-03-11 12:22:36,281 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:22:36,282 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 12:22:36,282 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:22:36,283 [main:95] - GENERATED = fu0("tlvni", { "lqxga"})
2021-03-11 12:22:36,362 [main:48] - Try â1
2021-03-11 12:22:37,286 [main:71] - Trying to insert fun fu2() = fu1 { r }
2021-03-11 12:22:37,380 [main:66] - Compilation checking started
2021-03-11 12:22:37,973 [main:99] - Trying to change 9 nodes
2021-03-11 12:22:37,973 [main:103] - replacing ("OK", String)
2021-03-11 12:22:37,973 [main:38] - replacing "OK" String
2021-03-11 12:22:37,973 [main:42] - Getting value of type String
2021-03-11 12:22:38,068 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:38,069 [main:46] - GENERATED VALUE OF TYPE String = "mpobo"
2021-03-11 12:22:38,069 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:38,256 [main:55] - randomType = UByte?
2021-03-11 12:22:38,346 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:22:38,386 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UByte): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7cd8623a]
2021-03-11 12:22:38,468 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:22:38,469 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c6bc0]
2021-03-11 12:22:38,551 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:38,551 [main:66] - Generated call from random type = (93.toUByte())?.and(36.toUByte()).toString(-1959959551)
2021-03-11 12:22:38,553 [main:94] - GETTING String from B
2021-03-11 12:22:38,567 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]]
2021-03-11 12:22:38,567 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]
2021-03-11 12:22:38,678 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:38,764 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:38,848 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:38,849 [main:105] - GENERATED CALL = (B()).K.replaceBeforeLast('é©£', "wdehv", "qoiyr")
2021-03-11 12:22:38,849 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]]
2021-03-11 12:22:38,849 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]
2021-03-11 12:22:38,935 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:38,935 [main:105] - GENERATED CALL = (B()).K.substring(1159650114)
2021-03-11 12:22:38,936 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]]
2021-03-11 12:22:38,936 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]
2021-03-11 12:22:39,020 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:39,021 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:39,021 [main:105] - GENERATED CALL = (B()).K.filterNot({a: Char -> true})
2021-03-11 12:22:39,021 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]]
2021-03-11 12:22:39,022 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]
2021-03-11 12:22:39,022 [main:105] - GENERATED CALL = (B()).K.reversed()
2021-03-11 12:22:39,022 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]]
2021-03-11 12:22:39,022 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]
2021-03-11 12:22:39,104 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:39,104 [main:105] - GENERATED CALL = (B()).K.dropLast(1333012264)
2021-03-11 12:22:39,104 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]]
2021-03-11 12:22:39,104 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]
2021-03-11 12:22:39,185 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:39,270 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:39,270 [main:105] - GENERATED CALL = (B()).K.removeRange(874025443, -1022019029)
2021-03-11 12:22:39,270 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:22:39,271 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:22:39,358 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:39,359 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:39,360 [main:105] - GENERATED CALL = (B()).K.filter({a: Char -> true})
2021-03-11 12:22:39,360 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]]
2021-03-11 12:22:39,360 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:22:39,444 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:22:39,445 [main:105] - GENERATED CALL = (B()).K.plus("iohfv")
2021-03-11 12:22:39,445 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:22:39,445 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:22:39,528 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:39,529 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:39,529 [main:105] - GENERATED CALL = (B()).K.takeWhile({a: Char -> false})
2021-03-11 12:22:39,530 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]]
2021-03-11 12:22:39,530 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]
2021-03-11 12:22:39,530 [main:105] - GENERATED CALL = (B()).K.trim()
2021-03-11 12:22:39,530 [main:110] - replacement of "OK" of type String is (B()).K.trim()
2021-03-11 12:22:39,676 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:39,676 [main:66] - Compilation checking started
2021-03-11 12:22:40,125 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = fn()

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { r }
}

fun box767() = Kla0((B()).K.trim()).fu2()


2021-03-11 12:22:40,126 [main:103] - replacing (fu2(), String)
2021-03-11 12:22:40,126 [main:38] - replacing fu2() String
2021-03-11 12:22:40,126 [main:42] - Getting value of type String
2021-03-11 12:22:40,228 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:40,228 [main:46] - GENERATED VALUE OF TYPE String = "smjvm"
2021-03-11 12:22:40,228 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:40,316 [main:55] - randomType = Kla0?
2021-03-11 12:22:40,400 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:22:40,400 [main:112] - generating klass Kla0 text = inline class Kla0(private val r: String) {
    fun fu2() = fu1 { r }
}
2021-03-11 12:22:40,483 [main:194] - Type params = []
2021-03-11 12:22:40,565 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:22:40,575 [main:137] - GENERATING call of type public final fun fu2(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@51bfd421]
2021-03-11 12:22:40,575 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]
2021-03-11 12:22:40,576 [main:66] - Generated call from random type = (Kla0("gwvme"))?.fu2().toLowerCase()
2021-03-11 12:22:40,577 [main:94] - GETTING String from B
2021-03-11 12:22:40,590 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]]
2021-03-11 12:22:40,591 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]
2021-03-11 12:22:40,591 [main:105] - GENERATED CALL = ((B())).K.uppercase()
2021-03-11 12:22:40,591 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]]
2021-03-11 12:22:40,591 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]
2021-03-11 12:22:40,673 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:40,759 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:40,843 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:40,843 [main:105] - GENERATED CALL = ((B())).K.replaceAfter('ç¼', "dztsz", "xatdd")
2021-03-11 12:22:40,844 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]]
2021-03-11 12:22:40,844 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]
2021-03-11 12:22:40,844 [main:105] - GENERATED CALL = ((B())).K.lowercase()
2021-03-11 12:22:40,844 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]]
2021-03-11 12:22:40,844 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]
2021-03-11 12:22:40,963 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:22:40,963 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:40,964 [main:105] - GENERATED CALL = ((B())).K.filterIndexed({a: Int, b: Char -> false})
2021-03-11 12:22:40,964 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]]
2021-03-11 12:22:40,964 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]
2021-03-11 12:22:41,049 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:41,053 [main:105] - GENERATED CALL = ((B())).K.removeSurrounding("tjheh")
2021-03-11 12:22:41,053 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25549b6a]]
2021-03-11 12:22:41,053 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25549b6a]
2021-03-11 12:22:41,137 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:41,221 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:41,308 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:41,309 [main:105] - GENERATED CALL = ((B())).K.replaceBefore('å©¸', "ntuwn", "xchgi")
2021-03-11 12:22:41,309 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63bb7fca]]
2021-03-11 12:22:41,309 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63bb7fca]
2021-03-11 12:22:41,395 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:41,396 [main:105] - GENERATED CALL = ((B())).K.trimMargin("upgre")
2021-03-11 12:22:41,396 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@317da447]]
2021-03-11 12:22:41,396 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@317da447]
2021-03-11 12:22:41,481 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:41,564 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:41,565 [main:105] - GENERATED CALL = ((B())).K.replaceIndentByMargin("qcaes", "cxalp")
2021-03-11 12:22:41,565 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]]
2021-03-11 12:22:41,565 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]
2021-03-11 12:22:41,646 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:41,647 [main:105] - GENERATED CALL = ((B())).K.substring(1011069901)
2021-03-11 12:22:41,647 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:22:41,647 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:22:41,732 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:41,733 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:41,733 [main:105] - GENERATED CALL = ((B())).K.filter({a: Char -> false})
2021-03-11 12:22:41,733 [main:110] - replacement of fu2() of type String is ((B())).K.replaceIndentByMargin("qcaes", "cxalp")
2021-03-11 12:22:41,816 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:41,816 [main:66] - Compilation checking started
2021-03-11 12:22:42,012 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = fn()

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { r }
}

fun box767() = Kla0((B()).K.trim()).((B())).K.replaceIndentByMargin("qcaes", "cxalp")


2021-03-11 12:22:42,012 [main:103] - replacing (fu2(), String)
2021-03-11 12:22:42,012 [main:38] - replacing fu2() String
2021-03-11 12:22:42,012 [main:42] - Getting value of type String
2021-03-11 12:22:42,130 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:42,130 [main:46] - GENERATED VALUE OF TYPE String = "nbijt"
2021-03-11 12:22:42,131 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:42,420 [main:55] - randomType = HashMap<Float, X>
2021-03-11 12:22:42,508 [main:302] - generating value of type = HashMap<Float, X> false depth = 0
2021-03-11 12:22:42,592 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Float, X> = TODO()
2021-03-11 12:22:42,593 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Float, X> = TODO()
2021-03-11 12:22:42,677 [main:95] - GENERATED = linkedMapOf<Float, X>()
2021-03-11 12:22:42,828 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:22:42,916 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:42,916 [main:66] - Generated call from random type = (linkedMapOf<Float, X>()).size.toString(1176665557)
2021-03-11 12:22:42,916 [main:94] - GETTING String from String
2021-03-11 12:22:42,947 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]]
2021-03-11 12:22:42,947 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]
2021-03-11 12:22:43,034 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:43,116 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:43,117 [main:105] - GENERATED CALL = (X.O).substringAfterLast('a', "fzest")
2021-03-11 12:22:43,117 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]]
2021-03-11 12:22:43,117 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]
2021-03-11 12:22:43,200 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:43,201 [main:105] - GENERATED CALL = (X.O).repeat(-903117811)
2021-03-11 12:22:43,201 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]]
2021-03-11 12:22:43,201 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]
2021-03-11 12:22:43,315 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:43,316 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:43,316 [main:105] - GENERATED CALL = (X.O).filterNot({a: Char -> true})
2021-03-11 12:22:43,317 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]]
2021-03-11 12:22:43,317 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]
2021-03-11 12:22:43,407 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:43,501 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:43,502 [main:105] - GENERATED CALL = (X.O).padEnd(-1476435743, '?')
2021-03-11 12:22:43,503 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]]
2021-03-11 12:22:43,503 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]
2021-03-11 12:22:43,586 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:22:43,676 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 12:22:43,677 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 12:22:43,932 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:22:43,932 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-11 12:22:43,933 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 12:22:44,025 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:22:44,026 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:22:44,324 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 12:22:44,324 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-11 12:22:44,324 [main:302] - generating value of type = Any false depth = 8
2021-03-11 12:22:44,325 [main:95] - GENERATED = check(true, { "nqhex"})
2021-03-11 12:22:44,325 [main:95] - GENERATED = buildSet<Int>(874754647, { check(true, { "nqhex"})})
2021-03-11 12:22:44,325 [main:105] - GENERATED CALL = (X.O).slice(buildSet<Int>(874754647, { check(true, { "nqhex"})}))
2021-03-11 12:22:44,325 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aff196a]]
2021-03-11 12:22:44,325 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aff196a]
2021-03-11 12:22:44,410 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:44,411 [main:105] - GENERATED CALL = (X.O).replaceIndent("zucgm")
2021-03-11 12:22:44,411 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]]
2021-03-11 12:22:44,411 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]
2021-03-11 12:22:44,502 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:44,591 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:44,592 [main:105] - GENERATED CALL = (X.O).commonSuffixWith("adutr", true)
2021-03-11 12:22:44,592 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]]
2021-03-11 12:22:44,592 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]
2021-03-11 12:22:44,673 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:44,674 [main:105] - GENERATED CALL = (X.O).concat("nftyo")
2021-03-11 12:22:44,674 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@308b60ba]]
2021-03-11 12:22:44,674 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@308b60ba]
2021-03-11 12:22:44,755 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:44,755 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:44,756 [main:105] - GENERATED CALL = (X.O).dropLastWhile({a: Char -> false})
2021-03-11 12:22:44,756 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]]
2021-03-11 12:22:44,756 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]
2021-03-11 12:22:44,836 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:44,837 [main:105] - GENERATED CALL = (X.O).takeLast(823751996)
2021-03-11 12:22:44,837 [main:110] - replacement of fu2() of type String is (X.O).takeLast(823751996)
2021-03-11 12:22:44,918 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:44,919 [main:66] - Compilation checking started
2021-03-11 12:22:45,102 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = fn()

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { r }
}

fun box767() = Kla0((B()).K.trim()).(X.O).takeLast(823751996)


2021-03-11 12:22:45,102 [main:103] - replacing (fn, [@kotlin.ExtensionFunctionType] Function1<Ty0, String>)
2021-03-11 12:22:45,102 [main:38] - replacing fn [@kotlin.ExtensionFunctionType] Function1<Ty0, String>
2021-03-11 12:22:45,103 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Ty0, String>
2021-03-11 12:22:45,188 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Ty0, String> false depth = 0
2021-03-11 12:22:45,188 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:22:45,190 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Ty0, String> = { "fzmum"}
2021-03-11 12:22:45,190 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:45,399 [main:55] - randomType = LinkedHashSet<Float>
2021-03-11 12:22:45,483 [main:302] - generating value of type = LinkedHashSet<Float> false depth = 0
2021-03-11 12:22:45,572 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Float> = TODO()
2021-03-11 12:22:45,573 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Float> = TODO()
2021-03-11 12:22:45,665 [main:95] - GENERATED = linkedSetOf<Float>()
2021-03-11 12:22:45,791 [main:94] - GETTING [@kotlin.ExtensionFunctionType] Function1<Ty0, String> from X
2021-03-11 12:22:45,800 [main:94] - GETTING [@kotlin.ExtensionFunctionType] Function1<Ty0, String> from String
2021-03-11 12:22:45,824 [main:94] - GETTING [@kotlin.ExtensionFunctionType] Function1<Ty0, String> from String
2021-03-11 12:22:45,828 [main:94] - GETTING [@kotlin.ExtensionFunctionType] Function1<Ty0, String> from String
2021-03-11 12:22:45,832 [main:94] - GETTING [@kotlin.ExtensionFunctionType] Function1<Ty0, String> from B
2021-03-11 12:22:45,844 [main:94] - GETTING [@kotlin.ExtensionFunctionType] Function1<Ty0, String> from B
2021-03-11 12:22:45,848 [main:94] - GETTING [@kotlin.ExtensionFunctionType] Function1<Ty0, String> from String
2021-03-11 12:22:45,852 [main:94] - GETTING [@kotlin.ExtensionFunctionType] Function1<Ty0, String> from String
2021-03-11 12:22:45,852 [main:110] - replacement of fn of type [@kotlin.ExtensionFunctionType] Function1<Ty0, String> is { "fzmum"}
2021-03-11 12:22:45,932 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:22:45,933 [main:66] - Compilation checking started
2021-03-11 12:22:46,293 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = { "fzmum"}()

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { r }
}

fun box767() = Kla0((B()).K.trim()).fu2()


2021-03-11 12:22:46,293 [main:103] - replacing ({ "fzmum"}(), String)
2021-03-11 12:22:46,293 [main:38] - replacing { "fzmum"}() String
2021-03-11 12:22:46,293 [main:42] - Getting value of type String
2021-03-11 12:22:46,378 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:46,379 [main:46] - GENERATED VALUE OF TYPE String = "zwdqm"
2021-03-11 12:22:46,379 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:46,464 [main:55] - randomType = Long
2021-03-11 12:22:46,547 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:22:46,587 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55cac412]
2021-03-11 12:22:46,587 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b36e1a1]
2021-03-11 12:22:46,667 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:46,668 [main:66] - Generated call from random type = (-7886893330441916034).toLong().toString(-269132093)
2021-03-11 12:22:46,668 [main:94] - GETTING String from String
2021-03-11 12:22:46,685 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]]
2021-03-11 12:22:46,685 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]
2021-03-11 12:22:46,685 [main:105] - GENERATED CALL = (A().K).reversed()
2021-03-11 12:22:46,685 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f7dda0]]
2021-03-11 12:22:46,685 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f7dda0]
2021-03-11 12:22:46,765 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:46,858 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:46,859 [main:105] - GENERATED CALL = (A().K).substringBeforeLast('éµ¿', "deytn")
2021-03-11 12:22:46,859 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]]
2021-03-11 12:22:46,859 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]
2021-03-11 12:22:46,939 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:47,020 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:47,100 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:47,101 [main:105] - GENERATED CALL = (A().K).replaceAfter('æ', "hhzvf", "qgdgg")
2021-03-11 12:22:47,101 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]]
2021-03-11 12:22:47,101 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]
2021-03-11 12:22:47,101 [main:105] - GENERATED CALL = (A().K).uppercase()
2021-03-11 12:22:47,101 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:22:47,101 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:22:47,101 [main:105] - GENERATED CALL = (A().K).trimIndent()
2021-03-11 12:22:47,101 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6cf4654a], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]]
2021-03-11 12:22:47,101 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6cf4654a]
2021-03-11 12:22:47,182 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:47,183 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:22:47,263 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:47,264 [main:105] - GENERATED CALL = (A().K).compareTo("vlpev").toString(1470747366)
2021-03-11 12:22:47,264 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675656b7]]
2021-03-11 12:22:47,264 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675656b7]
2021-03-11 12:22:47,264 [main:105] - GENERATED CALL = (A().K).decapitalize()
2021-03-11 12:22:47,264 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]]
2021-03-11 12:22:47,264 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]
2021-03-11 12:22:47,349 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:22:47,349 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:47,350 [main:105] - GENERATED CALL = (A().K).filterIndexed({a: Int, b: Char -> true})
2021-03-11 12:22:47,350 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aff196a]]
2021-03-11 12:22:47,350 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aff196a]
2021-03-11 12:22:47,430 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:47,431 [main:105] - GENERATED CALL = (A().K).replaceIndent("ldpmm")
2021-03-11 12:22:47,431 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]]
2021-03-11 12:22:47,431 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]
2021-03-11 12:22:47,513 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:47,513 [main:105] - GENERATED CALL = (A().K).dropLast(-1042343305)
2021-03-11 12:22:47,513 [main:110] - replacement of { "fzmum"}() of type String is (A().K).substringBeforeLast('éµ¿', "deytn")
2021-03-11 12:22:47,594 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:47,594 [main:66] - Compilation checking started
2021-03-11 12:22:47,932 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { r }
}

fun box767() = Kla0((B()).K.trim()).fu2()


2021-03-11 12:22:47,933 [main:103] - replacing (r, String)
2021-03-11 12:22:47,933 [main:38] - replacing r String
2021-03-11 12:22:47,933 [main:42] - Getting value of type String
2021-03-11 12:22:48,029 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:48,030 [main:46] - GENERATED VALUE OF TYPE String = "usnqz"
2021-03-11 12:22:48,030 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:48,250 [main:55] - randomType = Collection<X>
2021-03-11 12:22:48,251 [main:94] - GETTING String from B
2021-03-11 12:22:48,266 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b178a27]]
2021-03-11 12:22:48,266 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b178a27]
2021-03-11 12:22:48,266 [main:105] - GENERATED CALL = (B()).K.trimEnd()
2021-03-11 12:22:48,266 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]]
2021-03-11 12:22:48,266 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5307bd14]
2021-03-11 12:22:48,357 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:48,449 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:48,532 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:48,532 [main:105] - GENERATED CALL = (B()).K.replace('á¢', 'é', true)
2021-03-11 12:22:48,533 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:22:48,533 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:22:48,616 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:22:48,616 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:22:48,617 [main:105] - GENERATED CALL = (B()).K.filter({a: Char -> false})
2021-03-11 12:22:48,617 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]]
2021-03-11 12:22:48,617 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]
2021-03-11 12:22:48,617 [main:105] - GENERATED CALL = (B()).K.toLowerCase()
2021-03-11 12:22:48,617 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]]
2021-03-11 12:22:48,617 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]
2021-03-11 12:22:48,617 [main:105] - GENERATED CALL = (B()).K.reversed()
2021-03-11 12:22:48,617 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]]
2021-03-11 12:22:48,617 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]
2021-03-11 12:22:48,698 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:48,779 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:48,779 [main:105] - GENERATED CALL = (B()).K.substringAfter('á®', "ldnsd")
2021-03-11 12:22:48,779 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]]
2021-03-11 12:22:48,779 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]
2021-03-11 12:22:48,860 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:48,941 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:48,941 [main:105] - GENERATED CALL = (B()).K.substringAfterLast('æ·', "ioqow")
2021-03-11 12:22:48,942 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795c8413]]
2021-03-11 12:22:48,942 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795c8413]
2021-03-11 12:22:49,024 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:49,110 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:49,233 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:22:49,233 [main:105] - GENERATED CALL = (B()).K.replaceFirst('ì¦', 'Æ', true)
2021-03-11 12:22:49,234 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]]
2021-03-11 12:22:49,234 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]
2021-03-11 12:22:49,324 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:49,328 [main:105] - GENERATED CALL = (B()).K.removeSurrounding("nkgve")
2021-03-11 12:22:49,329 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@22e301d3], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]]
2021-03-11 12:22:49,329 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]
2021-03-11 12:22:49,422 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:49,506 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:49,587 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:49,588 [main:105] - GENERATED CALL = (B()).K.replaceAfter('â¦', "vvxhm", "cdyxw")
2021-03-11 12:22:49,588 [main:110] - replacement of r of type String is (B()).K.trimEnd()
2021-03-11 12:22:49,669 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:49,669 [main:66] - Compilation checking started
2021-03-11 12:22:50,019 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = Kla0((B()).K.trim()).fu2()


2021-03-11 12:22:50,019 [main:103] - replacing (Kla0((B()).K.trim()).fu2(), String)
2021-03-11 12:22:50,020 [main:38] - replacing Kla0((B()).K.trim()).fu2() String
2021-03-11 12:22:50,020 [main:42] - Getting value of type String
2021-03-11 12:22:50,125 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:50,125 [main:46] - GENERATED VALUE OF TYPE String = "nmzqk"
2021-03-11 12:22:50,125 [main:49] - GENERATED IS CALL =false
2021-03-11 12:22:50,126 [main:55] - randomType = Int
2021-03-11 12:22:50,216 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:50,275 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89]
2021-03-11 12:22:50,275 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:22:50,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:50,367 [main:66] - Generated call from random type = (-571786330).toInt().toString(1320753768)
2021-03-11 12:22:50,367 [main:94] - GETTING String from String
2021-03-11 12:22:50,399 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]]
2021-03-11 12:22:50,400 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]
2021-03-11 12:22:50,492 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:50,493 [main:105] - GENERATED CALL = (X.O).dropLast(167422658)
2021-03-11 12:22:50,493 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]]
2021-03-11 12:22:50,493 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]
2021-03-11 12:22:50,577 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:50,676 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:50,677 [main:105] - GENERATED CALL = (X.O).substringAfter('â', "phhtm")
2021-03-11 12:22:50,677 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]]
2021-03-11 12:22:50,677 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]
2021-03-11 12:22:50,762 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:50,852 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:50,853 [main:105] - GENERATED CALL = (X.O).padStart(-45061812, '×¶')
2021-03-11 12:22:50,853 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:22:50,853 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:22:50,853 [main:105] - GENERATED CALL = (X.O).trimIndent()
2021-03-11 12:22:50,853 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]]
2021-03-11 12:22:50,853 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3311b87c]
2021-03-11 12:22:50,943 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:51,026 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:51,027 [main:105] - GENERATED CALL = (X.O).padEnd(-386586203, 'è«')
2021-03-11 12:22:51,027 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f84a5c8]]
2021-03-11 12:22:51,027 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f84a5c8]
2021-03-11 12:22:51,107 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:22:51,187 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:51,267 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:22:51,267 [main:105] - GENERATED CALL = (X.O).replaceAfterLast('ì £', "gziyn", "jduah")
2021-03-11 12:22:51,267 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]]
2021-03-11 12:22:51,268 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]
2021-03-11 12:22:51,347 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:51,348 [main:105] - GENERATED CALL = (X.O).repeat(-986286714)
2021-03-11 12:22:51,348 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]]
2021-03-11 12:22:51,348 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:22:51,442 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:22:51,443 [main:105] - GENERATED CALL = (X.O).plus("ubdlb")
2021-03-11 12:22:51,443 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707db66f]]
2021-03-11 12:22:51,443 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:22:51,522 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:51,626 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:51,626 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707db66f]
2021-03-11 12:22:51,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:51,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:51,804 [main:105] - GENERATED CALL = (X.O).subSequence(1412712416, 1132942943).substring(-802986290, -217887879)
2021-03-11 12:22:51,805 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]]
2021-03-11 12:22:51,805 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]
2021-03-11 12:22:51,886 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:51,967 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:22:52,047 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:22:52,050 [main:105] - GENERATED CALL = (X.O).replaceRange(544530622, -564796576, "euxlx")
2021-03-11 12:22:52,050 [main:110] - replacement of Kla0((B()).K.trim()).fu2() of type String is (-571786330).toInt().toString(1320753768)
2021-03-11 12:22:52,129 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:22:52,129 [main:66] - Compilation checking started
2021-03-11 12:22:52,440 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(1320753768)


2021-03-11 12:22:52,522 [main:137] - TRYING TO REPLACE CONSTANT 'éµ¿'
2021-03-11 12:22:52,604 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-11 12:22:52,605 [main:66] - Compilation checking started
2021-03-11 12:22:52,952 [main:137] - TRYING TO REPLACE CONSTANT 571786330
2021-03-11 12:22:53,052 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:22:53,052 [main:66] - Compilation checking started
2021-03-11 12:22:53,268 [main:49] - Result = false
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (toInt()).toInt().toString(1320753768)


2021-03-11 12:22:53,268 [main:137] - TRYING TO REPLACE CONSTANT 1320753768
2021-03-11 12:22:53,350 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:22:53,350 [main:66] - Compilation checking started
2021-03-11 12:22:53,674 [main:53] - Result = true
Text:
import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)


2021-03-11 12:22:53,674 [main:46] - AFTER TRY 2 res = import kotlin.properties.Delegates

object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)


2021-03-11 12:22:53,842 [main:112] - generating klass X text = object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}
2021-03-11 12:22:53,843 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}
2021-03-11 12:22:53,843 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:22:53,843 [main:112] - generating klass Kla0 text = inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}
2021-03-11 12:22:53,928 [main:194] - Type params = []
2021-03-11 12:22:54,009 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:22:54,171 [main:43] - GENERATING CALL OF inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}
2021-03-11 12:22:54,172 [main:61] - WITHOUT TYPE PARAMS = inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}
2021-03-11 12:22:54,338 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:22:54,339 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 12:22:54,339 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:22:54,340 [main:95] - GENERATED = fu0("pjijs", { "hfabl"})
2021-03-11 12:22:54,420 [main:43] - GENERATING CALL OF fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")
2021-03-11 12:22:54,616 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> UInt?.fu1(fn: UInt?.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")
2021-03-11 12:22:54,799 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UInt?, String> false depth = 1
2021-03-11 12:22:54,800 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:22:54,800 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:22:54,801 [main:95] - GENERATED = 1611320007.toUInt().fu1<UInt?>({ "iamkc"})
2021-03-11 12:22:54,898 [main:48] - Try â2
2021-03-11 12:23:07,364 [main:48] - Already checked
2021-03-11 12:23:10,625 [main:71] - Trying to insert fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}
2021-03-11 12:23:10,737 [main:66] - Compilation checking started
2021-03-11 12:23:12,078 [main:99] - Trying to change 233 nodes
2021-03-11 12:23:12,078 [main:103] - replacing (fu7(), String)
2021-03-11 12:23:12,078 [main:38] - replacing fu7() String
2021-03-11 12:23:12,078 [main:42] - Getting value of type String
2021-03-11 12:23:12,233 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:12,236 [main:46] - GENERATED VALUE OF TYPE String = "zrksx"
2021-03-11 12:23:12,236 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:12,417 [main:55] - randomType = B?
2021-03-11 12:23:12,575 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:23:12,578 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:23:12,593 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:23:12,753 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:23:12,753 [main:66] - Generated call from random type = (B())?.K.plus("hizqo")
2021-03-11 12:23:12,753 [main:94] - GETTING String from String
2021-03-11 12:23:12,785 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]]
2021-03-11 12:23:12,785 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]
2021-03-11 12:23:12,940 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:23:12,943 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:23:12,945 [main:105] - GENERATED CALL = (X.O).filterIndexed({a: Int, b: Char -> false})
2021-03-11 12:23:12,945 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6356e336]]
2021-03-11 12:23:12,946 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6356e336]
2021-03-11 12:23:13,091 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:23:13,096 [main:105] - GENERATED CALL = (X.O).removeSuffix("mdzcf")
2021-03-11 12:23:13,096 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]]
2021-03-11 12:23:13,096 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de3b2b5]
2021-03-11 12:23:13,097 [main:105] - GENERATED CALL = (X.O).toLowerCase()
2021-03-11 12:23:13,097 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]]
2021-03-11 12:23:13,097 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:23:13,237 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:23:13,237 [main:105] - GENERATED CALL = (X.O).plus("rwlbq")
2021-03-11 12:23:13,237 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@308b60ba]]
2021-03-11 12:23:13,237 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@308b60ba]
2021-03-11 12:23:13,417 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:23:13,419 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:23:13,422 [main:105] - GENERATED CALL = (X.O).dropLastWhile({a: Char -> false})
2021-03-11 12:23:13,422 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37f93141]]
2021-03-11 12:23:13,422 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37f93141]
2021-03-11 12:23:13,571 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:13,574 [main:105] - GENERATED CALL = (X.O).take(-1129175671)
2021-03-11 12:23:13,574 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]]
2021-03-11 12:23:13,574 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]
2021-03-11 12:23:13,724 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:23:13,874 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:23:13,877 [main:105] - GENERATED CALL = (X.O).commonPrefixWith(StringBuilder(), false)
2021-03-11 12:23:13,877 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]]
2021-03-11 12:23:13,877 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]
2021-03-11 12:23:13,877 [main:105] - GENERATED CALL = (X.O).trim()
2021-03-11 12:23:13,877 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96a81f0]]
2021-03-11 12:23:13,877 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96a81f0]
2021-03-11 12:23:14,025 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:23:14,173 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:14,176 [main:105] - GENERATED CALL = (X.O).substringBefore('?', "bngwy")
2021-03-11 12:23:14,176 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63bb7fca]]
2021-03-11 12:23:14,176 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63bb7fca]
2021-03-11 12:23:14,321 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:14,323 [main:105] - GENERATED CALL = (X.O).trimMargin("akpkv")
2021-03-11 12:23:14,323 [main:110] - replacement of fu7() of type String is (X.O).trimMargin("akpkv")
2021-03-11 12:23:14,483 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:23:14,484 [main:66] - Compilation checking started
2021-03-11 12:23:15,210 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!prope5.fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "56") return@fu3
        fu7()
        prope3 = "OK"
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:15,214 [main:103] - replacing (Kla5(), Kla5)
2021-03-11 12:23:15,214 [main:38] - replacing Kla5() Kla5
2021-03-11 12:23:15,214 [main:42] - Getting value of type Kla5
2021-03-11 12:23:15,362 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:23:15,365 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}
2021-03-11 12:23:15,366 [main:46] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 12:23:15,366 [main:49] - GENERATED IS CALL =true
2021-03-11 12:23:15,680 [main:55] - randomType = UInt?
2021-03-11 12:23:15,847 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:23:15,880 [main:94] - GETTING Kla5 from String
2021-03-11 12:23:15,897 [main:94] - GETTING Kla5 from String
2021-03-11 12:23:15,898 [main:94] - GETTING Kla5 from B
2021-03-11 12:23:15,906 [main:94] - GETTING Kla5 from Int
2021-03-11 12:23:15,937 [main:94] - GETTING Kla5 from Int
2021-03-11 12:23:15,938 [main:94] - GETTING Kla5 from X
2021-03-11 12:23:15,943 [main:94] - GETTING Kla5 from String
2021-03-11 12:23:15,944 [main:94] - GETTING Kla5 from String
2021-03-11 12:23:15,944 [main:94] - GETTING Kla5 from String
2021-03-11 12:23:15,945 [main:94] - GETTING Kla5 from B
2021-03-11 12:23:15,945 [main:94] - GETTING Kla5 from String
2021-03-11 12:23:15,946 [main:94] - GETTING Kla5 from String
2021-03-11 12:23:15,947 [main:94] - GETTING Kla5 from Int
2021-03-11 12:23:15,947 [main:110] - replacement of Kla5() of type Kla5 is Kla5()
2021-03-11 12:23:16,085 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:23:16,087 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:23:16,088 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:23:16,088 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:23:16,225 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:23:16,230 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:23:16,391 [main:55] - randomType = Byte
2021-03-11 12:23:16,540 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:23:16,600 [main:94] - GETTING EmptyCoroutineContext from B
2021-03-11 12:23:16,615 [main:94] - GETTING EmptyCoroutineContext from B
2021-03-11 12:23:16,616 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:16,647 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:16,648 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:16,648 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:16,649 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:23:16,707 [main:94] - GETTING EmptyCoroutineContext from X
2021-03-11 12:23:16,715 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:16,716 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:23:16,717 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:16,717 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:23:16,719 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:16,719 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:23:16,719 [main:103] - replacing ("56", String)
2021-03-11 12:23:16,719 [main:38] - replacing "56" String
2021-03-11 12:23:16,719 [main:42] - Getting value of type String
2021-03-11 12:23:16,865 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:16,868 [main:46] - GENERATED VALUE OF TYPE String = "rgjtl"
2021-03-11 12:23:16,868 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:17,033 [main:55] - randomType = Float
2021-03-11 12:23:17,183 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:23:17,237 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2c3d1e97]
2021-03-11 12:23:17,237 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521fe088]
2021-03-11 12:23:17,374 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:17,377 [main:66] - Generated call from random type = (0.9199245f).toByte().toString(-1273202377)
2021-03-11 12:23:17,378 [main:94] - GETTING String from X
2021-03-11 12:23:17,385 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]]
2021-03-11 12:23:17,385 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24dcf6c8]
2021-03-11 12:23:17,527 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:23:17,669 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:23:17,673 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:23:18,014 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:23:18,019 [main:95] - GENERATED = StringBuilder("kibfy")
2021-03-11 12:23:18,020 [main:105] - GENERATED CALL = (X).O.removeSurrounding(StringBuilder("kibfy"))
2021-03-11 12:23:18,020 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]]
2021-03-11 12:23:18,020 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]
2021-03-11 12:23:18,157 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:18,160 [main:105] - GENERATED CALL = (X).O.concat("ziflu")
2021-03-11 12:23:18,160 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:23:18,160 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:23:18,306 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:23:18,308 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:23:18,311 [main:105] - GENERATED CALL = (X).O.filter({a: Char -> true})
2021-03-11 12:23:18,311 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]]
2021-03-11 12:23:18,312 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]
2021-03-11 12:23:18,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:18,461 [main:105] - GENERATED CALL = (X).O.takeLast(1851313325)
2021-03-11 12:23:18,461 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]]
2021-03-11 12:23:18,461 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]
2021-03-11 12:23:18,461 [main:105] - GENERATED CALL = (X).O.trimStart()
2021-03-11 12:23:18,461 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]]
2021-03-11 12:23:18,461 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]
2021-03-11 12:23:18,462 [main:105] - GENERATED CALL = (X).O.reversed()
2021-03-11 12:23:18,462 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]]
2021-03-11 12:23:18,462 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]
2021-03-11 12:23:18,604 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:23:18,745 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:18,748 [main:105] - GENERATED CALL = (X).O.substringAfter('î', "ydfto")
2021-03-11 12:23:18,748 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]]
2021-03-11 12:23:18,748 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29f079a]
2021-03-11 12:23:18,748 [main:105] - GENERATED CALL = (X).O.trim()
2021-03-11 12:23:18,748 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]]
2021-03-11 12:23:18,748 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]
2021-03-11 12:23:18,892 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:19,033 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:19,036 [main:105] - GENERATED CALL = (X).O.removeRange(-2001233401, -1981810000)
2021-03-11 12:23:19,036 [main:101] - Case = [public final var O: kotlin.String defined in X[PropertyDescriptorImpl@524aaa6f], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cbf9b7]]
2021-03-11 12:23:19,036 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cbf9b7]
2021-03-11 12:23:19,175 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:19,178 [main:105] - GENERATED CALL = (X).O.prependIndent("bvojl")
2021-03-11 12:23:19,178 [main:110] - replacement of "56" of type String is "rgjtl"
2021-03-11 12:23:19,319 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 12:23:19,320 [main:66] - Compilation checking started
2021-03-11 12:23:20,006 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!prope5.fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = "OK"
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:20,008 [main:103] - replacing (prope6, Continuation<String>)
2021-03-11 12:23:20,009 [main:38] - replacing prope6 Continuation<String>
2021-03-11 12:23:20,009 [main:42] - Getting value of type Continuation<String>
2021-03-11 12:23:20,168 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-11 12:23:20,328 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:23:20,332 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:23:20,821 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:23:20,962 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:20,966 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:21,275 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:23:21,430 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:21,433 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:21,926 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 12:23:22,071 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:23:22,074 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:23:22,556 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 12:23:22,706 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:23:22,710 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:23:23,239 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:23:23,239 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:23:23,239 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:23,239 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:23,239 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:23:23,239 [main:46] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-11 12:23:23,553 [main:55] - randomType = Map<String?, Int>
2021-03-11 12:23:23,554 [main:94] - GETTING Continuation<String> from Int
2021-03-11 12:23:23,585 [main:94] - GETTING Continuation<String> from B
2021-03-11 12:23:23,594 [main:94] - GETTING Continuation<String> from String
2021-03-11 12:23:23,611 [main:94] - GETTING Continuation<String> from Int
2021-03-11 12:23:23,612 [main:94] - GETTING Continuation<String> from String
2021-03-11 12:23:23,613 [main:94] - GETTING Continuation<String> from B
2021-03-11 12:23:23,614 [main:94] - GETTING Continuation<String> from X
2021-03-11 12:23:23,619 [main:94] - GETTING Continuation<String> from String
2021-03-11 12:23:23,620 [main:94] - GETTING Continuation<String> from String
2021-03-11 12:23:23,621 [main:94] - GETTING Continuation<String> from String
2021-03-11 12:23:23,622 [main:94] - GETTING Continuation<String> from String
2021-03-11 12:23:23,623 [main:94] - GETTING Continuation<String> from Int
2021-03-11 12:23:23,624 [main:94] - GETTING Continuation<String> from String
2021-03-11 12:23:23,624 [main:107] - Cant find and generate replacement for prope6 type Continuation<String>
2021-03-11 12:23:23,624 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 12:23:23,624 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 12:23:23,624 [main:42] - Getting value of type String
2021-03-11 12:23:23,754 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:23,757 [main:46] - GENERATED VALUE OF TYPE String = "pzxcw"
2021-03-11 12:23:23,757 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:23,914 [main:55] - randomType = Byte
2021-03-11 12:23:24,047 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:23:24,080 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7772cdfa]
2021-03-11 12:23:24,080 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e3d2b5]
2021-03-11 12:23:24,080 [main:66] - Generated call from random type = (-37).toChar().uppercase()
2021-03-11 12:23:24,080 [main:94] - GETTING String from String
2021-03-11 12:23:24,096 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]]
2021-03-11 12:23:24,096 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b230c48]
2021-03-11 12:23:24,231 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:23:24,362 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:24,496 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:24,499 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).replaceBeforeLast('å°', "klmyf", "vwyvf")
2021-03-11 12:23:24,499 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]]
2021-03-11 12:23:24,499 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:23:24,630 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:24,766 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:24,769 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]
2021-03-11 12:23:24,900 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:24,903 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).subSequence(595416486, 395950704).repeat(-1197598065)
2021-03-11 12:23:24,903 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]]
2021-03-11 12:23:24,903 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]
2021-03-11 12:23:25,033 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:23:25,036 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:23:25,038 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).dropWhile({a: Char -> true})
2021-03-11 12:23:25,038 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]]
2021-03-11 12:23:25,038 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]
2021-03-11 12:23:25,197 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:25,333 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:25,472 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:23:25,478 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).replaceRange(221294935, 102510489, "iocpn")
2021-03-11 12:23:25,478 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]]
2021-03-11 12:23:25,478 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]
2021-03-11 12:23:25,617 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:25,619 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).substring(-498522684)
2021-03-11 12:23:25,619 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63bb7fca]]
2021-03-11 12:23:25,619 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63bb7fca]
2021-03-11 12:23:25,753 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:25,755 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).trimMargin("hoylc")
2021-03-11 12:23:25,755 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fabfa84]]
2021-03-11 12:23:25,755 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:23:25,887 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:26,040 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:26,043 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fabfa84]
2021-03-11 12:23:26,334 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:23:26,470 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 12:23:26,473 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 12:23:26,902 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:23:26,905 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 12:23:26,910 [main:95] - GENERATED = Regex("tpvzc", kotlin.text.RegexOption.MULTILINE)
2021-03-11 12:23:27,040 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:27,043 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).subSequence(-929688445, -108102692).replaceFirst(Regex("tpvzc", kotlin.text.RegexOption.MULTILINE), "pzakm")
2021-03-11 12:23:27,043 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]]
2021-03-11 12:23:27,043 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45bceeb]
2021-03-11 12:23:27,043 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).lowercase()
2021-03-11 12:23:27,043 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e58a5e]]
2021-03-11 12:23:27,044 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e58a5e]
2021-03-11 12:23:27,177 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:27,180 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).drop(-296055741)
2021-03-11 12:23:27,180 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c90bbfd]]
2021-03-11 12:23:27,180 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f]
2021-03-11 12:23:27,316 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:27,318 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c90bbfd]
2021-03-11 12:23:27,456 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:27,459 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).get(740797966).plus("ihgrz")
2021-03-11 12:23:27,459 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (Kla0("joriu").fu2()).get(740797966).plus("ihgrz")
2021-03-11 12:23:27,615 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:23:27,615 [main:66] - Compilation checking started
2021-03-11 12:23:28,466 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!prope5.fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = "OK"
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:28,470 [main:103] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-11 12:23:28,470 [main:38] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-11 12:23:28,470 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:23:28,628 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:23:28,631 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:23:28,771 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:23:28,774 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:23:29,223 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:23:29,226 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:23:29,229 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:23:29,229 [main:95] - GENERATED = check(true, { "rjssz"})
2021-03-11 12:23:29,229 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "rjssz"})}
2021-03-11 12:23:29,229 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:29,548 [main:55] - randomType = Kla4<Float>
2021-03-11 12:23:29,682 [main:302] - generating value of type = Kla4<Float> false depth = 0
2021-03-11 12:23:29,685 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 12:23:30,318 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 12:23:30,320 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:23:30,344 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:30,379 [main:94] - GETTING Function0<Unit> from X
2021-03-11 12:23:30,387 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:23:30,441 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:30,442 [main:94] - GETTING Function0<Unit> from B
2021-03-11 12:23:30,456 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:30,458 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:30,459 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:30,460 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:23:30,461 [main:94] - GETTING Function0<Unit> from B
2021-03-11 12:23:30,462 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:23:30,463 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:30,464 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:30,464 [main:110] - replacement of { c.resume(Unit) } of type Function0<Unit> is { check(true, { "rjssz"})}
2021-03-11 12:23:30,609 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:23:30,610 [main:66] - Compilation checking started
2021-03-11 12:23:31,292 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!prope5.fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = "OK"
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:31,295 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:23:31,295 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:23:31,295 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:23:31,428 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:23:31,434 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:23:31,595 [main:55] - randomType = B?
2021-03-11 12:23:31,728 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:23:31,730 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:23:31,745 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:31,772 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:31,773 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:31,774 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:31,775 [main:94] - GETTING EmptyCoroutineContext from B
2021-03-11 12:23:31,789 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:23:31,840 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:31,841 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:31,841 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:23:31,842 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:23:31,843 [main:94] - GETTING EmptyCoroutineContext from B
2021-03-11 12:23:31,844 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:23:31,844 [main:94] - GETTING EmptyCoroutineContext from X
2021-03-11 12:23:31,851 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:23:31,851 [main:103] - replacing ("OK", String)
2021-03-11 12:23:31,851 [main:38] - replacing "OK" String
2021-03-11 12:23:31,851 [main:42] - Getting value of type String
2021-03-11 12:23:31,985 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:31,988 [main:46] - GENERATED VALUE OF TYPE String = "smwim"
2021-03-11 12:23:31,988 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:31,998 [main:55] - randomType = Kla0
2021-03-11 12:23:32,143 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:23:32,146 [main:112] - generating klass Kla0 text = inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}
2021-03-11 12:23:32,276 [main:194] - Type params = []
2021-03-11 12:23:32,406 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:23:32,416 [main:137] - GENERATING call of type public final fun fu2(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@b2512e2]
2021-03-11 12:23:32,416 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]
2021-03-11 12:23:32,547 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:23:32,681 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:32,684 [main:66] - Generated call from random type = (Kla0("uskxl")).fu2().substringAfter('î©', "lmsmh")
2021-03-11 12:23:32,684 [main:94] - GETTING String from String
2021-03-11 12:23:32,709 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675656b7]]
2021-03-11 12:23:32,709 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675656b7]
2021-03-11 12:23:32,709 [main:105] - GENERATED CALL = (A().K).decapitalize()
2021-03-11 12:23:32,709 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]]
2021-03-11 12:23:32,709 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]
2021-03-11 12:23:32,842 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:32,845 [main:105] - GENERATED CALL = (A().K).concat("cxwpi")
2021-03-11 12:23:32,845 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e3d2b5]]
2021-03-11 12:23:32,845 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f]
2021-03-11 12:23:32,977 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:32,979 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e3d2b5]
2021-03-11 12:23:32,980 [main:105] - GENERATED CALL = (A().K).get(116428203).uppercase()
2021-03-11 12:23:32,980 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]]
2021-03-11 12:23:32,980 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:23:33,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:33,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:33,262 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]
2021-03-11 12:23:33,397 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:23:33,535 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:23:33,538 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:23:33,863 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:23:33,866 [main:95] - GENERATED = StringBuilder("gufly")
2021-03-11 12:23:34,020 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:23:34,024 [main:105] - GENERATED CALL = (A().K).subSequence(-600785428, 116256182).commonPrefixWith(StringBuilder("gufly"), true)
2021-03-11 12:23:34,024 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]]
2021-03-11 12:23:34,024 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]
2021-03-11 12:23:34,168 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:23:34,311 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:23:34,315 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:23:34,459 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:23:34,462 [main:95] - GENERATED = mutableSetOf<Int>(567939252)
2021-03-11 12:23:34,462 [main:105] - GENERATED CALL = (A().K).slice(mutableSetOf<Int>(567939252))
2021-03-11 12:23:34,462 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aff196a]]
2021-03-11 12:23:34,462 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3aff196a]
2021-03-11 12:23:34,595 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:34,598 [main:105] - GENERATED CALL = (A().K).replaceIndent("msuix")
2021-03-11 12:23:34,598 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:23:34,599 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:23:34,735 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:23:34,738 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:23:34,741 [main:105] - GENERATED CALL = (A().K).filter({a: Char -> false})
2021-03-11 12:23:34,741 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]]
2021-03-11 12:23:34,741 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]
2021-03-11 12:23:34,880 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:35,015 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:35,155 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:23:35,291 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:23:35,295 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:23:35,652 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:23:35,658 [main:95] - GENERATED = StringBuilder("cxerf")
2021-03-11 12:23:35,658 [main:105] - GENERATED CALL = (A().K).replaceRange(-1518340429, 353113793, StringBuilder("cxerf"))
2021-03-11 12:23:35,658 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]]
2021-03-11 12:23:35,658 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]
2021-03-11 12:23:35,793 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:23:35,926 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:36,058 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:36,061 [main:105] - GENERATED CALL = (A().K).replaceAfter('ìº', "yqoht", "webmd")
2021-03-11 12:23:36,061 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]]
2021-03-11 12:23:36,061 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]
2021-03-11 12:23:36,194 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:23:36,328 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:23:36,331 [main:105] - GENERATED CALL = (A().K).substringAfter('í', "sugfc")
2021-03-11 12:23:36,333 [main:110] - replacement of "OK" of type String is (A().K).substringAfter('í', "sugfc")
2021-03-11 12:23:36,465 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:23:36,465 [main:66] - Compilation checking started
2021-03-11 12:23:37,109 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!prope5.fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:37,114 [main:103] - replacing (prope3.exceptionOrNull()?.let(prope6), Unit?)
2021-03-11 12:23:37,114 [main:38] - replacing prope3.exceptionOrNull()?.let(prope6) Unit?
2021-03-11 12:23:37,114 [main:42] - Getting value of type Unit?
2021-03-11 12:23:37,258 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 12:23:37,399 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:23:37,403 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:23:37,734 [main:302] - generating value of type = Any false depth = 3
2021-03-11 12:23:37,734 [main:95] - GENERATED = print("fpjhc")
2021-03-11 12:23:37,734 [main:46] - GENERATED VALUE OF TYPE Unit? = print("fpjhc")
2021-03-11 12:23:37,734 [main:49] - GENERATED IS CALL =true
2021-03-11 12:23:38,358 [main:55] - randomType = Function1<Set<String>, UShort>
2021-03-11 12:23:38,364 [main:94] - GETTING Unit? from String
2021-03-11 12:23:38,393 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10e6b068]]
2021-03-11 12:23:38,393 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:23:38,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:38,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:38,665 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10e6b068]
2021-03-11 12:23:38,803 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:23:38,806 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:23:38,812 [main:105] - GENERATED CALL = ((B()).K)?.subSequence(1010337838, -804661541).forEach({a: Char -> println()})
2021-03-11 12:23:38,813 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@417419]]
2021-03-11 12:23:38,813 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:23:38,944 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:39,086 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:39,089 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@417419]
2021-03-11 12:23:39,232 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:23:39,235 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:23:39,376 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:23:39,380 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:23:39,748 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:23:39,751 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:23:39,892 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:23:39,895 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:23:40,190 [main:302] - generating value of type = Any false depth = 8
2021-03-11 12:23:40,191 [main:95] - GENERATED = print("egthw")
2021-03-11 12:23:40,191 [main:95] - GENERATED = contract({ print("egthw")})
2021-03-11 12:23:40,191 [main:105] - GENERATED CALL = ((B()).K)?.subSequence(2096684078, 1482356047).forEachIndexed({a: Int, b: Char -> contract({ print("egthw")})})
2021-03-11 12:23:40,191 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10e6b068]]
2021-03-11 12:23:40,191 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10e6b068]
2021-03-11 12:23:40,323 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:23:40,325 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:23:40,468 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:23:40,471 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:23:40,913 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:23:40,917 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:23:40,919 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:23:40,920 [main:95] - GENERATED = require(true, { "uzuns"})
2021-03-11 12:23:40,920 [main:105] - GENERATED CALL = ((B()).K)?.forEach({a: Char -> require(true, { "uzuns"})})
2021-03-11 12:23:40,920 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@417419]]
2021-03-11 12:23:40,920 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@417419]
2021-03-11 12:23:41,050 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:23:41,053 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:23:41,187 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:23:41,191 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:23:41,527 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:23:41,530 [main:95] - GENERATED = require(true)
2021-03-11 12:23:41,530 [main:105] - GENERATED CALL = ((B()).K)?.forEachIndexed({a: Int, b: Char -> require(true)})
2021-03-11 12:23:41,530 [main:110] - replacement of prope3.exceptionOrNull()?.let(prope6) of type Unit? is ((B()).K)?.subSequence(2096684078, 1482356047).forEachIndexed({a: Int, b: Char -> contract({ print("egthw")})})
2021-03-11 12:23:41,665 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:23:41,665 [main:66] - Compilation checking started
2021-03-11 12:23:42,072 [main:49] - Result = false
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!prope5.fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        ((B()).K)?.subSequence(2096684078, 1482356047).forEachIndexed({a: Int, b: Char -> contract({ print("egthw")})})
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:42,075 [main:103] - replacing (RuntimeException("equal references"), RuntimeException)
2021-03-11 12:23:42,075 [main:38] - replacing RuntimeException("equal references") RuntimeException
2021-03-11 12:23:42,075 [main:42] - Getting value of type RuntimeException
2021-03-11 12:23:42,214 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-11 12:23:42,220 [main:46] - GENERATED VALUE OF TYPE RuntimeException = UnsupportedOperationException()
2021-03-11 12:23:42,220 [main:49] - GENERATED IS CALL =true
2021-03-11 12:23:42,370 [main:55] - randomType = Float
2021-03-11 12:23:42,504 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:23:42,535 [main:94] - GETTING RuntimeException from String
2021-03-11 12:23:42,553 [main:94] - GETTING RuntimeException from String
2021-03-11 12:23:42,554 [main:94] - GETTING RuntimeException from String
2021-03-11 12:23:42,555 [main:94] - GETTING RuntimeException from Int
2021-03-11 12:23:42,596 [main:94] - GETTING RuntimeException from Int
2021-03-11 12:23:42,597 [main:94] - GETTING RuntimeException from String
2021-03-11 12:23:42,598 [main:94] - GETTING RuntimeException from B
2021-03-11 12:23:42,613 [main:94] - GETTING RuntimeException from String
2021-03-11 12:23:42,614 [main:94] - GETTING RuntimeException from X
2021-03-11 12:23:42,622 [main:94] - GETTING RuntimeException from B
2021-03-11 12:23:42,623 [main:94] - GETTING RuntimeException from String
2021-03-11 12:23:42,624 [main:94] - GETTING RuntimeException from Int
2021-03-11 12:23:42,625 [main:94] - GETTING RuntimeException from String
2021-03-11 12:23:42,625 [main:110] - replacement of RuntimeException("equal references") of type RuntimeException is UnsupportedOperationException()
2021-03-11 12:23:42,763 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:23:42,763 [main:66] - Compilation checking started
2021-03-11 12:23:43,419 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!prope5.fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:43,422 [main:103] - replacing (prope5, Kla1)
2021-03-11 12:23:43,422 [main:38] - replacing prope5 Kla1
2021-03-11 12:23:43,422 [main:42] - Getting value of type Kla1
2021-03-11 12:23:43,610 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:23:43,613 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-11 12:23:43,614 [main:46] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-11 12:23:43,614 [main:49] - GENERATED IS CALL =true
2021-03-11 12:23:43,935 [main:55] - randomType = Function1<Boolean, UByte>
2021-03-11 12:23:43,936 [main:94] - GETTING Kla1 from Int
2021-03-11 12:23:43,971 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:43,989 [main:94] - GETTING Kla1 from B
2021-03-11 12:23:43,999 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:44,000 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:44,001 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:44,001 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:44,002 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:44,003 [main:94] - GETTING Kla1 from X
2021-03-11 12:23:44,008 [main:94] - GETTING Kla1 from B
2021-03-11 12:23:44,008 [main:94] - GETTING Kla1 from Int
2021-03-11 12:23:44,009 [main:94] - GETTING Kla1 from Int
2021-03-11 12:23:44,009 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:44,009 [main:110] - replacement of prope5 of type Kla1 is Kla1()
2021-03-11 12:23:44,143 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:23:44,144 [main:66] - Compilation checking started
2021-03-11 12:23:44,772 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!prope5.fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:44,774 [main:103] - replacing (prope5, Kla1)
2021-03-11 12:23:44,774 [main:38] - replacing prope5 Kla1
2021-03-11 12:23:44,774 [main:42] - Getting value of type Kla1
2021-03-11 12:23:44,911 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:23:44,914 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-11 12:23:44,914 [main:46] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-11 12:23:44,914 [main:49] - GENERATED IS CALL =true
2021-03-11 12:23:44,919 [main:55] - randomType = Int
2021-03-11 12:23:45,052 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:45,095 [main:94] - GETTING Kla1 from Int
2021-03-11 12:23:45,125 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:45,142 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:45,143 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:45,144 [main:94] - GETTING Kla1 from Int
2021-03-11 12:23:45,144 [main:94] - GETTING Kla1 from B
2021-03-11 12:23:45,152 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:45,153 [main:94] - GETTING Kla1 from Int
2021-03-11 12:23:45,154 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:45,154 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:45,155 [main:94] - GETTING Kla1 from String
2021-03-11 12:23:45,155 [main:94] - GETTING Kla1 from X
2021-03-11 12:23:45,160 [main:94] - GETTING Kla1 from B
2021-03-11 12:23:45,160 [main:110] - replacement of prope5 of type Kla1 is Kla1()
2021-03-11 12:23:45,290 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:23:45,291 [main:66] - Compilation checking started
2021-03-11 12:23:45,926 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!Kla1().fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:45,928 [main:103] - replacing (prope2, Continuation<String>?)
2021-03-11 12:23:45,928 [main:38] - replacing prope2 Continuation<String>?
2021-03-11 12:23:45,928 [main:42] - Getting value of type Continuation<String>?
2021-03-11 12:23:46,059 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-11 12:23:46,196 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:23:46,200 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:23:46,660 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:23:46,799 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:46,803 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:47,098 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:23:47,238 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:47,242 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:47,703 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 12:23:47,911 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:23:47,915 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:23:48,430 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:23:48,430 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:48,430 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:48,430 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:23:48,431 [main:46] - GENERATED VALUE OF TYPE Continuation<String>? = 
2021-03-11 12:23:48,912 [main:55] - randomType = LinkedHashMap<A, A?>?
2021-03-11 12:23:49,041 [main:302] - generating value of type = LinkedHashMap<A, A?> false depth = 0
2021-03-11 12:23:49,181 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<A, A?>): LkedHashMap<A, A?> = TODO()
2021-03-11 12:23:49,185 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<A, A?>): LkedHashMap<A, A?> = TODO()
2021-03-11 12:23:49,329 [main:302] - generating value of type = Pair<A, A?> false depth = 3
2021-03-11 12:23:49,463 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: A, second: A?): Pair<A, A?> = TODO()
2021-03-11 12:23:49,467 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: A, second: A?): Pair<A, A?> = TODO()
2021-03-11 12:23:49,612 [main:302] - generating value of type = A false depth = 6
2021-03-11 12:23:49,614 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}
2021-03-11 12:23:49,615 [main:302] - generating value of type = A false depth = 6
2021-03-11 12:23:49,617 [main:112] - generating klass A text = open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}
2021-03-11 12:23:49,617 [main:95] - GENERATED = Pair<A, A?>(A(), A())
2021-03-11 12:23:49,617 [main:95] - GENERATED = linkedMapOf<A, A?>(Pair<A, A?>(A(), A()))
2021-03-11 12:23:49,735 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:23:49,752 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:23:49,753 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:23:49,754 [main:94] - GETTING Continuation<String>? from Int
2021-03-11 12:23:49,784 [main:94] - GETTING Continuation<String>? from Int
2021-03-11 12:23:49,785 [main:94] - GETTING Continuation<String>? from B
2021-03-11 12:23:49,793 [main:94] - GETTING Continuation<String>? from Int
2021-03-11 12:23:49,794 [main:94] - GETTING Continuation<String>? from X
2021-03-11 12:23:49,800 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:23:49,825 [main:94] - GETTING Continuation<String>? from B
2021-03-11 12:23:49,826 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:23:49,828 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:23:49,828 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:23:49,829 [main:107] - Cant find and generate replacement for prope2 type Continuation<String>?
2021-03-11 12:23:49,829 [main:103] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 12:23:49,829 [main:38] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 12:23:49,829 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 12:23:49,960 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 12:23:49,962 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:23:49,965 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 12:23:49,965 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:50,761 [main:55] - randomType = HashMap<HashMap<String, Short>, Function2<X?, Char, String>>
2021-03-11 12:23:50,894 [main:302] - generating value of type = HashMap<HashMap<String, Short>, Function2<X?, Char, String>> false depth = 0
2021-03-11 12:23:51,032 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<HashMap<String, Short>, Function2<X?, Char, String>> = TODO()
2021-03-11 12:23:51,038 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<HashMap<String, Short>, Function2<X?, Char, String>> = TODO()
2021-03-11 12:23:51,326 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:23:51,329 [main:95] - GENERATED = HashMap<HashMap<String, Short>, Function2<X?, Char, String>>(2004840389)
2021-03-11 12:23:51,511 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:23:51,543 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:23:51,544 [main:94] - GETTING Function0<Boolean> from X
2021-03-11 12:23:51,552 [main:94] - GETTING Function0<Boolean> from B
2021-03-11 12:23:51,566 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:23:51,567 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:23:51,621 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:23:51,622 [main:94] - GETTING Function0<Boolean> from B
2021-03-11 12:23:51,623 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:23:51,624 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:23:51,625 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:23:51,626 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:23:51,628 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:23:51,628 [main:110] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-11 12:23:51,764 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:23:51,765 [main:66] - Compilation checking started
2021-03-11 12:23:52,435 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!Kla1().fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:52,438 [main:103] - replacing (prope11, Function0<Unit>)
2021-03-11 12:23:52,438 [main:38] - replacing prope11 Function0<Unit>
2021-03-11 12:23:52,438 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:23:52,580 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:23:52,583 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:23:52,719 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:23:52,723 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:23:53,016 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:23:53,016 [main:95] - GENERATED = println("iohvl")
2021-03-11 12:23:53,016 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("iohvl")}
2021-03-11 12:23:53,016 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:53,334 [main:55] - randomType = MutableMap<Double, Boolean>
2021-03-11 12:23:53,335 [main:94] - GETTING Function0<Unit> from B
2021-03-11 12:23:53,345 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:53,362 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:53,363 [main:94] - GETTING Function0<Unit> from B
2021-03-11 12:23:53,364 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:23:53,398 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:53,400 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:53,401 [main:94] - GETTING Function0<Unit> from X
2021-03-11 12:23:53,407 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:53,408 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:53,409 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:23:53,410 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:23:53,411 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:23:53,411 [main:110] - replacement of prope11 of type Function0<Unit> is { println("iohvl")}
2021-03-11 12:23:53,540 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:23:53,540 [main:66] - Compilation checking started
2021-03-11 12:23:53,921 [main:49] - Result = false
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!Kla1().fu8()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        { println("iohvl")} = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:53,923 [main:103] - replacing (c, Continuation<*>)
2021-03-11 12:23:53,923 [main:38] - replacing c Continuation<*>
2021-03-11 12:23:53,923 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:23:54,057 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:23:54,203 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:23:54,207 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:23:54,698 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:23:54,834 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:54,838 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:55,129 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:23:55,268 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:55,272 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:55,725 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 12:23:55,867 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:23:55,871 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:23:56,317 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:23:56,317 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:23:56,317 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:23:56,317 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:23:56,317 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:23:56,463 [main:55] - randomType = ULong
2021-03-11 12:23:56,591 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:23:56,622 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:23:56,638 [main:94] - GETTING Continuation<*> from B
2021-03-11 12:23:56,646 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:23:56,692 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:23:56,693 [main:94] - GETTING Continuation<*> from X
2021-03-11 12:23:56,698 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:23:56,699 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:23:56,700 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:23:56,701 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:23:56,701 [main:94] - GETTING Continuation<*> from B
2021-03-11 12:23:56,702 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:23:56,703 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:23:56,704 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:23:56,704 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 12:23:56,704 [main:103] - replacing (Kla1().fu8(), Boolean)
2021-03-11 12:23:56,704 [main:38] - replacing Kla1().fu8() Boolean
2021-03-11 12:23:56,704 [main:42] - Getting value of type Boolean
2021-03-11 12:23:56,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:23:56,835 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:23:56,835 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:57,133 [main:55] - randomType = Collection<Long>
2021-03-11 12:23:57,134 [main:94] - GETTING Boolean from Int
2021-03-11 12:23:57,177 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bb0181]]
2021-03-11 12:23:57,178 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:23:57,178 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bb0181]
2021-03-11 12:23:57,178 [main:105] - GENERATED CALL = (-571786330).toChar().isLetter()
2021-03-11 12:23:57,178 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7713c1d2]]
2021-03-11 12:23:57,178 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:23:57,178 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7713c1d2]
2021-03-11 12:23:57,178 [main:105] - GENERATED CALL = (-571786330).toChar().isSurrogate()
2021-03-11 12:23:57,178 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f]]
2021-03-11 12:23:57,178 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f]
2021-03-11 12:23:57,313 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:23:57,314 [main:105] - GENERATED CALL = (-571786330).equals("ajijd")
2021-03-11 12:23:57,314 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10bc2f27]]
2021-03-11 12:23:57,314 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:23:57,314 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10bc2f27]
2021-03-11 12:23:57,314 [main:105] - GENERATED CALL = (-571786330).toChar().isHighSurrogate()
2021-03-11 12:23:57,314 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b06148b]]
2021-03-11 12:23:57,314 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f]
2021-03-11 12:23:57,443 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:23:57,443 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b06148b]
2021-03-11 12:23:57,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:23:57,578 [main:105] - GENERATED CALL = (-571786330).equals("xfwwo").xor(true)
2021-03-11 12:23:57,578 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6332d165], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@ad43c8d]]
2021-03-11 12:23:57,578 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6332d165]
2021-03-11 12:23:57,706 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:23:57,709 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@ad43c8d]
2021-03-11 12:23:57,709 [main:105] - GENERATED CALL = (-571786330).div(0.481251029288576).isInfinite()
2021-03-11 12:23:57,709 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79bf99f1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5585f547]]
2021-03-11 12:23:57,709 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79bf99f1]
2021-03-11 12:23:57,837 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:23:57,840 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5585f547]
2021-03-11 12:23:57,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:57,973 [main:105] - GENERATED CALL = (-571786330).rangeTo(-72).contains(1177079654)
2021-03-11 12:23:57,973 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2b704646], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4cf11591]]
2021-03-11 12:23:57,974 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2b704646]
2021-03-11 12:23:57,974 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4cf11591]
2021-03-11 12:23:57,974 [main:105] - GENERATED CALL = (-571786330).toFloat().isFinite()
2021-03-11 12:23:57,974 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2b704646], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@742e80b6]]
2021-03-11 12:23:57,974 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2b704646]
2021-03-11 12:23:57,974 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@742e80b6]
2021-03-11 12:23:57,974 [main:105] - GENERATED CALL = (-571786330).toFloat().isNaN()
2021-03-11 12:23:57,974 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b5836]]
2021-03-11 12:23:57,974 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:23:57,974 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b5836]
2021-03-11 12:23:57,974 [main:105] - GENERATED CALL = (-571786330).toChar().isTitleCase()
2021-03-11 12:23:57,974 [main:110] - replacement of Kla1().fu8() of type Boolean is (-571786330).toChar().isHighSurrogate()
2021-03-11 12:23:58,105 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:23:58,106 [main:66] - Compilation checking started
2021-03-11 12:23:58,720 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!(-571786330).toChar().isHighSurrogate()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:23:58,723 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 12:23:58,723 [main:38] - replacing numberOfSuspensions Int
2021-03-11 12:23:58,723 [main:42] - Getting value of type Int
2021-03-11 12:23:58,882 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:23:58,885 [main:46] - GENERATED VALUE OF TYPE Int = 284794888
2021-03-11 12:23:58,885 [main:49] - GENERATED IS CALL =false
2021-03-11 12:23:59,205 [main:55] - randomType = Kla4<Double>
2021-03-11 12:23:59,334 [main:302] - generating value of type = Kla4<Double> false depth = 0
2021-03-11 12:23:59,336 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 12:23:59,780 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 12:23:59,782 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:23:59,796 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@37c04737]
2021-03-11 12:23:59,924 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:23:59,924 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60235ace]
2021-03-11 12:24:00,052 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:00,055 [main:66] - Generated call from random type = (Kla7).equals("uwsbj").compareTo(false)
2021-03-11 12:24:00,055 [main:94] - GETTING Int from Int
2021-03-11 12:24:00,096 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@546329a5], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@aa2bf61]]
2021-03-11 12:24:00,096 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@546329a5]
2021-03-11 12:24:00,096 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@aa2bf61]
2021-03-11 12:24:00,231 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:24:00,234 [main:105] - GENERATED CALL = ((-571786330)).toByte().plus(63)
2021-03-11 12:24:00,235 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5f3a486c], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61f342aa]]
2021-03-11 12:24:00,235 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5f3a486c]
2021-03-11 12:24:00,370 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:00,373 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61f342aa]
2021-03-11 12:24:00,508 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:24:00,511 [main:105] - GENERATED CALL = ((-571786330)).compareTo(1932644783).div(28)
2021-03-11 12:24:00,511 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@65162814]]
2021-03-11 12:24:00,511 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89]
2021-03-11 12:24:00,511 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@65162814]
2021-03-11 12:24:00,511 [main:105] - GENERATED CALL = ((-571786330)).toInt().countTrailingZeroBits()
2021-03-11 12:24:00,511 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b22ea3]]
2021-03-11 12:24:00,511 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89]
2021-03-11 12:24:00,511 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b22ea3]
2021-03-11 12:24:00,511 [main:105] - GENERATED CALL = ((-571786330)).toInt().unaryMinus()
2021-03-11 12:24:00,512 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5f3a486c], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e967e4e]]
2021-03-11 12:24:00,512 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5f3a486c]
2021-03-11 12:24:00,639 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:00,642 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e967e4e]
2021-03-11 12:24:00,770 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:00,773 [main:105] - GENERATED CALL = ((-571786330)).compareTo(1499935073).coerceAtMost(2093492931)
2021-03-11 12:24:00,773 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c09e3c2]]
2021-03-11 12:24:00,773 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5c09e3c2]
2021-03-11 12:24:00,774 [main:105] - GENERATED CALL = ((-571786330)).inc()
2021-03-11 12:24:00,774 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3348cc8b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@794969a]]
2021-03-11 12:24:00,774 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3348cc8b]
2021-03-11 12:24:00,774 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@794969a]
2021-03-11 12:24:00,903 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:24:00,906 [main:105] - GENERATED CALL = ((-571786330)).toShort().div(97)
2021-03-11 12:24:00,906 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61e02857]]
2021-03-11 12:24:00,906 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89]
2021-03-11 12:24:00,906 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@61e02857]
2021-03-11 12:24:01,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:01,042 [main:105] - GENERATED CALL = ((-571786330)).toInt().rotateRight(1475106279)
2021-03-11 12:24:01,042 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36fb9a60], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f9a762b]]
2021-03-11 12:24:01,042 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36fb9a60]
2021-03-11 12:24:01,172 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:24:01,174 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f9a762b]
2021-03-11 12:24:01,175 [main:105] - GENERATED CALL = ((-571786330)).div(3190401635533170013).countLeadingZeroBits()
2021-03-11 12:24:01,175 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55cac412], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f9a762b]]
2021-03-11 12:24:01,175 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55cac412]
2021-03-11 12:24:01,175 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f9a762b]
2021-03-11 12:24:01,175 [main:105] - GENERATED CALL = ((-571786330)).toLong().countLeadingZeroBits()
2021-03-11 12:24:01,175 [main:110] - replacement of numberOfSuspensions of type Int is (Kla7).equals("uwsbj").compareTo(false)
2021-03-11 12:24:01,307 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:01,307 [main:66] - Compilation checking started
2021-03-11 12:24:01,965 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if (!(-571786330).toChar().isHighSurrogate()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:01,967 [main:103] - replacing (!(-571786330).toChar().isHighSurrogate(), Boolean)
2021-03-11 12:24:01,967 [main:38] - replacing !(-571786330).toChar().isHighSurrogate() Boolean
2021-03-11 12:24:01,967 [main:42] - Getting value of type Boolean
2021-03-11 12:24:02,106 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:02,109 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:24:02,109 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:02,271 [main:55] - randomType = Kla1?
2021-03-11 12:24:02,401 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:24:02,403 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-11 12:24:02,415 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e64f3e6]
2021-03-11 12:24:02,416 [main:66] - Generated call from random type = (Kla1())?.prope3.toBoolean()
2021-03-11 12:24:02,417 [main:94] - GETTING Boolean from String
2021-03-11 12:24:02,432 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@738df92f]]
2021-03-11 12:24:02,432 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:02,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:02,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:02,700 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@738df92f]
2021-03-11 12:24:02,832 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:02,832 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(1643348331, -919252466).equals("mlpba")
2021-03-11 12:24:02,832 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@10e9b3c1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f]]
2021-03-11 12:24:02,832 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f]
2021-03-11 12:24:02,965 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:02,965 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).length.equals("mobcz")
2021-03-11 12:24:02,965 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130c2602]]
2021-03-11 12:24:02,965 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f]
2021-03-11 12:24:03,096 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:03,099 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130c2602]
2021-03-11 12:24:03,099 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).get(196045894).isLowSurrogate()
2021-03-11 12:24:03,099 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@50109cd1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@45d5c457]]
2021-03-11 12:24:03,099 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@50109cd1]
2021-03-11 12:24:03,228 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:03,229 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@45d5c457]
2021-03-11 12:24:03,362 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:03,363 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).equals("ixsoi").equals("lyhnf")
2021-03-11 12:24:03,363 [main:101] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c3e55ed]]
2021-03-11 12:24:03,363 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c3e55ed]
2021-03-11 12:24:03,492 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:03,623 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:03,626 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).startsWith("qcjqg", false)
2021-03-11 12:24:03,626 [main:101] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cca96b7]]
2021-03-11 12:24:03,626 [main:137] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cca96b7]
2021-03-11 12:24:03,755 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:03,758 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).hasSurrogatePairAt(-1382412253)
2021-03-11 12:24:03,758 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@50109cd1]]
2021-03-11 12:24:03,758 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@50109cd1]
2021-03-11 12:24:03,909 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:03,910 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).equals("likut")
2021-03-11 12:24:03,910 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65697464]]
2021-03-11 12:24:03,910 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:04,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:04,171 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:04,174 [main:137] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65697464]
2021-03-11 12:24:04,174 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-829466270, 316055198).none()
2021-03-11 12:24:04,174 [main:101] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65697464]]
2021-03-11 12:24:04,174 [main:137] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65697464]
2021-03-11 12:24:04,175 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).none()
2021-03-11 12:24:04,175 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb25db7]]
2021-03-11 12:24:04,175 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:04,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:04,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:04,440 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb25db7]
2021-03-11 12:24:04,440 [main:105] - GENERATED CALL = (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()
2021-03-11 12:24:04,440 [main:110] - replacement of !(-571786330).toChar().isHighSurrogate() of type Boolean is (1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()
2021-03-11 12:24:04,569 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:04,570 [main:66] - Compilation checking started
2021-03-11 12:24:05,374 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:05,376 [main:103] - replacing ("\n", String)
2021-03-11 12:24:05,376 [main:38] - replacing "\n" String
2021-03-11 12:24:05,376 [main:42] - Getting value of type String
2021-03-11 12:24:05,529 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:05,532 [main:46] - GENERATED VALUE OF TYPE String = "msdou"
2021-03-11 12:24:05,532 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:05,543 [main:55] - randomType = B
2021-03-11 12:24:05,692 [main:302] - generating value of type = B false depth = 0
2021-03-11 12:24:05,695 [main:112] - generating klass B text = class B : A() {
    init {
        K = "K"
    }
}
2021-03-11 12:24:05,709 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6c84f223]
2021-03-11 12:24:05,855 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:05,855 [main:66] - Generated call from random type = (B()).K.plus("hkhgg")
2021-03-11 12:24:05,856 [main:94] - GETTING String from String
2021-03-11 12:24:05,885 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:24:05,885 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:24:06,017 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:06,020 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:06,023 [main:105] - GENERATED CALL = (X.O).filter({a: Char -> true})
2021-03-11 12:24:06,023 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]]
2021-03-11 12:24:06,023 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]
2021-03-11 12:24:06,159 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:06,305 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:06,308 [main:105] - GENERATED CALL = (X.O).substringAfterLast('é', "fwzrz")
2021-03-11 12:24:06,308 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]]
2021-03-11 12:24:06,308 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58253d40]
2021-03-11 12:24:06,308 [main:105] - GENERATED CALL = (X.O).reversed()
2021-03-11 12:24:06,309 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dd1faba]]
2021-03-11 12:24:06,309 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:06,440 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:06,575 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:06,578 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dd1faba]
2021-03-11 12:24:06,728 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:24:06,864 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:24:06,868 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:24:07,156 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:24:07,159 [main:95] - GENERATED = Regex("jslin")
2021-03-11 12:24:07,296 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:24:07,299 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:24:07,305 [main:105] - GENERATED CALL = (X.O).subSequence(717177041, -121449394).replace(Regex("jslin"), {a: MatchResult -> "najty"})
2021-03-11 12:24:07,305 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]]
2021-03-11 12:24:07,305 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]
2021-03-11 12:24:07,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:07,440 [main:105] - GENERATED CALL = (X.O).dropLast(1448020443)
2021-03-11 12:24:07,440 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f7dda0]]
2021-03-11 12:24:07,440 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f7dda0]
2021-03-11 12:24:07,570 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:07,704 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:07,707 [main:105] - GENERATED CALL = (X.O).substringBeforeLast('ë¬', "pvtpl")
2021-03-11 12:24:07,707 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37f93141]]
2021-03-11 12:24:07,707 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37f93141]
2021-03-11 12:24:07,846 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:07,849 [main:105] - GENERATED CALL = (X.O).take(-1262175920)
2021-03-11 12:24:07,850 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]]
2021-03-11 12:24:07,850 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]
2021-03-11 12:24:07,979 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:07,982 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:07,985 [main:105] - GENERATED CALL = (X.O).filterNot({a: Char -> false})
2021-03-11 12:24:07,985 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]]
2021-03-11 12:24:07,985 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]
2021-03-11 12:24:08,117 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:08,120 [main:105] - GENERATED CALL = (X.O).substring(1582360320)
2021-03-11 12:24:08,120 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]]
2021-03-11 12:24:08,120 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8033afb]
2021-03-11 12:24:08,251 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:24:08,388 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:08,391 [main:105] - GENERATED CALL = (X.O).commonPrefixWith("zgsso", true)
2021-03-11 12:24:08,391 [main:110] - replacement of "\n" of type String is (X.O).take(-1262175920)
2021-03-11 12:24:08,522 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:08,522 [main:66] - Compilation checking started
2021-03-11 12:24:09,148 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        fu7()
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:09,152 [main:103] - replacing (fu7(), String)
2021-03-11 12:24:09,152 [main:38] - replacing fu7() String
2021-03-11 12:24:09,152 [main:42] - Getting value of type String
2021-03-11 12:24:09,300 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:09,303 [main:46] - GENERATED VALUE OF TYPE String = "naocq"
2021-03-11 12:24:09,303 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:10,190 [main:55] - randomType = Set<Function2<Kla0, Collection<ArrayDeque<String?>>, Kla2>>
2021-03-11 12:24:10,191 [main:94] - GETTING String from B
2021-03-11 12:24:10,199 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]]
2021-03-11 12:24:10,199 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]
2021-03-11 12:24:10,332 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:10,468 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:10,471 [main:105] - GENERATED CALL = (B()).K.padStart(-631182348, 'î¼')
2021-03-11 12:24:10,471 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]]
2021-03-11 12:24:10,471 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397a8e88]
2021-03-11 12:24:10,604 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:10,607 [main:105] - GENERATED CALL = (B()).K.substring(-1473390924)
2021-03-11 12:24:10,607 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:24:10,607 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:24:10,740 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:10,743 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:10,746 [main:105] - GENERATED CALL = (B()).K.filter({a: Char -> true})
2021-03-11 12:24:10,746 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:24:10,746 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:24:10,746 [main:105] - GENERATED CALL = (B()).K.trimIndent()
2021-03-11 12:24:10,746 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27b4ac45]]
2021-03-11 12:24:10,746 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27b4ac45]
2021-03-11 12:24:10,747 [main:105] - GENERATED CALL = (B()).K.capitalize()
2021-03-11 12:24:10,747 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]]
2021-03-11 12:24:10,747 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]
2021-03-11 12:24:10,890 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:10,893 [main:105] - GENERATED CALL = (B()).K.takeLast(612150821)
2021-03-11 12:24:10,893 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]]
2021-03-11 12:24:10,893 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a41be5d]
2021-03-11 12:24:11,030 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:11,167 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:11,170 [main:105] - GENERATED CALL = (B()).K.substringAfter('â§³', "xsqgw")
2021-03-11 12:24:11,170 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25549b6a]]
2021-03-11 12:24:11,170 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25549b6a]
2021-03-11 12:24:11,305 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:11,441 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:11,580 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:11,583 [main:105] - GENERATED CALL = (B()).K.replaceBefore('î³·', "namea", "ryjqz")
2021-03-11 12:24:11,583 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]]
2021-03-11 12:24:11,583 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d39434b]
2021-03-11 12:24:11,718 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:11,721 [main:105] - GENERATED CALL = (B()).K.concat("oxfrr")
2021-03-11 12:24:11,721 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]]
2021-03-11 12:24:11,721 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e829]
2021-03-11 12:24:11,721 [main:105] - GENERATED CALL = (B()).K.uppercase()
2021-03-11 12:24:11,721 [main:110] - replacement of fu7() of type String is (B()).K.filter({a: Char -> true})
2021-03-11 12:24:11,878 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:11,878 [main:66] - Compilation checking started
2021-03-11 12:24:12,552 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:12,554 [main:103] - replacing (prope2, Continuation<String>?)
2021-03-11 12:24:12,554 [main:38] - replacing prope2 Continuation<String>?
2021-03-11 12:24:12,554 [main:42] - Getting value of type Continuation<String>?
2021-03-11 12:24:12,691 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-11 12:24:12,835 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:24:12,839 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:24:13,309 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:24:13,449 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:24:13,453 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:24:13,755 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:24:13,898 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:24:13,902 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:24:14,362 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:24:14,362 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:24:14,362 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 12:24:14,362 [main:46] - GENERATED VALUE OF TYPE Continuation<String>? = 
2021-03-11 12:24:14,688 [main:55] - randomType = MutableMap<ULong, Kla2>
2021-03-11 12:24:14,690 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:24:14,733 [main:94] - GETTING Continuation<String>? from X
2021-03-11 12:24:14,738 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:24:14,739 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:24:14,740 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:24:14,741 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:24:14,742 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:24:14,743 [main:94] - GETTING Continuation<String>? from B
2021-03-11 12:24:14,755 [main:94] - GETTING Continuation<String>? from Int
2021-03-11 12:24:14,789 [main:94] - GETTING Continuation<String>? from Int
2021-03-11 12:24:14,790 [main:94] - GETTING Continuation<String>? from String
2021-03-11 12:24:14,791 [main:94] - GETTING Continuation<String>? from B
2021-03-11 12:24:14,792 [main:94] - GETTING Continuation<String>? from Int
2021-03-11 12:24:14,792 [main:107] - Cant find and generate replacement for prope2 type Continuation<String>?
2021-03-11 12:24:14,792 [main:103] - replacing (prope9 != numberOfSuspensions, Boolean)
2021-03-11 12:24:14,792 [main:38] - replacing prope9 != numberOfSuspensions Boolean
2021-03-11 12:24:14,792 [main:42] - Getting value of type Boolean
2021-03-11 12:24:14,926 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:14,929 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:24:14,930 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:15,097 [main:55] - randomType = HashSet<Kla7>
2021-03-11 12:24:15,230 [main:302] - generating value of type = HashSet<Kla7> false depth = 0
2021-03-11 12:24:15,369 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla7): HashSet<Kla7> = TODO()
2021-03-11 12:24:15,373 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla7): HashSet<Kla7> = TODO()
2021-03-11 12:24:15,516 [main:302] - generating value of type = Kla7 false depth = 3
2021-03-11 12:24:15,519 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:24:15,519 [main:95] - GENERATED = linkedSetOf<Kla7>(Kla7)
2021-03-11 12:24:15,617 [main:137] - GENERATING call of type public open fun removeAll(elements: kotlin.collections.Collection<Kla7>): kotlin.Boolean defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@6a725e8e]
2021-03-11 12:24:15,751 [main:302] - generating value of type = Collection<Kla7> false depth = 0
2021-03-11 12:24:15,891 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla7): Collection<Kla7> = TODO()
2021-03-11 12:24:15,895 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla7): Collection<Kla7> = TODO()
2021-03-11 12:24:16,035 [main:302] - generating value of type = Kla7 false depth = 3
2021-03-11 12:24:16,038 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:24:16,038 [main:95] - GENERATED = hashSetOf<Kla7>(Kla7)
2021-03-11 12:24:16,038 [main:66] - Generated call from random type = (linkedSetOf<Kla7>(Kla7)).removeAll(hashSetOf<Kla7>(Kla7))
2021-03-11 12:24:16,039 [main:94] - GETTING Boolean from B
2021-03-11 12:24:16,047 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454df35f]]
2021-03-11 12:24:16,047 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454df35f]
2021-03-11 12:24:16,179 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:16,182 [main:105] - GENERATED CALL = (B()).K.matches("pspsc")
2021-03-11 12:24:16,182 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e64f3e6]]
2021-03-11 12:24:16,182 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e64f3e6]
2021-03-11 12:24:16,183 [main:105] - GENERATED CALL = (B()).K.toBoolean()
2021-03-11 12:24:16,183 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24ef9204]]
2021-03-11 12:24:16,183 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be]
2021-03-11 12:24:16,315 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:16,315 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24ef9204]
2021-03-11 12:24:16,450 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:16,453 [main:105] - GENERATED CALL = (B()).equals("lvjzw").and(true)
2021-03-11 12:24:16,453 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c3e55ed]]
2021-03-11 12:24:16,453 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c3e55ed]
2021-03-11 12:24:16,586 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:16,722 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:16,725 [main:105] - GENERATED CALL = (B()).K.startsWith("loncy", true)
2021-03-11 12:24:16,725 [main:101] - Case = [public final var K: kotlin.String defined in B[PropertyDescriptorImpl@13d849e2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@50109cd1]]
2021-03-11 12:24:16,725 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@50109cd1]
2021-03-11 12:24:16,858 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:16,858 [main:105] - GENERATED CALL = (B()).K.equals("tbsix")
2021-03-11 12:24:16,858 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518d91a8]]
2021-03-11 12:24:16,858 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be]
2021-03-11 12:24:16,992 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:16,992 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518d91a8]
2021-03-11 12:24:16,992 [main:105] - GENERATED CALL = (B()).equals("qntem").not()
2021-03-11 12:24:16,992 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@45d5c457]]
2021-03-11 12:24:16,992 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be]
2021-03-11 12:24:17,125 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:17,125 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@45d5c457]
2021-03-11 12:24:17,289 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:17,289 [main:105] - GENERATED CALL = (B()).equals("nlbva").equals("uqfko")
2021-03-11 12:24:17,289 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b06148b]]
2021-03-11 12:24:17,289 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be]
2021-03-11 12:24:17,421 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:17,422 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b06148b]
2021-03-11 12:24:17,556 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:17,559 [main:105] - GENERATED CALL = (B()).equals("dzbdp").xor(true)
2021-03-11 12:24:17,560 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be]]
2021-03-11 12:24:17,560 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be]
2021-03-11 12:24:17,698 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:17,698 [main:105] - GENERATED CALL = (B()).equals("pttkv")
2021-03-11 12:24:17,698 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b02447d]]
2021-03-11 12:24:17,698 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@d2bf2be]
2021-03-11 12:24:17,839 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:17,839 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b02447d]
2021-03-11 12:24:17,973 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:17,976 [main:105] - GENERATED CALL = (B()).equals("qayip").or(true)
2021-03-11 12:24:17,976 [main:110] - replacement of prope9 != numberOfSuspensions of type Boolean is (B()).equals("nlbva").equals("uqfko")
2021-03-11 12:24:18,110 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:18,111 [main:66] - Compilation checking started
2021-03-11 12:24:18,759 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:18,761 [main:103] - replacing ("tail-call optimization miss: method at ", String)
2021-03-11 12:24:18,762 [main:38] - replacing "tail-call optimization miss: method at " String
2021-03-11 12:24:18,762 [main:42] - Getting value of type String
2021-03-11 12:24:18,913 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:18,916 [main:46] - GENERATED VALUE OF TYPE String = "hnljw"
2021-03-11 12:24:18,917 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:19,234 [main:55] - randomType = Double?
2021-03-11 12:24:19,379 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:24:19,413 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@26e0a61a]
2021-03-11 12:24:19,413 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b36e1a1]
2021-03-11 12:24:19,546 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:19,550 [main:66] - Generated call from random type = (0.5932576612824608)?.toLong().toString(-1962380807)
2021-03-11 12:24:19,550 [main:94] - GETTING String from String
2021-03-11 12:24:19,567 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]]
2021-03-11 12:24:19,567 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]
2021-03-11 12:24:19,701 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:19,837 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:19,840 [main:105] - GENERATED CALL = (X.O).substringAfterLast('í¾', "wyubd")
2021-03-11 12:24:19,840 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]]
2021-03-11 12:24:19,841 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b0561ee]
2021-03-11 12:24:19,974 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:20,135 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:20,272 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:20,276 [main:105] - GENERATED CALL = (X.O).replaceAfter('î¡¸', "cjtwm", "cvflr")
2021-03-11 12:24:20,276 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c90bbfd]]
2021-03-11 12:24:20,276 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f]
2021-03-11 12:24:20,408 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:20,411 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c90bbfd]
2021-03-11 12:24:20,546 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:20,549 [main:105] - GENERATED CALL = (X.O).get(-353571841).plus("adhau")
2021-03-11 12:24:20,549 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]]
2021-03-11 12:24:20,549 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bfc81]
2021-03-11 12:24:20,683 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:20,686 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:20,689 [main:105] - GENERATED CALL = (X.O).dropWhile({a: Char -> true})
2021-03-11 12:24:20,689 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]]
2021-03-11 12:24:20,689 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:20,823 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:20,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:20,965 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a692800]
2021-03-11 12:24:21,101 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:21,105 [main:105] - GENERATED CALL = (X.O).subSequence(1880589407, -1269679200).repeat(-1186571593)
2021-03-11 12:24:21,105 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]]
2021-03-11 12:24:21,105 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71763cf2]
2021-03-11 12:24:21,242 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:21,245 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:21,248 [main:105] - GENERATED CALL = (X.O).filter({a: Char -> false})
2021-03-11 12:24:21,248 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]]
2021-03-11 12:24:21,248 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71e933d0]
2021-03-11 12:24:21,248 [main:105] - GENERATED CALL = (X.O).trimStart()
2021-03-11 12:24:21,248 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e58a5e]]
2021-03-11 12:24:21,248 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e58a5e]
2021-03-11 12:24:21,383 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:21,387 [main:105] - GENERATED CALL = (X.O).drop(-580241019)
2021-03-11 12:24:21,387 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]]
2021-03-11 12:24:21,387 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22ff51b9]
2021-03-11 12:24:21,524 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:24:21,667 [main:43] - GENERATING CALL OF fun <T> setOf(element: Int): Iterable<Int> = TODO()
2021-03-11 12:24:21,671 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: Int): Iterable<Int> = TODO()
2021-03-11 12:24:21,814 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:24:21,817 [main:95] - GENERATED = setOf<Int>(27970627)
2021-03-11 12:24:21,817 [main:105] - GENERATED CALL = (X.O).slice(setOf<Int>(27970627))
2021-03-11 12:24:21,817 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:24:21,817 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:24:21,952 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:21,956 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:21,959 [main:105] - GENERATED CALL = (X.O).takeWhile({a: Char -> true})
2021-03-11 12:24:21,959 [main:110] - replacement of "tail-call optimization miss: method at " of type String is (X.O).drop(-580241019)
2021-03-11 12:24:22,091 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:22,092 [main:66] - Compilation checking started
2021-03-11 12:24:22,726 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:22,728 [main:103] - replacing (prope3, Result<Any?>)
2021-03-11 12:24:22,728 [main:38] - replacing prope3 Result<Any?>
2021-03-11 12:24:22,728 [main:42] - Getting value of type Result<Any?>
2021-03-11 12:24:22,873 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 12:24:23,019 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:24:23,023 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:24:23,352 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 12:24:23,356 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:24:23,356 [main:95] - GENERATED = runCatching<Any?>({ "ptbhy"})
2021-03-11 12:24:23,356 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "ptbhy"})
2021-03-11 12:24:23,356 [main:49] - GENERATED IS CALL =true
2021-03-11 12:24:23,989 [main:55] - randomType = Collection<Collection<UByte>>?
2021-03-11 12:24:23,990 [main:94] - GETTING Result<Any?> from B
2021-03-11 12:24:24,001 [main:94] - GETTING Result<Any?> from X
2021-03-11 12:24:24,008 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:24:24,030 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:24:24,031 [main:94] - GETTING Result<Any?> from B
2021-03-11 12:24:24,032 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:24:24,033 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:24:24,066 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:24:24,067 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:24:24,068 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:24:24,069 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:24:24,071 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:24:24,072 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:24:24,072 [main:110] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ "ptbhy"})
2021-03-11 12:24:24,204 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:24:24,205 [main:66] - Compilation checking started
2021-03-11 12:24:24,891 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + prope9)
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:24,894 [main:103] - replacing (prope9, Int)
2021-03-11 12:24:24,894 [main:38] - replacing prope9 Int
2021-03-11 12:24:24,894 [main:42] - Getting value of type Int
2021-03-11 12:24:25,032 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:25,035 [main:46] - GENERATED VALUE OF TYPE Int = 500864750
2021-03-11 12:24:25,036 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:25,191 [main:55] - randomType = ULong
2021-03-11 12:24:25,326 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:24:25,363 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7ac45c72]
2021-03-11 12:24:25,498 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:24:25,501 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60f96421]
2021-03-11 12:24:25,637 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:25,640 [main:66] - Generated call from random type = (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582)
2021-03-11 12:24:25,640 [main:110] - replacement of prope9 of type Int is (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582)
2021-03-11 12:24:25,775 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:25,776 [main:66] - Compilation checking started
2021-03-11 12:24:26,468 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (fu7() != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:26,471 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:24:26,471 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:24:26,471 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:24:26,628 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:24:26,635 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:24:26,648 [main:55] - randomType = Kla1
2021-03-11 12:24:26,788 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:24:26,791 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-11 12:24:26,800 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:24:26,816 [main:94] - GETTING EmptyCoroutineContext from B
2021-03-11 12:24:26,824 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:24:26,825 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:24:26,825 [main:94] - GETTING EmptyCoroutineContext from B
2021-03-11 12:24:26,826 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:24:26,827 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:24:26,827 [main:94] - GETTING EmptyCoroutineContext from X
2021-03-11 12:24:26,832 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:24:26,861 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:24:26,862 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:24:26,863 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:24:26,863 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:24:26,863 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:24:26,863 [main:103] - replacing (prope3.getOrThrow(), Ty1)
2021-03-11 12:24:26,864 [main:38] - replacing prope3.getOrThrow() Ty1
2021-03-11 12:24:26,864 [main:42] - Getting value of type Ty1
2021-03-11 12:24:27,001 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 12:24:27,007 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 12:24:27,511 [main:55] - randomType = Map<Float?, Kla2>
2021-03-11 12:24:27,512 [main:94] - GETTING Ty1 from String
2021-03-11 12:24:27,538 [main:94] - GETTING Ty1 from X
2021-03-11 12:24:27,545 [main:94] - GETTING Ty1 from String
2021-03-11 12:24:27,546 [main:94] - GETTING Ty1 from Int
2021-03-11 12:24:27,579 [main:94] - GETTING Ty1 from Int
2021-03-11 12:24:27,580 [main:94] - GETTING Ty1 from String
2021-03-11 12:24:27,580 [main:94] - GETTING Ty1 from String
2021-03-11 12:24:27,581 [main:94] - GETTING Ty1 from B
2021-03-11 12:24:27,590 [main:94] - GETTING Ty1 from String
2021-03-11 12:24:27,591 [main:94] - GETTING Ty1 from String
2021-03-11 12:24:27,591 [main:94] - GETTING Ty1 from B
2021-03-11 12:24:27,592 [main:94] - GETTING Ty1 from Int
2021-03-11 12:24:27,593 [main:94] - GETTING Ty1 from String
2021-03-11 12:24:27,593 [main:107] - Cant find and generate replacement for prope3.getOrThrow() type Ty1
2021-03-11 12:24:27,593 [main:103] - replacing (fu7(), String)
2021-03-11 12:24:27,593 [main:38] - replacing fu7() String
2021-03-11 12:24:27,593 [main:42] - Getting value of type String
2021-03-11 12:24:27,731 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:27,734 [main:46] - GENERATED VALUE OF TYPE String = "piqbc"
2021-03-11 12:24:27,735 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:27,741 [main:55] - randomType = UInt
2021-03-11 12:24:27,879 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:24:27,910 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4fda5bab]
2021-03-11 12:24:27,911 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521fe088]
2021-03-11 12:24:28,048 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:28,051 [main:66] - Generated call from random type = (995681529.toUInt()).toByte().toString(-204265669)
2021-03-11 12:24:28,052 [main:94] - GETTING String from Int
2021-03-11 12:24:28,083 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@546329a5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521fe088]]
2021-03-11 12:24:28,083 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@546329a5]
2021-03-11 12:24:28,083 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521fe088]
2021-03-11 12:24:28,220 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:28,223 [main:105] - GENERATED CALL = ((-571786330).toInt()).toByte().toString(-356460012)
2021-03-11 12:24:28,223 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5f3a486c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]]
2021-03-11 12:24:28,223 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5f3a486c]
2021-03-11 12:24:28,364 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:28,367 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:24:28,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:28,506 [main:105] - GENERATED CALL = ((-571786330).toInt()).compareTo(-239419387).toString(-446358773)
2021-03-11 12:24:28,506 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]]
2021-03-11 12:24:28,506 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4969fb89]
2021-03-11 12:24:28,506 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:24:28,642 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:28,645 [main:105] - GENERATED CALL = ((-571786330).toInt()).toInt().toString(1963617251)
2021-03-11 12:24:28,645 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3348cc8b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3af215]]
2021-03-11 12:24:28,645 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3348cc8b]
2021-03-11 12:24:28,645 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3af215]
2021-03-11 12:24:28,781 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:28,784 [main:105] - GENERATED CALL = ((-571786330).toInt()).toShort().toString(-935407356)
2021-03-11 12:24:28,784 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]]
2021-03-11 12:24:28,784 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:24:28,921 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:28,924 [main:105] - GENERATED CALL = ((-571786330).toInt()).toString(-1138792976)
2021-03-11 12:24:28,925 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5221c4b5]]
2021-03-11 12:24:28,925 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:24:28,925 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5221c4b5]
2021-03-11 12:24:28,925 [main:105] - GENERATED CALL = ((-571786330).toInt()).toChar().titlecase()
2021-03-11 12:24:28,925 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e3d2b5]]
2021-03-11 12:24:28,925 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:24:28,925 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45e3d2b5]
2021-03-11 12:24:28,925 [main:105] - GENERATED CALL = ((-571786330).toInt()).toChar().uppercase()
2021-03-11 12:24:28,925 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55cac412], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b36e1a1]]
2021-03-11 12:24:28,925 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55cac412]
2021-03-11 12:24:28,925 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b36e1a1]
2021-03-11 12:24:29,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:29,092 [main:105] - GENERATED CALL = ((-571786330).toInt()).toLong().toString(-2118566528)
2021-03-11 12:24:29,092 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36fb9a60], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b36e1a1]]
2021-03-11 12:24:29,092 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36fb9a60]
2021-03-11 12:24:29,229 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:24:29,232 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b36e1a1]
2021-03-11 12:24:29,371 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:29,375 [main:105] - GENERATED CALL = ((-571786330).toInt()).div(-7769572031177477407).toString(-302588523)
2021-03-11 12:24:29,375 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c90bbfd]]
2021-03-11 12:24:29,375 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:24:29,375 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c90bbfd]
2021-03-11 12:24:29,515 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:29,518 [main:105] - GENERATED CALL = ((-571786330).toInt()).toChar().plus("biyty")
2021-03-11 12:24:29,518 [main:110] - replacement of fu7() of type String is ((-571786330).toInt()).toChar().plus("biyty")
2021-03-11 12:24:29,653 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:29,654 [main:66] - Compilation checking started
2021-03-11 12:24:30,510 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = prope6 + prope7
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:30,512 [main:103] - replacing (c, Continuation<*>)
2021-03-11 12:24:30,512 [main:38] - replacing c Continuation<*>
2021-03-11 12:24:30,512 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:24:30,652 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:24:30,796 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:24:30,800 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:24:31,276 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:24:31,424 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:24:31,428 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:24:31,744 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:24:31,895 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:24:31,900 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:24:32,444 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 12:24:32,591 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:24:32,595 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:24:33,086 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:24:33,086 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:24:33,086 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:24:33,086 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:24:33,086 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:24:33,259 [main:55] - randomType = Kla4<Char>
2021-03-11 12:24:33,397 [main:302] - generating value of type = Kla4<Char> false depth = 0
2021-03-11 12:24:33,400 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 12:24:33,877 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-11 12:24:33,880 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:24:33,897 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:24:33,913 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:24:33,914 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:24:33,915 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:24:33,916 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:24:33,917 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:24:33,917 [main:94] - GETTING Continuation<*> from B
2021-03-11 12:24:33,927 [main:94] - GETTING Continuation<*> from B
2021-03-11 12:24:33,928 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:24:33,929 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:24:33,960 [main:94] - GETTING Continuation<*> from X
2021-03-11 12:24:33,965 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:24:33,966 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:24:33,966 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 12:24:33,966 [main:103] - replacing (prope6 + prope7, String)
2021-03-11 12:24:33,966 [main:38] - replacing prope6 + prope7 String
2021-03-11 12:24:33,966 [main:42] - Getting value of type String
2021-03-11 12:24:34,105 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:34,109 [main:46] - GENERATED VALUE OF TYPE String = "smojx"
2021-03-11 12:24:34,109 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:34,276 [main:55] - randomType = Byte
2021-03-11 12:24:34,416 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:24:34,448 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38e45794]
2021-03-11 12:24:34,586 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:24:34,589 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b36e1a1]
2021-03-11 12:24:34,730 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:34,733 [main:66] - Generated call from random type = (65).div(3860232178244127868).toString(1148939918)
2021-03-11 12:24:34,733 [main:94] - GETTING String from String
2021-03-11 12:24:34,755 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]]
2021-03-11 12:24:34,755 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d56bffc]
2021-03-11 12:24:34,895 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:35,041 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:35,184 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:24:35,364 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:24:35,368 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:24:35,835 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:24:35,839 [main:95] - GENERATED = StringBuilder(-1702237850)
2021-03-11 12:24:35,839 [main:105] - GENERATED CALL = ((B()).K).replaceRange(-874578572, -1299227657, StringBuilder(-1702237850))
2021-03-11 12:24:35,839 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]]
2021-03-11 12:24:35,839 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e510cb6]
2021-03-11 12:24:35,977 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:24:35,980 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:35,983 [main:105] - GENERATED CALL = ((B()).K).filterIndexed({a: Int, b: Char -> false})
2021-03-11 12:24:35,983 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@10e9b3c1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]]
2021-03-11 12:24:35,983 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1d75ea]
2021-03-11 12:24:36,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:36,125 [main:105] - GENERATED CALL = ((B()).K).length.toString(271223616)
2021-03-11 12:24:36,125 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]]
2021-03-11 12:24:36,125 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35628dad]
2021-03-11 12:24:36,262 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:36,265 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:36,268 [main:105] - GENERATED CALL = ((B()).K).takeWhile({a: Char -> false})
2021-03-11 12:24:36,268 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]]
2021-03-11 12:24:36,268 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d274c3b]
2021-03-11 12:24:36,413 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:36,416 [main:105] - GENERATED CALL = ((B()).K).dropLast(1467660544)
2021-03-11 12:24:36,416 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]]
2021-03-11 12:24:36,416 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e063724]
2021-03-11 12:24:36,556 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:24:36,713 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:36,718 [main:105] - GENERATED CALL = ((B()).K).commonSuffixWith("cqyps", true)
2021-03-11 12:24:36,718 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]]
2021-03-11 12:24:36,718 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40cbe2a7]
2021-03-11 12:24:36,863 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:36,866 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:36,869 [main:105] - GENERATED CALL = ((B()).K).filterNot({a: Char -> false})
2021-03-11 12:24:36,870 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]]
2021-03-11 12:24:36,870 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c83f7e9]
2021-03-11 12:24:37,010 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:37,155 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:37,159 [main:105] - GENERATED CALL = ((B()).K).substringAfterLast('ä¼', "lbymy")
2021-03-11 12:24:37,159 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707db66f]]
2021-03-11 12:24:37,159 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:37,297 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:37,441 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:37,444 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707db66f]
2021-03-11 12:24:37,588 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:37,729 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:37,732 [main:105] - GENERATED CALL = ((B()).K).subSequence(1566770573, 1925736226).substring(-2040760317, 1814164278)
2021-03-11 12:24:37,732 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]]
2021-03-11 12:24:37,732 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aed2c7c]
2021-03-11 12:24:37,869 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:38,011 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:38,014 [main:105] - GENERATED CALL = ((B()).K).removeRange(-1694690553, 1663490920)
2021-03-11 12:24:38,014 [main:110] - replacement of prope6 + prope7 of type String is ((B()).K).length.toString(271223616)
2021-03-11 12:24:38,150 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:38,151 [main:66] - Compilation checking started
2021-03-11 12:24:38,874 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:38,876 [main:103] - replacing (prope11, Function0<Unit>)
2021-03-11 12:24:38,877 [main:38] - replacing prope11 Function0<Unit>
2021-03-11 12:24:38,877 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:24:39,023 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:24:39,027 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:24:39,172 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:24:39,176 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:24:39,481 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:24:39,485 [main:95] - GENERATED = check(false)
2021-03-11 12:24:39,485 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 12:24:39,485 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:40,680 [main:55] - randomType = Function2<MutableMap<Set<Short?>, Collection<Kla1>>, Array<UByte>, UInt?>
2021-03-11 12:24:40,682 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:24:40,714 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:24:40,730 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:24:40,731 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:24:40,732 [main:94] - GETTING Function0<Unit> from X
2021-03-11 12:24:40,737 [main:94] - GETTING Function0<Unit> from B
2021-03-11 12:24:40,746 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:24:40,747 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:24:40,748 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:24:40,749 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:24:40,750 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:24:40,751 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:24:40,752 [main:94] - GETTING Function0<Unit> from B
2021-03-11 12:24:40,752 [main:110] - replacement of prope11 of type Function0<Unit> is { check(false)}
2021-03-11 12:24:40,893 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:24:40,893 [main:66] - Compilation checking started
2021-03-11 12:24:41,330 [main:49] - Result = false
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (prope4.fu8()) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        { check(false)}()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:41,332 [main:103] - replacing (prope4.fu8(), Boolean)
2021-03-11 12:24:41,333 [main:38] - replacing prope4.fu8() Boolean
2021-03-11 12:24:41,333 [main:42] - Getting value of type Boolean
2021-03-11 12:24:41,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:41,509 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:24:41,510 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:41,683 [main:55] - randomType = UShort
2021-03-11 12:24:41,831 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:24:41,870 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@58a35320]
2021-03-11 12:24:41,870 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@90f4213]
2021-03-11 12:24:42,017 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:42,018 [main:66] - Generated call from random type = (25639.toUShort()).toDouble().equals("msgnl")
2021-03-11 12:24:42,019 [main:94] - GETTING Boolean from Int
2021-03-11 12:24:42,051 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79bf99f1], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@39715642]]
2021-03-11 12:24:42,051 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79bf99f1]
2021-03-11 12:24:42,218 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:24:42,221 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@39715642]
2021-03-11 12:24:42,221 [main:105] - GENERATED CALL = ((-571786330).toInt()).rangeTo(57).isEmpty()
2021-03-11 12:24:42,221 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518d91a8]]
2021-03-11 12:24:42,221 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f]
2021-03-11 12:24:42,365 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:42,366 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518d91a8]
2021-03-11 12:24:42,366 [main:105] - GENERATED CALL = ((-571786330).toInt()).equals("mbvpq").not()
2021-03-11 12:24:42,366 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24ef9204]]
2021-03-11 12:24:42,366 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f]
2021-03-11 12:24:42,512 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:42,512 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24ef9204]
2021-03-11 12:24:42,655 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:42,658 [main:105] - GENERATED CALL = ((-571786330).toInt()).equals("vwjua").and(false)
2021-03-11 12:24:42,659 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51462819]]
2021-03-11 12:24:42,659 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:24:42,659 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51462819]
2021-03-11 12:24:42,659 [main:105] - GENERATED CALL = ((-571786330).toInt()).toChar().isDigit()
2021-03-11 12:24:42,659 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@729648c8]]
2021-03-11 12:24:42,659 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:24:42,659 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@729648c8]
2021-03-11 12:24:42,659 [main:105] - GENERATED CALL = ((-571786330).toInt()).toChar().isUpperCase()
2021-03-11 12:24:42,659 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130c2602]]
2021-03-11 12:24:42,659 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:24:42,659 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130c2602]
2021-03-11 12:24:42,659 [main:105] - GENERATED CALL = ((-571786330).toInt()).toChar().isLowSurrogate()
2021-03-11 12:24:42,659 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b02447d]]
2021-03-11 12:24:42,660 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4868445f]
2021-03-11 12:24:42,807 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:42,807 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b02447d]
2021-03-11 12:24:42,954 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:42,957 [main:105] - GENERATED CALL = ((-571786330).toInt()).equals("qaxzl").or(false)
2021-03-11 12:24:42,957 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@260413c2], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@ad43c8d]]
2021-03-11 12:24:42,958 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@260413c2]
2021-03-11 12:24:42,958 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@ad43c8d]
2021-03-11 12:24:42,958 [main:105] - GENERATED CALL = ((-571786330).toInt()).toDouble().isInfinite()
2021-03-11 12:24:42,958 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79bf99f1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5585f547]]
2021-03-11 12:24:42,958 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79bf99f1]
2021-03-11 12:24:43,097 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:24:43,100 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5585f547]
2021-03-11 12:24:43,240 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:43,243 [main:105] - GENERATED CALL = ((-571786330).toInt()).rangeTo(-10).contains(627530427)
2021-03-11 12:24:43,243 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28423bf6]]
2021-03-11 12:24:43,243 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 12:24:43,243 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28423bf6]
2021-03-11 12:24:43,244 [main:105] - GENERATED CALL = ((-571786330).toInt()).toChar().isWhitespace()
2021-03-11 12:24:43,244 [main:110] - replacement of prope4.fu8() of type Boolean is ((-571786330).toInt()).equals("qaxzl").or(false)
2021-03-11 12:24:43,383 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:43,383 [main:66] - Compilation checking started
2021-03-11 12:24:44,008 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (((-571786330).toInt()).equals("qaxzl").or(false)) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:44,011 [main:103] - replacing (prope5.prope3 != "OK", Boolean)
2021-03-11 12:24:44,011 [main:38] - replacing prope5.prope3 != "OK" Boolean
2021-03-11 12:24:44,011 [main:42] - Getting value of type Boolean
2021-03-11 12:24:44,158 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:44,161 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:24:44,162 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:44,673 [main:55] - randomType = ArrayDeque<UShort>
2021-03-11 12:24:44,817 [main:302] - generating value of type = ArrayDeque<UShort> false depth = 0
2021-03-11 12:24:44,966 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UShort> = TODO()
2021-03-11 12:24:44,971 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UShort> = TODO()
2021-03-11 12:24:45,117 [main:95] - GENERATED = ArrayDeque<UShort>()
2021-03-11 12:24:45,233 [main:137] - GENERATING call of type public open fun iterator(): kotlin.collections.MutableIterator<kotlin.UShort> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@2dc67486]
2021-03-11 12:24:45,234 [main:137] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@e00705f]
2021-03-11 12:24:45,234 [main:66] - Generated call from random type = (ArrayDeque<UShort>()).iterator().hasNext()
2021-03-11 12:24:45,235 [main:94] - GETTING Boolean from String
2021-03-11 12:24:45,252 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10bc2f27]]
2021-03-11 12:24:45,252 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f]
2021-03-11 12:24:45,417 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:45,420 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10bc2f27]
2021-03-11 12:24:45,420 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()
2021-03-11 12:24:45,420 [main:101] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c3e55ed]]
2021-03-11 12:24:45,420 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c3e55ed]
2021-03-11 12:24:45,565 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:45,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:45,715 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).startsWith("ugpgr", true)
2021-03-11 12:24:45,715 [main:101] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d52bb14]]
2021-03-11 12:24:45,715 [main:137] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d52bb14]
2021-03-11 12:24:45,863 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:46,005 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:46,009 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).contains('â·¼', false)
2021-03-11 12:24:46,009 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98aa15e]]
2021-03-11 12:24:46,009 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:46,148 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:46,290 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:46,294 [main:137] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98aa15e]
2021-03-11 12:24:46,433 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:46,575 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:24:46,719 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:46,861 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:47,002 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:47,005 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).subSequence(339457620, 1741754559).regionMatches(1127072967, "rfssa", 213928241, 1904922474, true)
2021-03-11 12:24:47,005 [main:101] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454df35f]]
2021-03-11 12:24:47,005 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@454df35f]
2021-03-11 12:24:47,143 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:47,146 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).matches("owjsg")
2021-03-11 12:24:47,146 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@729648c8]]
2021-03-11 12:24:47,146 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75fc8c3f]
2021-03-11 12:24:47,284 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:47,287 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@729648c8]
2021-03-11 12:24:47,287 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).get(1730053925).isUpperCase()
2021-03-11 12:24:47,288 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29085eae]]
2021-03-11 12:24:47,288 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:47,426 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:47,567 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:47,571 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29085eae]
2021-03-11 12:24:47,571 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).subSequence(-664138900, 798720887).isBlank()
2021-03-11 12:24:47,571 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@50109cd1]]
2021-03-11 12:24:47,571 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@50109cd1]
2021-03-11 12:24:47,710 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:47,711 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).equals("svvyf")
2021-03-11 12:24:47,711 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1254263f]]
2021-03-11 12:24:47,711 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1254263f]
2021-03-11 12:24:47,711 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).isEmpty()
2021-03-11 12:24:47,711 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d4873fa]]
2021-03-11 12:24:47,711 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:47,855 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:47,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:48,003 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d4873fa]
2021-03-11 12:24:48,003 [main:105] - GENERATED CALL = (Kla0("joriu").fu2()).subSequence(1983246313, 1373395183).isNotEmpty()
2021-03-11 12:24:48,003 [main:110] - replacement of prope5.prope3 != "OK" of type Boolean is (Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()
2021-03-11 12:24:48,143 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:48,143 [main:66] - Compilation checking started
2021-03-11 12:24:48,834 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (((-571786330).toInt()).equals("qaxzl").or(false)) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if ((Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()) throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:48,838 [main:103] - replacing (RuntimeException("fail 2"), RuntimeException)
2021-03-11 12:24:48,838 [main:38] - replacing RuntimeException("fail 2") RuntimeException
2021-03-11 12:24:48,838 [main:42] - Getting value of type RuntimeException
2021-03-11 12:24:49,005 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-11 12:24:49,154 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(message: kotlin.String?): RuntimeException = TODO()
2021-03-11 12:24:49,158 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(message: kotlin.String?): RuntimeException = TODO()
2021-03-11 12:24:49,466 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:24:49,469 [main:95] - GENERATED = UnsupportedOperationException("zckxa")
2021-03-11 12:24:49,469 [main:46] - GENERATED VALUE OF TYPE RuntimeException = UnsupportedOperationException("zckxa")
2021-03-11 12:24:49,469 [main:49] - GENERATED IS CALL =true
2021-03-11 12:24:49,632 [main:55] - randomType = Double
2021-03-11 12:24:49,774 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:24:49,811 [main:94] - GETTING RuntimeException from Int
2021-03-11 12:24:49,842 [main:94] - GETTING RuntimeException from String
2021-03-11 12:24:49,858 [main:94] - GETTING RuntimeException from X
2021-03-11 12:24:49,863 [main:94] - GETTING RuntimeException from String
2021-03-11 12:24:49,864 [main:94] - GETTING RuntimeException from String
2021-03-11 12:24:49,864 [main:94] - GETTING RuntimeException from String
2021-03-11 12:24:49,865 [main:94] - GETTING RuntimeException from String
2021-03-11 12:24:49,866 [main:94] - GETTING RuntimeException from B
2021-03-11 12:24:49,875 [main:94] - GETTING RuntimeException from String
2021-03-11 12:24:49,875 [main:94] - GETTING RuntimeException from Int
2021-03-11 12:24:49,876 [main:94] - GETTING RuntimeException from String
2021-03-11 12:24:49,877 [main:94] - GETTING RuntimeException from B
2021-03-11 12:24:49,878 [main:94] - GETTING RuntimeException from Int
2021-03-11 12:24:49,878 [main:110] - replacement of RuntimeException("fail 2") of type RuntimeException is UnsupportedOperationException("zckxa")
2021-03-11 12:24:50,019 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:24:50,019 [main:66] - Compilation checking started
2021-03-11 12:24:50,661 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(prope5, Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (((-571786330).toInt()).equals("qaxzl").or(false)) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw UnsupportedOperationException("zckxa")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if ((Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()) throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:50,664 [main:103] - replacing (prope5, Kla1)
2021-03-11 12:24:50,664 [main:38] - replacing prope5 Kla1
2021-03-11 12:24:50,664 [main:42] - Getting value of type Kla1
2021-03-11 12:24:50,809 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:24:50,813 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-11 12:24:50,813 [main:46] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-11 12:24:50,813 [main:49] - GENERATED IS CALL =true
2021-03-11 12:24:50,972 [main:55] - randomType = Double
2021-03-11 12:24:51,113 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:24:51,149 [main:94] - GETTING Kla1 from B
2021-03-11 12:24:51,156 [main:94] - GETTING Kla1 from String
2021-03-11 12:24:51,172 [main:94] - GETTING Kla1 from String
2021-03-11 12:24:51,173 [main:94] - GETTING Kla1 from B
2021-03-11 12:24:51,174 [main:94] - GETTING Kla1 from String
2021-03-11 12:24:51,174 [main:94] - GETTING Kla1 from Int
2021-03-11 12:24:51,213 [main:94] - GETTING Kla1 from String
2021-03-11 12:24:51,214 [main:94] - GETTING Kla1 from String
2021-03-11 12:24:51,214 [main:94] - GETTING Kla1 from String
2021-03-11 12:24:51,215 [main:94] - GETTING Kla1 from Int
2021-03-11 12:24:51,216 [main:94] - GETTING Kla1 from String
2021-03-11 12:24:51,217 [main:94] - GETTING Kla1 from X
2021-03-11 12:24:51,224 [main:94] - GETTING Kla1 from Int
2021-03-11 12:24:51,224 [main:110] - replacement of prope5 of type Kla1 is Kla1()
2021-03-11 12:24:51,364 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:24:51,364 [main:66] - Compilation checking started
2021-03-11 12:24:51,989 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(Kla1(), Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (((-571786330).toInt()).equals("qaxzl").or(false)) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw UnsupportedOperationException("zckxa")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if ((Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()) throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:51,993 [main:103] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 12:24:51,993 [main:38] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 12:24:51,993 [main:42] - Getting value of type String
2021-03-11 12:24:52,174 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:52,178 [main:46] - GENERATED VALUE OF TYPE String = "nxcgt"
2021-03-11 12:24:52,178 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:52,191 [main:55] - randomType = X
2021-03-11 12:24:52,331 [main:302] - generating value of type = X false depth = 0
2021-03-11 12:24:52,334 [main:112] - generating klass X text = object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}
2021-03-11 12:24:52,338 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563ba205]
2021-03-11 12:24:52,478 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:52,481 [main:66] - Generated call from random type = (X).O.takeLast(-1306862542)
2021-03-11 12:24:52,481 [main:110] - replacement of "Wrong state-machine generated: it is finished early" of type String is (X).O.takeLast(-1306862542)
2021-03-11 12:24:52,619 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:52,619 [main:66] - Compilation checking started
2021-03-11 12:24:53,258 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(Kla1(), Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (((-571786330).toInt()).equals("qaxzl").or(false)) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw UnsupportedOperationException("zckxa")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if ((Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()) throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (prope9 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error((X).O.takeLast(-1306862542))
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:53,260 [main:103] - replacing (prope9, Int)
2021-03-11 12:24:53,260 [main:38] - replacing prope9 Int
2021-03-11 12:24:53,260 [main:42] - Getting value of type Int
2021-03-11 12:24:53,415 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:53,418 [main:46] - GENERATED VALUE OF TYPE Int = -999244412
2021-03-11 12:24:53,418 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:53,431 [main:55] - randomType = Kla3
2021-03-11 12:24:53,579 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:24:53,582 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-11 12:24:53,599 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@1e7dbcbb]
2021-03-11 12:24:53,739 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:24:53,740 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60235ace]
2021-03-11 12:24:53,882 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:53,885 [main:66] - Generated call from random type = (Kla3()).equals("hcqdq").compareTo(true)
2021-03-11 12:24:53,886 [main:94] - GETTING Int from String
2021-03-11 12:24:53,904 [main:101] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d10fff1]]
2021-03-11 12:24:53,904 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d10fff1]
2021-03-11 12:24:54,044 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:24:54,188 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:54,331 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:24:54,335 [main:105] - GENERATED CALL = (X.O).lastIndexOf('ê ', -1303346158, false)
2021-03-11 12:24:54,335 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6cf4654a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cd55837]]
2021-03-11 12:24:54,335 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6cf4654a]
2021-03-11 12:24:54,475 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:54,478 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cd55837]
2021-03-11 12:24:54,479 [main:105] - GENERATED CALL = (X.O).compareTo("shzur").unaryPlus()
2021-03-11 12:24:54,479 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb06101]]
2021-03-11 12:24:54,479 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:54,620 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:54,763 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:54,767 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb06101]
2021-03-11 12:24:54,908 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:24:54,911 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:24:54,915 [main:105] - GENERATED CALL = (X.O).subSequence(-1762789145, -1097772291).indexOfLast({a: Char -> true})
2021-03-11 12:24:54,915 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e60e7ad]]
2021-03-11 12:24:54,915 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:55,056 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:55,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:55,209 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e60e7ad]
2021-03-11 12:24:55,351 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:24:55,354 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:24:55,357 [main:105] - GENERATED CALL = (X.O).subSequence(-1162500390, -148975446).sumOf({a: Char -> -1525774616})
2021-03-11 12:24:55,357 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6cf4654a], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b22ea3]]
2021-03-11 12:24:55,357 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6cf4654a]
2021-03-11 12:24:55,497 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:55,501 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b22ea3]
2021-03-11 12:24:55,501 [main:105] - GENERATED CALL = (X.O).compareTo("xshlk").unaryMinus()
2021-03-11 12:24:55,501 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15c71068]]
2021-03-11 12:24:55,501 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15c71068]
2021-03-11 12:24:55,501 [main:105] - GENERATED CALL = (X.O).count()
2021-03-11 12:24:55,501 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15c71068]]
2021-03-11 12:24:55,501 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2f433d76]
2021-03-11 12:24:55,666 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:55,808 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:55,811 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15c71068]
2021-03-11 12:24:55,812 [main:105] - GENERATED CALL = (X.O).subSequence(-1656412541, -137277107).count()
2021-03-11 12:24:55,812 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e60e7ad]]
2021-03-11 12:24:55,812 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e60e7ad]
2021-03-11 12:24:55,951 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:24:55,954 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:24:55,958 [main:105] - GENERATED CALL = (X.O).sumOf({a: Char -> -1879025199})
2021-03-11 12:24:55,958 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@10e9b3c1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@518b4d27]]
2021-03-11 12:24:55,958 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@518b4d27]
2021-03-11 12:24:55,958 [main:105] - GENERATED CALL = (X.O).length.takeHighestOneBit()
2021-03-11 12:24:55,958 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@10e9b3c1], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22fea72]]
2021-03-11 12:24:55,958 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@22fea72]
2021-03-11 12:24:56,098 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:24:56,101 [main:105] - GENERATED CALL = (X.O).length.compareTo(39)
2021-03-11 12:24:56,102 [main:110] - replacement of prope9 of type Int is -999244412
2021-03-11 12:24:56,240 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 12:24:56,240 [main:66] - Compilation checking started
2021-03-11 12:24:56,882 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(Kla1(), Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (((-571786330).toInt()).equals("qaxzl").or(false)) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException("fail 1")

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw UnsupportedOperationException("zckxa")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if ((Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()) throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (-999244412 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error((X).O.takeLast(-1306862542))
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:56,884 [main:103] - replacing ("fail 1", String)
2021-03-11 12:24:56,885 [main:38] - replacing "fail 1" String
2021-03-11 12:24:56,885 [main:42] - Getting value of type String
2021-03-11 12:24:57,024 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:24:57,027 [main:46] - GENERATED VALUE OF TYPE String = "ocqpd"
2021-03-11 12:24:57,028 [main:49] - GENERATED IS CALL =false
2021-03-11 12:24:57,193 [main:55] - randomType = ULong?
2021-03-11 12:24:57,334 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:24:57,364 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.ULong): kotlin.ULong defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@517ebcde]
2021-03-11 12:24:57,507 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:24:57,511 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7920081a]
2021-03-11 12:24:57,660 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:24:57,664 [main:66] - Generated call from random type = (7574058335514124187.toULong())?.and(98021290547331589.toULong()).toString(1619566547)
2021-03-11 12:24:57,664 [main:110] - replacement of "fail 1" of type String is (7574058335514124187.toULong())?.and(98021290547331589.toULong()).toString(1619566547)
2021-03-11 12:24:57,809 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:24:57,809 [main:66] - Compilation checking started
2021-03-11 12:24:58,466 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(Kla1(), Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (((-571786330).toInt()).equals("qaxzl").or(false)) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException((7574058335514124187.toULong())?.and(98021290547331589.toULong()).toString(1619566547))

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw UnsupportedOperationException("zckxa")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if ((Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()) throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (-999244412 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error((X).O.takeLast(-1306862542))
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:58,468 [main:103] - replacing (this, Kla3)
2021-03-11 12:24:58,468 [main:38] - replacing this Kla3
2021-03-11 12:24:58,468 [main:42] - Getting value of type Kla3
2021-03-11 12:24:58,619 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:24:58,623 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-11 12:24:58,623 [main:46] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-11 12:24:58,623 [main:49] - GENERATED IS CALL =true
2021-03-11 12:24:58,794 [main:55] - randomType = UByte?
2021-03-11 12:24:58,935 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:24:58,966 [main:94] - GETTING Kla3 from String
2021-03-11 12:24:58,984 [main:94] - GETTING Kla3 from String
2021-03-11 12:24:58,984 [main:94] - GETTING Kla3 from B
2021-03-11 12:24:58,992 [main:94] - GETTING Kla3 from Int
2021-03-11 12:24:59,022 [main:94] - GETTING Kla3 from String
2021-03-11 12:24:59,023 [main:94] - GETTING Kla3 from String
2021-03-11 12:24:59,024 [main:94] - GETTING Kla3 from Int
2021-03-11 12:24:59,024 [main:94] - GETTING Kla3 from B
2021-03-11 12:24:59,025 [main:94] - GETTING Kla3 from X
2021-03-11 12:24:59,032 [main:94] - GETTING Kla3 from Int
2021-03-11 12:24:59,032 [main:94] - GETTING Kla3 from String
2021-03-11 12:24:59,033 [main:94] - GETTING Kla3 from String
2021-03-11 12:24:59,033 [main:94] - GETTING Kla3 from String
2021-03-11 12:24:59,033 [main:110] - replacement of this of type Kla3 is Kla3()
2021-03-11 12:24:59,199 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:24:59,199 [main:66] - Compilation checking started
2021-03-11 12:24:59,830 [main:53] - Result = true
Text:
import kotlin.properties.Delegates
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


object X {
    public var O: String
        by Delegates.observable("O") { prop, old, new -> }
        private set
}

open class A {
    public var K: String
        by Delegates.observable("") { prop, old, new -> }
        protected set
}

class B : A() {
    init {
        K = "K"
    }
}

fun box(): String =
        X.O + B().K

inline fun fu0(capturedParam: String, lambda: () -> String = { "yilea"}): String {
    return (A().K).slice(listOfNotNull<Int>(1178036274))
}

fun box792(): String {
    return (B()).K.substringBefore('â¾', "fxipj")
}

fun <Ty0> Ty0.fu1(fn: Ty0.() -> String) = (A().K).substringBeforeLast('éµ¿', "deytn")

inline class Kla0(private val r: String) {
    fun fu2() = fu1 { (B()).K.trimEnd() }
}

fun box767() = (-571786330).toInt().toString(571786330)

class Kla1 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu8() = prope2 != null
    fun fu9() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu3(c: suspend Kla1.() -> Unit) {
    val prope4 = Kla1()
    val prope5 = Kla1()

    c.startCoroutine(prope4, Kla2)
    c.startCoroutine(Kla1(), Kla2)

    fu4(prope4, prope5)
}

private fun fu4(prope4: Kla1, prope5: Kla1) {
    while (((-571786330).toInt()).equals("qaxzl").or(false)) {
        if ((1611320007.toUInt().fu1<UInt?>({ "iamkc"})).subSequence(-853578133, 751678293).any()) throw RuntimeException((7574058335514124187.toULong())?.and(98021290547331589.toULong()).toString(1619566547))

        if (prope4.prope2 === Kla1().prope2) throw UnsupportedOperationException()

        prope4.fu9()
        prope5.fu9()
    }

    if (prope5.fu8()) throw UnsupportedOperationException("zckxa")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if ((Kla0("joriu").fu2()).get(1069250203).isHighSurrogate()) throw RuntimeException("fail 4")
}

fun box795(): String {
    // no suspension
    fu3 {
        prope3 = "OK"
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = "OK"
    }

    // 2 suspensions
    fu3 {
        if ((X.O).trimMargin("akpkv") != "rgjtl") return@fu3
        fu7()
        prope3 = (A().K).substringAfter('í', "sugfc")
    }

    // with capture

    var prope6 = "O"
    var prope7 = "K"

    // no suspension
    fu3 {
        prope3 = prope6 + prope7
    }

    // 1 suspension
    fu3 {
        if (fu7() != "56") return@fu3
        prope3 = prope6 + prope7
    }

    // 2 suspensions
    fu3 {
        if (((-571786330).toInt()).toChar().plus("biyty") != "56") return@fu3
        (B()).K.filter({a: Char -> true})
        prope3 = ((B()).K).length.toString(271223616)
    }

    return "OK"
}

fun <Ty1> fu5(prope6: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu6(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "ptbhy"}).getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla3().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla4<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty1>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu10(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu10(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla5 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu12() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu12(it)
    }

    fun fu12(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu13(method: String) {
        prope8.find { true}?.let { error((X.O).drop(-580241019) + it + " has state-machine " +
                prope8.joinToString(separator = (X.O).take(-1262175920))) }
    }

    fun fu14(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu15() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { check(true, { "rjssz"})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(Kla7).equals("uwsbj").compareTo(false)) {
            if (-999244412 != i) error((Kla0("joriu").fu2()).get(740797966).plus("ihgrz") + (6276764676567787243.toULong()).compareTo(43.toUByte()).shr(-2076620582))
            prope11()
        }
        if ((B()).equals("nlbva").equals("uqfko"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error((X).O.takeLast(-1306862542))
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope11 = {
            prope1.prope10 = true
        }
    }

    override fun fu10(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:24:59,833 [main:103] - replacing (prope9, Int)
2021-03-11 12:24:59,833 [main:38] - replacing prope9 Int
2021-03-11 12:24:59,833 [main:42] - Getting value of type Int
