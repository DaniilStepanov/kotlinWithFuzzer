2021-03-12 05:45:49,412 [main:66] - Compilation checking started
2021-03-12 05:45:50,339 [main:302] - generating value of type = Base false depth = 0
2021-03-12 05:45:50,340 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:50,341 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 05:45:50,341 [main:66] - Compilation checking started
2021-03-12 05:45:50,939 [main:53] - Result = true
Text:


open class Base

class Child(val value: String) : Base()

fun foo(a: Base = Base()): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}


2021-03-12 05:45:50,941 [main:50] - replacing val value: String String
2021-03-12 05:45:50,941 [main:54] - Getting value of type String
2021-03-12 05:45:51,070 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:45:51,073 [main:58] - GENERATED VALUE OF TYPE String = "bvkxg"
2021-03-12 05:45:51,074 [main:61] - GENERATED IS CALL =false
2021-03-12 05:45:51,470 [main:67] - randomType = LinkedHashMap<Base, UInt?>
2021-03-12 05:45:51,593 [main:302] - generating value of type = LinkedHashMap<Base, UInt?> false depth = 0
2021-03-12 05:45:51,720 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Base, UInt?>): LkedHashMap<Base, UInt?> = TODO()
2021-03-12 05:45:51,723 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Base, UInt?>): LkedHashMap<Base, UInt?> = TODO()
2021-03-12 05:45:51,827 [main:302] - generating value of type = Pair<Base, UInt?> false depth = 3
2021-03-12 05:45:51,943 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Base, second: UInt?): Pair<Base, UInt?> = TODO()
2021-03-12 05:45:51,946 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Base, second: UInt?): Pair<Base, UInt?> = TODO()
2021-03-12 05:45:52,056 [main:302] - generating value of type = Base false depth = 6
2021-03-12 05:45:52,056 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:52,057 [main:302] - generating value of type = UInt true depth = 6
2021-03-12 05:45:52,057 [main:95] - GENERATED = Pair<Base, UInt?>(Base(), 2032637845.toUInt())
2021-03-12 05:45:52,058 [main:95] - GENERATED = linkedMapOf<Base, UInt?>(Pair<Base, UInt?>(Base(), 2032637845.toUInt()))
2021-03-12 05:45:52,350 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a01f53]
2021-03-12 05:45:52,432 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:45:52,434 [main:78] - Generated call from random type = (linkedMapOf<Base, UInt?>(Pair<Base, UInt?>(Base(), 2032637845.toUInt()))).size.toString(-149964736)
2021-03-12 05:45:52,436 [main:106] - GETTING String from Function1<Child, Base>
2021-03-12 05:45:52,452 [main:106] - GETTING String from Base
2021-03-12 05:45:52,457 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 05:45:52,458 [main:66] - Compilation checking started
2021-03-12 05:45:52,882 [main:53] - Result = true
Text:


open class Base

class Child(val value: String = "bvkxg") : Base()

fun foo(a: Base = Base()): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}


2021-03-12 05:45:53,061 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:53,062 [main:112] - generating klass Child text = class Child(val value: String) : Base()
2021-03-12 05:45:53,148 [main:194] - Type params = []
2021-03-12 05:45:53,262 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:45:53,446 [main:43] - GENERATING CALL OF fun foo(a: Base): Child = a as Child
2021-03-12 05:45:53,447 [main:61] - WITHOUT TYPE PARAMS = fun foo(a: Base): Child = a as Child
2021-03-12 05:45:53,529 [main:302] - generating value of type = Base false depth = 1
2021-03-12 05:45:53,529 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:53,530 [main:95] - GENERATED = foo(Base())
2021-03-12 05:45:53,641 [main:43] - GENERATING CALL OF inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}
2021-03-12 05:45:53,641 [main:61] - WITHOUT TYPE PARAMS = inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}
2021-03-12 05:45:53,845 [main:302] - generating value of type = Function1<Child, Base> false depth = 1
2021-03-12 05:45:53,846 [main:302] - generating value of type = Base false depth = 2
2021-03-12 05:45:53,846 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:53,848 [main:95] - GENERATED = inlineFun({a: Child -> Base()})
2021-03-12 05:45:53,949 [main:45] - Trying to change 10 nodes
2021-03-12 05:45:53,950 [main:53] - replacing (inlineFun(), Base)
2021-03-12 05:45:53,951 [main:50] - replacing inlineFun() Base
2021-03-12 05:45:53,951 [main:54] - Getting value of type Base
2021-03-12 05:45:54,029 [main:302] - generating value of type = Base false depth = 0
2021-03-12 05:45:54,029 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:54,030 [main:58] - GENERATED VALUE OF TYPE Base = Base()
2021-03-12 05:45:54,030 [main:61] - GENERATED IS CALL =true
2021-03-12 05:45:54,512 [main:67] - randomType = Triple<Byte, Byte, Boolean?>
2021-03-12 05:45:54,605 [main:302] - generating value of type = Triple<Byte, Byte, Boolean?> false depth = 0
2021-03-12 05:45:54,701 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Byte, second: Byte, third: Boolean?): Triple<Byte, Byte, Boolean?> = TODO()
2021-03-12 05:45:54,703 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Byte, second: Byte, third: Boolean?): Triple<Byte, Byte, Boolean?> = TODO()
2021-03-12 05:45:54,790 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 05:45:54,790 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 05:45:54,790 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 05:45:54,791 [main:95] - GENERATED = Triple<Byte, Byte, Boolean?>(6, 29, false)
2021-03-12 05:45:54,812 [main:106] - GETTING Base from String
2021-03-12 05:45:54,851 [main:106] - GETTING Base from Child
2021-03-12 05:45:54,864 [main:61] - replacement of inlineFun() of type Base is Base()
2021-03-12 05:45:54,942 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:45:54,942 [main:66] - Compilation checking started
2021-03-12 05:45:55,271 [main:53] - Result = true
Text:


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (Base() as Child).value
}


2021-03-12 05:45:55,273 [main:53] - replacing (s(Child("OK")), Base)
2021-03-12 05:45:55,273 [main:50] - replacing s(Child("OK")) Base
2021-03-12 05:45:55,273 [main:54] - Getting value of type Base
2021-03-12 05:45:55,373 [main:302] - generating value of type = Base false depth = 0
2021-03-12 05:45:55,373 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:55,374 [main:58] - GENERATED VALUE OF TYPE Base = Base()
2021-03-12 05:45:55,374 [main:61] - GENERATED IS CALL =true
2021-03-12 05:45:55,826 [main:67] - randomType = Triple<Child, LinkedHashMap<Int, Child?>, Double>
2021-03-12 05:45:55,904 [main:302] - generating value of type = Triple<Child, LinkedHashMap<Int, Child?>, Double> false depth = 0
2021-03-12 05:45:55,995 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Child, second: LinkedHashMap<Int, Child?>, third: Double): Triple<Child, LinkedHashMap<Int, Child?>, Double> = TODO()
2021-03-12 05:45:55,997 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Child, second: LinkedHashMap<Int, Child?>, third: Double): Triple<Child, LinkedHashMap<Int, Child?>, Double> = TODO()
2021-03-12 05:45:56,086 [main:302] - generating value of type = Child false depth = 3
2021-03-12 05:45:56,086 [main:112] - generating klass Child text = class Child(val value: String) : Base()
2021-03-12 05:45:56,165 [main:194] - Type params = []
2021-03-12 05:45:56,291 [main:302] - generating value of type = String true depth = 5
2021-03-12 05:45:56,292 [main:302] - generating value of type = LinkedHashMap<Int, Child?> false depth = 3
2021-03-12 05:45:56,384 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Int, Child?> = TODO()
2021-03-12 05:45:56,386 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Int, Child?> = TODO()
2021-03-12 05:45:56,463 [main:95] - GENERATED = linkedMapOf<Int, Child?>()
2021-03-12 05:45:56,463 [main:302] - generating value of type = Double true depth = 3
2021-03-12 05:45:56,464 [main:95] - GENERATED = Triple<Child, LinkedHashMap<Int, Child?>, Double>(Child("pmqxi"), linkedMapOf<Int, Child?>(), 0.5845872779117964)
2021-03-12 05:45:56,497 [main:106] - GETTING Base from Function1<Child, Base>
2021-03-12 05:45:56,509 [main:113] - Case = [public abstract operator fun invoke(p1: Child): Base defined in kotlin.Function1[FunctionInvokeDescriptor@3d3b76da]]
2021-03-12 05:45:56,509 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: Child): Base defined in kotlin.Function1[FunctionInvokeDescriptor@3d3b76da]
2021-03-12 05:45:56,510 [main:117] - GENERATED CALL = (s).invoke(foo(Base()))
2021-03-12 05:45:56,510 [main:61] - replacement of s(Child("OK")) of type Base is Base()
2021-03-12 05:45:56,585 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:45:56,586 [main:66] - Compilation checking started
2021-03-12 05:45:56,921 [main:53] - Result = true
Text:


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return Base()
}

fun box(): String {
    return (Base() as Child).value
}


2021-03-12 05:45:56,921 [main:53] - replacing (s, Function1<Child, Base>)
2021-03-12 05:45:56,921 [main:50] - replacing s Function1<Child, Base>
2021-03-12 05:45:56,921 [main:54] - Getting value of type Function1<Child, Base>
2021-03-12 05:45:57,027 [main:302] - generating value of type = Function1<Child, Base> false depth = 0
2021-03-12 05:45:57,028 [main:302] - generating value of type = Base false depth = 1
2021-03-12 05:45:57,028 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:57,028 [main:58] - GENERATED VALUE OF TYPE Function1<Child, Base> = {a: Child -> Base()}
2021-03-12 05:45:57,029 [main:61] - GENERATED IS CALL =false
2021-03-12 05:45:57,296 [main:67] - randomType = Set<UShort?>
2021-03-12 05:45:57,297 [main:106] - GETTING Function1<Child, Base> from String
2021-03-12 05:45:57,324 [main:106] - GETTING Function1<Child, Base> from Base
2021-03-12 05:45:57,329 [main:106] - GETTING Function1<Child, Base> from Child
2021-03-12 05:45:57,340 [main:61] - replacement of s of type Function1<Child, Base> is {a: Child -> Base()}
2021-03-12 05:45:57,417 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:45:57,418 [main:53] - replacing ((Base() as Child).value, String)
2021-03-12 05:45:57,418 [main:50] - replacing (Base() as Child).value String
2021-03-12 05:45:57,418 [main:54] - Getting value of type String
2021-03-12 05:45:57,494 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:45:57,494 [main:58] - GENERATED VALUE OF TYPE String = "bzakf"
2021-03-12 05:45:57,494 [main:61] - GENERATED IS CALL =false
2021-03-12 05:45:57,591 [main:67] - randomType = Base?
2021-03-12 05:45:57,677 [main:302] - generating value of type = Base false depth = 0
2021-03-12 05:45:57,677 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:57,683 [main:106] - GETTING String from Child
2021-03-12 05:45:57,695 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d637f8c]]
2021-03-12 05:45:57,695 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d637f8c]
2021-03-12 05:45:57,767 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:45:57,772 [main:117] - GENERATED CALL = (foo(Base())).value.removeSurrounding("ngbkh")
2021-03-12 05:45:57,772 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ca63bd]]
2021-03-12 05:45:57,772 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ca63bd]
2021-03-12 05:45:57,845 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:45:57,916 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:45:57,918 [main:117] - GENERATED CALL = (foo(Base())).value.padEnd(-743392441, '৷')
2021-03-12 05:45:57,918 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0a8237]]
2021-03-12 05:45:57,918 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0a8237]
2021-03-12 05:45:57,918 [main:117] - GENERATED CALL = (foo(Base())).value.reversed()
2021-03-12 05:45:57,918 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c69fab]]
2021-03-12 05:45:57,919 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c69fab]
2021-03-12 05:45:58,006 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:45:58,008 [main:117] - GENERATED CALL = (foo(Base())).value.plus("sigoi")
2021-03-12 05:45:58,008 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a6bbcb0]]
2021-03-12 05:45:58,008 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a6bbcb0]
2021-03-12 05:45:58,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:45:58,091 [main:117] - GENERATED CALL = (foo(Base())).value.take(-1530547157)
2021-03-12 05:45:58,091 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]]
2021-03-12 05:45:58,091 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]
2021-03-12 05:45:58,164 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:45:58,166 [main:117] - GENERATED CALL = (foo(Base())).value.substringAfter('', Child("ykyqn").value)
2021-03-12 05:45:58,166 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4764e06b]]
2021-03-12 05:45:58,166 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4764e06b]
2021-03-12 05:45:58,166 [main:117] - GENERATED CALL = (foo(Base())).value.decapitalize()
2021-03-12 05:45:58,167 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f85a1a6]]
2021-03-12 05:45:58,167 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f85a1a6]
2021-03-12 05:45:58,167 [main:117] - GENERATED CALL = (foo(Base())).value.concat(Child("ykyqn").value)
2021-03-12 05:45:58,167 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567dbb95]]
2021-03-12 05:45:58,167 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567dbb95]
2021-03-12 05:45:58,242 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:45:58,249 [main:117] - GENERATED CALL = (foo(Base())).value.removeSuffix("njjcd")
2021-03-12 05:45:58,249 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@13ba8120], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@776a6bbc]]
2021-03-12 05:45:58,249 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@776a6bbc]
2021-03-12 05:45:58,250 [main:117] - GENERATED CALL = (foo(Base())).value.prependIndent(Child("ykyqn").value)
2021-03-12 05:45:58,250 [main:61] - replacement of (Base() as Child).value of type String is (foo(Base())).value.removeSurrounding("ngbkh")
2021-03-12 05:45:58,327 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:45:58,328 [main:66] - Compilation checking started
2021-03-12 05:45:58,676 [main:53] - Result = true
Text:


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return Base()
}

fun box(): String {
    return (foo(Base())).value.removeSurrounding("ngbkh")
}


2021-03-12 05:45:58,677 [main:53] - replacing (a, Base)
2021-03-12 05:45:58,677 [main:50] - replacing a Base
2021-03-12 05:45:58,677 [main:54] - Getting value of type Base
2021-03-12 05:45:58,769 [main:302] - generating value of type = Base false depth = 0
2021-03-12 05:45:58,769 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:58,770 [main:58] - GENERATED VALUE OF TYPE Base = Base()
2021-03-12 05:45:58,770 [main:61] - GENERATED IS CALL =true
2021-03-12 05:45:58,872 [main:67] - randomType = List<Child>
2021-03-12 05:45:58,872 [main:106] - GETTING Base from Base
2021-03-12 05:45:58,876 [main:61] - replacement of a of type Base is a
2021-03-12 05:45:58,949 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 05:45:58,949 [main:53] - replacing (inlineFun(), Base)
2021-03-12 05:45:58,949 [main:50] - replacing inlineFun() Base
2021-03-12 05:45:58,949 [main:54] - Getting value of type Base
2021-03-12 05:45:59,023 [main:302] - generating value of type = Base false depth = 0
2021-03-12 05:45:59,024 [main:112] - generating klass Base text = open class Base
2021-03-12 05:45:59,024 [main:58] - GENERATED VALUE OF TYPE Base = Base()
2021-03-12 05:45:59,024 [main:61] - GENERATED IS CALL =true
2021-03-12 05:45:59,198 [main:67] - randomType = List<ULong>
2021-03-12 05:45:59,199 [main:106] - GETTING Base from Child
2021-03-12 05:45:59,216 [main:61] - replacement of inlineFun() of type Base is Base()
2021-03-12 05:45:59,290 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:45:59,291 [main:53] - replacing (a as Child, Child)
2021-03-12 05:45:59,291 [main:50] - replacing a as Child Child
2021-03-12 05:45:59,291 [main:54] - Getting value of type Child
2021-03-12 05:45:59,367 [main:302] - generating value of type = Child false depth = 0
2021-03-12 05:45:59,367 [main:112] - generating klass Child text = class Child(val value: String) : Base()
2021-03-12 05:45:59,451 [main:194] - Type params = []
2021-03-12 05:45:59,530 [main:302] - generating value of type = String true depth = 2
2021-03-12 05:45:59,531 [main:58] - GENERATED VALUE OF TYPE Child = Child("bmfto")
2021-03-12 05:45:59,532 [main:61] - GENERATED IS CALL =true
2021-03-12 05:45:59,641 [main:67] - randomType = UByte
2021-03-12 05:45:59,728 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:45:59,793 [main:106] - GETTING Child from String
2021-03-12 05:45:59,824 [main:106] - GETTING Child from Base
2021-03-12 05:45:59,830 [main:106] - GETTING Child from Base
2021-03-12 05:45:59,830 [main:106] - GETTING Child from Child
2021-03-12 05:45:59,842 [main:61] - replacement of a as Child of type Child is foo(Base())
2021-03-12 05:45:59,918 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(CALL_EXPRESSION)
2021-03-12 05:45:59,919 [main:66] - Compilation checking started
2021-03-12 05:46:00,218 [main:53] - Result = true
Text:


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = foo(Base())


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return Base()
}

fun box(): String {
    return (foo(Base())).value.removeSurrounding("ngbkh")
}


2021-03-12 05:46:00,218 [main:53] - replacing (a as Child, Child)
2021-03-12 05:46:00,219 [main:50] - replacing a as Child Child
2021-03-12 05:46:00,219 [main:54] - Getting value of type Child
2021-03-12 05:46:00,296 [main:302] - generating value of type = Child false depth = 0
2021-03-12 05:46:00,296 [main:112] - generating klass Child text = class Child(val value: String) : Base()
2021-03-12 05:46:00,382 [main:194] - Type params = []
2021-03-12 05:46:00,457 [main:302] - generating value of type = String true depth = 2
2021-03-12 05:46:00,457 [main:58] - GENERATED VALUE OF TYPE Child = Child("supat")
2021-03-12 05:46:00,458 [main:61] - GENERATED IS CALL =true
2021-03-12 05:46:00,613 [main:67] - randomType = Float?
2021-03-12 05:46:00,685 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:46:00,728 [main:106] - GETTING Child from String
2021-03-12 05:46:00,754 [main:106] - GETTING Child from Child
2021-03-12 05:46:00,762 [main:61] - replacement of a as Child of type Child is Child("supat")
2021-03-12 05:46:00,839 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(CALL_EXPRESSION)
2021-03-12 05:46:00,976 [main:41] - AFTER TRY 0 res = 

open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}


2021-03-12 05:46:01,121 [main:112] - generating klass Base text = open class Base
2021-03-12 05:46:01,122 [main:112] - generating klass Child text = class Child(val value: String) : Base()
2021-03-12 05:46:01,194 [main:194] - Type params = []
2021-03-12 05:46:01,266 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:46:01,433 [main:43] - GENERATING CALL OF fun foo(a: Base): Child = a as Child
2021-03-12 05:46:01,434 [main:61] - WITHOUT TYPE PARAMS = fun foo(a: Base): Child = a as Child
2021-03-12 05:46:01,508 [main:302] - generating value of type = Base false depth = 1
2021-03-12 05:46:01,508 [main:112] - generating klass Base text = open class Base
2021-03-12 05:46:01,509 [main:95] - GENERATED = foo(Base())
2021-03-12 05:46:01,581 [main:43] - GENERATING CALL OF inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}
2021-03-12 05:46:01,582 [main:61] - WITHOUT TYPE PARAMS = inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}
2021-03-12 05:46:01,734 [main:302] - generating value of type = Function1<Child, Base> false depth = 1
2021-03-12 05:46:01,734 [main:302] - generating value of type = Base false depth = 2
2021-03-12 05:46:01,734 [main:112] - generating klass Base text = open class Base
2021-03-12 05:46:01,735 [main:95] - GENERATED = inlineFun({a: Child -> Base()})
2021-03-12 05:46:01,829 [main:43] - Try №0
2021-03-12 05:46:16,178 [main:48] - Already checked
2021-03-12 05:46:20,609 [main:69] - Trying to insert fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }
2021-03-12 05:46:20,731 [main:66] - Compilation checking started
2021-03-12 05:46:21,741 [main:103] - Trying to change 199 nodes
2021-03-12 05:46:21,741 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 05:46:21,741 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 05:46:21,741 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:46:21,887 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:46:21,889 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:22,037 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:46:22,041 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:46:22,532 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:46:22,534 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:46:22,536 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:46:22,536 [main:95] - GENERATED = check(true, { "uyowx"})
2021-03-12 05:46:22,536 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "uyowx"})}
2021-03-12 05:46:22,536 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:22,709 [main:67] - randomType = Kla1?
2021-03-12 05:46:22,710 [main:106] - GETTING Function0<Unit> from Child
2021-03-12 05:46:22,723 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:46:22,766 [main:106] - GETTING Function0<Unit> from Child
2021-03-12 05:46:22,768 [main:106] - GETTING Function0<Unit> from Base
2021-03-12 05:46:22,776 [main:106] - GETTING Function0<Unit> from Child
2021-03-12 05:46:22,778 [main:106] - GETTING Function0<Unit> from Base
2021-03-12 05:46:22,778 [main:114] - replacement of prope7 of type Function0<Unit> is { check(true, { "uyowx"})}
2021-03-12 05:46:22,992 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:46:22,992 [main:66] - Compilation checking started
2021-03-12 05:46:23,405 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        { check(true, { "uyowx"})} = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:23,407 [main:107] - replacing (prope0, Continuation<Unit>)
2021-03-12 05:46:23,407 [main:50] - replacing prope0 Continuation<Unit>
2021-03-12 05:46:23,407 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:46:23,553 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:46:23,697 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:46:23,700 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:46:24,179 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:46:24,355 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:46:24,358 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:46:24,655 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:46:24,813 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:46:24,816 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:46:25,273 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:46:25,273 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:46:25,273 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:46:25,273 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:46:25,426 [main:67] - randomType = Byte
2021-03-12 05:46:25,608 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:46:25,672 [main:106] - GETTING Continuation<Unit> from Base
2021-03-12 05:46:25,679 [main:106] - GETTING Continuation<Unit> from Child
2021-03-12 05:46:25,692 [main:106] - GETTING Continuation<Unit> from Base
2021-03-12 05:46:25,694 [main:106] - GETTING Continuation<Unit> from Child
2021-03-12 05:46:25,695 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:46:25,728 [main:106] - GETTING Continuation<Unit> from Child
2021-03-12 05:46:25,728 [main:111] - Cant find and generate replacement for prope0 type Continuation<Unit>
2021-03-12 05:46:25,729 [main:107] - replacing (prope2.prope6, Boolean)
2021-03-12 05:46:25,729 [main:50] - replacing prope2.prope6 Boolean
2021-03-12 05:46:25,729 [main:54] - Getting value of type Boolean
2021-03-12 05:46:25,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:25,882 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:46:25,883 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:26,043 [main:67] - randomType = Short
2021-03-12 05:46:26,178 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:46:26,240 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@72908ba2]
2021-03-12 05:46:26,240 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e65a19b]
2021-03-12 05:46:26,240 [main:78] - Generated call from random type = (-9379).toChar().isLowSurrogate()
2021-03-12 05:46:26,241 [main:114] - replacement of prope2.prope6 of type Boolean is (-9379).toChar().isLowSurrogate()
2021-03-12 05:46:26,378 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:46:26,378 [main:66] - Compilation checking started
2021-03-12 05:46:26,863 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            (-9379).toChar().isLowSurrogate() = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:26,865 [main:107] - replacing (0, Int)
2021-03-12 05:46:26,865 [main:50] - replacing 0 Int
2021-03-12 05:46:26,865 [main:54] - Getting value of type Int
2021-03-12 05:46:27,007 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:27,010 [main:58] - GENERATED VALUE OF TYPE Int = -942358213
2021-03-12 05:46:27,010 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:27,178 [main:67] - randomType = Long
2021-03-12 05:46:27,309 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:46:27,351 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17416a79]
2021-03-12 05:46:27,351 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@749c9289]
2021-03-12 05:46:27,473 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:46:27,475 [main:78] - Generated call from random type = (-5208942198844259580).toInt().minus(107)
2021-03-12 05:46:27,476 [main:106] - GETTING Int from Child
2021-03-12 05:46:27,484 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@36cbf95e], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]]
2021-03-12 05:46:27,484 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@36cbf95e]
2021-03-12 05:46:27,616 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:46:27,617 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]
2021-03-12 05:46:27,744 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:27,747 [main:117] - GENERATED CALL = (inlineFun() as Child).equals("intkz").compareTo(false)
2021-03-12 05:46:27,747 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dd66e91]]
2021-03-12 05:46:27,747 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dd66e91]
2021-03-12 05:46:27,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:27,917 [main:117] - GENERATED CALL = (inlineFun() as Child).value.compareTo(Child("keexl").value, true)
2021-03-12 05:46:27,917 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1455b35e]]
2021-03-12 05:46:27,917 [main:117] - GENERATED CALL = (inlineFun() as Child).value.length
2021-03-12 05:46:27,917 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e809db]]
2021-03-12 05:46:27,917 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e809db]
2021-03-12 05:46:27,917 [main:117] - GENERATED CALL = (inlineFun() as Child).value.toInt()
2021-03-12 05:46:27,917 [main:114] - replacement of 0 of type Int is (inlineFun() as Child).equals("intkz").compareTo(false)
2021-03-12 05:46:28,051 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:46:28,051 [main:66] - Compilation checking started
2021-03-12 05:46:28,650 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:28,653 [main:107] - replacing (s, Int?)
2021-03-12 05:46:28,653 [main:50] - replacing s Int?
2021-03-12 05:46:28,653 [main:54] - Getting value of type Int?
2021-03-12 05:46:28,806 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:28,808 [main:58] - GENERATED VALUE OF TYPE Int? = 1604657618
2021-03-12 05:46:28,809 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:28,817 [main:67] - randomType = Kla7
2021-03-12 05:46:28,947 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:46:28,949 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:46:28,960 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]
2021-03-12 05:46:29,109 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:29,111 [main:78] - Generated call from random type = (Kla7()).prope6.compareTo(false)
2021-03-12 05:46:29,113 [main:106] - GETTING Int? from Child
2021-03-12 05:46:29,125 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@1c70f6ce], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dd66e91]]
2021-03-12 05:46:29,126 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dd66e91]
2021-03-12 05:46:29,259 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:29,261 [main:117] - GENERATED CALL = (foo(Base()))?.value.compareTo(Child("keexl").value, true)
2021-03-12 05:46:29,261 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@1c70f6ce], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1455b35e]]
2021-03-12 05:46:29,262 [main:117] - GENERATED CALL = (foo(Base()))?.value.length
2021-03-12 05:46:29,262 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@538e4d45], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]]
2021-03-12 05:46:29,262 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@538e4d45]
2021-03-12 05:46:29,388 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:46:29,388 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]
2021-03-12 05:46:29,512 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:29,514 [main:117] - GENERATED CALL = (foo(Base()))?.equals("psxts").compareTo(false)
2021-03-12 05:46:29,515 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@1c70f6ce], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e809db]]
2021-03-12 05:46:29,515 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e809db]
2021-03-12 05:46:29,515 [main:117] - GENERATED CALL = (foo(Base()))?.value.toInt()
2021-03-12 05:46:29,515 [main:114] - replacement of s of type Int? is (foo(Base()))?.value.compareTo(Child("keexl").value, true)
2021-03-12 05:46:29,645 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:46:29,645 [main:66] - Compilation checking started
2021-03-12 05:46:30,015 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.(foo(Base()))?.value.compareTo(Child("keexl").value, true).fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:30,018 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 05:46:30,018 [main:50] - replacing getOrThrow() Ty0
2021-03-12 05:46:30,018 [main:54] - Getting value of type Ty0
2021-03-12 05:46:30,161 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 05:46:30,169 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 05:46:30,356 [main:67] - randomType = ULong
2021-03-12 05:46:30,511 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:46:30,554 [main:106] - GETTING Ty0 from Child
2021-03-12 05:46:30,565 [main:106] - GETTING Ty0 from Base
2021-03-12 05:46:30,571 [main:106] - GETTING Ty0 from Child
2021-03-12 05:46:30,571 [main:106] - GETTING Ty0 from Child
2021-03-12 05:46:30,572 [main:106] - GETTING Ty0 from String
2021-03-12 05:46:30,598 [main:106] - GETTING Ty0 from Base
2021-03-12 05:46:30,598 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 05:46:30,598 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:46:30,598 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:46:30,598 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:46:30,728 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:46:30,733 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:46:30,741 [main:67] - randomType = Kla0
2021-03-12 05:46:30,870 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:46:30,872 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)
2021-03-12 05:46:31,000 [main:194] - Type params = []
2021-03-12 05:46:31,120 [main:302] - generating value of type = Int true depth = 2
2021-03-12 05:46:31,129 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:46:31,136 [main:106] - GETTING EmptyCoroutineContext from Base
2021-03-12 05:46:31,139 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:46:31,156 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:46:31,157 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:46:31,157 [main:106] - GETTING EmptyCoroutineContext from Base
2021-03-12 05:46:31,157 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:46:31,157 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 05:46:31,157 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 05:46:31,157 [main:54] - Getting value of type Result<Ty0>
2021-03-12 05:46:31,278 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 05:46:31,415 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:46:31,418 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:46:31,678 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:46:31,678 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 05:46:31,818 [main:67] - randomType = Child?
2021-03-12 05:46:31,938 [main:302] - generating value of type = Child false depth = 0
2021-03-12 05:46:31,940 [main:112] - generating klass Child text = class Child(val value: String) : Base()
2021-03-12 05:46:32,061 [main:194] - Type params = []
2021-03-12 05:46:32,181 [main:302] - generating value of type = String true depth = 2
2021-03-12 05:46:32,196 [main:106] - GETTING Result<Ty0> from Child
2021-03-12 05:46:32,205 [main:106] - GETTING Result<Ty0> from Base
2021-03-12 05:46:32,209 [main:106] - GETTING Result<Ty0> from Child
2021-03-12 05:46:32,210 [main:106] - GETTING Result<Ty0> from Base
2021-03-12 05:46:32,211 [main:106] - GETTING Result<Ty0> from Child
2021-03-12 05:46:32,213 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:46:32,229 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 05:46:32,230 [main:107] - replacing (1, Int)
2021-03-12 05:46:32,230 [main:50] - replacing 1 Int
2021-03-12 05:46:32,230 [main:54] - Getting value of type Int
2021-03-12 05:46:32,356 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:32,358 [main:58] - GENERATED VALUE OF TYPE Int = 1769652131
2021-03-12 05:46:32,358 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:32,561 [main:67] - randomType = Array<Int?>
2021-03-12 05:46:32,684 [main:302] - generating value of type = Array<Int?> false depth = 0
2021-03-12 05:46:32,811 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int?): Array<Int?> = TODO()
2021-03-12 05:46:32,814 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int?): Array<Int?> = TODO()
2021-03-12 05:46:33,217 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:46:33,219 [main:302] - generating value of type = Function1<Int, Int?> false depth = 3
2021-03-12 05:46:33,221 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:46:33,223 [main:95] - GENERATED = Array<Int?>(-1169246414, {a: Int -> 1474183805})
2021-03-12 05:46:33,243 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c34207]
2021-03-12 05:46:33,243 [main:78] - Generated call from random type = (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()
2021-03-12 05:46:33,243 [main:114] - replacement of 1 of type Int is (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()
2021-03-12 05:46:33,386 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:46:33,387 [main:66] - Compilation checking started
2021-03-12 05:46:33,997 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:33,999 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 05:46:33,999 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 05:46:34,000 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:46:34,131 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:46:34,133 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:34,268 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:46:34,271 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:46:34,566 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:46:34,568 [main:95] - GENERATED = require(false)
2021-03-12 05:46:34,568 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 05:46:34,569 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:34,704 [main:67] - randomType = ULong
2021-03-12 05:46:34,846 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:46:34,894 [main:106] - GETTING Function0<Unit> from Child
2021-03-12 05:46:34,909 [main:106] - GETTING Function0<Unit> from Child
2021-03-12 05:46:34,910 [main:106] - GETTING Function0<Unit> from Base
2021-03-12 05:46:34,917 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:46:34,951 [main:106] - GETTING Function0<Unit> from Child
2021-03-12 05:46:34,952 [main:106] - GETTING Function0<Unit> from Base
2021-03-12 05:46:34,953 [main:114] - replacement of prope7 of type Function0<Unit> is { require(false)}
2021-03-12 05:46:35,091 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:46:35,092 [main:66] - Compilation checking started
2021-03-12 05:46:35,460 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        { require(false)} = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:35,462 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5, String)
2021-03-12 05:46:35,462 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5 String
2021-03-12 05:46:35,462 [main:54] - Getting value of type String
2021-03-12 05:46:35,592 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:46:35,595 [main:58] - GENERATED VALUE OF TYPE String = "yalsl"
2021-03-12 05:46:35,595 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:35,756 [main:67] - randomType = Char
2021-03-12 05:46:35,885 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:35,905 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e042502]
2021-03-12 05:46:35,906 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a6c8e2]
2021-03-12 05:46:36,028 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:36,030 [main:78] - Generated call from random type = ('⯺').toByte().toString(-1100000318)
2021-03-12 05:46:36,031 [main:106] - GETTING String from Child
2021-03-12 05:46:36,042 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66bbcdb9]]
2021-03-12 05:46:36,042 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66bbcdb9]
2021-03-12 05:46:36,166 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:36,169 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replaceBefore('핸', Child("keexl").value, Child("keexl").value)
2021-03-12 05:46:36,169 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a6bbcb0]]
2021-03-12 05:46:36,169 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a6bbcb0]
2021-03-12 05:46:36,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:36,289 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.take(2039652938)
2021-03-12 05:46:36,289 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d81075]]
2021-03-12 05:46:36,289 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d81075]
2021-03-12 05:46:36,409 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:46:36,535 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:46:36,538 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:46:36,680 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:46:36,683 [main:95] - GENERATED = setOf<Int>(305157143)
2021-03-12 05:46:36,683 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.slice(setOf<Int>(305157143))
2021-03-12 05:46:36,683 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@288af1ca]]
2021-03-12 05:46:36,683 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@288af1ca]
2021-03-12 05:46:36,684 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.trimIndent()
2021-03-12 05:46:36,684 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47b0fdc9]]
2021-03-12 05:46:36,684 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47b0fdc9]
2021-03-12 05:46:36,822 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:36,825 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substring(295430961)
2021-03-12 05:46:36,825 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ea9127e]]
2021-03-12 05:46:36,825 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ea9127e]
2021-03-12 05:46:36,942 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:46:36,944 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:46:36,947 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.filterNot({a: Char -> false})
2021-03-12 05:46:36,947 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f5033b]]
2021-03-12 05:46:36,947 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f5033b]
2021-03-12 05:46:37,066 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:46:37,068 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:46:37,070 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replaceFirstChar({a: Char -> 'H'})
2021-03-12 05:46:37,070 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@86005af]]
2021-03-12 05:46:37,070 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@86005af]
2021-03-12 05:46:37,187 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:46:37,189 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:46:37,191 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.dropLastWhile({a: Char -> false})
2021-03-12 05:46:37,191 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7501e428]]
2021-03-12 05:46:37,191 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7501e428]
2021-03-12 05:46:37,309 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:37,444 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:46:37,447 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substringAfterLast('㸂', "fwttc")
2021-03-12 05:46:37,447 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc34d11]]
2021-03-12 05:46:37,447 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc34d11]
2021-03-12 05:46:37,447 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.trimEnd()
2021-03-12 05:46:37,447 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5 of type String is ((inlineFun() as Child)).value.trimEnd()
2021-03-12 05:46:37,597 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:46:37,597 [main:66] - Compilation checking started
2021-03-12 05:46:38,181 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:38,183 [main:107] - replacing (prope6, Boolean)
2021-03-12 05:46:38,183 [main:50] - replacing prope6 Boolean
2021-03-12 05:46:38,183 [main:54] - Getting value of type Boolean
2021-03-12 05:46:38,315 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:38,317 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:46:38,317 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:38,449 [main:67] - randomType = UShort
2021-03-12 05:46:38,569 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:46:38,613 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2bbb8698]
2021-03-12 05:46:38,613 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5fb65b3a]
2021-03-12 05:46:38,613 [main:78] - Generated call from random type = (30384.toUShort()).toFloat().isFinite()
2021-03-12 05:46:38,613 [main:114] - replacement of prope6 of type Boolean is (30384.toUShort()).toFloat().isFinite()
2021-03-12 05:46:38,751 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:46:38,752 [main:66] - Compilation checking started
2021-03-12 05:46:39,117 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.(30384.toUShort()).toFloat().isFinite() = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:39,120 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 05:46:39,120 [main:50] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 05:46:39,120 [main:54] - Getting value of type Unit?
2021-03-12 05:46:39,256 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 05:46:39,381 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:46:39,384 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:46:39,648 [main:302] - generating value of type = Any false depth = 3
2021-03-12 05:46:39,648 [main:95] - GENERATED = println("xmply")
2021-03-12 05:46:39,648 [main:58] - GENERATED VALUE OF TYPE Unit? = println("xmply")
2021-03-12 05:46:39,648 [main:61] - GENERATED IS CALL =true
2021-03-12 05:46:39,659 [main:67] - randomType = Base
2021-03-12 05:46:39,776 [main:302] - generating value of type = Base false depth = 0
2021-03-12 05:46:39,778 [main:112] - generating klass Base text = open class Base
2021-03-12 05:46:39,783 [main:106] - GETTING Unit? from Child
2021-03-12 05:46:39,793 [main:106] - GETTING Unit? from Base
2021-03-12 05:46:39,798 [main:106] - GETTING Unit? from String
2021-03-12 05:46:39,822 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]]
2021-03-12 05:46:39,822 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]
2021-03-12 05:46:39,955 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:46:39,957 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:40,084 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:46:40,087 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:46:40,349 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:46:40,351 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:46:40,357 [main:95] - GENERATED = contract({ println()})
2021-03-12 05:46:40,357 [main:117] - GENERATED CALL = (Child("keexl").value)?.forEachIndexed({a: Int, b: Char -> contract({ println()})})
2021-03-12 05:46:40,358 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]]
2021-03-12 05:46:40,358 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]
2021-03-12 05:46:40,481 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:46:40,483 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:40,605 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:46:40,608 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:46:40,861 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:46:40,861 [main:95] - GENERATED = print("ayqad")
2021-03-12 05:46:40,862 [main:117] - GENERATED CALL = (Child("keexl").value)?.forEach({a: Char -> print("ayqad")})
2021-03-12 05:46:40,862 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]]
2021-03-12 05:46:40,862 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8]
2021-03-12 05:46:41,026 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:41,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:41,173 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]
2021-03-12 05:46:41,290 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:46:41,292 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:41,415 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:46:41,419 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:46:41,818 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:46:41,820 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 05:46:41,822 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:46:41,981 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:46:41,984 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:46:42,254 [main:302] - generating value of type = Any false depth = 8
2021-03-12 05:46:42,254 [main:95] - GENERATED = println("fbnps")
2021-03-12 05:46:42,255 [main:95] - GENERATED = repeat(-1572939354, {a: Int -> println("fbnps")})
2021-03-12 05:46:42,255 [main:117] - GENERATED CALL = (Child("keexl").value)?.subSequence(-117328505, -1367605659).forEachIndexed({a: Int, b: Char -> repeat(-1572939354, {a: Int -> println("fbnps")})})
2021-03-12 05:46:42,255 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]]
2021-03-12 05:46:42,255 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8]
2021-03-12 05:46:42,373 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:42,490 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:42,492 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]
2021-03-12 05:46:42,609 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:46:42,611 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:42,733 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:46:42,736 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:46:43,169 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:46:43,172 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:46:43,174 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:46:43,174 [main:95] - GENERATED = check(true, { "lyltd"})
2021-03-12 05:46:43,174 [main:117] - GENERATED CALL = (Child("keexl").value)?.subSequence(2064487051, 1115297249).forEach({a: Char -> check(true, { "lyltd"})})
2021-03-12 05:46:43,174 [main:114] - replacement of {
        prope3.exceptionOrNull()?.let(x)
    } of type Unit? is println("xmply")
2021-03-12 05:46:43,293 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-12 05:46:43,294 [main:66] - Compilation checking started
2021-03-12 05:46:43,298 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:46:43,299 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) println("xmply")
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:43,300 [main:107] - replacing (prope3.getOrThrow(), Any?)
2021-03-12 05:46:43,301 [main:50] - replacing prope3.getOrThrow() Any?
2021-03-12 05:46:43,301 [main:54] - Getting value of type Any?
2021-03-12 05:46:43,419 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:46:43,419 [main:58] - GENERATED VALUE OF TYPE Any? = "pfthu"
2021-03-12 05:46:43,419 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:43,565 [main:67] - randomType = Child?
2021-03-12 05:46:43,680 [main:302] - generating value of type = Child false depth = 0
2021-03-12 05:46:43,682 [main:112] - generating klass Child text = class Child(val value: String) : Base()
2021-03-12 05:46:43,840 [main:194] - Type params = []
2021-03-12 05:46:43,976 [main:302] - generating value of type = String true depth = 2
2021-03-12 05:46:43,991 [main:106] - GETTING Any? from Child
2021-03-12 05:46:44,004 [main:106] - GETTING Any? from Child
2021-03-12 05:46:44,005 [main:106] - GETTING Any? from Base
2021-03-12 05:46:44,011 [main:106] - GETTING Any? from Child
2021-03-12 05:46:44,012 [main:106] - GETTING Any? from String
2021-03-12 05:46:44,038 [main:106] - GETTING Any? from Base
2021-03-12 05:46:44,038 [main:114] - replacement of prope3.getOrThrow() of type Any? is "pfthu"
2021-03-12 05:46:44,153 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:46:44,154 [main:66] - Compilation checking started
2021-03-12 05:46:44,748 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:44,751 [main:107] - replacing (this.prope3, Any?)
2021-03-12 05:46:44,751 [main:50] - replacing this.prope3 Any?
2021-03-12 05:46:44,751 [main:54] - Getting value of type Any?
2021-03-12 05:46:44,888 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:46:44,888 [main:58] - GENERATED VALUE OF TYPE Any? = "eqhpq"
2021-03-12 05:46:44,888 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:45,032 [main:67] - randomType = UByte
2021-03-12 05:46:45,159 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:46:45,196 [main:106] - GETTING Any? from Child
2021-03-12 05:46:45,204 [main:106] - GETTING Any? from Child
2021-03-12 05:46:45,205 [main:106] - GETTING Any? from Base
2021-03-12 05:46:45,210 [main:106] - GETTING Any? from Child
2021-03-12 05:46:45,211 [main:106] - GETTING Any? from String
2021-03-12 05:46:45,236 [main:106] - GETTING Any? from Base
2021-03-12 05:46:45,236 [main:114] - replacement of this.prope3 of type Any? is "eqhpq"
2021-03-12 05:46:45,358 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:46:45,358 [main:66] - Compilation checking started
2021-03-12 05:46:45,714 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        "eqhpq" = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:45,717 [main:107] - replacing (prope0, Continuation<*>)
2021-03-12 05:46:45,717 [main:50] - replacing prope0 Continuation<*>
2021-03-12 05:46:45,717 [main:54] - Getting value of type Continuation<*>
2021-03-12 05:46:45,848 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 05:46:45,967 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:46:45,970 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:46:46,398 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:46:46,518 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:46:46,521 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:46:46,784 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:46:46,910 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:46:46,914 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:46:47,302 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:46:47,302 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:46:47,302 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:46:47,302 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 05:46:47,858 [main:67] - randomType = MutableMap<ULong, List<Kla5<Kla3>>>
2021-03-12 05:46:47,859 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:46:47,867 [main:106] - GETTING Continuation<*> from String
2021-03-12 05:46:47,888 [main:106] - GETTING Continuation<*> from Base
2021-03-12 05:46:47,892 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:46:47,893 [main:106] - GETTING Continuation<*> from Base
2021-03-12 05:46:47,894 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:46:47,894 [main:111] - Cant find and generate replacement for prope0 type Continuation<*>
2021-03-12 05:46:47,894 [main:107] - replacing (Kla2(), Kla2)
2021-03-12 05:46:47,894 [main:50] - replacing Kla2() Kla2
2021-03-12 05:46:47,894 [main:54] - Getting value of type Kla2
2021-03-12 05:46:48,010 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:46:48,013 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}
2021-03-12 05:46:48,130 [main:194] - Type params = []
2021-03-12 05:46:48,246 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 05:46:48,246 [main:61] - GENERATED IS CALL =true
2021-03-12 05:46:48,379 [main:67] - randomType = Long
2021-03-12 05:46:48,497 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:46:48,539 [main:106] - GETTING Kla2 from Child
2021-03-12 05:46:48,548 [main:106] - GETTING Kla2 from Child
2021-03-12 05:46:48,549 [main:106] - GETTING Kla2 from Base
2021-03-12 05:46:48,553 [main:106] - GETTING Kla2 from Child
2021-03-12 05:46:48,554 [main:106] - GETTING Kla2 from String
2021-03-12 05:46:48,579 [main:106] - GETTING Kla2 from Base
2021-03-12 05:46:48,579 [main:114] - replacement of Kla2() of type Kla2 is Kla2()
2021-03-12 05:46:48,715 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:46:48,717 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:46:48,717 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:46:48,717 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:46:48,844 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:46:48,849 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:46:48,857 [main:67] - randomType = Kla6
2021-03-12 05:46:48,969 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:46:48,971 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 05:46:48,979 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:46:48,991 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:46:48,992 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:46:49,021 [main:106] - GETTING EmptyCoroutineContext from Base
2021-03-12 05:46:49,025 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:46:49,026 [main:106] - GETTING EmptyCoroutineContext from Base
2021-03-12 05:46:49,026 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:46:49,026 [main:107] - replacing (prope2, Kla7)
2021-03-12 05:46:49,026 [main:50] - replacing prope2 Kla7
2021-03-12 05:46:49,026 [main:54] - Getting value of type Kla7
2021-03-12 05:46:49,148 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:46:49,150 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:46:49,150 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 05:46:49,151 [main:61] - GENERATED IS CALL =true
2021-03-12 05:46:49,280 [main:67] - randomType = UByte
2021-03-12 05:46:49,397 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:46:49,430 [main:106] - GETTING Kla7 from Base
2021-03-12 05:46:49,433 [main:106] - GETTING Kla7 from Child
2021-03-12 05:46:49,440 [main:106] - GETTING Kla7 from Child
2021-03-12 05:46:49,440 [main:106] - GETTING Kla7 from Child
2021-03-12 05:46:49,441 [main:106] - GETTING Kla7 from String
2021-03-12 05:46:49,460 [main:106] - GETTING Kla7 from Base
2021-03-12 05:46:49,460 [main:114] - replacement of prope2 of type Kla7 is Kla7()
2021-03-12 05:46:49,584 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:46:49,585 [main:66] - Compilation checking started
2021-03-12 05:46:50,161 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:50,163 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 05:46:50,163 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 05:46:50,163 [main:54] - Getting value of type String
2021-03-12 05:46:50,279 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:46:50,281 [main:58] - GENERATED VALUE OF TYPE String = "pccpd"
2021-03-12 05:46:50,281 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:50,410 [main:67] - randomType = Kla8
2021-03-12 05:46:50,522 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:46:50,524 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:46:50,542 [main:106] - GETTING String from String
2021-03-12 05:46:50,568 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0a8237]]
2021-03-12 05:46:50,568 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0a8237]
2021-03-12 05:46:50,569 [main:117] - GENERATED CALL = (Child("keexl").value).reversed()
2021-03-12 05:46:50,569 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27d6be6f]]
2021-03-12 05:46:50,569 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27d6be6f]
2021-03-12 05:46:50,693 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:50,695 [main:117] - GENERATED CALL = (Child("keexl").value).replaceAfter('쵷', Child("keexl").value, Child("keexl").value)
2021-03-12 05:46:50,696 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f85a1a6]]
2021-03-12 05:46:50,696 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f85a1a6]
2021-03-12 05:46:50,696 [main:117] - GENERATED CALL = (Child("keexl").value).concat(Child("keexl").value)
2021-03-12 05:46:50,696 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66bbcdb9]]
2021-03-12 05:46:50,696 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66bbcdb9]
2021-03-12 05:46:50,814 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:50,940 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:46:50,943 [main:117] - GENERATED CALL = (Child("keexl").value).replaceBefore('뵘', Child("keexl").value, "cauti")
2021-03-12 05:46:50,943 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b591]]
2021-03-12 05:46:50,943 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@476b591]
2021-03-12 05:46:51,069 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:46:51,071 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:46:51,076 [main:117] - GENERATED CALL = (Child("keexl").value).filter({a: Char -> false})
2021-03-12 05:46:51,076 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c69fab]]
2021-03-12 05:46:51,076 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c69fab]
2021-03-12 05:46:51,190 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:46:51,191 [main:117] - GENERATED CALL = (Child("keexl").value).plus("usnkh")
2021-03-12 05:46:51,191 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0cddea]]
2021-03-12 05:46:51,191 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0cddea]
2021-03-12 05:46:51,346 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:51,491 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:51,605 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:51,607 [main:117] - GENERATED CALL = (Child("keexl").value).replace('', 'ऱ', false)
2021-03-12 05:46:51,608 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5669c14d]]
2021-03-12 05:46:51,608 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5669c14d]
2021-03-12 05:46:51,608 [main:117] - GENERATED CALL = (Child("keexl").value).capitalize()
2021-03-12 05:46:51,608 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]]
2021-03-12 05:46:51,608 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]
2021-03-12 05:46:51,720 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:51,722 [main:117] - GENERATED CALL = (Child("keexl").value).substringAfter('탶', Child("keexl").value)
2021-03-12 05:46:51,722 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34790d9f]]
2021-03-12 05:46:51,723 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34790d9f]
2021-03-12 05:46:51,723 [main:117] - GENERATED CALL = (Child("keexl").value).trimMargin(Child("keexl").value)
2021-03-12 05:46:51,723 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (Child("keexl").value).filter({a: Char -> false})
2021-03-12 05:46:51,841 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:46:51,841 [main:66] - Compilation checking started
2021-03-12 05:46:52,425 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:52,428 [main:107] - replacing ("OK", String)
2021-03-12 05:46:52,428 [main:50] - replacing "OK" String
2021-03-12 05:46:52,428 [main:54] - Getting value of type String
2021-03-12 05:46:52,555 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:46:52,557 [main:58] - GENERATED VALUE OF TYPE String = "fyhxu"
2021-03-12 05:46:52,557 [main:61] - GENERATED IS CALL =false
2021-03-12 05:46:52,561 [main:67] - randomType = Boolean
2021-03-12 05:46:52,689 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:52,701 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]
2021-03-12 05:46:52,817 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:46:52,819 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a01f53]
2021-03-12 05:46:52,933 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:52,935 [main:78] - Generated call from random type = (false).compareTo(true).toString(566959895)
2021-03-12 05:46:52,936 [main:106] - GETTING String from Child
2021-03-12 05:46:52,943 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51594484]]
2021-03-12 05:46:52,943 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51594484]
2021-03-12 05:46:52,943 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.uppercase()
2021-03-12 05:46:52,943 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b71b494]]
2021-03-12 05:46:52,943 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b71b494]
2021-03-12 05:46:52,943 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replaceIndent(Child("keexl").value)
2021-03-12 05:46:52,943 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d1b229]]
2021-03-12 05:46:52,943 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d1b229]
2021-03-12 05:46:53,058 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:46:53,061 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substringBefore('쎶', Child("keexl").value)
2021-03-12 05:46:53,061 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8da73f]]
2021-03-12 05:46:53,061 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8da73f]
2021-03-12 05:46:53,176 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:46:53,178 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:46:53,180 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.takeWhile({a: Char -> true})
2021-03-12 05:46:53,180 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4390df7f]]
2021-03-12 05:46:53,180 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4390df7f]
2021-03-12 05:46:53,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:53,298 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.drop(772346677)
2021-03-12 05:46:53,298 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e7072ff]]
2021-03-12 05:46:53,298 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e7072ff]
2021-03-12 05:46:53,413 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:46:53,534 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:46:53,537 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:46:53,832 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:46:53,834 [main:95] - GENERATED = StringBuilder("phxrm")
2021-03-12 05:46:53,834 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.removePrefix(StringBuilder("phxrm"))
2021-03-12 05:46:53,834 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f85a1a6]]
2021-03-12 05:46:53,835 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f85a1a6]
2021-03-12 05:46:53,835 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.concat(Child("keexl").value)
2021-03-12 05:46:53,835 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23192baa]]
2021-03-12 05:46:53,835 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23192baa]
2021-03-12 05:46:53,952 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:46:53,954 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:46:53,956 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})
2021-03-12 05:46:53,956 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a74b4c]]
2021-03-12 05:46:53,956 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a74b4c]
2021-03-12 05:46:53,956 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.toLowerCase()
2021-03-12 05:46:53,956 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f5033b]]
2021-03-12 05:46:53,956 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f5033b]
2021-03-12 05:46:54,076 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:46:54,078 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:46:54,080 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replaceFirstChar({a: Char -> '﷈'})
2021-03-12 05:46:54,080 [main:114] - replacement of "OK" of type String is ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})
2021-03-12 05:46:54,195 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:46:54,196 [main:66] - Compilation checking started
2021-03-12 05:46:54,779 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:54,782 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 05:46:54,782 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 05:46:54,782 [main:54] - Getting value of type Throwable?
2021-03-12 05:46:54,906 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:46:55,041 [main:43] - GENERATING CALL OF fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 05:46:55,044 [main:61] - WITHOUT TYPE PARAMS = fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 05:46:55,304 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:46:55,306 [main:95] - GENERATED = CharacterCodingException("pjwrs")
2021-03-12 05:46:55,306 [main:58] - GENERATED VALUE OF TYPE Throwable? = CharacterCodingException("pjwrs")
2021-03-12 05:46:55,307 [main:61] - GENERATED IS CALL =true
2021-03-12 05:46:55,445 [main:67] - randomType = Kla2?
2021-03-12 05:46:55,561 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:46:55,563 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}
2021-03-12 05:46:55,680 [main:194] - Type params = []
2021-03-12 05:46:55,806 [main:106] - GETTING Throwable? from Base
2021-03-12 05:46:55,809 [main:106] - GETTING Throwable? from String
2021-03-12 05:46:55,827 [main:106] - GETTING Throwable? from Child
2021-03-12 05:46:55,834 [main:106] - GETTING Throwable? from Base
2021-03-12 05:46:55,835 [main:106] - GETTING Throwable? from Child
2021-03-12 05:46:55,836 [main:106] - GETTING Throwable? from Child
2021-03-12 05:46:55,836 [main:114] - replacement of exceptionOrNull() of type Throwable? is CharacterCodingException("pjwrs")
2021-03-12 05:46:55,974 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:46:55,974 [main:66] - Compilation checking started
2021-03-12 05:46:56,360 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.CharacterCodingException("pjwrs")?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:46:56,362 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 05:46:56,363 [main:50] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 05:46:56,363 [main:54] - Getting value of type Unit?
2021-03-12 05:46:56,487 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 05:46:56,616 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:46:56,619 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:46:56,891 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 05:46:56,894 [main:95] - GENERATED = check(true)
2021-03-12 05:46:56,894 [main:58] - GENERATED VALUE OF TYPE Unit? = check(true)
2021-03-12 05:46:56,894 [main:61] - GENERATED IS CALL =true
2021-03-12 05:46:57,032 [main:67] - randomType = UInt
2021-03-12 05:46:57,166 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:46:57,197 [main:106] - GETTING Unit? from String
2021-03-12 05:46:57,217 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]]
2021-03-12 05:46:57,217 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]
2021-03-12 05:46:57,335 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:46:57,338 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:57,343 [main:117] - GENERATED CALL = (Child("keexl").value)?.forEachIndexed({a: Int, b: Char -> println()})
2021-03-12 05:46:57,343 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]]
2021-03-12 05:46:57,343 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8]
2021-03-12 05:46:57,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:57,587 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:57,590 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]
2021-03-12 05:46:57,707 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:46:57,709 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:57,832 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:46:57,835 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:46:58,091 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:46:58,094 [main:95] - GENERATED = check(false)
2021-03-12 05:46:58,094 [main:117] - GENERATED CALL = (Child("keexl").value)?.subSequence(902847447, 548324445).forEachIndexed({a: Int, b: Char -> check(false)})
2021-03-12 05:46:58,094 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]]
2021-03-12 05:46:58,094 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8]
2021-03-12 05:46:58,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:58,368 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:46:58,370 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]
2021-03-12 05:46:58,487 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:46:58,489 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:58,609 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:46:58,612 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:46:59,001 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:46:59,003 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:46:59,005 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:46:59,006 [main:95] - GENERATED = require(false, { "zqirm"})
2021-03-12 05:46:59,006 [main:117] - GENERATED CALL = (Child("keexl").value)?.subSequence(109260856, -893456184).forEach({a: Char -> require(false, { "zqirm"})})
2021-03-12 05:46:59,006 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]]
2021-03-12 05:46:59,006 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]
2021-03-12 05:46:59,124 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:46:59,126 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:46:59,271 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:46:59,275 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:46:59,666 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:46:59,668 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 05:46:59,670 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:46:59,790 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:46:59,793 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:47:00,045 [main:302] - generating value of type = Any false depth = 8
2021-03-12 05:47:00,045 [main:95] - GENERATED = println("ewnkk")
2021-03-12 05:47:00,045 [main:95] - GENERATED = repeat(-1682070660, {a: Int -> println("ewnkk")})
2021-03-12 05:47:00,046 [main:117] - GENERATED CALL = (Child("keexl").value)?.forEach({a: Char -> repeat(-1682070660, {a: Int -> println("ewnkk")})})
2021-03-12 05:47:00,046 [main:114] - replacement of {
        prope3.exceptionOrNull()?.let(x)
    } of type Unit? is (Child("keexl").value)?.forEach({a: Char -> repeat(-1682070660, {a: Int -> println("ewnkk")})})
2021-03-12 05:47:00,191 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 05:47:00,191 [main:66] - Compilation checking started
2021-03-12 05:47:00,197 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:47:00,197 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) (Child("keexl").value)?.forEach({a: Char -> repeat(-1682070660, {a: Int -> println("ewnkk")})})
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:00,199 [main:107] - replacing (prope0, Continuation<*>)
2021-03-12 05:47:00,199 [main:50] - replacing prope0 Continuation<*>
2021-03-12 05:47:00,199 [main:54] - Getting value of type Continuation<*>
2021-03-12 05:47:00,332 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 05:47:00,453 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:47:00,456 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:47:00,854 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:47:00,975 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:47:00,978 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:47:01,272 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:47:01,409 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:47:01,412 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:47:01,800 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 05:47:01,924 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:47:01,927 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:47:02,399 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 05:47:02,522 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:47:02,525 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:47:02,922 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 05:47:03,043 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:47:03,046 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:47:03,516 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-12 05:47:03,516 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:47:03,516 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:47:03,516 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:47:03,516 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:47:03,516 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:47:03,516 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:47:03,516 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 05:47:03,656 [main:67] - randomType = ULong
2021-03-12 05:47:03,773 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:47:03,806 [main:106] - GETTING Continuation<*> from Base
2021-03-12 05:47:03,809 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:47:03,816 [main:106] - GETTING Continuation<*> from Base
2021-03-12 05:47:03,817 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:47:03,818 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:47:03,818 [main:106] - GETTING Continuation<*> from String
2021-03-12 05:47:03,835 [main:111] - Cant find and generate replacement for prope0 type Continuation<*>
2021-03-12 05:47:03,835 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:47:03,835 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:47:03,835 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:47:03,949 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:47:03,953 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:47:04,106 [main:67] - randomType = UByte
2021-03-12 05:47:04,234 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:47:04,277 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:47:04,286 [main:106] - GETTING EmptyCoroutineContext from Base
2021-03-12 05:47:04,289 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:47:04,305 [main:106] - GETTING EmptyCoroutineContext from Base
2021-03-12 05:47:04,306 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:47:04,307 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 05:47:04,307 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:47:04,307 [main:107] - replacing (prope8.fu5(), Kla0?)
2021-03-12 05:47:04,307 [main:50] - replacing prope8.fu5() Kla0?
2021-03-12 05:47:04,307 [main:54] - Getting value of type Kla0?
2021-03-12 05:47:04,422 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:47:04,424 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)
2021-03-12 05:47:04,537 [main:194] - Type params = []
2021-03-12 05:47:04,653 [main:302] - generating value of type = Int true depth = 2
2021-03-12 05:47:04,655 [main:58] - GENERATED VALUE OF TYPE Kla0? = Kla0(-646894460)
2021-03-12 05:47:04,655 [main:61] - GENERATED IS CALL =true
2021-03-12 05:47:04,915 [main:67] - randomType = UInt?
2021-03-12 05:47:05,032 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:47:05,084 [main:106] - GETTING Kla0? from Child
2021-03-12 05:47:05,091 [main:106] - GETTING Kla0? from Base
2021-03-12 05:47:05,094 [main:106] - GETTING Kla0? from Base
2021-03-12 05:47:05,095 [main:106] - GETTING Kla0? from String
2021-03-12 05:47:05,111 [main:106] - GETTING Kla0? from Child
2021-03-12 05:47:05,112 [main:106] - GETTING Kla0? from Child
2021-03-12 05:47:05,112 [main:114] - replacement of prope8.fu5() of type Kla0? is Kla0(-646894460)
2021-03-12 05:47:05,273 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:47:05,273 [main:66] - Compilation checking started
2021-03-12 05:47:05,843 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:05,845 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 05:47:05,846 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 05:47:05,846 [main:54] - Getting value of type String
2021-03-12 05:47:05,969 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:05,971 [main:58] - GENERATED VALUE OF TYPE String = "nowsf"
2021-03-12 05:47:05,972 [main:61] - GENERATED IS CALL =false
2021-03-12 05:47:05,976 [main:67] - randomType = Int
2021-03-12 05:47:06,094 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:06,130 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7603119f]
2021-03-12 05:47:06,130 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@626f2092]
2021-03-12 05:47:06,131 [main:78] - Generated call from random type = (-990494806).toChar().lowercase()
2021-03-12 05:47:06,131 [main:106] - GETTING String from Child
2021-03-12 05:47:06,140 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0cddea]]
2021-03-12 05:47:06,140 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0cddea]
2021-03-12 05:47:06,259 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:06,386 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:06,502 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:47:06,505 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replace('꺢', '㇞', false)
2021-03-12 05:47:06,505 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]]
2021-03-12 05:47:06,505 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]
2021-03-12 05:47:06,622 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:06,625 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substringAfter('㎳', Child("keexl").value)
2021-03-12 05:47:06,625 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d81075]]
2021-03-12 05:47:06,625 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d81075]
2021-03-12 05:47:06,755 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:47:06,895 [main:43] - GENERATING CALL OF fun <T> listOf(): Iterable<Int> = TODO()
2021-03-12 05:47:06,898 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Iterable<Int> = TODO()
2021-03-12 05:47:07,037 [main:95] - GENERATED = listOf<Int>()
2021-03-12 05:47:07,037 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.slice(listOf<Int>())
2021-03-12 05:47:07,037 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7501e428]]
2021-03-12 05:47:07,037 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7501e428]
2021-03-12 05:47:07,166 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:07,169 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substringAfterLast('ꋖ', Child("keexl").value)
2021-03-12 05:47:07,169 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d1b229]]
2021-03-12 05:47:07,169 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d1b229]
2021-03-12 05:47:07,298 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:07,301 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substringBefore('؇', Child("keexl").value)
2021-03-12 05:47:07,301 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229916da]]
2021-03-12 05:47:07,301 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229916da]
2021-03-12 05:47:07,430 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:07,432 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substringBeforeLast('阇', Child("keexl").value)
2021-03-12 05:47:07,432 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c1dd2bc]]
2021-03-12 05:47:07,432 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c1dd2bc]
2021-03-12 05:47:07,564 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:47:07,568 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:47:07,570 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:47:07,570 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187]]
2021-03-12 05:47:07,570 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value
2021-03-12 05:47:07,570 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc34d11]]
2021-03-12 05:47:07,570 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc34d11]
2021-03-12 05:47:07,571 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.trimEnd()
2021-03-12 05:47:07,571 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51594484]]
2021-03-12 05:47:07,571 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51594484]
2021-03-12 05:47:07,571 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.uppercase()
2021-03-12 05:47:07,571 [main:114] - replacement of "tail-call optimization hit: method " of type String is ((inlineFun() as Child)).value.substringAfter('㎳', Child("keexl").value)
2021-03-12 05:47:07,706 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:47:07,706 [main:66] - Compilation checking started
2021-03-12 05:47:08,330 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfter('㎳', Child("keexl").value) + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:08,334 [main:107] - replacing (fu5(), Kla0)
2021-03-12 05:47:08,334 [main:50] - replacing fu5() Kla0
2021-03-12 05:47:08,334 [main:54] - Getting value of type Kla0
2021-03-12 05:47:08,501 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:47:08,503 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)
2021-03-12 05:47:08,637 [main:194] - Type params = []
2021-03-12 05:47:08,773 [main:302] - generating value of type = Int true depth = 2
2021-03-12 05:47:08,776 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(39148990)
2021-03-12 05:47:08,776 [main:61] - GENERATED IS CALL =true
2021-03-12 05:47:09,238 [main:67] - randomType = MutableMap<Sequence<ULong>, Char>
2021-03-12 05:47:09,239 [main:106] - GETTING Kla0 from Base
2021-03-12 05:47:09,243 [main:106] - GETTING Kla0 from Base
2021-03-12 05:47:09,244 [main:106] - GETTING Kla0 from Child
2021-03-12 05:47:09,253 [main:106] - GETTING Kla0 from Child
2021-03-12 05:47:09,254 [main:106] - GETTING Kla0 from Child
2021-03-12 05:47:09,254 [main:106] - GETTING Kla0 from String
2021-03-12 05:47:09,277 [main:114] - replacement of fu5() of type Kla0 is Kla0(39148990)
2021-03-12 05:47:09,419 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:47:09,419 [main:66] - Compilation checking started
2021-03-12 05:47:09,981 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfter('㎳', Child("keexl").value) + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:09,983 [main:107] - replacing (((inlineFun() as Child)).value.substringAfter('㎳', Child("keexl").value) + method + " has no state-machine ", String)
2021-03-12 05:47:09,983 [main:50] - replacing ((inlineFun() as Child)).value.substringAfter('㎳', Child("keexl").value) + method + " has no state-machine " String
2021-03-12 05:47:09,983 [main:54] - Getting value of type String
2021-03-12 05:47:10,122 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:10,124 [main:58] - GENERATED VALUE OF TYPE String = "jnuor"
2021-03-12 05:47:10,124 [main:61] - GENERATED IS CALL =false
2021-03-12 05:47:10,134 [main:67] - randomType = Kla1
2021-03-12 05:47:10,135 [main:106] - GETTING String from Base
2021-03-12 05:47:10,140 [main:106] - GETTING String from Child
2021-03-12 05:47:10,151 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47b0fdc9]]
2021-03-12 05:47:10,152 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47b0fdc9]
2021-03-12 05:47:10,308 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:10,310 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substring(121072527)
2021-03-12 05:47:10,310 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0a8237]]
2021-03-12 05:47:10,310 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0a8237]
2021-03-12 05:47:10,310 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.reversed()
2021-03-12 05:47:10,311 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc68453]]
2021-03-12 05:47:10,311 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc68453]
2021-03-12 05:47:10,451 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:10,586 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:10,589 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replaceAfterLast('', "poqbo", Child("keexl").value)
2021-03-12 05:47:10,589 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4764e06b]]
2021-03-12 05:47:10,589 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4764e06b]
2021-03-12 05:47:10,589 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.decapitalize()
2021-03-12 05:47:10,589 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d81075]]
2021-03-12 05:47:10,589 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d81075]
2021-03-12 05:47:10,707 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:47:10,855 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 05:47:10,858 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 05:47:10,993 [main:95] - GENERATED = mutableSetOf<Int>()
2021-03-12 05:47:10,993 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.slice(mutableSetOf<Int>())
2021-03-12 05:47:10,993 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e7072ff]]
2021-03-12 05:47:10,993 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e7072ff]
2021-03-12 05:47:11,129 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:47:11,135 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.removePrefix(StringBuilder())
2021-03-12 05:47:11,135 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7501e428]]
2021-03-12 05:47:11,135 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7501e428]
2021-03-12 05:47:11,264 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:11,267 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value)
2021-03-12 05:47:11,267 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51362b14]]
2021-03-12 05:47:11,267 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51362b14]
2021-03-12 05:47:11,267 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.lowercase()
2021-03-12 05:47:11,267 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a74b4c]]
2021-03-12 05:47:11,267 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a74b4c]
2021-03-12 05:47:11,267 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.toLowerCase()
2021-03-12 05:47:11,268 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]]
2021-03-12 05:47:11,268 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]
2021-03-12 05:47:11,402 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:11,533 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:11,535 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.substringAfter('驱', "cffwa")
2021-03-12 05:47:11,535 [main:114] - replacement of ((inlineFun() as Child)).value.substringAfter('㎳', Child("keexl").value) + method + " has no state-machine " of type String is ((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value)
2021-03-12 05:47:11,666 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:47:11,667 [main:66] - Compilation checking started
2021-03-12 05:47:12,263 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:12,266 [main:107] - replacing (prope0, Continuation<*>)
2021-03-12 05:47:12,266 [main:50] - replacing prope0 Continuation<*>
2021-03-12 05:47:12,266 [main:54] - Getting value of type Continuation<*>
2021-03-12 05:47:12,441 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 05:47:12,581 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:47:12,584 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:47:13,039 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:47:13,175 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:47:13,179 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:47:13,474 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:47:13,638 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:47:13,641 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:47:14,112 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:47:14,112 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:47:14,113 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 05:47:14,113 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 05:47:14,121 [main:67] - randomType = Kla2
2021-03-12 05:47:14,269 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:47:14,272 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}
2021-03-12 05:47:14,422 [main:194] - Type params = []
2021-03-12 05:47:14,590 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:47:14,600 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:47:14,601 [main:106] - GETTING Continuation<*> from String
2021-03-12 05:47:14,646 [main:106] - GETTING Continuation<*> from Base
2021-03-12 05:47:14,652 [main:106] - GETTING Continuation<*> from Base
2021-03-12 05:47:14,653 [main:106] - GETTING Continuation<*> from Child
2021-03-12 05:47:14,653 [main:111] - Cant find and generate replacement for prope0 type Continuation<*>
2021-03-12 05:47:14,653 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 05:47:14,653 [main:50] - replacing numberOfSuspensions Int
2021-03-12 05:47:14,653 [main:54] - Getting value of type Int
2021-03-12 05:47:14,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:14,795 [main:58] - GENERATED VALUE OF TYPE Int = -2140858445
2021-03-12 05:47:14,795 [main:61] - GENERATED IS CALL =false
2021-03-12 05:47:14,946 [main:67] - randomType = Boolean?
2021-03-12 05:47:15,090 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:47:15,105 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]
2021-03-12 05:47:15,265 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:47:15,268 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12cad0bf]
2021-03-12 05:47:15,404 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:47:15,406 [main:78] - Generated call from random type = (false)?.compareTo(false).times(90)
2021-03-12 05:47:15,407 [main:106] - GETTING Int from Base
2021-03-12 05:47:15,410 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base[DeserializedSimpleFunctionDescriptor@40dc01ff], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]]
2021-03-12 05:47:15,410 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base[DeserializedSimpleFunctionDescriptor@40dc01ff]
2021-03-12 05:47:15,536 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:47:15,536 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]
2021-03-12 05:47:15,680 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:47:15,682 [main:117] - GENERATED CALL = (inlineFun()).equals("wdbwj").compareTo(false)
2021-03-12 05:47:15,682 [main:114] - replacement of numberOfSuspensions of type Int is (false)?.compareTo(false).times(90)
2021-03-12 05:47:15,823 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:47:15,824 [main:66] - Compilation checking started
2021-03-12 05:47:16,456 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (false)?.compareTo(false).times(90) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:16,458 [main:107] - replacing ({
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}, Function1<Continuation<Ty0>, Unit>)
2021-03-12 05:47:16,458 [main:50] - replacing {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
} Function1<Continuation<Ty0>, Unit>
2021-03-12 05:47:16,458 [main:54] - Getting value of type Function1<Continuation<Ty0>, Unit>
2021-03-12 05:47:16,640 [main:302] - generating value of type = Function1<Continuation<Ty0>, Unit> false depth = 0
2021-03-12 05:47:16,643 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:47:16,826 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:47:16,829 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:47:17,126 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:47:17,129 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:47:17,278 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:47:17,281 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:47:17,572 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 05:47:17,574 [main:95] - GENERATED = check(true)
2021-03-12 05:47:17,574 [main:95] - GENERATED = contract({ check(true)})
2021-03-12 05:47:17,575 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Ty0>, Unit> = {a: Continuation<Ty0> -> contract({ check(true)})}
2021-03-12 05:47:17,575 [main:61] - GENERATED IS CALL =false
2021-03-12 05:47:18,907 [main:67] - randomType = Function2<MutableMap<Char, LinkedHashSet<Kla4>>, Function2<String, Function1<ULong, Kla0>, Byte?>, Kla6>
2021-03-12 05:47:18,909 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from Child
2021-03-12 05:47:18,922 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from Base
2021-03-12 05:47:18,938 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from Child
2021-03-12 05:47:18,939 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from String
2021-03-12 05:47:18,967 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from Base
2021-03-12 05:47:18,969 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from Child
2021-03-12 05:47:18,969 [main:114] - replacement of {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
} of type Function1<Continuation<Ty0>, Unit> is {a: Continuation<Ty0> -> contract({ check(true)})}
2021-03-12 05:47:19,089 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:47:19,090 [main:66] - Compilation checking started
2021-03-12 05:47:19,458 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> contract({ check(true)})}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (false)?.compareTo(false).times(90) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:19,460 [main:107] - replacing ("!!! $this", String)
2021-03-12 05:47:19,460 [main:50] - replacing "!!! $this" String
2021-03-12 05:47:19,460 [main:54] - Getting value of type String
2021-03-12 05:47:19,613 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:19,615 [main:58] - GENERATED VALUE OF TYPE String = "tykvo"
2021-03-12 05:47:19,615 [main:61] - GENERATED IS CALL =false
2021-03-12 05:47:19,623 [main:67] - randomType = Kla2
2021-03-12 05:47:19,752 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:47:19,754 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}
2021-03-12 05:47:19,887 [main:194] - Type params = []
2021-03-12 05:47:20,030 [main:149] - GENERATING call of type public final suspend fun fu6(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@65917fe4]
2021-03-12 05:47:20,031 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]
2021-03-12 05:47:20,191 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:20,324 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:20,326 [main:78] - Generated call from random type = (Kla2()).fu6().substringAfter('', "gliqi")
2021-03-12 05:47:20,326 [main:106] - GETTING String from String
2021-03-12 05:47:20,343 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@776a6bbc]]
2021-03-12 05:47:20,343 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@776a6bbc]
2021-03-12 05:47:20,344 [main:117] - GENERATED CALL = (Child("keexl").value).prependIndent(Child("keexl").value)
2021-03-12 05:47:20,344 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eae5851]]
2021-03-12 05:47:20,344 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8]
2021-03-12 05:47:20,474 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:20,605 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:20,607 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eae5851]
2021-03-12 05:47:20,764 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:20,897 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:20,899 [main:117] - GENERATED CALL = (Child("keexl").value).subSequence(35925733, -1825763133).substring(-1215758681, 490285924)
2021-03-12 05:47:20,899 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]]
2021-03-12 05:47:20,899 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77351846]
2021-03-12 05:47:21,037 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:21,181 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:21,185 [main:117] - GENERATED CALL = (Child("keexl").value).substringAfter('䃥', "goaik")
2021-03-12 05:47:21,185 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ca63bd]]
2021-03-12 05:47:21,185 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ca63bd]
2021-03-12 05:47:21,323 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:21,454 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:21,456 [main:117] - GENERATED CALL = (Child("keexl").value).padEnd(-1546189330, '擺')
2021-03-12 05:47:21,456 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76c45f20]]
2021-03-12 05:47:21,456 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76c45f20]
2021-03-12 05:47:21,589 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:21,591 [main:117] - GENERATED CALL = (Child("keexl").value).repeat(-1431016754)
2021-03-12 05:47:21,591 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d4cc6f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68225705]]
2021-03-12 05:47:21,591 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d4cc6f]
2021-03-12 05:47:21,725 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:21,727 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68225705]
2021-03-12 05:47:21,728 [main:117] - GENERATED CALL = (Child("keexl").value).get(1261854642).titlecase()
2021-03-12 05:47:21,728 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51594484]]
2021-03-12 05:47:21,728 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51594484]
2021-03-12 05:47:21,728 [main:117] - GENERATED CALL = (Child("keexl").value).uppercase()
2021-03-12 05:47:21,728 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b71b494]]
2021-03-12 05:47:21,728 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b71b494]
2021-03-12 05:47:21,728 [main:117] - GENERATED CALL = (Child("keexl").value).replaceIndent(Child("keexl").value)
2021-03-12 05:47:21,728 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229916da]]
2021-03-12 05:47:21,728 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229916da]
2021-03-12 05:47:21,860 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:21,862 [main:117] - GENERATED CALL = (Child("keexl").value).substringBeforeLast('總', Child("keexl").value)
2021-03-12 05:47:21,862 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d4cc6f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a17d6e5]]
2021-03-12 05:47:21,862 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d4cc6f]
2021-03-12 05:47:21,991 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:21,993 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a17d6e5]
2021-03-12 05:47:21,993 [main:117] - GENERATED CALL = (Child("keexl").value).get(1882837399).uppercase()
2021-03-12 05:47:21,993 [main:114] - replacement of "!!! $this" of type String is (Kla2()).fu6().substringAfter('', "gliqi")
2021-03-12 05:47:22,121 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:47:22,122 [main:66] - Compilation checking started
2021-03-12 05:47:22,495 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else (Kla2()).fu6().substringAfter('', "gliqi")

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (false)?.compareTo(false).times(90) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:22,497 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 05:47:22,498 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 05:47:22,498 [main:54] - Getting value of type String
2021-03-12 05:47:22,636 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:22,639 [main:58] - GENERATED VALUE OF TYPE String = "fqluu"
2021-03-12 05:47:22,639 [main:61] - GENERATED IS CALL =false
2021-03-12 05:47:22,801 [main:67] - randomType = UByte
2021-03-12 05:47:22,933 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:47:22,974 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7046c6cd]
2021-03-12 05:47:22,974 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f2becfc]
2021-03-12 05:47:23,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:23,125 [main:78] - Generated call from random type = (103.toUByte()).toShort().toString(-1745894190)
2021-03-12 05:47:23,126 [main:106] - GETTING String from Child
2021-03-12 05:47:23,137 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b5935b3]]
2021-03-12 05:47:23,137 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b5935b3]
2021-03-12 05:47:23,274 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:23,276 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.takeLast(136953301)
2021-03-12 05:47:23,277 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a6bbcb0]]
2021-03-12 05:47:23,277 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a6bbcb0]
2021-03-12 05:47:23,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:23,408 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.take(-1042553124)
2021-03-12 05:47:23,408 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36d5f1b5]]
2021-03-12 05:47:23,408 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36d5f1b5]
2021-03-12 05:47:23,542 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:23,545 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replaceBeforeLast('䜀', Child("keexl").value, Child("keexl").value)
2021-03-12 05:47:23,545 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@776a6bbc]]
2021-03-12 05:47:23,545 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@776a6bbc]
2021-03-12 05:47:23,545 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.prependIndent(Child("keexl").value)
2021-03-12 05:47:23,545 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b71b494]]
2021-03-12 05:47:23,545 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b71b494]
2021-03-12 05:47:23,676 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:23,679 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replaceIndent("jgbbq")
2021-03-12 05:47:23,679 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@380bb41d]]
2021-03-12 05:47:23,679 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@380bb41d]
2021-03-12 05:47:23,795 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:23,932 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:24,083 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:47:24,090 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.replaceRange(-623070208, -444375767, "zxryj")
2021-03-12 05:47:24,090 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ca63bd]]
2021-03-12 05:47:24,090 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ca63bd]
2021-03-12 05:47:24,242 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:24,373 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:24,375 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.padEnd(-1899248185, '⨢')
2021-03-12 05:47:24,375 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d637f8c]]
2021-03-12 05:47:24,375 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d637f8c]
2021-03-12 05:47:24,505 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:47:24,640 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:47:24,643 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:47:24,920 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:47:24,922 [main:95] - GENERATED = StringBuilder("zhszj")
2021-03-12 05:47:24,922 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.removeSurrounding(StringBuilder("zhszj"))
2021-03-12 05:47:24,923 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e7072ff]]
2021-03-12 05:47:24,923 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e7072ff]
2021-03-12 05:47:25,078 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:47:25,084 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.removePrefix("wcfix")
2021-03-12 05:47:25,084 [main:113] - Case = [public final val value: kotlin.String defined in Child[PropertyDescriptorImpl@64b1187], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51594484]]
2021-03-12 05:47:25,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51594484]
2021-03-12 05:47:25,084 [main:117] - GENERATED CALL = ((inlineFun() as Child)).value.uppercase()
2021-03-12 05:47:25,084 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is ((inlineFun() as Child)).value.replaceIndent("jgbbq")
2021-03-12 05:47:25,220 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:47:25,220 [main:66] - Compilation checking started
2021-03-12 05:47:25,794 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (false)?.compareTo(false).times(90) + ", got " + prope5)
        if (prope6) error(((inlineFun() as Child)).value.replaceIndent("jgbbq"))
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:25,797 [main:107] - replacing ("OK", String)
2021-03-12 05:47:25,797 [main:50] - replacing "OK" String
2021-03-12 05:47:25,797 [main:54] - Getting value of type String
2021-03-12 05:47:25,974 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:25,976 [main:58] - GENERATED VALUE OF TYPE String = "kasax"
2021-03-12 05:47:25,977 [main:61] - GENERATED IS CALL =false
2021-03-12 05:47:26,125 [main:67] - randomType = Char?
2021-03-12 05:47:26,256 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:47:26,283 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7c8cca4f]
2021-03-12 05:47:26,284 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229c85ac]
2021-03-12 05:47:26,412 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:26,414 [main:78] - Generated call from random type = ('㛋')?.toLong().toString(-726050500)
2021-03-12 05:47:26,415 [main:106] - GETTING String from String
2021-03-12 05:47:26,433 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4764e06b]]
2021-03-12 05:47:26,433 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4764e06b]
2021-03-12 05:47:26,433 [main:117] - GENERATED CALL = (Child("keexl").value).decapitalize()
2021-03-12 05:47:26,433 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d4cc6f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@626f2092]]
2021-03-12 05:47:26,433 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d4cc6f]
2021-03-12 05:47:26,565 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:26,567 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@626f2092]
2021-03-12 05:47:26,567 [main:117] - GENERATED CALL = (Child("keexl").value).get(1690575818).lowercase()
2021-03-12 05:47:26,567 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a74b4c]]
2021-03-12 05:47:26,567 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64a74b4c]
2021-03-12 05:47:26,567 [main:117] - GENERATED CALL = (Child("keexl").value).toLowerCase()
2021-03-12 05:47:26,567 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a6bbcb0]]
2021-03-12 05:47:26,568 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a6bbcb0]
2021-03-12 05:47:26,697 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:26,700 [main:117] - GENERATED CALL = (Child("keexl").value).take(-1372005712)
2021-03-12 05:47:26,700 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d4cc6f], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24c1d8d2]]
2021-03-12 05:47:26,700 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@15d4cc6f]
2021-03-12 05:47:26,831 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:26,834 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24c1d8d2]
2021-03-12 05:47:26,834 [main:117] - GENERATED CALL = (Child("keexl").value).get(-1492907126).plus(Child("keexl").value)
2021-03-12 05:47:26,834 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4390df7f]]
2021-03-12 05:47:26,834 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4390df7f]
2021-03-12 05:47:26,963 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:26,966 [main:117] - GENERATED CALL = (Child("keexl").value).drop(-248993725)
2021-03-12 05:47:26,966 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c69fab]]
2021-03-12 05:47:26,966 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c69fab]
2021-03-12 05:47:27,090 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:47:27,090 [main:117] - GENERATED CALL = (Child("keexl").value).plus("kzynp")
2021-03-12 05:47:27,090 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76c45f20]]
2021-03-12 05:47:27,090 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8]
2021-03-12 05:47:27,226 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:27,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:27,365 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76c45f20]
2021-03-12 05:47:27,508 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:27,511 [main:117] - GENERATED CALL = (Child("keexl").value).subSequence(-912532591, 465244264).repeat(-1917349261)
2021-03-12 05:47:27,511 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1455b35e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a01f53]]
2021-03-12 05:47:27,511 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a01f53]
2021-03-12 05:47:27,643 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:27,645 [main:117] - GENERATED CALL = (Child("keexl").value).length.toString(-1043209986)
2021-03-12 05:47:27,645 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1682b859]]
2021-03-12 05:47:27,645 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1682b859]
2021-03-12 05:47:27,766 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:47:27,769 [main:117] - GENERATED CALL = (Child("keexl").value).replaceIndentByMargin("tsrqu", Child("keexl").value)
2021-03-12 05:47:27,769 [main:114] - replacement of "OK" of type String is (Child("keexl").value).get(-1492907126).plus(Child("keexl").value)
2021-03-12 05:47:27,904 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:47:27,905 [main:66] - Compilation checking started
2021-03-12 05:47:28,498 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != (Child("keexl").value).get(-1492907126).plus(Child("keexl").value)) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (false)?.compareTo(false).times(90) + ", got " + prope5)
        if (prope6) error(((inlineFun() as Child)).value.replaceIndent("jgbbq"))
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:28,500 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 05:47:28,500 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 05:47:28,500 [main:54] - Getting value of type Ty0
2021-03-12 05:47:28,694 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 05:47:28,702 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 05:47:28,715 [main:67] - randomType = Kla6
2021-03-12 05:47:28,881 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:47:28,883 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 05:47:28,889 [main:106] - GETTING Ty0 from Child
2021-03-12 05:47:28,896 [main:106] - GETTING Ty0 from Base
2021-03-12 05:47:28,899 [main:106] - GETTING Ty0 from Child
2021-03-12 05:47:28,900 [main:106] - GETTING Ty0 from Base
2021-03-12 05:47:28,900 [main:106] - GETTING Ty0 from String
2021-03-12 05:47:28,917 [main:106] - GETTING Ty0 from Child
2021-03-12 05:47:28,917 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 05:47:28,917 [main:107] - replacing (resume(Kla0(42)), Unit?)
2021-03-12 05:47:28,918 [main:50] - replacing resume(Kla0(42)) Unit?
2021-03-12 05:47:28,918 [main:54] - Getting value of type Unit?
2021-03-12 05:47:29,053 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 05:47:29,191 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:47:29,194 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:47:29,496 [main:302] - generating value of type = Any false depth = 3
2021-03-12 05:47:29,496 [main:95] - GENERATED = println("bsmbt")
2021-03-12 05:47:29,496 [main:58] - GENERATED VALUE OF TYPE Unit? = println("bsmbt")
2021-03-12 05:47:29,496 [main:61] - GENERATED IS CALL =true
2021-03-12 05:47:29,672 [main:67] - randomType = Kla5<Kla4>
2021-03-12 05:47:29,823 [main:302] - generating value of type = Kla5<Kla4> false depth = 0
2021-03-12 05:47:29,825 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 05:47:30,291 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-12 05:47:30,293 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:47:30,311 [main:149] - GENERATING call of type public abstract fun fu8(exception: kotlin.Throwable): kotlin.Unit defined in Kla5[SimpleFunctionDescriptorImpl@26e94253]
2021-03-12 05:47:30,444 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:47:30,449 [main:78] - Generated call from random type = (Kla8).fu8(ClassCastException())
2021-03-12 05:47:30,450 [main:106] - GETTING Unit? from Base
2021-03-12 05:47:30,454 [main:106] - GETTING Unit? from Base
2021-03-12 05:47:30,455 [main:106] - GETTING Unit? from Child
2021-03-12 05:47:30,462 [main:106] - GETTING Unit? from String
2021-03-12 05:47:30,478 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]]
2021-03-12 05:47:30,479 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8]
2021-03-12 05:47:30,620 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:30,758 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:30,761 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]
2021-03-12 05:47:30,907 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:47:30,910 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:47:31,070 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:47:31,074 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:47:31,558 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:47:31,561 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:47:31,563 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:47:31,563 [main:95] - GENERATED = require(true, { "ehoxd"})
2021-03-12 05:47:31,564 [main:117] - GENERATED CALL = (Child("keexl").value)?.subSequence(-514324677, 1697520281).forEachIndexed({a: Int, b: Char -> require(true, { "ehoxd"})})
2021-03-12 05:47:31,564 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]]
2021-03-12 05:47:31,564 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@43d5fdd8]
2021-03-12 05:47:31,696 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:31,839 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:31,841 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]
2021-03-12 05:47:31,974 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:47:31,977 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:47:32,122 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:47:32,125 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:47:32,626 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:47:32,628 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:47:32,630 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:47:32,630 [main:95] - GENERATED = require(true, { "ccbcy"})
2021-03-12 05:47:32,631 [main:117] - GENERATED CALL = (Child("keexl").value)?.subSequence(697456341, -626197812).forEach({a: Char -> require(true, { "ccbcy"})})
2021-03-12 05:47:32,631 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]]
2021-03-12 05:47:32,631 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34bcebb5]
2021-03-12 05:47:32,780 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:47:32,782 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:47:32,788 [main:117] - GENERATED CALL = (Child("keexl").value)?.forEach({a: Char -> println()})
2021-03-12 05:47:32,788 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]]
2021-03-12 05:47:32,788 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44d23b61]
2021-03-12 05:47:32,921 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:47:32,923 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:47:33,077 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:47:33,080 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:47:33,523 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:47:33,525 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:47:33,527 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:47:33,527 [main:95] - GENERATED = check(false, { "uygpb"})
2021-03-12 05:47:33,528 [main:117] - GENERATED CALL = (Child("keexl").value)?.forEachIndexed({a: Int, b: Char -> check(false, { "uygpb"})})
2021-03-12 05:47:33,528 [main:114] - replacement of resume(Kla0(42)) of type Unit? is println("bsmbt")
2021-03-12 05:47:33,664 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:47:33,664 [main:66] - Compilation checking started
2021-03-12 05:47:34,058 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.println("bsmbt")
    if (prope3 != (Child("keexl").value).get(-1492907126).plus(Child("keexl").value)) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (false)?.compareTo(false).times(90) + ", got " + prope5)
        if (prope6) error(((inlineFun() as Child)).value.replaceIndent("jgbbq"))
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:34,060 [main:107] - replacing (this, Int?)
2021-03-12 05:47:34,061 [main:50] - replacing this Int?
2021-03-12 05:47:34,061 [main:54] - Getting value of type Int?
2021-03-12 05:47:34,197 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:47:34,199 [main:58] - GENERATED VALUE OF TYPE Int? = -1053148897
2021-03-12 05:47:34,199 [main:61] - GENERATED IS CALL =false
2021-03-12 05:47:34,350 [main:67] - randomType = ULong
2021-03-12 05:47:34,487 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:47:34,525 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@8ad933b]
2021-03-12 05:47:34,656 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:47:34,658 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c77f2fb]
2021-03-12 05:47:34,659 [main:78] - Generated call from random type = (3855282879244689963.toULong()).compareTo(19.toUByte()).dec()
2021-03-12 05:47:34,659 [main:106] - GETTING Int? from Base
2021-03-12 05:47:34,664 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base[DeserializedSimpleFunctionDescriptor@40dc01ff], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]]
2021-03-12 05:47:34,664 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base[DeserializedSimpleFunctionDescriptor@40dc01ff]
2021-03-12 05:47:34,802 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:47:34,802 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13c6f521]
2021-03-12 05:47:34,935 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:47:34,938 [main:117] - GENERATED CALL = (inlineFun())?.equals("ihokc").compareTo(false)
2021-03-12 05:47:34,938 [main:114] - replacement of this of type Int? is -1053148897
2021-03-12 05:47:35,073 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 05:47:35,074 [main:66] - Compilation checking started
2021-03-12 05:47:35,666 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


open class Base

class Child(val value: String) : Base()

fun foo(a: Base): Child = a as Child


inline fun inlineFun(s: (Child) -> Base = ::foo): Base {
    return s(Child("OK"))
}

fun box(): String {
    return (inlineFun() as Child).value
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int?.fu2() =
    if (this == 42) "OK" else "!!! $-1053148897"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return Kla0(-646894460)!!.s.fu2()
    }

    suspend fun fu7(): String {
        return Kla0(39148990)!!.s.fu2()
    }
}

fun box937(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != ((inlineFun() as Child)).value.takeLastWhile({a: Char -> false})) return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != (Child("keexl").value).get(-1492907126).plus(Child("keexl").value)) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "pfthu"
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(((inlineFun() as Child)).value.substringAfterLast('帓', Child("keexl").value) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = (inlineFun() as Child).equals("intkz").compareTo(false)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Array<Int?>(-1169246414, {a: Int -> 1474183805})).size.inc()..numberOfSuspensions) {
            if (prope5 != i) error(((inlineFun() as Child)).value.trimEnd())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (false)?.compareTo(false).times(90) + ", got " + prope5)
        if (prope6) error(((inlineFun() as Child)).value.replaceIndent("jgbbq"))
        prope7()
        if (checkFinished && !prope6) error((Child("keexl").value).filter({a: Char -> false}))
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla7().prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:47:35,668 [main:107] - replacing ("Continuation " + prope0, String)
2021-03-12 05:47:35,668 [main:50] - replacing "Continuation " + prope0 String
2021-03-12 05:47:35,668 [main:54] - Getting value of type String
