2021-03-12 01:09:38,395 [main:66] - Compilation checking started
2021-03-12 01:09:39,574 [main:302] - generating value of type = C<TT> false depth = 0
2021-03-12 01:09:39,575 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:40,125 [main:194] - Type params = [Byte]
2021-03-12 01:09:40,342 [main:302] - generating value of type = Byte true depth = 2
2021-03-12 01:09:40,345 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:09:40,346 [main:66] - Compilation checking started
2021-03-12 01:09:40,582 [main:49] - Result = false
Text:
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT> = C(-65)) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}


2021-03-12 01:09:40,820 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:41,329 [main:194] - Type params = [IC<Float>]
2021-03-12 01:09:41,542 [main:302] - generating value of type = IC<Float> false depth = 1
2021-03-12 01:09:41,543 [main:112] - generating klass IC text = inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}
2021-03-12 01:09:41,753 [main:194] - Type params = [Float]
2021-03-12 01:09:41,932 [main:302] - generating value of type = C<Float> false depth = 3
2021-03-12 01:09:41,932 [main:112] - generating klass C text = class C<T>(val t: IC<Float>) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:42,413 [main:194] - Type params = [Float]
2021-03-12 01:09:42,602 [main:302] - generating value of type = IC<Float> false depth = 5
2021-03-12 01:09:42,602 [main:112] - generating klass IC text = inline class IC<TT>(val c: C<Float>) {
    fun foo(): Int = c.hashCode()
}
2021-03-12 01:09:42,882 [main:194] - Type params = [Float]
2021-03-12 01:09:43,148 [main:302] - generating value of type = C<Float> false depth = 7
2021-03-12 01:09:43,149 [main:112] - generating klass C text = class C<T>(val t: IC<Float>) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:43,426 [main:194] - Type params = [Float]
2021-03-12 01:09:43,619 [main:302] - generating value of type = IC<Float> false depth = 9
2021-03-12 01:09:43,620 [main:112] - generating klass IC text = inline class IC<TT>(val c: C<Float>) {
    fun foo(): Int = c.hashCode()
}
2021-03-12 01:09:44,429 [main:194] - Type params = [Float]
2021-03-12 01:09:44,601 [main:302] - generating value of type = C<Float> false depth = 11
2021-03-12 01:09:44,602 [main:112] - generating klass C text = class C<T>(val t: IC<Float>) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:45,276 [main:194] - Type params = [Float]
2021-03-12 01:09:45,446 [main:302] - generating value of type = IC<Float> false depth = 13
2021-03-12 01:09:45,446 [main:112] - generating klass IC text = inline class IC<TT>(val c: C<Float>) {
    fun foo(): Int = c.hashCode()
}
2021-03-12 01:09:45,771 [main:194] - Type params = [Float]
2021-03-12 01:09:45,954 [main:302] - generating value of type = C<Float> false depth = 15
2021-03-12 01:09:45,955 [main:112] - generating klass C text = class C<T>(val t: IC<Float>) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:46,225 [main:194] - Type params = [Float]
2021-03-12 01:09:46,385 [main:302] - generating value of type = IC<Float> false depth = 17
2021-03-12 01:09:46,390 [main:112] - generating klass IC text = inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}
2021-03-12 01:09:46,993 [main:194] - Type params = [Float]
2021-03-12 01:09:47,150 [main:302] - generating value of type = C<Float> false depth = 1
2021-03-12 01:09:47,151 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:47,569 [main:194] - Type params = [Float]
2021-03-12 01:09:47,723 [main:302] - generating value of type = Float true depth = 3
2021-03-12 01:09:47,980 [main:45] - Trying to change 11 nodes
2021-03-12 01:09:47,982 [main:53] - replacing (C(42), C<Int>)
2021-03-12 01:09:47,982 [main:50] - replacing C(42) C<Int>
2021-03-12 01:09:47,982 [main:54] - Getting value of type C<Int>
2021-03-12 01:09:48,057 [main:302] - generating value of type = C<Int> false depth = 0
2021-03-12 01:09:48,057 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:48,397 [main:194] - Type params = [Int]
2021-03-12 01:09:48,548 [main:302] - generating value of type = Int true depth = 2
2021-03-12 01:09:48,549 [main:58] - GENERATED VALUE OF TYPE C<Int> = C<Int>(-740309826)
2021-03-12 01:09:48,549 [main:61] - GENERATED IS CALL =true
2021-03-12 01:09:48,893 [main:67] - randomType = C<Array<UByte>>?
2021-03-12 01:09:48,967 [main:302] - generating value of type = C<Array<UByte>> false depth = 0
2021-03-12 01:09:48,967 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:49,135 [main:194] - Type params = [Array<UByte>]
2021-03-12 01:09:49,294 [main:302] - generating value of type = Array<UByte> false depth = 2
2021-03-12 01:09:49,386 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: UByte): Array<UByte> = TODO()
2021-03-12 01:09:49,388 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: UByte): Array<UByte> = TODO()
2021-03-12 01:09:49,496 [main:302] - generating value of type = UByte true depth = 5
2021-03-12 01:09:49,497 [main:95] - GENERATED = arrayOf<UByte>(70.toUByte())
2021-03-12 01:09:49,533 [main:106] - GETTING C<Int> from IC<Int>
2021-03-12 01:09:49,578 [main:113] - Case = [public final val c: C<kotlin.Int> defined in IC[PropertyDescriptorImpl@5200bc3f]]
2021-03-12 01:09:49,578 [main:117] - GENERATED CALL = (ic).c
2021-03-12 01:09:49,579 [main:61] - replacement of C(42) of type C<Int> is C<Int>(-740309826)
2021-03-12 01:09:49,672 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:09:49,673 [main:66] - Compilation checking started
2021-03-12 01:09:50,051 [main:53] - Result = true
Text:
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C<Int>(-740309826))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}


2021-03-12 01:09:50,053 [main:53] - replacing (IC<Int>(C<Int>(-740309826)), IC<Int>)
2021-03-12 01:09:50,053 [main:50] - replacing IC<Int>(C<Int>(-740309826)) IC<Int>
2021-03-12 01:09:50,053 [main:54] - Getting value of type IC<Int>
2021-03-12 01:09:50,140 [main:302] - generating value of type = IC<Int> false depth = 0
2021-03-12 01:09:50,141 [main:112] - generating klass IC text = inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}
2021-03-12 01:09:50,469 [main:194] - Type params = [Int]
2021-03-12 01:09:50,628 [main:302] - generating value of type = C<Int> false depth = 2
2021-03-12 01:09:50,628 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:50,993 [main:194] - Type params = [Int]
2021-03-12 01:09:51,161 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:09:51,162 [main:58] - GENERATED VALUE OF TYPE IC<Int> = IC<Int>(C<Int>(-1770292327))
2021-03-12 01:09:51,162 [main:61] - GENERATED IS CALL =true
2021-03-12 01:09:51,401 [main:67] - randomType = Sequence<C<C<String>>>
2021-03-12 01:09:51,403 [main:106] - GETTING IC<Int> from Int
2021-03-12 01:09:51,499 [main:106] - GETTING IC<Int> from C<Float>
2021-03-12 01:09:51,511 [main:106] - GETTING IC<Int> from IC<Float>
2021-03-12 01:09:51,526 [main:106] - GETTING IC<Int> from Int
2021-03-12 01:09:51,526 [main:106] - GETTING IC<Int> from IC<Int>
2021-03-12 01:09:51,540 [main:61] - replacement of IC<Int>(C<Int>(-740309826)) of type IC<Int> is IC<Int>(C<Int>(-1770292327))
2021-03-12 01:09:51,622 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:09:51,622 [main:66] - Compilation checking started
2021-03-12 01:09:51,959 [main:53] - Result = true
Text:
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C<Int>(-1770292327))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}


2021-03-12 01:09:51,960 [main:53] - replacing (42, Int)
2021-03-12 01:09:51,960 [main:50] - replacing 42 Int
2021-03-12 01:09:51,960 [main:54] - Getting value of type Int
2021-03-12 01:09:52,073 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:09:52,073 [main:58] - GENERATED VALUE OF TYPE Int = -1812957760
2021-03-12 01:09:52,074 [main:61] - GENERATED IS CALL =false
2021-03-12 01:09:52,303 [main:67] - randomType = C<Byte>
2021-03-12 01:09:52,374 [main:302] - generating value of type = C<Byte> false depth = 0
2021-03-12 01:09:52,374 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:52,863 [main:194] - Type params = [Byte]
2021-03-12 01:09:53,033 [main:302] - generating value of type = Byte true depth = 2
2021-03-12 01:09:53,043 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7343e98a]
2021-03-12 01:09:53,044 [main:78] - Generated call from random type = (C<Byte>(50)).t.countTrailingZeroBits()
2021-03-12 01:09:53,045 [main:106] - GETTING Int from C<Float>
2021-03-12 01:09:53,052 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c64f9f4]]
2021-03-12 01:09:53,053 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c64f9f4]
2021-03-12 01:09:53,125 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:09:53,126 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.compareTo(66)
2021-03-12 01:09:53,126 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2c656a]]
2021-03-12 01:09:53,126 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2c656a]
2021-03-12 01:09:53,127 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.toRawBits()
2021-03-12 01:09:53,127 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7fe9c803]]
2021-03-12 01:09:53,127 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7fe9c803]
2021-03-12 01:09:53,127 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.toInt()
2021-03-12 01:09:53,128 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6e008a27]]
2021-03-12 01:09:53,128 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6e008a27]
2021-03-12 01:09:53,128 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.roundToInt()
2021-03-12 01:09:53,128 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1a2c73b0]]
2021-03-12 01:09:53,128 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1a2c73b0]
2021-03-12 01:09:53,129 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.toBits()
2021-03-12 01:09:53,129 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@de3762b], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@543d7cbe]]
2021-03-12 01:09:53,129 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@de3762b]
2021-03-12 01:09:53,202 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:09:53,204 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@543d7cbe]
2021-03-12 01:09:53,276 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:09:53,277 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).equals("vrklm").compareTo(false)
2021-03-12 01:09:53,277 [main:61] - replacement of 42 of type Int is (IC<Float>(C<Float>(0.38448638f)).c).t.toBits()
2021-03-12 01:09:53,348 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:09:53,349 [main:53] - replacing ("FAIL", String)
2021-03-12 01:09:53,349 [main:50] - replacing "FAIL" String
2021-03-12 01:09:53,349 [main:54] - Getting value of type String
2021-03-12 01:09:53,431 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:09:53,432 [main:58] - GENERATED VALUE OF TYPE String = "yxjay"
2021-03-12 01:09:53,432 [main:61] - GENERATED IS CALL =false
2021-03-12 01:09:54,010 [main:67] - randomType = Map<C<Double>, C<Long?>>
2021-03-12 01:09:54,012 [main:106] - GETTING String from IC<Float>
2021-03-12 01:09:54,020 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45529217]]
2021-03-12 01:09:54,020 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:54,021 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45529217]
2021-03-12 01:09:54,092 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:09:54,093 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().toString(465046515)
2021-03-12 01:09:54,093 [main:61] - replacement of "FAIL" of type String is (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().toString(465046515)
2021-03-12 01:09:54,163 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:09:54,164 [main:66] - Compilation checking started
2021-03-12 01:09:54,394 [main:49] - Result = false
Text:
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C<Int>(-1770292327))

    if (ic.foo() != 42) return (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().toString(465046515)
    return "OK"
}


2021-03-12 01:09:54,395 [main:53] - replacing ("FAIL", String)
2021-03-12 01:09:54,395 [main:50] - replacing "FAIL" String
2021-03-12 01:09:54,395 [main:54] - Getting value of type String
2021-03-12 01:09:54,470 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:09:54,471 [main:58] - GENERATED VALUE OF TYPE String = "polqr"
2021-03-12 01:09:54,471 [main:61] - GENERATED IS CALL =false
2021-03-12 01:09:54,635 [main:67] - randomType = ULong?
2021-03-12 01:09:54,714 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:09:54,789 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3a96c540]
2021-03-12 01:09:54,789 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@551b8ddb]
2021-03-12 01:09:54,791 [main:78] - Generated call from random type = (8157790247018724576.toULong())?.toShort().toString(C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).hashCode())
2021-03-12 01:09:54,792 [main:106] - GETTING String from IC<Float>
2021-03-12 01:09:54,804 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45529217]]
2021-03-12 01:09:54,804 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:54,804 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45529217]
2021-03-12 01:09:54,806 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().toString(C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).hashCode())
2021-03-12 01:09:54,806 [main:61] - replacement of "FAIL" of type String is (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().toString(C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).hashCode())
2021-03-12 01:09:54,879 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:09:54,879 [main:66] - Compilation checking started
2021-03-12 01:09:55,125 [main:49] - Result = false
Text:
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C<Int>(-1770292327))

    if (ic.foo() != 42) return (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().toString(C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).hashCode())
    return "OK"
}


2021-03-12 01:09:55,126 [main:53] - replacing (c.hashCode(), Int)
2021-03-12 01:09:55,126 [main:50] - replacing c.hashCode() Int
2021-03-12 01:09:55,126 [main:54] - Getting value of type Int
2021-03-12 01:09:55,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:09:55,200 [main:58] - GENERATED VALUE OF TYPE Int = -1518253799
2021-03-12 01:09:55,200 [main:61] - GENERATED IS CALL =false
2021-03-12 01:09:55,201 [main:67] - randomType = Boolean
2021-03-12 01:09:55,274 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:09:55,288 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@543d7cbe]
2021-03-12 01:09:55,359 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:09:55,360 [main:78] - Generated call from random type = (true).compareTo(true).absoluteValue
2021-03-12 01:09:55,361 [main:106] - GETTING Int from C<Float>
2021-03-12 01:09:55,367 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c64f9f4]]
2021-03-12 01:09:55,367 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c64f9f4]
2021-03-12 01:09:55,449 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:09:55,450 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.compareTo(69)
2021-03-12 01:09:55,450 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6e008a27]]
2021-03-12 01:09:55,450 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6e008a27]
2021-03-12 01:09:55,451 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.roundToInt()
2021-03-12 01:09:55,451 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7fe9c803]]
2021-03-12 01:09:55,451 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7fe9c803]
2021-03-12 01:09:55,451 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.toInt()
2021-03-12 01:09:55,451 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1a2c73b0]]
2021-03-12 01:09:55,451 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1a2c73b0]
2021-03-12 01:09:55,452 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.toBits()
2021-03-12 01:09:55,452 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@de3762b], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@543d7cbe]]
2021-03-12 01:09:55,452 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@de3762b]
2021-03-12 01:09:55,524 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:09:55,525 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@543d7cbe]
2021-03-12 01:09:55,598 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:09:55,598 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).equals("tnokc").compareTo(true)
2021-03-12 01:09:55,599 [main:113] - Case = [public final val t: kotlin.Float defined in C[PropertyDescriptorImpl@2b7e9d48], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2c656a]]
2021-03-12 01:09:55,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e2c656a]
2021-03-12 01:09:55,599 [main:117] - GENERATED CALL = (IC<Float>(C<Float>(0.38448638f)).c).t.toRawBits()
2021-03-12 01:09:55,599 [main:61] - replacement of c.hashCode() of type Int is (IC<Float>(C<Float>(0.38448638f)).c).t.roundToInt()
2021-03-12 01:09:55,670 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:09:55,670 [main:66] - Compilation checking started
2021-03-12 01:09:55,848 [main:49] - Result = false
Text:
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = (IC<Float>(C<Float>(0.38448638f)).c).t.roundToInt()
}

fun box(): String {
    val ic = IC<Int>(C<Int>(-1770292327))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}


2021-03-12 01:09:55,849 [main:53] - replacing (c.hashCode(), Int)
2021-03-12 01:09:55,849 [main:50] - replacing c.hashCode() Int
2021-03-12 01:09:55,849 [main:54] - Getting value of type Int
2021-03-12 01:09:55,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:09:55,920 [main:58] - GENERATED VALUE OF TYPE Int = -915732555
2021-03-12 01:09:55,920 [main:61] - GENERATED IS CALL =false
2021-03-12 01:09:55,997 [main:67] - randomType = Sequence<Int>
2021-03-12 01:09:55,998 [main:106] - GETTING Int from IC<Float>
2021-03-12 01:09:56,009 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in IC[SimpleFunctionDescriptorImpl@6e9b501c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@543d7cbe]]
2021-03-12 01:09:56,009 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in IC[SimpleFunctionDescriptorImpl@6e9b501c]
2021-03-12 01:09:56,082 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:09:56,082 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@543d7cbe]
2021-03-12 01:09:56,166 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:09:56,167 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).equals("oambz").compareTo(false)
2021-03-12 01:09:56,167 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@509e3c03]]
2021-03-12 01:09:56,167 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,167 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@509e3c03]
2021-03-12 01:09:56,238 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:09:56,239 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().coerceAtLeast(94329886)
2021-03-12 01:09:56,239 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@4c517be4]]
2021-03-12 01:09:56,239 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,240 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().absoluteValue
2021-03-12 01:09:56,240 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2c44833f]]
2021-03-12 01:09:56,240 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,240 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2c44833f]
2021-03-12 01:09:56,241 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().coerceAtMost(IC<Float>(C<Float>(0.38448638f)).foo())
2021-03-12 01:09:56,241 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@294db5ee]]
2021-03-12 01:09:56,241 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,241 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@294db5ee]
2021-03-12 01:09:56,312 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:09:56,312 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().times(-51)
2021-03-12 01:09:56,313 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c1b41a1]]
2021-03-12 01:09:56,313 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,313 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c1b41a1]
2021-03-12 01:09:56,314 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().ushr(C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).hashCode())
2021-03-12 01:09:56,314 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5a9f6c6c]]
2021-03-12 01:09:56,314 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5a9f6c6c]
2021-03-12 01:09:56,315 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().rotateLeft(IC<Float>(C<Float>(0.38448638f)).foo())
2021-03-12 01:09:56,315 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f27093]]
2021-03-12 01:09:56,315 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,315 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16f27093]
2021-03-12 01:09:56,389 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:09:56,390 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().minus(-22)
2021-03-12 01:09:56,390 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e17b0b2]]
2021-03-12 01:09:56,390 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,390 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e17b0b2]
2021-03-12 01:09:56,391 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().toInt()
2021-03-12 01:09:56,391 [main:113] - Case = [public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51a6748f]]
2021-03-12 01:09:56,391 [main:149] - GENERATING call of type public final fun foo(): kotlin.Int defined in IC[SimpleFunctionDescriptorImpl@527c79f4]
2021-03-12 01:09:56,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51a6748f]
2021-03-12 01:09:56,392 [main:117] - GENERATED CALL = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().countOneBits()
2021-03-12 01:09:56,392 [main:61] - replacement of c.hashCode() of type Int is (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().minus(-22)
2021-03-12 01:09:56,463 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:09:56,463 [main:66] - Compilation checking started
2021-03-12 01:09:56,666 [main:49] - Result = false
Text:
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = (C<IC<Float>>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>(IC<Float>(C<Float>())))))))).t).foo().minus(-22)
}

fun box(): String {
    val ic = IC<Int>(C<Int>(-1770292327))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}


2021-03-12 01:09:56,738 [main:119] - TRYING TO REPLACE CONSTANT 1770292327
2021-03-12 01:09:56,809 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:09:56,809 [main:66] - Compilation checking started
2021-03-12 01:09:57,098 [main:53] - Result = true
Text:
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C<Int>(IC<Float>(C<Float>(0.38448638f)).foo()))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}


2021-03-12 01:09:57,132 [main:41] - AFTER TRY 0 res = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}


2021-03-12 01:09:57,288 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:57,516 [main:194] - Type params = [Double]
2021-03-12 01:09:57,672 [main:302] - generating value of type = Double true depth = 1
2021-03-12 01:09:57,673 [main:112] - generating klass IC text = inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}
2021-03-12 01:09:58,162 [main:194] - Type params = [Boolean]
2021-03-12 01:09:58,306 [main:302] - generating value of type = C<Boolean> false depth = 1
2021-03-12 01:09:58,306 [main:112] - generating klass C text = class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}
2021-03-12 01:09:58,577 [main:194] - Type params = [Boolean]
2021-03-12 01:09:58,719 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 01:09:58,870 [main:43] - Try №0
2021-03-12 01:10:12,480 [main:48] - Already checked
2021-03-12 01:10:17,072 [main:69] - Trying to insert suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }
2021-03-12 01:10:17,167 [main:66] - Compilation checking started
2021-03-12 01:10:18,292 [main:103] - Trying to change 184 nodes
2021-03-12 01:10:18,293 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 01:10:18,294 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 01:10:18,294 [main:54] - Getting value of type Boolean
2021-03-12 01:10:18,455 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:10:18,457 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:10:18,457 [main:61] - GENERATED IS CALL =false
2021-03-12 01:10:18,465 [main:67] - randomType = Kla0
2021-03-12 01:10:18,616 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:10:18,618 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)
2021-03-12 01:10:18,764 [main:194] - Type params = []
2021-03-12 01:10:18,924 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874]
2021-03-12 01:10:19,071 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:19,072 [main:78] - Generated call from random type = (Kla0(null)).s?.equals("gaugq")!!
2021-03-12 01:10:19,073 [main:106] - GETTING Boolean from Int
2021-03-12 01:10:19,153 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@729eebf1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@63e5c781]]
2021-03-12 01:10:19,154 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@729eebf1]
2021-03-12 01:10:19,154 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@63e5c781]
2021-03-12 01:10:19,299 [main:117] - GENERATED CALL = (ic.foo()).toLong().equals(null)
2021-03-12 01:10:19,299 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@739f6bff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@615dff98]]
2021-03-12 01:10:19,299 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@739f6bff]
2021-03-12 01:10:19,299 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@615dff98]
2021-03-12 01:10:19,437 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:19,438 [main:117] - GENERATED CALL = (ic.foo()).div(C<Double>(0.4424191861075667).t).equals("badqc")
2021-03-12 01:10:19,438 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@739f6bff], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@59721a17]]
2021-03-12 01:10:19,438 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@739f6bff]
2021-03-12 01:10:19,438 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@59721a17]
2021-03-12 01:10:19,439 [main:117] - GENERATED CALL = (ic.foo()).div(C<Double>(0.4424191861075667).t).isInfinite()
2021-03-12 01:10:19,439 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1dcca638], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874]]
2021-03-12 01:10:19,439 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1dcca638]
2021-03-12 01:10:19,588 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:10:19,590 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874]
2021-03-12 01:10:19,729 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:19,729 [main:117] - GENERATED CALL = (ic.foo()).compareTo(2096548458).equals("pvusu")
2021-03-12 01:10:19,730 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a46de2a], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6263089d]]
2021-03-12 01:10:19,730 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a46de2a]
2021-03-12 01:10:19,730 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6263089d]
2021-03-12 01:10:19,730 [main:117] - GENERATED CALL = (ic.foo()).toFloat().isNaN()
2021-03-12 01:10:19,730 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@52c35f2c], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@59721a17]]
2021-03-12 01:10:19,730 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@52c35f2c]
2021-03-12 01:10:19,730 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@59721a17]
2021-03-12 01:10:19,731 [main:117] - GENERATED CALL = (ic.foo()).toDouble().isInfinite()
2021-03-12 01:10:19,731 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@571a4a65]]
2021-03-12 01:10:19,731 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:19,731 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@571a4a65]
2021-03-12 01:10:19,731 [main:117] - GENERATED CALL = (ic.foo()).toChar().isISOControl()
2021-03-12 01:10:19,731 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a4d7542]]
2021-03-12 01:10:19,731 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:19,731 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a4d7542]
2021-03-12 01:10:19,732 [main:117] - GENERATED CALL = (ic.foo()).toChar().isSurrogate()
2021-03-12 01:10:19,732 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@b435ab]]
2021-03-12 01:10:19,732 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874]
2021-03-12 01:10:19,875 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:19,876 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@b435ab]
2021-03-12 01:10:20,021 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:10:20,025 [main:117] - GENERATED CALL = (ic.foo()).equals("zshyh").xor(true)
2021-03-12 01:10:20,025 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@52c35f2c], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3c18b48e]]
2021-03-12 01:10:20,025 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@52c35f2c]
2021-03-12 01:10:20,025 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3c18b48e]
2021-03-12 01:10:20,026 [main:117] - GENERATED CALL = (ic.foo()).toDouble().isFinite()
2021-03-12 01:10:20,026 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (ic.foo()).toLong().equals(null)
2021-03-12 01:10:20,167 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:10:20,167 [main:66] - Compilation checking started
2021-03-12 01:10:20,881 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:20,884 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-12 01:10:20,885 [main:50] - replacing prope2 Result<Ty0>
2021-03-12 01:10:20,885 [main:54] - Getting value of type Result<Ty0>
2021-03-12 01:10:21,034 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 01:10:21,181 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:10:21,185 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:10:21,522 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 01:10:21,522 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 01:10:21,530 [main:67] - randomType = Kla3
2021-03-12 01:10:21,665 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 01:10:21,667 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 01:10:21,815 [main:194] - Type params = []
2021-03-12 01:10:21,954 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:10:22,102 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:10:22,105 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:10:22,472 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:10:22,655 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:10:22,659 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:10:23,115 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 01:10:23,266 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:10:23,269 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:10:23,771 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:10:23,772 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:10:23,772 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:10:23,802 [main:106] - GETTING Result<Ty0> from IC<Int>
2021-03-12 01:10:23,818 [main:106] - GETTING Result<Ty0> from Double
2021-03-12 01:10:23,885 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 01:10:23,953 [main:106] - GETTING Result<Ty0> from C<Boolean>
2021-03-12 01:10:23,961 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 01:10:23,962 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 01:10:23,963 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-12 01:10:23,963 [main:107] - replacing (prope2, Result<Any?>)
2021-03-12 01:10:23,964 [main:50] - replacing prope2 Result<Any?>
2021-03-12 01:10:23,964 [main:54] - Getting value of type Result<Any?>
2021-03-12 01:10:24,097 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 01:10:24,236 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 01:10:24,240 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 01:10:24,536 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 01:10:24,538 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:10:24,538 [main:95] - GENERATED = runCatching<Any?>({ "kvywk"})
2021-03-12 01:10:24,538 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "kvywk"})
2021-03-12 01:10:24,539 [main:61] - GENERATED IS CALL =true
2021-03-12 01:10:24,550 [main:67] - randomType = Kla0?
2021-03-12 01:10:24,674 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:10:24,677 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)
2021-03-12 01:10:24,833 [main:194] - Type params = []
2021-03-12 01:10:24,959 [main:302] - generating value of type = Int true depth = 2
2021-03-12 01:10:24,977 [main:106] - GETTING Result<Any?> from IC<Int>
2021-03-12 01:10:24,996 [main:106] - GETTING Result<Any?> from C<Boolean>
2021-03-12 01:10:25,006 [main:106] - GETTING Result<Any?> from Double
2021-03-12 01:10:25,088 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:10:25,149 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:10:25,151 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:10:25,152 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "kvywk"})
2021-03-12 01:10:25,277 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:10:25,278 [main:66] - Compilation checking started
2021-03-12 01:10:25,933 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
this.prope2 = runCatching<Any?>({ "kvywk"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val ic = IC<Int>(C(42))
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:25,935 [main:107] - replacing (prope2, Any?)
2021-03-12 01:10:25,935 [main:50] - replacing prope2 Any?
2021-03-12 01:10:25,936 [main:54] - Getting value of type Any?
2021-03-12 01:10:26,088 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:26,088 [main:58] - GENERATED VALUE OF TYPE Any? = "yugzm"
2021-03-12 01:10:26,088 [main:61] - GENERATED IS CALL =false
2021-03-12 01:10:27,952 [main:67] - randomType = LinkedHashSet<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>?
2021-03-12 01:10:28,077 [main:302] - generating value of type = LinkedHashSet<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>> false depth = 0
2021-03-12 01:10:28,227 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>): LinkedHashSet<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>> = TODO()
2021-03-12 01:10:28,231 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>): LinkedHashSet<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>> = TODO()
2021-03-12 01:10:28,550 [main:302] - generating value of type = Collection<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>> false depth = 3
2021-03-12 01:10:28,692 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Collection<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>> = TODO()
2021-03-12 01:10:28,697 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Collection<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>> = TODO()
2021-03-12 01:10:28,846 [main:95] - GENERATED = linkedSetOf<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>()
2021-03-12 01:10:28,846 [main:95] - GENERATED = LinkedHashSet<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>(linkedSetOf<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>())
2021-03-12 01:10:29,216 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@1887db0]
2021-03-12 01:10:29,216 [main:78] - Generated call from random type = (LinkedHashSet<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>(linkedSetOf<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>()))?.toJSON()
2021-03-12 01:10:29,216 [main:114] - replacement of prope2 of type Any? is (LinkedHashSet<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>(linkedSetOf<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>()))?.toJSON()
2021-03-12 01:10:29,354 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 01:10:29,355 [main:66] - Compilation checking started
2021-03-12 01:10:29,846 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
this.(LinkedHashSet<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>(linkedSetOf<Function1<MutableMap<Function1<C<Kla8>, Set<Char?>>, ULong>, Double>>()))?.toJSON() = runCatching<Any?>({ "kvywk"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val ic = IC<Int>(C(42))
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:29,849 [main:107] - replacing (checkFinished, Boolean)
2021-03-12 01:10:29,850 [main:50] - replacing checkFinished Boolean
2021-03-12 01:10:29,850 [main:54] - Getting value of type Boolean
2021-03-12 01:10:30,004 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:10:30,006 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:10:30,007 [main:61] - GENERATED IS CALL =false
2021-03-12 01:10:30,181 [main:67] - randomType = Double
2021-03-12 01:10:30,333 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:10:30,391 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6deb4efb]
2021-03-12 01:10:30,392 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74cf5bfe]
2021-03-12 01:10:30,393 [main:78] - Generated call from random type = (0.831737730942396).toChar().isWhitespace()
2021-03-12 01:10:30,394 [main:106] - GETTING Boolean from Int
2021-03-12 01:10:30,461 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@440f66ec]]
2021-03-12 01:10:30,461 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874]
2021-03-12 01:10:30,609 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:30,609 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@440f66ec]
2021-03-12 01:10:30,610 [main:117] - GENERATED CALL = (ic.foo()).equals("qgloo").not()
2021-03-12 01:10:30,610 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a4d7542]]
2021-03-12 01:10:30,610 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:30,610 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a4d7542]
2021-03-12 01:10:30,610 [main:117] - GENERATED CALL = (ic.foo()).toChar().isSurrogate()
2021-03-12 01:10:30,610 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@739f6bff], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@59721a17]]
2021-03-12 01:10:30,610 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@739f6bff]
2021-03-12 01:10:30,611 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@59721a17]
2021-03-12 01:10:30,611 [main:117] - GENERATED CALL = (ic.foo()).div(C<Double>(0.4424191861075667).t).isInfinite()
2021-03-12 01:10:30,611 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68faa4bb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@58e08252]]
2021-03-12 01:10:30,611 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68faa4bb]
2021-03-12 01:10:30,747 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:10:30,750 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@58e08252]
2021-03-12 01:10:30,880 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:30,881 [main:117] - GENERATED CALL = (ic.foo()).rangeTo(-23).equals("tkogg")
2021-03-12 01:10:30,881 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a46de2a], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5503a22]]
2021-03-12 01:10:30,881 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a46de2a]
2021-03-12 01:10:30,881 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5503a22]
2021-03-12 01:10:30,881 [main:117] - GENERATED CALL = (ic.foo()).toFloat().isFinite()
2021-03-12 01:10:30,882 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37013205]]
2021-03-12 01:10:30,882 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:30,882 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37013205]
2021-03-12 01:10:30,882 [main:117] - GENERATED CALL = (ic.foo()).toChar().isLowSurrogate()
2021-03-12 01:10:30,882 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@52c35f2c], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@59721a17]]
2021-03-12 01:10:30,882 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@52c35f2c]
2021-03-12 01:10:30,882 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@59721a17]
2021-03-12 01:10:30,882 [main:117] - GENERATED CALL = (ic.foo()).toDouble().isInfinite()
2021-03-12 01:10:30,882 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@729eebf1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@63e5c781]]
2021-03-12 01:10:30,882 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@729eebf1]
2021-03-12 01:10:30,883 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@63e5c781]
2021-03-12 01:10:31,002 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:31,003 [main:117] - GENERATED CALL = (ic.foo()).toLong().equals("wtrjb")
2021-03-12 01:10:31,003 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@739f6bff], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3c18b48e]]
2021-03-12 01:10:31,003 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@739f6bff]
2021-03-12 01:10:31,134 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:10:31,136 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3c18b48e]
2021-03-12 01:10:31,136 [main:117] - GENERATED CALL = (ic.foo()).div(0.6169636943679737).isFinite()
2021-03-12 01:10:31,136 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d05f22]]
2021-03-12 01:10:31,137 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:31,137 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37d05f22]
2021-03-12 01:10:31,137 [main:117] - GENERATED CALL = (ic.foo()).toChar().isHighSurrogate()
2021-03-12 01:10:31,137 [main:114] - replacement of checkFinished of type Boolean is (ic.foo()).toChar().isSurrogate()
2021-03-12 01:10:31,275 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:10:31,276 [main:66] - Compilation checking started
2021-03-12 01:10:31,982 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
this.prope2 = runCatching<Any?>({ "kvywk"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val ic = IC<Int>(C(42))
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val ic = IC<Int>(C(42))
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((ic.foo()).toChar().isSurrogate() && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:31,984 [main:107] - replacing (prope2, Any?)
2021-03-12 01:10:31,985 [main:50] - replacing prope2 Any?
2021-03-12 01:10:31,985 [main:54] - Getting value of type Any?
2021-03-12 01:10:32,117 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:32,117 [main:58] - GENERATED VALUE OF TYPE Any? = "gxkla"
2021-03-12 01:10:32,118 [main:61] - GENERATED IS CALL =false
2021-03-12 01:10:32,260 [main:67] - randomType = HashSet<Kla6>
2021-03-12 01:10:32,389 [main:302] - generating value of type = HashSet<Kla6> false depth = 0
2021-03-12 01:10:32,521 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla6): HashSet<Kla6> = TODO()
2021-03-12 01:10:32,524 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla6): HashSet<Kla6> = TODO()
2021-03-12 01:10:32,663 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-12 01:10:32,665 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 01:10:32,665 [main:95] - GENERATED = hashSetOf<Kla6>(Kla6())
2021-03-12 01:10:32,819 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@6c1d338f]
2021-03-12 01:10:32,819 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@249a1bb1]
2021-03-12 01:10:32,939 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:10:32,941 [main:78] - Generated call from random type = (hashSetOf<Kla6>(Kla6())).toArray().get(-1650717512)
2021-03-12 01:10:32,943 [main:106] - GETTING Any? from Int
2021-03-12 01:10:32,978 [main:106] - GETTING Any? from C<Boolean>
2021-03-12 01:10:32,982 [main:106] - GETTING Any? from Double
2021-03-12 01:10:33,010 [main:106] - GETTING Any? from Int
2021-03-12 01:10:33,010 [main:106] - GETTING Any? from IC<Int>
2021-03-12 01:10:33,018 [main:106] - GETTING Any? from Int
2021-03-12 01:10:33,018 [main:114] - replacement of prope2 of type Any? is "gxkla"
2021-03-12 01:10:33,147 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:10:33,148 [main:66] - Compilation checking started
2021-03-12 01:10:33,520 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
this."gxkla" = runCatching<Any?>({ "kvywk"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val ic = IC<Int>(C(42))
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val ic = IC<Int>(C(42))
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((ic.foo()).toChar().isSurrogate() && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:33,524 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 01:10:33,525 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 01:10:33,526 [main:54] - Getting value of type String
2021-03-12 01:10:33,670 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:10:33,673 [main:58] - GENERATED VALUE OF TYPE String = "iqaya"
2021-03-12 01:10:33,673 [main:61] - GENERATED IS CALL =false
2021-03-12 01:10:33,814 [main:67] - randomType = UInt
2021-03-12 01:10:33,938 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:10:33,967 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2667cd93]
2021-03-12 01:10:33,968 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e015640]
2021-03-12 01:10:34,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:10:34,105 [main:78] - Generated call from random type = (1101191231.toUInt()).toUShort().toString(-2109246129)
2021-03-12 01:10:34,106 [main:106] - GETTING String from Int
2021-03-12 01:10:34,146 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@729eebf1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4eb2a]]
2021-03-12 01:10:34,146 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@729eebf1]
2021-03-12 01:10:34,146 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4eb2a]
2021-03-12 01:10:34,146 [main:117] - GENERATED CALL = (ic.foo()).toLong().toString(C<Double>(0.4424191861075667).hashCode())
2021-03-12 01:10:34,146 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12d54905], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@551b8ddb]]
2021-03-12 01:10:34,147 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12d54905]
2021-03-12 01:10:34,147 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@551b8ddb]
2021-03-12 01:10:34,147 [main:117] - GENERATED CALL = (ic.foo()).toShort().toString(IC<Boolean>(C<Boolean>(false)).foo())
2021-03-12 01:10:34,147 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@653ef8ca]]
2021-03-12 01:10:34,147 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:34,147 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@653ef8ca]
2021-03-12 01:10:34,147 [main:117] - GENERATED CALL = (ic.foo()).toChar().lowercase()
2021-03-12 01:10:34,147 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57d63d79], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@730798d4]]
2021-03-12 01:10:34,147 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57d63d79]
2021-03-12 01:10:34,148 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@730798d4]
2021-03-12 01:10:34,274 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:10:34,276 [main:117] - GENERATED CALL = (ic.foo()).toByte().toString(1712746974)
2021-03-12 01:10:34,276 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48be74df]]
2021-03-12 01:10:34,276 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:34,276 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48be74df]
2021-03-12 01:10:34,395 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:10:34,398 [main:117] - GENERATED CALL = (ic.foo()).toChar().plus("pgqay")
2021-03-12 01:10:34,398 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45529217]]
2021-03-12 01:10:34,398 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45529217]
2021-03-12 01:10:34,398 [main:117] - GENERATED CALL = (ic.foo()).toString(C<Double>(0.4424191861075667).hashCode())
2021-03-12 01:10:34,398 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1290fed2]]
2021-03-12 01:10:34,398 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:34,398 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1290fed2]
2021-03-12 01:10:34,398 [main:117] - GENERATED CALL = (ic.foo()).toChar().uppercase()
2021-03-12 01:10:34,398 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22e8d5e3]]
2021-03-12 01:10:34,398 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:34,399 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22e8d5e3]
2021-03-12 01:10:34,399 [main:117] - GENERATED CALL = (ic.foo()).toChar().titlecase()
2021-03-12 01:10:34,399 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@268f8cc2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45529217]]
2021-03-12 01:10:34,399 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@268f8cc2]
2021-03-12 01:10:34,399 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45529217]
2021-03-12 01:10:34,399 [main:117] - GENERATED CALL = (ic.foo()).toInt().toString(ic.foo())
2021-03-12 01:10:34,399 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d2ecf65], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4eb2a]]
2021-03-12 01:10:34,399 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d2ecf65]
2021-03-12 01:10:34,520 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:10:34,522 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4eb2a]
2021-03-12 01:10:34,522 [main:117] - GENERATED CALL = (ic.foo()).div(2507012179240432858).toString(ic.foo())
2021-03-12 01:10:34,522 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (1101191231.toUInt()).toUShort().toString(-2109246129)
2021-03-12 01:10:34,643 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:10:34,643 [main:66] - Compilation checking started
2021-03-12 01:10:35,298 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
this.prope2 = runCatching<Any?>({ "kvywk"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val ic = IC<Int>(C(42))
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val ic = IC<Int>(C(42))
if (c !is CoroutineStackFrame) error("Continuation " + c + (1101191231.toUInt()).toUShort().toString(-2109246129))
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val ic = IC<Int>(C(42))
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((ic.foo()).toChar().isSurrogate() && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:35,302 [main:107] - replacing (prope2.isSuccess, Boolean)
2021-03-12 01:10:35,302 [main:50] - replacing prope2.isSuccess Boolean
2021-03-12 01:10:35,302 [main:54] - Getting value of type Boolean
2021-03-12 01:10:35,451 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:10:35,453 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:10:35,453 [main:61] - GENERATED IS CALL =false
2021-03-12 01:10:35,457 [main:67] - randomType = Int
2021-03-12 01:10:35,578 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:10:35,619 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@52c35f2c]
2021-03-12 01:10:35,619 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3c18b48e]
2021-03-12 01:10:35,619 [main:78] - Generated call from random type = (-307595843).toDouble().isFinite()
2021-03-12 01:10:35,620 [main:106] - GETTING Boolean from Int
2021-03-12 01:10:35,650 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47e3994e]]
2021-03-12 01:10:35,650 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:35,650 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47e3994e]
2021-03-12 01:10:35,650 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).toChar().isLowerCase()
2021-03-12 01:10:35,650 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12d54905], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@73b93f68]]
2021-03-12 01:10:35,650 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12d54905]
2021-03-12 01:10:35,650 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@73b93f68]
2021-03-12 01:10:35,775 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:35,775 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).toShort().equals("gfhan")
2021-03-12 01:10:35,775 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74cf5bfe]]
2021-03-12 01:10:35,775 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:35,775 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74cf5bfe]
2021-03-12 01:10:35,776 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).toChar().isWhitespace()
2021-03-12 01:10:35,776 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63acedb8]]
2021-03-12 01:10:35,776 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:35,776 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63acedb8]
2021-03-12 01:10:35,901 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:10:36,032 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:10:36,035 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).toChar().equals('輒', false)
2021-03-12 01:10:36,035 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c2871db]]
2021-03-12 01:10:36,035 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:36,036 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c2871db]
2021-03-12 01:10:36,036 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).toChar().isLetterOrDigit()
2021-03-12 01:10:36,036 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@440f66ec]]
2021-03-12 01:10:36,036 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874]
2021-03-12 01:10:36,158 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:36,158 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@440f66ec]
2021-03-12 01:10:36,162 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).equals("kyxnp").not()
2021-03-12 01:10:36,162 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874]]
2021-03-12 01:10:36,162 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4954874]
2021-03-12 01:10:36,285 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:36,286 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).equals("ffxua")
2021-03-12 01:10:36,286 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5345bcce]]
2021-03-12 01:10:36,286 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:36,286 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5345bcce]
2021-03-12 01:10:36,286 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).toChar().isTitleCase()
2021-03-12 01:10:36,286 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37013205]]
2021-03-12 01:10:36,286 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b8686ef]
2021-03-12 01:10:36,286 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37013205]
2021-03-12 01:10:36,286 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).toChar().isLowSurrogate()
2021-03-12 01:10:36,287 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68faa4bb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@58e08252]]
2021-03-12 01:10:36,287 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68faa4bb]
2021-03-12 01:10:36,411 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:10:36,413 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@58e08252]
2021-03-12 01:10:36,543 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:36,543 [main:117] - GENERATED CALL = (IC<Boolean>(C<Boolean>(false)).foo()).rangeTo(-62).equals("odvbh")
2021-03-12 01:10:36,543 [main:114] - replacement of prope2.isSuccess of type Boolean is (IC<Boolean>(C<Boolean>(false)).foo()).toChar().isLowerCase()
2021-03-12 01:10:36,702 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:10:36,703 [main:66] - Compilation checking started
2021-03-12 01:10:37,418 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
this.prope2 = runCatching<Any?>({ "kvywk"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val ic = IC<Int>(C(42))
if ((IC<Boolean>(C<Boolean>(false)).foo()).toChar().isLowerCase()) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val ic = IC<Int>(C(42))
if (c !is CoroutineStackFrame) error("Continuation " + c + (1101191231.toUInt()).toUShort().toString(-2109246129))
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val ic = IC<Int>(C(42))
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((ic.foo()).toChar().isSurrogate() && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:37,420 [main:107] - replacing (Kla2(), Kla2)
2021-03-12 01:10:37,421 [main:50] - replacing Kla2() Kla2
2021-03-12 01:10:37,421 [main:54] - Getting value of type Kla2
2021-03-12 01:10:37,549 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:10:37,551 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}
2021-03-12 01:10:37,682 [main:194] - Type params = []
2021-03-12 01:10:37,815 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 01:10:37,815 [main:61] - GENERATED IS CALL =true
2021-03-12 01:10:37,962 [main:67] - randomType = Kla7?
2021-03-12 01:10:38,085 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 01:10:38,088 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val ic = IC<Int>(C(42))
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((ic.foo()).toChar().isSurrogate() && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 01:10:38,099 [main:106] - GETTING Kla2 from IC<Int>
2021-03-12 01:10:38,111 [main:106] - GETTING Kla2 from Int
2021-03-12 01:10:38,178 [main:106] - GETTING Kla2 from Int
2021-03-12 01:10:38,179 [main:106] - GETTING Kla2 from C<Boolean>
2021-03-12 01:10:38,185 [main:106] - GETTING Kla2 from Double
2021-03-12 01:10:38,221 [main:106] - GETTING Kla2 from Int
2021-03-12 01:10:38,221 [main:114] - replacement of Kla2() of type Kla2 is Kla2()
2021-03-12 01:10:38,341 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:10:38,344 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 01:10:38,344 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 01:10:38,344 [main:54] - Getting value of type Throwable?
2021-03-12 01:10:38,479 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 01:10:38,613 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:10:38,616 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:10:38,895 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:10:38,897 [main:95] - GENERATED = UnsupportedOperationException("fokub")
2021-03-12 01:10:38,897 [main:58] - GENERATED VALUE OF TYPE Throwable? = UnsupportedOperationException("fokub")
2021-03-12 01:10:38,898 [main:61] - GENERATED IS CALL =true
2021-03-12 01:10:39,040 [main:67] - randomType = Byte
2021-03-12 01:10:39,164 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:10:39,214 [main:106] - GETTING Throwable? from C<Boolean>
2021-03-12 01:10:39,219 [main:106] - GETTING Throwable? from Double
2021-03-12 01:10:39,252 [main:106] - GETTING Throwable? from Int
2021-03-12 01:10:39,284 [main:106] - GETTING Throwable? from IC<Int>
2021-03-12 01:10:39,293 [main:106] - GETTING Throwable? from Int
2021-03-12 01:10:39,293 [main:106] - GETTING Throwable? from Int
2021-03-12 01:10:39,293 [main:114] - replacement of exceptionOrNull() of type Throwable? is UnsupportedOperationException("fokub")
2021-03-12 01:10:39,425 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:10:39,426 [main:66] - Compilation checking started
2021-03-12 01:10:39,815 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    val ic = IC<Int>(C(42))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
prope2.UnsupportedOperationException("fokub")?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
this.prope2 = runCatching<Any?>({ "kvywk"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val ic = IC<Int>(C(42))
if ((IC<Boolean>(C<Boolean>(false)).foo()).toChar().isLowerCase()) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val ic = IC<Int>(C(42))
if (c !is CoroutineStackFrame) error("Continuation " + c + (1101191231.toUInt()).toUShort().toString(-2109246129))
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val ic = IC<Int>(C(42))
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((ic.foo()).toChar().isSurrogate() && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:39,817 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:10:39,817 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:10:39,817 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:10:39,941 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:10:39,947 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:10:39,951 [main:67] - randomType = UShort
2021-03-12 01:10:40,075 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:10:40,111 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:10:40,142 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:10:40,143 [main:106] - GETTING EmptyCoroutineContext from IC<Int>
2021-03-12 01:10:40,151 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:10:40,151 [main:106] - GETTING EmptyCoroutineContext from Double
2021-03-12 01:10:40,190 [main:106] - GETTING EmptyCoroutineContext from C<Boolean>
2021-03-12 01:10:40,196 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:10:40,196 [main:107] - replacing (this, Int?)
2021-03-12 01:10:40,196 [main:50] - replacing this Int?
2021-03-12 01:10:40,196 [main:54] - Getting value of type Int?
2021-03-12 01:10:40,328 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:10:40,331 [main:58] - GENERATED VALUE OF TYPE Int? = 94505762
2021-03-12 01:10:40,331 [main:61] - GENERATED IS CALL =false
2021-03-12 01:10:40,339 [main:67] - randomType = Kla2
2021-03-12 01:10:40,471 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:10:40,473 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}
2021-03-12 01:10:40,593 [main:194] - Type params = []
2021-03-12 01:10:40,740 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@29364d10]
2021-03-12 01:10:40,868 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:10:40,869 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@543d7cbe]
2021-03-12 01:10:40,998 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:10:41,000 [main:78] - Generated call from random type = (Kla2()).equals("umspq").compareTo(true)
2021-03-12 01:10:41,001 [main:114] - replacement of this of type Int? is (Kla2()).equals("umspq").compareTo(true)
2021-03-12 01:10:41,123 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:10:41,123 [main:66] - Compilation checking started
2021-03-12 01:10:41,776 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class C<T>(val t: T) {
    override fun hashCode(): Int = t as Int
}

inline class IC<TT>(val c: C<TT>) {
    fun foo(): Int = c.hashCode()
}

fun box(): String {
    val ic = IC<Int>(C(42))

    if (ic.foo() != 42) return "FAIL"
    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int?)

interface Kla1 {
    suspend fun fu4(): Kla0?
}

fun Int?.fu1() =
    if ((Kla2()).equals("umspq").compareTo(true) == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu4(): Kla0 = Kla0(42)

    suspend fun fu5(): String {
        val prope7: Kla1 = this
        return prope7.fu4()!!.s.fu1()
    }

    suspend fun fu6(): String {
        return fu4()!!.s.fu1()
    }
}

fun box181(): String {
    val ic = IC<Int>(C(42))
var prope2 = "FAIL"
    fu0 {
        prope2 = Kla2().fu5()
    }
    if (prope2 != "OK") return "FAIL 1 $prope2"

    prope2 = "FAIL2"
    fu0 {
        prope2 = Kla2().fu6()
    }
    if (prope2 != "OK") return "FAIL 2 $prope2"

    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val ic = IC<Int>(C(42))
this.prope2 = runCatching<Any?>({ "kvywk"}).getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val ic = IC<Int>(C(42))
if ((IC<Boolean>(C<Boolean>(false)).foo()).toChar().isLowerCase()) {
            resume(prope2.getOrThrow())
        } else {
            fu7(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        val ic = IC<Int>(C(42))
if (c !is CoroutineStackFrame) error("Continuation " + c + (1101191231.toUInt()).toUShort().toString(-2109246129))
        prope3.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope3.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu10(method: String) {
        val ic = IC<Int>(C(42))
prope3.find { (ic.foo()).toLong().equals(null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu12() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val ic = IC<Int>(C(42))
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if ((ic.foo()).toChar().isSurrogate() && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:10:41,779 [main:107] - replacing (fu4(), Kla0?)
2021-03-12 01:10:41,780 [main:50] - replacing fu4() Kla0?
2021-03-12 01:10:41,780 [main:54] - Getting value of type Kla0?
