2021-03-12 05:38:57,802 [main:66] - Compilation checking started
2021-03-12 05:38:59,382 [main:50] - replacing message: String String
2021-03-12 05:38:59,382 [main:54] - Getting value of type String
2021-03-12 05:38:59,549 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:38:59,552 [main:58] - GENERATED VALUE OF TYPE String = "nptog"
2021-03-12 05:38:59,553 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:00,152 [main:67] - randomType = Int?
2021-03-12 05:39:00,314 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:00,522 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:39:00,524 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:00,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:00,693 [main:78] - Generated call from random type = (1742372661)?.toLong().toString(-1911889448)
2021-03-12 05:39:00,694 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 05:39:00,696 [main:66] - Compilation checking started
2021-03-12 05:39:01,317 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String = "nptog", value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 05:39:01,317 [main:50] - replacing value: Int Int
2021-03-12 05:39:01,317 [main:54] - Getting value of type Int
2021-03-12 05:39:01,443 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:01,444 [main:58] - GENERATED VALUE OF TYPE Int = -1964181537
2021-03-12 05:39:01,444 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:01,780 [main:67] - randomType = UByte?
2021-03-12 05:39:01,912 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:39:01,994 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2dc9e445]
2021-03-12 05:39:01,995 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@57e52459]
2021-03-12 05:39:01,996 [main:78] - Generated call from random type = (116.toUByte())?.toUShort().countTrailingZeroBits()
2021-03-12 05:39:02,009 [main:106] - GETTING Int from String
2021-03-12 05:39:02,043 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d850252]]
2021-03-12 05:39:02,043 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b]
2021-03-12 05:39:02,153 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:02,154 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d850252]
2021-03-12 05:39:02,315 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:02,317 [main:117] - GENERATED CALL = (message).compareTo("eeopt").times(-84)
2021-03-12 05:39:02,317 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72143dfe]]
2021-03-12 05:39:02,317 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b]
2021-03-12 05:39:02,427 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:02,429 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72143dfe]
2021-03-12 05:39:02,598 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:02,600 [main:117] - GENERATED CALL = (message).compareTo("szemc").minus(57)
2021-03-12 05:39:02,600 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@557a2fe7]]
2021-03-12 05:39:02,600 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@557a2fe7]
2021-03-12 05:39:02,601 [main:117] - GENERATED CALL = (message).toInt()
2021-03-12 05:39:02,601 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]]
2021-03-12 05:39:02,601 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b]
2021-03-12 05:39:02,602 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]
2021-03-12 05:39:02,603 [main:117] - GENERATED CALL = (message).compareTo(message).unaryMinus()
2021-03-12 05:39:02,603 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@73b02395], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@63eff41c]]
2021-03-12 05:39:02,603 [main:117] - GENERATED CALL = (message).length.sign
2021-03-12 05:39:02,603 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@73b02395], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]]
2021-03-12 05:39:02,604 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]
2021-03-12 05:39:02,604 [main:117] - GENERATED CALL = (message).length.unaryMinus()
2021-03-12 05:39:02,604 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b05a1fd]]
2021-03-12 05:39:02,604 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b]
2021-03-12 05:39:02,605 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b05a1fd]
2021-03-12 05:39:02,606 [main:117] - GENERATED CALL = (message).compareTo(message).countTrailingZeroBits()
2021-03-12 05:39:02,606 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6988cc01]]
2021-03-12 05:39:02,606 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b]
2021-03-12 05:39:02,712 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:02,713 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6988cc01]
2021-03-12 05:39:02,885 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:02,887 [main:117] - GENERATED CALL = (message).compareTo("npclq").coerceAtMost(-1790369494)
2021-03-12 05:39:02,887 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55582345]]
2021-03-12 05:39:02,887 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@162d063b]
2021-03-12 05:39:02,888 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55582345]
2021-03-12 05:39:03,012 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:03,013 [main:117] - GENERATED CALL = (message).compareTo(message).rotateLeft(438229648)
2021-03-12 05:39:03,014 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b4f3a6]]
2021-03-12 05:39:03,015 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b4f3a6]
2021-03-12 05:39:03,123 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:39:03,123 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:39:03,125 [main:117] - GENERATED CALL = (message).sumOf({a: Char -> -1918722007})
2021-03-12 05:39:03,125 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 05:39:03,126 [main:66] - Compilation checking started
2021-03-12 05:39:03,841 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String = "nptog", value: Int = (message).compareTo(message).unaryMinus()) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 05:39:04,322 [main:43] - GENERATING CALL OF fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 05:39:04,323 [main:61] - WITHOUT TYPE PARAMS = fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 05:39:04,432 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:39:04,432 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:39:04,433 [main:95] - GENERATED = logged("ovfmy", 1641353670)
2021-03-12 05:39:04,539 [main:45] - Trying to change 30 nodes
2021-03-12 05:39:04,543 [main:53] - replacing (2, Int)
2021-03-12 05:39:04,543 [main:50] - replacing 2 Int
2021-03-12 05:39:04,543 [main:54] - Getting value of type Int
2021-03-12 05:39:04,672 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:04,672 [main:58] - GENERATED VALUE OF TYPE Int = 1449742800
2021-03-12 05:39:04,673 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:04,791 [main:67] - randomType = Char
2021-03-12 05:39:04,902 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:39:04,938 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@25b995d6]
2021-03-12 05:39:04,939 [main:78] - Generated call from random type = ('ꚪ').toLong().sign
2021-03-12 05:39:04,939 [main:61] - replacement of 2 of type Int is ('ꚪ').toLong().sign
2021-03-12 05:39:05,061 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:05,062 [main:66] - Compilation checking started
2021-03-12 05:39:05,490 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", ('ꚪ').toLong().sign)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 05:39:05,492 [main:53] - replacing (StringBuilder(), StringBuilder)
2021-03-12 05:39:05,492 [main:50] - replacing StringBuilder() StringBuilder
2021-03-12 05:39:05,492 [main:54] - Getting value of type StringBuilder
2021-03-12 05:39:05,618 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 05:39:05,749 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-12 05:39:05,752 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-12 05:39:05,992 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:39:05,993 [main:95] - GENERATED = StringBuilder("zxcru")
2021-03-12 05:39:05,993 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder("zxcru")
2021-03-12 05:39:05,993 [main:61] - GENERATED IS CALL =true
2021-03-12 05:39:06,196 [main:67] - randomType = Float?
2021-03-12 05:39:06,308 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:39:06,377 [main:106] - GETTING StringBuilder from StringBuilder
2021-03-12 05:39:06,417 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17275013]]
2021-03-12 05:39:06,418 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17275013]
2021-03-12 05:39:06,515 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:06,516 [main:117] - GENERATED CALL = (log).setRange(logged("ovfmy", 1641353670), logged("ovfmy", 1641353670), "ktxva")
2021-03-12 05:39:06,517 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b21cec3]]
2021-03-12 05:39:06,517 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b21cec3]
2021-03-12 05:39:06,609 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:39:06,709 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 05:39:06,711 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 05:39:06,966 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:06,967 [main:95] - GENERATED = CharArray(481376402)
2021-03-12 05:39:06,968 [main:117] - GENERATED CALL = (log).appendRange(CharArray(481376402), logged("ovfmy", 1641353670), logged("ovfmy", 1641353670))
2021-03-12 05:39:06,969 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@4b68392c]]
2021-03-12 05:39:06,969 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@4b68392c]
2021-03-12 05:39:07,069 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:07,160 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:39:07,161 [main:117] - GENERATED CALL = (log).insert(1190032621, "rlzlh")
2021-03-12 05:39:07,161 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365ce03f]]
2021-03-12 05:39:07,161 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@365ce03f]
2021-03-12 05:39:07,162 [main:117] - GENERATED CALL = (log).deleteAt(logged("ovfmy", 1641353670))
2021-03-12 05:39:07,162 [main:113] - Case = [@kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2113a4]]
2021-03-12 05:39:07,163 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2113a4]
2021-03-12 05:39:07,163 [main:117] - GENERATED CALL = (log).clear()
2021-03-12 05:39:07,163 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b917c20]]
2021-03-12 05:39:07,163 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b917c20]
2021-03-12 05:39:07,164 [main:117] - GENERATED CALL = (log).appendLine()
2021-03-12 05:39:07,164 [main:113] - Case = [@kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ca9a8e2]]
2021-03-12 05:39:07,164 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ca9a8e2]
2021-03-12 05:39:07,256 [main:117] - GENERATED CALL = (log).append(null)
2021-03-12 05:39:07,256 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18b2f2b0]]
2021-03-12 05:39:07,256 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18b2f2b0]
2021-03-12 05:39:07,370 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:39:07,467 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 05:39:07,470 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 05:39:07,686 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:07,687 [main:95] - GENERATED = CharArray(558645945)
2021-03-12 05:39:07,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:07,786 [main:117] - GENERATED CALL = (log).insertRange(logged("ovfmy", 1641353670), CharArray(558645945), -462660427, logged("ovfmy", 1641353670))
2021-03-12 05:39:07,787 [main:113] - Case = [public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@6066afa8]]
2021-03-12 05:39:07,787 [main:149] - GENERATING call of type public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@6066afa8]
2021-03-12 05:39:07,787 [main:117] - GENERATED CALL = (log).reverse()
2021-03-12 05:39:07,788 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5783b7d2]]
2021-03-12 05:39:07,788 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5783b7d2]
2021-03-12 05:39:07,789 [main:117] - GENERATED CALL = (log).deleteRange(logged("ovfmy", 1641353670), logged("ovfmy", 1641353670))
2021-03-12 05:39:07,789 [main:61] - replacement of StringBuilder() of type StringBuilder is (log).setRange(logged("ovfmy", 1641353670), logged("ovfmy", 1641353670), "ktxva")
2021-03-12 05:39:07,914 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:07,915 [main:66] - Compilation checking started
2021-03-12 05:39:08,187 [main:49] - Result = false
Text:
import kotlin.test.*

val log = (log).setRange(logged("ovfmy", 1641353670), logged("ovfmy", 1641353670), "ktxva")

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}


2021-03-12 05:39:08,188 [main:53] - replacing (0, Int)
2021-03-12 05:39:08,189 [main:50] - replacing 0 Int
2021-03-12 05:39:08,189 [main:54] - Getting value of type Int
2021-03-12 05:39:08,280 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:08,280 [main:58] - GENERATED VALUE OF TYPE Int = 408208753
2021-03-12 05:39:08,280 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:08,375 [main:67] - randomType = UShort
2021-03-12 05:39:08,460 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:39:08,502 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@156c0b41]
2021-03-12 05:39:08,598 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:39:08,599 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f4f847b]
2021-03-12 05:39:08,599 [main:78] - Generated call from random type = (10253.toUShort()).div(23.toUByte()).toInt()
2021-03-12 05:39:08,600 [main:106] - GETTING Int from Int
2021-03-12 05:39:08,644 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1df313b3]]
2021-03-12 05:39:08,644 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:08,644 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1df313b3]
2021-03-12 05:39:08,734 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:08,735 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().rem(24)
2021-03-12 05:39:08,735 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57c6c58b]]
2021-03-12 05:39:08,735 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:08,736 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57c6c58b]
2021-03-12 05:39:08,822 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:08,823 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).plus(45)
2021-03-12 05:39:08,824 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@45a3f1f9]]
2021-03-12 05:39:08,824 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:08,824 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@45a3f1f9]
2021-03-12 05:39:08,914 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:08,915 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().compareTo(-58)
2021-03-12 05:39:08,915 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1b4cc473]]
2021-03-12 05:39:08,915 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:08,916 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1b4cc473]
2021-03-12 05:39:09,005 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:09,006 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().times(73)
2021-03-12 05:39:09,006 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@a3ca0b4]]
2021-03-12 05:39:09,006 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:09,006 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@a3ca0b4]
2021-03-12 05:39:09,115 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:09,116 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().plus(53)
2021-03-12 05:39:09,117 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7d47b10d]]
2021-03-12 05:39:09,117 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:09,117 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().code
2021-03-12 05:39:09,117 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62cd7303]]
2021-03-12 05:39:09,118 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:09,118 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62cd7303]
2021-03-12 05:39:09,206 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:09,207 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().div(-70)
2021-03-12 05:39:09,208 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64945559], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@22268e34]]
2021-03-12 05:39:09,208 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64945559]
2021-03-12 05:39:09,298 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:09,299 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).rangeTo(-36).start
2021-03-12 05:39:09,299 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7933dfc3]]
2021-03-12 05:39:09,299 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:09,300 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7933dfc3]
2021-03-12 05:39:09,300 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().countOneBits()
2021-03-12 05:39:09,300 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55582345]]
2021-03-12 05:39:09,300 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:09,301 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55582345]
2021-03-12 05:39:09,301 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().rotateLeft(logged("ovfmy", 1641353670))
2021-03-12 05:39:09,301 [main:61] - replacement of 0 of type Int is (logged("ovfmy", 1641353670)).toByte().rem(24)
2021-03-12 05:39:09,394 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:09,395 [main:66] - Compilation checking started
2021-03-12 05:39:09,847 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(24)
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}


2021-03-12 05:39:09,849 [main:53] - replacing ("start;end;step;", String)
2021-03-12 05:39:09,849 [main:50] - replacing "start;end;step;" String
2021-03-12 05:39:09,849 [main:54] - Getting value of type String
2021-03-12 05:39:09,966 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:09,967 [main:58] - GENERATED VALUE OF TYPE String = "rpsam"
2021-03-12 05:39:09,967 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:10,357 [main:67] - randomType = LinkedHashMap<Boolean, Long>
2021-03-12 05:39:10,473 [main:302] - generating value of type = LinkedHashMap<Boolean, Long> false depth = 0
2021-03-12 05:39:10,581 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Boolean, Long>): LkedHashMap<Boolean, Long> = TODO()
2021-03-12 05:39:10,583 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Boolean, Long>): LkedHashMap<Boolean, Long> = TODO()
2021-03-12 05:39:10,681 [main:302] - generating value of type = Pair<Boolean, Long> false depth = 3
2021-03-12 05:39:10,775 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Boolean, second: Long): Pair<Boolean, Long> = TODO()
2021-03-12 05:39:10,778 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean, second: Long): Pair<Boolean, Long> = TODO()
2021-03-12 05:39:10,870 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 05:39:10,871 [main:302] - generating value of type = Long true depth = 6
2021-03-12 05:39:10,872 [main:95] - GENERATED = Pair<Boolean, Long>(true, -4619948616698198091)
2021-03-12 05:39:10,872 [main:95] - GENERATED = linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))
2021-03-12 05:39:11,067 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:11,068 [main:78] - Generated call from random type = (linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:11,068 [main:61] - replacement of "start;end;step;" of type String is (linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:11,201 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:11,202 [main:66] - Compilation checking started
2021-03-12 05:39:11,742 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(24)
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670)), log.toString())

    return "OK"
}


2021-03-12 05:39:11,744 [main:53] - replacing (logged("start;", 1), Int)
2021-03-12 05:39:11,745 [main:50] - replacing logged("start;", 1) Int
2021-03-12 05:39:11,745 [main:54] - Getting value of type Int
2021-03-12 05:39:11,863 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:11,864 [main:58] - GENERATED VALUE OF TYPE Int = 1347996243
2021-03-12 05:39:11,864 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:12,008 [main:67] - randomType = Float
2021-03-12 05:39:12,108 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:39:12,163 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1b81fb54]
2021-03-12 05:39:12,266 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:12,267 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55582345]
2021-03-12 05:39:12,268 [main:78] - Generated call from random type = (0.8643077f).compareTo(-32).rotateLeft(logged("ovfmy", 1641353670))
2021-03-12 05:39:12,268 [main:106] - GETTING Int from Int
2021-03-12 05:39:12,345 [main:113] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c9b99a7]]
2021-03-12 05:39:12,346 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c9b99a7]
2021-03-12 05:39:12,346 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).unaryPlus()
2021-03-12 05:39:12,347 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45ac5ad1]]
2021-03-12 05:39:12,347 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e]
2021-03-12 05:39:12,462 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:39:12,463 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45ac5ad1]
2021-03-12 05:39:12,463 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits()
2021-03-12 05:39:12,464 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64945559], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1040ceea]]
2021-03-12 05:39:12,464 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@64945559]
2021-03-12 05:39:12,572 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:12,573 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).rangeTo(27).endInclusive
2021-03-12 05:39:12,573 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b91d723]]
2021-03-12 05:39:12,574 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b91d723]
2021-03-12 05:39:12,574 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).dec()
2021-03-12 05:39:12,574 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@65023d79]]
2021-03-12 05:39:12,575 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:12,575 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@65023d79]
2021-03-12 05:39:12,575 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).coerceAtLeast(logged("ovfmy", 1641353670))
2021-03-12 05:39:12,576 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7d47b10d]]
2021-03-12 05:39:12,576 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:12,576 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().code
2021-03-12 05:39:12,576 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c6d1120]]
2021-03-12 05:39:12,576 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:12,576 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c6d1120]
2021-03-12 05:39:12,577 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().ushr(logged("ovfmy", 1641353670))
2021-03-12 05:39:12,577 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1473b8e3]]
2021-03-12 05:39:12,577 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:12,577 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1473b8e3]
2021-03-12 05:39:12,689 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:12,690 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).rem(77)
2021-03-12 05:39:12,691 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13434a33], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36885534]]
2021-03-12 05:39:12,691 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13434a33]
2021-03-12 05:39:12,795 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:39:12,795 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36885534]
2021-03-12 05:39:12,796 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).div(0.70224553f).toRawBits()
2021-03-12 05:39:12,796 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@455b7c42]]
2021-03-12 05:39:12,796 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@455b7c42]
2021-03-12 05:39:12,797 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).countLeadingZeroBits()
2021-03-12 05:39:12,797 [main:61] - replacement of logged("start;", 1) of type Int is (logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits()
2021-03-12 05:39:12,910 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:12,910 [main:66] - Compilation checking started
2021-03-12 05:39:13,417 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(24)
    for (i in (((logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits() until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670)), log.toString())

    return "OK"
}


2021-03-12 05:39:13,419 [main:53] - replacing ((((logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits() until logged("end;", 9)).reversed() step logged("step;", 2)).reversed(), IntProgression)
2021-03-12 05:39:13,419 [main:50] - replacing (((logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits() until logged("end;", 9)).reversed() step logged("step;", 2)).reversed() IntProgression
2021-03-12 05:39:13,419 [main:54] - Getting value of type IntProgression
2021-03-12 05:39:13,553 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 05:39:13,676 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:39:13,679 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:39:13,996 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:13,996 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:13,997 [main:95] - GENERATED = IntRange(1885098746, 840861704)
2021-03-12 05:39:13,997 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(1885098746, 840861704)
2021-03-12 05:39:13,998 [main:61] - GENERATED IS CALL =true
2021-03-12 05:39:14,101 [main:67] - randomType = Double
2021-03-12 05:39:14,195 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:39:14,249 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7f982987]
2021-03-12 05:39:14,249 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@570fcd3e]
2021-03-12 05:39:14,355 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:14,356 [main:78] - Generated call from random type = (0.32635319383104067).toByte().downTo(18)
2021-03-12 05:39:14,360 [main:106] - GETTING IntProgression from StringBuilder
2021-03-12 05:39:14,392 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@7a322651], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]]
2021-03-12 05:39:14,392 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]
2021-03-12 05:39:14,510 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:14,511 [main:117] - GENERATED CALL = (log).length.downTo(122)
2021-03-12 05:39:14,511 [main:61] - replacement of (((logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits() until logged("end;", 9)).reversed() step logged("step;", 2)).reversed() of type IntProgression is (log).length.downTo(122)
2021-03-12 05:39:14,606 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:14,607 [main:66] - Compilation checking started
2021-03-12 05:39:15,042 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(24)
    for (i in (log).length.downTo(122)) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670)), log.toString())

    return "OK"
}


2021-03-12 05:39:15,042 [main:53] - replacing (((logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits() until logged("end;", 9)).reversed(), IntProgression)
2021-03-12 05:39:15,042 [main:50] - replacing ((logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits() until logged("end;", 9)).reversed() IntProgression
2021-03-12 05:39:15,043 [main:54] - Getting value of type IntProgression
2021-03-12 05:39:15,145 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 05:39:15,243 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:39:15,245 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:39:15,538 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:15,538 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:15,539 [main:95] - GENERATED = IntRange(-915061706, -1218912329)
2021-03-12 05:39:15,539 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(-915061706, -1218912329)
2021-03-12 05:39:15,539 [main:61] - GENERATED IS CALL =true
2021-03-12 05:39:15,629 [main:67] - randomType = ULong
2021-03-12 05:39:15,746 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:39:15,796 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@cca9661]
2021-03-12 05:39:15,796 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@602ff1d9]
2021-03-12 05:39:15,893 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:15,894 [main:78] - Generated call from random type = (5659807684418737647.toULong()).toShort().downTo(104)
2021-03-12 05:39:15,896 [main:106] - GETTING IntProgression from Int
2021-03-12 05:39:15,948 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]]
2021-03-12 05:39:15,949 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:15,949 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]
2021-03-12 05:39:16,036 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:16,037 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().downTo(88)
2021-03-12 05:39:16,037 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@602ff1d9]]
2021-03-12 05:39:16,037 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:16,037 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@602ff1d9]
2021-03-12 05:39:16,128 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:16,129 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().downTo(15)
2021-03-12 05:39:16,129 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@570fcd3e]]
2021-03-12 05:39:16,129 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:16,129 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@570fcd3e]
2021-03-12 05:39:16,218 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:16,219 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().downTo(-112)
2021-03-12 05:39:16,219 [main:113] - Case = [public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]]
2021-03-12 05:39:16,220 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]
2021-03-12 05:39:16,304 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:16,305 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).downTo(64)
2021-03-12 05:39:16,305 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]]
2021-03-12 05:39:16,305 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:16,305 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]
2021-03-12 05:39:16,390 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:16,408 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).downTo(80)
2021-03-12 05:39:16,408 [main:61] - replacement of ((logged("ovfmy", 1641353670)).div(-1927732410196772756).countTrailingZeroBits() until logged("end;", 9)).reversed() of type IntProgression is (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).downTo(80)
2021-03-12 05:39:16,523 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:16,524 [main:53] - replacing (log.toString(), String)
2021-03-12 05:39:16,524 [main:50] - replacing log.toString() String
2021-03-12 05:39:16,524 [main:54] - Getting value of type String
2021-03-12 05:39:16,613 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:16,613 [main:58] - GENERATED VALUE OF TYPE String = "csheu"
2021-03-12 05:39:16,614 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:16,800 [main:67] - randomType = Set<Float>
2021-03-12 05:39:16,801 [main:106] - GETTING String from Int
2021-03-12 05:39:16,844 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:16,844 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:16,844 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:16,845 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:16,845 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:16,845 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:16,845 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:16,845 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]]
2021-03-12 05:39:16,845 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:16,846 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]
2021-03-12 05:39:16,930 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:16,930 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().plus("zevbc")
2021-03-12 05:39:16,931 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]]
2021-03-12 05:39:16,931 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:16,931 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]
2021-03-12 05:39:16,931 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().lowercase()
2021-03-12 05:39:16,931 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]]
2021-03-12 05:39:16,931 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:16,931 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]
2021-03-12 05:39:16,932 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().titlecase()
2021-03-12 05:39:16,932 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]]
2021-03-12 05:39:16,932 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:16,932 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]
2021-03-12 05:39:16,932 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:16,932 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:39:16,933 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:39:16,933 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:16,933 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toLong().toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:16,933 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:39:16,933 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e]
2021-03-12 05:39:17,017 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:39:17,018 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:17,018 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).div(-3221145558756614376).toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:17,018 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]]
2021-03-12 05:39:17,018 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:17,019 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]
2021-03-12 05:39:17,019 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:17,019 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]]
2021-03-12 05:39:17,019 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:17,019 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]
2021-03-12 05:39:17,019 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().uppercase()
2021-03-12 05:39:17,020 [main:61] - replacement of log.toString() of type String is "csheu"
2021-03-12 05:39:17,101 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:39:17,102 [main:66] - Compilation checking started
2021-03-12 05:39:17,475 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(24)
    for (i in (log).length.downTo(122)) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670)), "csheu")

    return "OK"
}


2021-03-12 05:39:17,476 [main:53] - replacing (sum * 10 + i, Int)
2021-03-12 05:39:17,476 [main:50] - replacing sum * 10 + i Int
2021-03-12 05:39:17,476 [main:54] - Getting value of type Int
2021-03-12 05:39:17,572 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:17,573 [main:58] - GENERATED VALUE OF TYPE Int = 46384672
2021-03-12 05:39:17,573 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:17,748 [main:67] - randomType = UByte?
2021-03-12 05:39:17,835 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:39:17,882 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5ed91897]
2021-03-12 05:39:17,970 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:39:17,971 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c6d1120]
2021-03-12 05:39:18,060 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:18,061 [main:78] - Generated call from random type = (60.toUByte())?.compareTo(18.toUByte()).ushr(157857223)
2021-03-12 05:39:18,062 [main:106] - GETTING Int from StringBuilder
2021-03-12 05:39:18,085 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@7a322651], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@37499b7b]]
2021-03-12 05:39:18,085 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@37499b7b]
2021-03-12 05:39:18,086 [main:117] - GENERATED CALL = (log).length.takeHighestOneBit()
2021-03-12 05:39:18,086 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@7a322651], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]]
2021-03-12 05:39:18,086 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]
2021-03-12 05:39:18,086 [main:117] - GENERATED CALL = (log).length.unaryMinus()
2021-03-12 05:39:18,086 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@7a322651], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@21c43859]]
2021-03-12 05:39:18,086 [main:117] - GENERATED CALL = (log).length.absoluteValue
2021-03-12 05:39:18,086 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79540761]]
2021-03-12 05:39:18,087 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79540761]
2021-03-12 05:39:18,167 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:39:18,168 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:39:18,169 [main:117] - GENERATED CALL = (log).indexOfLast({a: Char -> true})
2021-03-12 05:39:18,169 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun indexOf(string: kotlin.String): kotlin.Int defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@19526d83]]
2021-03-12 05:39:18,169 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun indexOf(string: kotlin.String): kotlin.Int defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@19526d83]
2021-03-12 05:39:18,257 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:18,258 [main:117] - GENERATED CALL = (log).indexOf("zfsex")
2021-03-12 05:39:18,258 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@7a322651], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6988cc01]]
2021-03-12 05:39:18,258 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6988cc01]
2021-03-12 05:39:18,259 [main:117] - GENERATED CALL = (log).length.coerceAtMost(logged("ovfmy", 1641353670))
2021-03-12 05:39:18,259 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@4af864a5], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@557a2fe7]]
2021-03-12 05:39:18,259 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@4af864a5]
2021-03-12 05:39:18,259 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@557a2fe7]
2021-03-12 05:39:18,259 [main:117] - GENERATED CALL = (log).substring(logged("ovfmy", 1641353670)).toInt()
2021-03-12 05:39:18,259 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.Deprecated public final fun capacity(): kotlin.Int defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@6d3fa642]]
2021-03-12 05:39:18,259 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.Deprecated public final fun capacity(): kotlin.Int defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@6d3fa642]
2021-03-12 05:39:18,260 [main:117] - GENERATED CALL = (log).capacity()
2021-03-12 05:39:18,260 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@7a322651], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5bc0d62d]]
2021-03-12 05:39:18,260 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5bc0d62d]
2021-03-12 05:39:18,260 [main:117] - GENERATED CALL = (log).length.coerceIn(logged("ovfmy", 1641353670), logged("ovfmy", 1641353670))
2021-03-12 05:39:18,260 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d765a26]]
2021-03-12 05:39:18,260 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d765a26]
2021-03-12 05:39:18,382 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:39:18,493 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 05:39:18,495 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 05:39:18,759 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:18,759 [main:302] - generating value of type = Function1<Int, Char> false depth = 3
2021-03-12 05:39:18,760 [main:302] - generating value of type = Char true depth = 4
2021-03-12 05:39:18,760 [main:95] - GENERATED = CharArray(318100102, {a: Int -> '킺'})
2021-03-12 05:39:18,848 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:39:18,850 [main:117] - GENERATED CALL = (log).indexOfAny(CharArray(318100102, {a: Int -> '킺'}), logged("ovfmy", 1641353670), false)
2021-03-12 05:39:18,850 [main:61] - replacement of sum * 10 + i of type Int is (log).length.coerceAtMost(logged("ovfmy", 1641353670))
2021-03-12 05:39:18,947 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:18,948 [main:66] - Compilation checking started
2021-03-12 05:39:19,349 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(24)
    for (i in (log).length.downTo(122)) {
        sum = (log).length.coerceAtMost(logged("ovfmy", 1641353670))
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670)), "csheu")

    return "OK"
}


2021-03-12 05:39:19,350 [main:53] - replacing ("end;", String)
2021-03-12 05:39:19,350 [main:50] - replacing "end;" String
2021-03-12 05:39:19,350 [main:54] - Getting value of type String
2021-03-12 05:39:19,434 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:19,434 [main:58] - GENERATED VALUE OF TYPE String = "vbzhj"
2021-03-12 05:39:19,435 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:19,526 [main:67] - randomType = UByte
2021-03-12 05:39:19,611 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:39:19,653 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10b1c0bf]
2021-03-12 05:39:19,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:19,740 [main:78] - Generated call from random type = (52.toUByte()).toString(941500590)
2021-03-12 05:39:19,741 [main:106] - GETTING String from Int
2021-03-12 05:39:19,794 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:19,794 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:19,794 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:19,878 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:19,879 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).toString(-1326755067)
2021-03-12 05:39:19,879 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]]
2021-03-12 05:39:19,879 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:19,879 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]
2021-03-12 05:39:19,963 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:19,964 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().toString(1571632862)
2021-03-12 05:39:19,964 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]]
2021-03-12 05:39:19,964 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:19,964 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]
2021-03-12 05:39:20,049 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:20,050 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().plus("lkwpk")
2021-03-12 05:39:20,050 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:20,050 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:20,051 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:20,051 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]]
2021-03-12 05:39:20,051 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:20,051 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]
2021-03-12 05:39:20,051 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().uppercase()
2021-03-12 05:39:20,051 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:39:20,051 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:39:20,051 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:20,052 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toLong().toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:20,052 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]]
2021-03-12 05:39:20,052 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:20,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]
2021-03-12 05:39:20,052 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().lowercase()
2021-03-12 05:39:20,053 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]]
2021-03-12 05:39:20,053 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:20,053 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]
2021-03-12 05:39:20,144 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:20,145 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().toString(1185183704)
2021-03-12 05:39:20,145 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:20,145 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:20,146 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:20,242 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:20,243 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().toString(-565088400)
2021-03-12 05:39:20,243 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:39:20,243 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e]
2021-03-12 05:39:20,331 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:39:20,332 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:20,332 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).div(5011871149097009173).toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:20,333 [main:61] - replacement of "end;" of type String is (logged("ovfmy", 1641353670)).toChar().uppercase()
2021-03-12 05:39:20,437 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:20,438 [main:53] - replacing (9, Int)
2021-03-12 05:39:20,438 [main:50] - replacing 9 Int
2021-03-12 05:39:20,438 [main:54] - Getting value of type Int
2021-03-12 05:39:20,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:20,560 [main:58] - GENERATED VALUE OF TYPE Int = -1287710757
2021-03-12 05:39:20,560 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:20,561 [main:67] - randomType = Byte
2021-03-12 05:39:20,661 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:20,718 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3219b550]
2021-03-12 05:39:20,719 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5fed1f7f]
2021-03-12 05:39:20,803 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:20,804 [main:78] - Generated call from random type = (120).toDouble().compareTo(120)
2021-03-12 05:39:20,804 [main:61] - replacement of 9 of type Int is (120).toDouble().compareTo(120)
2021-03-12 05:39:20,887 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:20,888 [main:53] - replacing (logged((logged("ovfmy", 1641353670)).toChar().uppercase(), (120).toDouble().compareTo(120)), Int)
2021-03-12 05:39:20,888 [main:50] - replacing logged((logged("ovfmy", 1641353670)).toChar().uppercase(), (120).toDouble().compareTo(120)) Int
2021-03-12 05:39:20,888 [main:54] - Getting value of type Int
2021-03-12 05:39:20,972 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:20,972 [main:58] - GENERATED VALUE OF TYPE Int = -854244366
2021-03-12 05:39:20,972 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:21,081 [main:67] - randomType = Float
2021-03-12 05:39:21,180 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:39:21,232 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d8a67d2]
2021-03-12 05:39:21,232 [main:78] - Generated call from random type = (0.8996373f).toBits()
2021-03-12 05:39:21,232 [main:106] - GETTING Int from Int
2021-03-12 05:39:21,284 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55faaed1]]
2021-03-12 05:39:21,284 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:21,285 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@55faaed1]
2021-03-12 05:39:21,366 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:21,367 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().compareTo(-1)
2021-03-12 05:39:21,367 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@65023d79]]
2021-03-12 05:39:21,367 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:21,367 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@65023d79]
2021-03-12 05:39:21,368 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().coerceAtLeast(logged("ovfmy", 1641353670))
2021-03-12 05:39:21,368 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5bc0d62d]]
2021-03-12 05:39:21,368 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:21,368 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5bc0d62d]
2021-03-12 05:39:21,450 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:21,451 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).coerceIn(logged("ovfmy", 1641353670), -159684940)
2021-03-12 05:39:21,451 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@207f36b3]]
2021-03-12 05:39:21,451 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:21,451 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@207f36b3]
2021-03-12 05:39:21,452 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().unaryMinus()
2021-03-12 05:39:21,452 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]]
2021-03-12 05:39:21,452 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:21,452 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]
2021-03-12 05:39:21,452 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().unaryMinus()
2021-03-12 05:39:21,452 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@37499b7b]]
2021-03-12 05:39:21,452 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:21,452 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@37499b7b]
2021-03-12 05:39:21,453 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).takeHighestOneBit()
2021-03-12 05:39:21,453 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@45d7d988]]
2021-03-12 05:39:21,453 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:21,453 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@45d7d988]
2021-03-12 05:39:21,453 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().toInt()
2021-03-12 05:39:21,453 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d2a2d2c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1408bbe7]]
2021-03-12 05:39:21,453 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d2a2d2c]
2021-03-12 05:39:21,535 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:39:21,535 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1408bbe7]
2021-03-12 05:39:21,617 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:39:21,618 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).equals("gclat").compareTo(false)
2021-03-12 05:39:21,618 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@10d6f353]]
2021-03-12 05:39:21,618 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:39:21,619 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toLong().sign
2021-03-12 05:39:21,619 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4b3e56]]
2021-03-12 05:39:21,619 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:21,722 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:21,723 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4b3e56]
2021-03-12 05:39:21,723 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(-812610941).inv()
2021-03-12 05:39:21,724 [main:61] - replacement of logged((logged("ovfmy", 1641353670)).toChar().uppercase(), (120).toDouble().compareTo(120)) of type Int is (logged("ovfmy", 1641353670)).compareTo(-812610941).inv()
2021-03-12 05:39:21,819 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:21,820 [main:53] - replacing (2, Int)
2021-03-12 05:39:21,820 [main:50] - replacing 2 Int
2021-03-12 05:39:21,820 [main:54] - Getting value of type Int
2021-03-12 05:39:21,904 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:21,905 [main:58] - GENERATED VALUE OF TYPE Int = -2039124867
2021-03-12 05:39:21,905 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:21,989 [main:67] - randomType = Double
2021-03-12 05:39:22,069 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:39:22,115 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5fed1f7f]
2021-03-12 05:39:22,198 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:22,199 [main:78] - Generated call from random type = (0.5256441984712182).compareTo(-75)
2021-03-12 05:39:22,199 [main:106] - GETTING Int from Int
2021-03-12 05:39:22,238 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4b3e56]]
2021-03-12 05:39:22,239 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:22,356 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:22,357 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4b3e56]
2021-03-12 05:39:22,357 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(1475852732).inv()
2021-03-12 05:39:22,357 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b91d723]]
2021-03-12 05:39:22,357 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b91d723]
2021-03-12 05:39:22,358 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).dec()
2021-03-12 05:39:22,358 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c9b99a7]]
2021-03-12 05:39:22,358 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:22,358 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c9b99a7]
2021-03-12 05:39:22,358 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).unaryPlus()
2021-03-12 05:39:22,359 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72143dfe]]
2021-03-12 05:39:22,359 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:22,359 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@72143dfe]
2021-03-12 05:39:22,447 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:22,448 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).minus(117)
2021-03-12 05:39:22,448 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ffc78c3]]
2021-03-12 05:39:22,448 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:22,448 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ffc78c3]
2021-03-12 05:39:22,449 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().shr(logged("ovfmy", 1641353670))
2021-03-12 05:39:22,449 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7933dfc3]]
2021-03-12 05:39:22,449 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:22,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7933dfc3]
2021-03-12 05:39:22,449 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().countOneBits()
2021-03-12 05:39:22,449 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3219b550], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5fed1f7f]]
2021-03-12 05:39:22,449 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3219b550]
2021-03-12 05:39:22,449 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5fed1f7f]
2021-03-12 05:39:22,530 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:22,531 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toDouble().compareTo(-14)
2021-03-12 05:39:22,531 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1df313b3]]
2021-03-12 05:39:22,531 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:22,531 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1df313b3]
2021-03-12 05:39:22,613 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:22,614 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().rem(-101)
2021-03-12 05:39:22,615 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@45a3f1f9]]
2021-03-12 05:39:22,615 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:22,615 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@45a3f1f9]
2021-03-12 05:39:22,700 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:22,701 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().compareTo(-106)
2021-03-12 05:39:22,701 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6988cc01]]
2021-03-12 05:39:22,701 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:22,702 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6988cc01]
2021-03-12 05:39:22,702 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).coerceAtMost(logged("ovfmy", 1641353670))
2021-03-12 05:39:22,702 [main:61] - replacement of 2 of type Int is (logged("ovfmy", 1641353670)).toDouble().compareTo(-14)
2021-03-12 05:39:22,787 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:22,788 [main:53] - replacing ((logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).downTo(80) step logged("step;", (logged("ovfmy", 1641353670)).toDouble().compareTo(-14)), IntProgression)
2021-03-12 05:39:22,788 [main:50] - replacing (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).downTo(80) step logged("step;", (logged("ovfmy", 1641353670)).toDouble().compareTo(-14)) IntProgression
2021-03-12 05:39:22,788 [main:54] - Getting value of type IntProgression
2021-03-12 05:39:22,901 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 05:39:23,006 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:39:23,007 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:39:23,262 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:23,262 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:39:23,263 [main:95] - GENERATED = IntRange(-1036568337, 91554147)
2021-03-12 05:39:23,263 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(-1036568337, 91554147)
2021-03-12 05:39:23,263 [main:61] - GENERATED IS CALL =true
2021-03-12 05:39:23,351 [main:67] - randomType = UInt
2021-03-12 05:39:23,450 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:39:23,494 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5ca9acc1]
2021-03-12 05:39:23,575 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:39:23,575 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]
2021-03-12 05:39:23,656 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:23,657 [main:78] - Generated call from random type = (1761373204.toUInt()).compareTo(92.toUByte()).downTo(-122)
2021-03-12 05:39:23,658 [main:106] - GETTING IntProgression from Int
2021-03-12 05:39:23,695 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@602ff1d9]]
2021-03-12 05:39:23,695 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:23,695 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@602ff1d9]
2021-03-12 05:39:23,775 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:23,775 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().downTo(63)
2021-03-12 05:39:23,775 [main:113] - Case = [public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]]
2021-03-12 05:39:23,775 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]
2021-03-12 05:39:23,855 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:23,856 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).downTo(72)
2021-03-12 05:39:23,856 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@570fcd3e]]
2021-03-12 05:39:23,856 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:23,856 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@570fcd3e]
2021-03-12 05:39:23,938 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:23,939 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().downTo(-107)
2021-03-12 05:39:23,939 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]]
2021-03-12 05:39:23,939 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:23,939 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]
2021-03-12 05:39:24,044 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:24,045 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().downTo(-86)
2021-03-12 05:39:24,045 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]]
2021-03-12 05:39:24,045 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:24,046 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@70cef1d3]
2021-03-12 05:39:24,151 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:24,152 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).downTo(2)
2021-03-12 05:39:24,152 [main:61] - replacement of (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).downTo(80) step logged("step;", (logged("ovfmy", 1641353670)).toDouble().compareTo(-14)) of type IntProgression is (1761373204.toUInt()).compareTo(92.toUByte()).downTo(-122)
2021-03-12 05:39:24,238 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:24,238 [main:53] - replacing (2, Int)
2021-03-12 05:39:24,238 [main:50] - replacing 2 Int
2021-03-12 05:39:24,238 [main:54] - Getting value of type Int
2021-03-12 05:39:24,323 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:24,324 [main:58] - GENERATED VALUE OF TYPE Int = -1530423129
2021-03-12 05:39:24,324 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:24,324 [main:67] - randomType = Int
2021-03-12 05:39:24,403 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:24,439 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:24,440 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c6d1120]
2021-03-12 05:39:24,519 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:24,520 [main:78] - Generated call from random type = (855421096).compareTo(logged("ovfmy", 1641353670)).ushr(-1596777127)
2021-03-12 05:39:24,520 [main:61] - replacement of 2 of type Int is (855421096).compareTo(logged("ovfmy", 1641353670)).ushr(-1596777127)
2021-03-12 05:39:24,617 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:24,617 [main:53] - replacing (sum * 10 + i, Int)
2021-03-12 05:39:24,617 [main:50] - replacing sum * 10 + i Int
2021-03-12 05:39:24,617 [main:54] - Getting value of type Int
2021-03-12 05:39:24,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:24,707 [main:58] - GENERATED VALUE OF TYPE Int = -1153008827
2021-03-12 05:39:24,707 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:24,708 [main:67] - randomType = Long
2021-03-12 05:39:24,788 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:39:24,822 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:24,822 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@198d053d]
2021-03-12 05:39:24,823 [main:78] - Generated call from random type = (4511306354268912957).toInt().or(logged("ovfmy", 1641353670))
2021-03-12 05:39:24,823 [main:61] - replacement of sum * 10 + i of type Int is (4511306354268912957).toInt().or(logged("ovfmy", 1641353670))
2021-03-12 05:39:24,900 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:24,901 [main:53] - replacing ("step;", String)
2021-03-12 05:39:24,901 [main:50] - replacing "step;" String
2021-03-12 05:39:24,901 [main:54] - Getting value of type String
2021-03-12 05:39:24,980 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:24,980 [main:58] - GENERATED VALUE OF TYPE String = "cnsat"
2021-03-12 05:39:24,981 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:25,160 [main:67] - randomType = Float?
2021-03-12 05:39:25,246 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:39:25,281 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@55ba1297]
2021-03-12 05:39:25,281 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]
2021-03-12 05:39:25,360 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:25,361 [main:78] - Generated call from random type = (0.6615424f)?.toChar().plus("wtoxo")
2021-03-12 05:39:25,362 [main:106] - GETTING String from Int
2021-03-12 05:39:25,408 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]]
2021-03-12 05:39:25,408 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:25,408 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]
2021-03-12 05:39:25,408 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().titlecase()
2021-03-12 05:39:25,408 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]]
2021-03-12 05:39:25,409 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:25,409 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]
2021-03-12 05:39:25,409 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().uppercase()
2021-03-12 05:39:25,409 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]]
2021-03-12 05:39:25,409 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:25,409 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]
2021-03-12 05:39:25,409 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toShort().toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:25,410 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:39:25,410 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e]
2021-03-12 05:39:25,490 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:39:25,490 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:25,491 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).div(-8416033592886197970).toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:25,491 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]]
2021-03-12 05:39:25,491 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:25,491 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]
2021-03-12 05:39:25,491 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toChar().lowercase()
2021-03-12 05:39:25,491 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:25,491 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:25,491 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:25,492 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toInt().toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:25,492 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:25,492 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:25,492 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:25,492 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).compareTo(logged("ovfmy", 1641353670)).toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:25,492 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]]
2021-03-12 05:39:25,493 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:25,493 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]
2021-03-12 05:39:25,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:25,572 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toByte().toString(-93528253)
2021-03-12 05:39:25,572 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:25,572 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:25,572 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:25,572 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:39:25,573 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:39:25,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:25,573 [main:117] - GENERATED CALL = (logged("ovfmy", 1641353670)).toLong().toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:25,573 [main:61] - replacement of "step;" of type String is (logged("ovfmy", 1641353670)).toInt().toString(logged("ovfmy", 1641353670))
2021-03-12 05:39:25,651 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:25,747 [main:119] - TRYING TO REPLACE CONSTANT 24
2021-03-12 05:39:25,833 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 05:39:25,833 [main:66] - Compilation checking started
2021-03-12 05:39:26,176 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(1641353670)
    for (i in (log).length.downTo(122)) {
        sum = (log).length.coerceAtMost(logged("ovfmy", 1641353670))
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670)), "csheu")

    return "OK"
}


2021-03-12 05:39:26,176 [main:119] - TRYING TO REPLACE CONSTANT 1641353670
2021-03-12 05:39:26,255 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 05:39:26,256 [main:66] - Compilation checking started
2021-03-12 05:39:26,553 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", sum)).toByte().rem(1641353670)
    for (i in (log).length.downTo(122)) {
        sum = (log).length.coerceAtMost(logged("ovfmy", 1641353670))
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", 1641353670)), "csheu")

    return "OK"
}


2021-03-12 05:39:26,553 [main:119] - TRYING TO REPLACE CONSTANT 1641353670
2021-03-12 05:39:26,636 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:26,636 [main:66] - Compilation checking started
2021-03-12 05:39:26,988 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(1641353670)
    for (i in (log).length.downTo(122)) {
        sum = (log).length.coerceAtMost(logged("ovfmy", 1641353670))
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", (log).length)), "csheu")

    return "OK"
}


2021-03-12 05:39:26,988 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 05:39:27,095 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:39:27,095 [main:66] - Compilation checking started
2021-03-12 05:39:27,468 [main:119] - TRYING TO REPLACE CONSTANT 4619948616698198091
2021-03-12 05:39:27,566 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 05:39:27,566 [main:66] - Compilation checking started
2021-03-12 05:39:27,927 [main:119] - TRYING TO REPLACE CONSTANT 122
2021-03-12 05:39:28,005 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 05:39:28,006 [main:66] - Compilation checking started
2021-03-12 05:39:28,359 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("ovfmy", 1641353670)).toByte().rem(1641353670)
    for (i in (log).length.downTo(sum)) {
        sum = (log).length.coerceAtMost(logged("ovfmy", 1641353670))
    }

    assertEquals(2468, sum)

    assertEquals((linkedMapOf<Boolean, Long>(Pair<Boolean, Long>(true, -4619948616698198091))).size.toString(logged("ovfmy", (log).length)), "csheu")

    return "OK"
}


2021-03-12 05:39:28,359 [main:119] - TRYING TO REPLACE CONSTANT 1641353670
2021-03-12 05:39:28,450 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 05:39:28,480 [main:41] - AFTER TRY 0 res = import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 05:39:28,840 [main:43] - GENERATING CALL OF fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 05:39:28,841 [main:61] - WITHOUT TYPE PARAMS = fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 05:39:28,918 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:39:28,919 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:39:28,919 [main:95] - GENERATED = logged("nhqqo", -1567858906)
2021-03-12 05:39:29,000 [main:43] - Try №0
2021-03-12 05:39:41,212 [main:48] - Already checked
2021-03-12 05:39:45,339 [main:69] - Trying to insert override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
2021-03-12 05:39:45,545 [main:66] - Compilation checking started
2021-03-12 05:39:46,658 [main:103] - Trying to change 185 nodes
2021-03-12 05:39:46,658 [main:107] - replacing (i, Int)
2021-03-12 05:39:46,660 [main:50] - replacing i Int
2021-03-12 05:39:46,660 [main:54] - Getting value of type Int
2021-03-12 05:39:46,841 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:46,844 [main:58] - GENERATED VALUE OF TYPE Int = -1673726465
2021-03-12 05:39:46,844 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:47,335 [main:67] - randomType = ArrayDeque<Double>
2021-03-12 05:39:47,479 [main:302] - generating value of type = ArrayDeque<Double> false depth = 0
2021-03-12 05:39:47,662 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Double>): ArrayDeque<Double> = TODO()
2021-03-12 05:39:47,666 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Double>): ArrayDeque<Double> = TODO()
2021-03-12 05:39:48,009 [main:302] - generating value of type = Collection<Double> false depth = 3
2021-03-12 05:39:48,167 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Collection<Double> = TODO()
2021-03-12 05:39:48,170 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Collection<Double> = TODO()
2021-03-12 05:39:48,744 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:39:48,746 [main:302] - generating value of type = Float true depth = 6
2021-03-12 05:39:48,749 [main:95] - GENERATED = LinkedHashSet<Double>(-194441546, 0.7200491f)
2021-03-12 05:39:48,749 [main:95] - GENERATED = ArrayDeque<Double>(LinkedHashSet<Double>(-194441546, 0.7200491f))
2021-03-12 05:39:48,928 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4e53f4]
2021-03-12 05:39:49,074 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:49,076 [main:78] - Generated call from random type = (ArrayDeque<Double>(LinkedHashSet<Double>(-194441546, 0.7200491f))).modCount.compareTo(-111)
2021-03-12 05:39:49,076 [main:106] - GETTING Int from Int
2021-03-12 05:39:49,107 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ffc78c3]]
2021-03-12 05:39:49,107 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:49,246 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:49,248 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ffc78c3]
2021-03-12 05:39:49,248 [main:117] - GENERATED CALL = (logged("start;", 1)).compareTo(-1197915401).shr(sum * 10)
2021-03-12 05:39:49,249 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@63eff41c]]
2021-03-12 05:39:49,249 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:49,249 [main:117] - GENERATED CALL = (logged("start;", 1)).compareTo(logged("nhqqo", -1567858906)).sign
2021-03-12 05:39:49,249 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79d0d204]]
2021-03-12 05:39:49,249 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:49,249 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79d0d204]
2021-03-12 05:39:49,249 [main:117] - GENERATED CALL = (logged("start;", 1)).toByte().unaryMinus()
2021-03-12 05:39:49,249 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4e53f4]]
2021-03-12 05:39:49,249 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:49,249 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4e53f4]
2021-03-12 05:39:49,392 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:49,394 [main:117] - GENERATED CALL = (logged("start;", 1)).toInt().compareTo(-70)
2021-03-12 05:39:49,394 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1df313b3]]
2021-03-12 05:39:49,394 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:49,394 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1df313b3]
2021-03-12 05:39:49,538 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:49,541 [main:117] - GENERATED CALL = (logged("start;", 1)).toByte().rem(92)
2021-03-12 05:39:49,541 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@10d6f353]]
2021-03-12 05:39:49,541 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:39:49,541 [main:117] - GENERATED CALL = (logged("start;", 1)).toLong().sign
2021-03-12 05:39:49,541 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4010aa86]]
2021-03-12 05:39:49,541 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:49,541 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4010aa86]
2021-03-12 05:39:49,541 [main:117] - GENERATED CALL = (logged("start;", 1)).toChar().toInt()
2021-03-12 05:39:49,541 [main:113] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5492219c]]
2021-03-12 05:39:49,541 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5492219c]
2021-03-12 05:39:49,542 [main:117] - GENERATED CALL = (logged("start;", 1)).xor(logged("start;", 1))
2021-03-12 05:39:49,542 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@21c43859]]
2021-03-12 05:39:49,542 [main:117] - GENERATED CALL = (logged("start;", 1)).absoluteValue
2021-03-12 05:39:49,542 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6988cc01]]
2021-03-12 05:39:49,542 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:49,542 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6988cc01]
2021-03-12 05:39:49,542 [main:117] - GENERATED CALL = (logged("start;", 1)).compareTo(logged("nhqqo", -1567858906)).coerceAtMost(logged("nhqqo", -1567858906))
2021-03-12 05:39:49,543 [main:114] - replacement of i of type Int is (logged("start;", 1)).compareTo(logged("nhqqo", -1567858906)).sign
2021-03-12 05:39:49,697 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:49,698 [main:66] - Compilation checking started
2021-03-12 05:39:50,111 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("/user").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        command.startsWith("/") -> prope1.fu5(id, "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != (logged("start;", 1)).compareTo(logged("nhqqo", -1567858906)).sign) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:39:50,113 [main:107] - replacing (prope6++, Int)
2021-03-12 05:39:50,113 [main:50] - replacing prope6++ Int
2021-03-12 05:39:50,113 [main:54] - Getting value of type Int
2021-03-12 05:39:50,244 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:50,246 [main:58] - GENERATED VALUE OF TYPE Int = 214786860
2021-03-12 05:39:50,247 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:50,700 [main:67] - randomType = Array<ULong?>
2021-03-12 05:39:50,841 [main:302] - generating value of type = Array<ULong?> false depth = 0
2021-03-12 05:39:50,984 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: ULong?): Array<ULong?> = TODO()
2021-03-12 05:39:50,987 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: ULong?): Array<ULong?> = TODO()
2021-03-12 05:39:51,124 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 05:39:51,126 [main:95] - GENERATED = arrayOf<ULong?>(247703428946163686.toULong())
2021-03-12 05:39:51,144 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]
2021-03-12 05:39:51,144 [main:78] - Generated call from random type = (arrayOf<ULong?>(247703428946163686.toULong())).size.unaryMinus()
2021-03-12 05:39:51,144 [main:106] - GETTING Int from Int
2021-03-12 05:39:51,200 [main:113] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@198d053d]]
2021-03-12 05:39:51,201 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@198d053d]
2021-03-12 05:39:51,201 [main:117] - GENERATED CALL = (sum * 10).or(sum * 10)
2021-03-12 05:39:51,201 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4894d5ce]]
2021-03-12 05:39:51,201 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:51,202 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4894d5ce]
2021-03-12 05:39:51,202 [main:117] - GENERATED CALL = (sum * 10).toByte().countLeadingZeroBits()
2021-03-12 05:39:51,202 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57c6c58b]]
2021-03-12 05:39:51,202 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57c6c58b]
2021-03-12 05:39:51,334 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:39:51,336 [main:117] - GENERATED CALL = (sum * 10).plus(-67)
2021-03-12 05:39:51,336 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@73e87b96]]
2021-03-12 05:39:51,336 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:51,336 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@73e87b96]
2021-03-12 05:39:51,472 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:39:51,474 [main:117] - GENERATED CALL = (sum * 10).toChar().compareTo('傕')
2021-03-12 05:39:51,474 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]]
2021-03-12 05:39:51,474 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:51,474 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@124b0265]
2021-03-12 05:39:51,474 [main:117] - GENERATED CALL = (sum * 10).toInt().unaryMinus()
2021-03-12 05:39:51,474 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@37499b7b]]
2021-03-12 05:39:51,475 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@37499b7b]
2021-03-12 05:39:51,475 [main:117] - GENERATED CALL = (sum * 10).takeHighestOneBit()
2021-03-12 05:39:51,475 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@558e3324]]
2021-03-12 05:39:51,475 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:51,475 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@558e3324]
2021-03-12 05:39:51,475 [main:117] - GENERATED CALL = (sum * 10).toShort().countLeadingZeroBits()
2021-03-12 05:39:51,475 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@259b8c13]]
2021-03-12 05:39:51,475 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:51,613 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:51,615 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@259b8c13]
2021-03-12 05:39:51,615 [main:117] - GENERATED CALL = (sum * 10).compareTo(2014978868).inc()
2021-03-12 05:39:51,615 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45ac5ad1]]
2021-03-12 05:39:51,615 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:39:51,615 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45ac5ad1]
2021-03-12 05:39:51,615 [main:117] - GENERATED CALL = (sum * 10).toLong().countTrailingZeroBits()
2021-03-12 05:39:51,615 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55582345]]
2021-03-12 05:39:51,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55582345]
2021-03-12 05:39:51,616 [main:117] - GENERATED CALL = (sum * 10).rotateLeft(logged("start;", 1))
2021-03-12 05:39:51,616 [main:114] - replacement of prope6++ of type Int is 214786860
2021-03-12 05:39:51,747 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 05:39:51,747 [main:66] - Compilation checking started
2021-03-12 05:39:52,383 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("/user").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        command.startsWith("/") -> prope1.fu5(id, "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:39:52,385 [main:107] - replacing (prope4.getOrThrow(), Ty0)
2021-03-12 05:39:52,386 [main:50] - replacing prope4.getOrThrow() Ty0
2021-03-12 05:39:52,386 [main:54] - Getting value of type Ty0
2021-03-12 05:39:52,520 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 05:39:52,525 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 05:39:52,702 [main:67] - randomType = Kla0?
2021-03-12 05:39:52,838 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:39:52,840 [main:112] - generating klass Kla0 text = class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}
2021-03-12 05:39:52,849 [main:106] - GETTING Ty0 from IntProgression
2021-03-12 05:39:52,868 [main:106] - GETTING Ty0 from IntRange
2021-03-12 05:39:52,902 [main:106] - GETTING Ty0 from Int
2021-03-12 05:39:52,954 [main:106] - GETTING Ty0 from Int
2021-03-12 05:39:52,955 [main:106] - GETTING Ty0 from IntRange
2021-03-12 05:39:52,956 [main:106] - GETTING Ty0 from Int
2021-03-12 05:39:52,956 [main:106] - GETTING Ty0 from StringBuilder
2021-03-12 05:39:52,985 [main:106] - GETTING Ty0 from IntProgression
2021-03-12 05:39:52,986 [main:106] - GETTING Ty0 from IntProgression
2021-03-12 05:39:52,986 [main:111] - Cant find and generate replacement for prope4.getOrThrow() type Ty0
2021-03-12 05:39:52,986 [main:107] - replacing (command, String)
2021-03-12 05:39:52,988 [main:50] - replacing command String
2021-03-12 05:39:52,988 [main:54] - Getting value of type String
2021-03-12 05:39:53,117 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:53,119 [main:58] - GENERATED VALUE OF TYPE String = "tphtw"
2021-03-12 05:39:53,119 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:53,265 [main:67] - randomType = Kla6
2021-03-12 05:39:53,405 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:39:53,407 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:39:53,431 [main:106] - GETTING String from Int
2021-03-12 05:39:53,471 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:53,471 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:39:53,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:53,600 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:53,603 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).compareTo(sum * 10).toString(1789103763)
2021-03-12 05:39:53,603 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:39:53,603 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:39:53,603 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:53,603 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toLong().toString(var sum =
2021-03-12 05:39:53,604 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:39:53,604 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:39:53,604 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:39:53,604 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1))
2021-03-12 05:39:53,604 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:39:53,604 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e]
2021-03-12 05:39:53,740 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:39:53,742 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:39:53,742 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).div(5955622675259379995).toString(var sum =
2021-03-12 05:39:53,743 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]]
2021-03-12 05:39:53,743 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:39:53,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]
2021-03-12 05:39:53,743 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toByte().toString(logged("start;", 1))
2021-03-12 05:39:53,743 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]]
2021-03-12 05:39:53,743 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:53,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]
2021-03-12 05:39:53,743 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toChar().titlecase()
2021-03-12 05:39:53,743 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]]
2021-03-12 05:39:53,744 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:53,744 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]
2021-03-12 05:39:53,744 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toChar().uppercase()
2021-03-12 05:39:53,744 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]]
2021-03-12 05:39:53,744 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:53,744 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]
2021-03-12 05:39:53,882 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:53,884 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toChar().plus("ckgiz")
2021-03-12 05:39:53,884 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]]
2021-03-12 05:39:53,884 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:39:53,885 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]
2021-03-12 05:39:53,885 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toShort().toString(var sum =
2021-03-12 05:39:53,885 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]]
2021-03-12 05:39:53,885 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:39:53,885 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]
2021-03-12 05:39:53,886 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toChar().lowercase()
2021-03-12 05:39:53,886 [main:114] - replacement of command of type String is (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1))
2021-03-12 05:39:54,018 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:39:54,019 [main:66] - Compilation checking started
2021-03-12 05:39:54,667 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("/user").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5(id, "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:39:54,669 [main:107] - replacing (removePrefix("/user"), String)
2021-03-12 05:39:54,669 [main:50] - replacing removePrefix("/user") String
2021-03-12 05:39:54,669 [main:54] - Getting value of type String
2021-03-12 05:39:54,810 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:54,812 [main:58] - GENERATED VALUE OF TYPE String = "qrtge"
2021-03-12 05:39:54,812 [main:61] - GENERATED IS CALL =false
2021-03-12 05:39:54,957 [main:67] - randomType = Kla1?
2021-03-12 05:39:55,085 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:39:55,087 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-12 05:39:55,219 [main:194] - Type params = []
2021-03-12 05:39:55,354 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:39:55,496 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:39:55,499 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:39:55,956 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:39:56,120 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:39:56,124 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:39:56,576 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 05:39:56,724 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:39:56,727 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:39:57,230 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:39:57,230 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:39:57,230 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:39:57,253 [main:106] - GETTING String from StringBuilder
2021-03-12 05:39:57,286 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fbde78a]]
2021-03-12 05:39:57,286 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f]
2021-03-12 05:39:57,286 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fbde78a]
2021-03-12 05:39:57,417 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:57,545 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:57,547 [main:117] - GENERATED CALL = (log).substring(sum * 10).replaceIndentByMargin("fgybc", "avhyr")
2021-03-12 05:39:57,547 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb091b9]]
2021-03-12 05:39:57,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f]
2021-03-12 05:39:57,682 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:57,686 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb091b9]
2021-03-12 05:39:57,851 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:39:57,854 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:39:57,857 [main:117] - GENERATED CALL = (log).substring(-1114551585).filter({a: Char -> false})
2021-03-12 05:39:57,858 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a0583a]]
2021-03-12 05:39:57,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f]
2021-03-12 05:39:57,858 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a0583a]
2021-03-12 05:39:58,035 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:39:58,168 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:58,315 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:39:58,317 [main:117] - GENERATED CALL = (log).substring(var sum =.replaceBeforeLast('⹪', "fnsuk", "beluv")
2021-03-12 05:39:58,317 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11cbff16]]
2021-03-12 05:39:58,317 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f]
2021-03-12 05:39:58,318 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11cbff16]
2021-03-12 05:39:58,454 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:39:58,457 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:39:58,460 [main:117] - GENERATED CALL = (log).substring(logged("start;", 1)).filterNot({a: Char -> true})
2021-03-12 05:39:58,460 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@79feadb7], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8b92014]]
2021-03-12 05:39:58,461 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@79feadb7]
2021-03-12 05:39:58,588 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:39:58,592 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8b92014]
2021-03-12 05:39:58,722 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:39:58,904 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:39:58,917 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:39:59,375 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:39:59,377 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:39:59,507 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-12 05:39:59,510 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-12 05:39:59,971 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:39:59,973 [main:302] - generating value of type = Float true depth = 6
2021-03-12 05:39:59,975 [main:95] - GENERATED = LinkedHashSet<RegexOption>(-907665437, 0.2267232f)
2021-03-12 05:39:59,976 [main:95] - GENERATED = Regex("mtoxj", LinkedHashSet<RegexOption>(-907665437, 0.2267232f))
2021-03-12 05:40:00,104 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:40:00,106 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:40:00,112 [main:117] - GENERATED CALL = (log).subSequence(logged("nhqqo", -1567858906), 433236711).replace(Regex("mtoxj", LinkedHashSet<RegexOption>(-907665437, 0.2267232f)), {a: MatchResult -> "wklft"})
2021-03-12 05:40:00,113 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@528b4c1d]]
2021-03-12 05:40:00,113 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f]
2021-03-12 05:40:00,113 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@528b4c1d]
2021-03-12 05:40:00,242 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:40:00,244 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:40:00,246 [main:117] - GENERATED CALL = (log).substring(logged("nhqqo", -1567858906)).takeLastWhile({a: Char -> true})
2021-03-12 05:40:00,246 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@79feadb7], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@637792c9]]
2021-03-12 05:40:00,247 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@79feadb7]
2021-03-12 05:40:00,247 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@637792c9]
2021-03-12 05:40:00,386 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:00,515 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:40:00,517 [main:117] - GENERATED CALL = (log).subSequence(var sum =.commonPrefixWith("fqpld", false)
2021-03-12 05:40:00,517 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@171d6faa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]]
2021-03-12 05:40:00,517 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@171d6faa]
2021-03-12 05:40:00,641 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:00,643 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]
2021-03-12 05:40:00,643 [main:117] - GENERATED CALL = (log).get(-1991969274).titlecase()
2021-03-12 05:40:00,643 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@528e9b74]]
2021-03-12 05:40:00,644 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f]
2021-03-12 05:40:00,644 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@528e9b74]
2021-03-12 05:40:00,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:00,933 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:00,940 [main:117] - GENERATED CALL = (log).substring(sum * 10).replaceRange(795130876, logged("start;", 1), "fddie")
2021-03-12 05:40:00,940 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b4399a1]]
2021-03-12 05:40:00,940 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@350fe16f]
2021-03-12 05:40:00,940 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b4399a1]
2021-03-12 05:40:00,940 [main:117] - GENERATED CALL = (log).substring(sum * 10).capitalize()
2021-03-12 05:40:00,940 [main:114] - replacement of removePrefix("/user") of type String is (log).substring(var sum =.replaceBeforeLast('⹪', "fnsuk", "beluv")
2021-03-12 05:40:01,064 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 05:40:01,065 [main:66] - Compilation checking started
2021-03-12 05:40:01,069 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:40:01,069 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.(log).substring(var sum =.replaceBeforeLast('⹪', "fnsuk", "beluv").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5(id, "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:01,071 [main:107] - replacing (prope4.exceptionOrNull(), Throwable?)
2021-03-12 05:40:01,072 [main:50] - replacing prope4.exceptionOrNull() Throwable?
2021-03-12 05:40:01,072 [main:54] - Getting value of type Throwable?
2021-03-12 05:40:01,199 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:40:01,329 [main:43] - GENERATING CALL OF fun NullPointerException(message: kotlin.String?): Throwable = TODO()
2021-03-12 05:40:01,332 [main:61] - WITHOUT TYPE PARAMS = fun NullPointerException(message: kotlin.String?): Throwable = TODO()
2021-03-12 05:40:01,601 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:40:01,604 [main:95] - GENERATED = NullPointerException("ihxir")
2021-03-12 05:40:01,604 [main:58] - GENERATED VALUE OF TYPE Throwable? = NullPointerException("ihxir")
2021-03-12 05:40:01,604 [main:61] - GENERATED IS CALL =true
2021-03-12 05:40:01,764 [main:67] - randomType = Kla3<Kla0>
2021-03-12 05:40:01,924 [main:302] - generating value of type = Kla3<Kla0> false depth = 0
2021-03-12 05:40:01,926 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 05:40:02,337 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 05:40:02,339 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:40:02,358 [main:106] - GETTING Throwable? from IntRange
2021-03-12 05:40:02,383 [main:106] - GETTING Throwable? from IntProgression
2021-03-12 05:40:02,399 [main:106] - GETTING Throwable? from IntProgression
2021-03-12 05:40:02,399 [main:106] - GETTING Throwable? from IntProgression
2021-03-12 05:40:02,400 [main:106] - GETTING Throwable? from Int
2021-03-12 05:40:02,440 [main:106] - GETTING Throwable? from Int
2021-03-12 05:40:02,441 [main:106] - GETTING Throwable? from IntRange
2021-03-12 05:40:02,442 [main:106] - GETTING Throwable? from StringBuilder
2021-03-12 05:40:02,467 [main:106] - GETTING Throwable? from Int
2021-03-12 05:40:02,467 [main:114] - replacement of prope4.exceptionOrNull() of type Throwable? is NullPointerException("ihxir")
2021-03-12 05:40:02,596 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:40:02,597 [main:66] - Compilation checking started
2021-03-12 05:40:03,213 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("/user").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5(id, "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
NullPointerException("ihxir")?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:03,215 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 05:40:03,215 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 05:40:03,215 [main:54] - Getting value of type String
2021-03-12 05:40:03,339 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:03,341 [main:58] - GENERATED VALUE OF TYPE String = "bdmjf"
2021-03-12 05:40:03,341 [main:61] - GENERATED IS CALL =false
2021-03-12 05:40:03,640 [main:67] - randomType = Set<Long>
2021-03-12 05:40:03,641 [main:106] - GETTING String from Int
2021-03-12 05:40:03,697 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]]
2021-03-12 05:40:03,697 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:40:03,698 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]
2021-03-12 05:40:03,698 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toChar().uppercase()
2021-03-12 05:40:03,698 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:03,698 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:40:03,698 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:03,839 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:03,842 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toInt().toString(1298668480)
2021-03-12 05:40:03,842 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:03,842 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:03,842 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toString(sum * 10)
2021-03-12 05:40:03,842 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]]
2021-03-12 05:40:03,843 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:40:03,843 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]
2021-03-12 05:40:03,843 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toChar().titlecase()
2021-03-12 05:40:03,843 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:40:03,843 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:40:03,843 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:40:03,843 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toLong().toString(var sum =
2021-03-12 05:40:03,843 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]]
2021-03-12 05:40:03,844 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:40:03,844 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]
2021-03-12 05:40:03,844 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toByte().toString(logged("nhqqo", -1567858906))
2021-03-12 05:40:03,844 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]]
2021-03-12 05:40:03,844 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:40:03,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]
2021-03-12 05:40:03,980 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:03,982 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toChar().plus("vuvcy")
2021-03-12 05:40:03,982 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]]
2021-03-12 05:40:03,982 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:40:03,982 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ecee66a]
2021-03-12 05:40:03,983 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toChar().lowercase()
2021-03-12 05:40:03,983 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]]
2021-03-12 05:40:03,983 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:40:03,983 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]
2021-03-12 05:40:04,118 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:04,120 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).toShort().toString(-387757984)
2021-03-12 05:40:04,120 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:04,120 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:40:04,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:04,121 [main:117] - GENERATED CALL = (logged("nhqqo", -1567858906)).compareTo(logged("nhqqo", -1567858906)).toString(logged("start;", 1))
2021-03-12 05:40:04,121 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (logged("nhqqo", -1567858906)).toShort().toString(-387757984)
2021-03-12 05:40:04,251 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:40:04,252 [main:66] - Compilation checking started
2021-03-12 05:40:04,876 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("/user").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5(id, "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
NullPointerException("ihxir")?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((logged("nhqqo", -1567858906)).toShort().toString(-387757984) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:04,878 [main:107] - replacing (Kla0(), Kla0)
2021-03-12 05:40:04,879 [main:50] - replacing Kla0() Kla0
2021-03-12 05:40:04,879 [main:54] - Getting value of type Kla0
2021-03-12 05:40:05,017 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:40:05,019 [main:112] - generating klass Kla0 text = class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}
2021-03-12 05:40:05,020 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 05:40:05,020 [main:61] - GENERATED IS CALL =true
2021-03-12 05:40:05,589 [main:67] - randomType = LinkedHashSet<UInt?>?
2021-03-12 05:40:05,711 [main:302] - generating value of type = LinkedHashSet<UInt?> false depth = 0
2021-03-12 05:40:05,852 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UInt?): LkedHashSet<UInt?> = TODO()
2021-03-12 05:40:05,856 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UInt?): LkedHashSet<UInt?> = TODO()
2021-03-12 05:40:05,985 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 05:40:05,988 [main:95] - GENERATED = linkedSetOf<UInt?>(1568138846.toUInt())
2021-03-12 05:40:06,106 [main:106] - GETTING Kla0 from Int
2021-03-12 05:40:06,137 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:40:06,149 [main:106] - GETTING Kla0 from Int
2021-03-12 05:40:06,150 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:40:06,150 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:40:06,168 [main:106] - GETTING Kla0 from IntRange
2021-03-12 05:40:06,188 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:40:06,189 [main:106] - GETTING Kla0 from Int
2021-03-12 05:40:06,190 [main:106] - GETTING Kla0 from IntRange
2021-03-12 05:40:06,190 [main:114] - replacement of Kla0() of type Kla0 is Kla0()
2021-03-12 05:40:06,315 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:40:06,317 [main:107] - replacing (id, String)
2021-03-12 05:40:06,317 [main:50] - replacing id String
2021-03-12 05:40:06,317 [main:54] - Getting value of type String
2021-03-12 05:40:06,442 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:06,444 [main:58] - GENERATED VALUE OF TYPE String = "bmfgs"
2021-03-12 05:40:06,445 [main:61] - GENERATED IS CALL =false
2021-03-12 05:40:06,871 [main:67] - randomType = ArrayList<UShort?>
2021-03-12 05:40:07,006 [main:302] - generating value of type = ArrayList<UShort?> false depth = 0
2021-03-12 05:40:07,139 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UShort?): ArrayList<UShort?> = TODO()
2021-03-12 05:40:07,141 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UShort?): ArrayList<UShort?> = TODO()
2021-03-12 05:40:07,277 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 05:40:07,279 [main:95] - GENERATED = arrayListOf<UShort?>(13740.toUShort())
2021-03-12 05:40:07,433 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3ae891be]
2021-03-12 05:40:07,434 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@24257f51]
2021-03-12 05:40:07,434 [main:78] - Generated call from random type = (arrayListOf<UShort?>(13740.toUShort())).toArray().contentDeepToString()
2021-03-12 05:40:07,435 [main:106] - GETTING String from IntRange
2021-03-12 05:40:07,459 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]]
2021-03-12 05:40:07,460 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]
2021-03-12 05:40:07,585 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:07,719 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:07,853 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:07,856 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:08,125 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:40:08,127 [main:95] - GENERATED = StringBuilder(1777405138)
2021-03-12 05:40:08,265 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:08,395 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:08,398 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:08,672 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:40:08,674 [main:95] - GENERATED = StringBuilder(1276885565)
2021-03-12 05:40:08,799 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:08,927 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:40:08,930 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:40:09,203 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:40:09,209 [main:95] - GENERATED = StringBuilder("axlht")
2021-03-12 05:40:09,340 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:40:09,342 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:40:09,496 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:09,500 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:09,793 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:40:09,795 [main:95] - GENERATED = StringBuilder(957195732)
2021-03-12 05:40:09,796 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).joinToString("glufp", StringBuilder(1777405138), StringBuilder(1276885565), logged("start;", 1), StringBuilder("axlht"), {a: T -> StringBuilder(957195732)})
2021-03-12 05:40:09,796 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@23c9139c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:09,796 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:09,918 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:09,920 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).endInclusive.toString(2079772580)
2021-03-12 05:40:09,920 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@7531e485], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:09,920 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:10,048 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:10,050 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).first.toString(-1281690929)
2021-03-12 05:40:10,050 [main:114] - replacement of id of type String is (logged("start;", 1) until logged("end;", 9)).endInclusive.toString(2079772580)
2021-03-12 05:40:10,177 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:40:10,178 [main:66] - Compilation checking started
2021-03-12 05:40:10,798 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        prope0 = sender
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("/user").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5((logged("start;", 1) until logged("end;", 9)).endInclusive.toString(2079772580), "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
NullPointerException("ihxir")?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((logged("nhqqo", -1567858906)).toShort().toString(-387757984) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:10,800 [main:107] - replacing (sender, String)
2021-03-12 05:40:10,802 [main:50] - replacing sender String
2021-03-12 05:40:10,802 [main:54] - Getting value of type String
2021-03-12 05:40:10,945 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:10,947 [main:58] - GENERATED VALUE OF TYPE String = "piqqj"
2021-03-12 05:40:10,947 [main:61] - GENERATED IS CALL =false
2021-03-12 05:40:10,951 [main:67] - randomType = String
2021-03-12 05:40:11,093 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:11,116 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@46ecfbf7]
2021-03-12 05:40:11,240 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:40:11,241 [main:78] - Generated call from random type = ("vqmni").plus("tjfbl")
2021-03-12 05:40:11,241 [main:106] - GETTING String from IntRange
2021-03-12 05:40:11,263 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]]
2021-03-12 05:40:11,263 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]
2021-03-12 05:40:11,388 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:11,517 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:11,520 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:11,794 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:40:11,796 [main:95] - GENERATED = StringBuilder(1676671828)
2021-03-12 05:40:11,924 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:12,055 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:40:12,059 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:40:12,329 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:40:12,334 [main:95] - GENERATED = StringBuilder("trmsx")
2021-03-12 05:40:12,477 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:12,605 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:12,608 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:12,882 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:40:12,884 [main:95] - GENERATED = StringBuilder(1362372741)
2021-03-12 05:40:13,012 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:13,154 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:13,157 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:13,431 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:40:13,433 [main:95] - GENERATED = StringBuilder(2104354117)
2021-03-12 05:40:13,556 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:40:13,558 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:40:13,722 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:40:13,725 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:40:14,013 [main:302] - generating value of type = String true depth = 4
2021-03-12 05:40:14,015 [main:95] - GENERATED = StringBuilder("osbpm")
2021-03-12 05:40:14,016 [main:117] - GENERATED CALL = ((logged("start;", 1) until logged("end;", 9))).joinToString(StringBuilder(1676671828), StringBuilder("trmsx"), StringBuilder(1362372741), logged("nhqqo", -1567858906), StringBuilder(2104354117), {a: T -> StringBuilder("osbpm")})
2021-03-12 05:40:14,016 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@23c9139c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:14,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:14,016 [main:117] - GENERATED CALL = ((logged("start;", 1) until logged("end;", 9))).endInclusive.toString(logged("start;", 1))
2021-03-12 05:40:14,016 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@7531e485], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:14,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:14,016 [main:117] - GENERATED CALL = ((logged("start;", 1) until logged("end;", 9))).first.toString(sum * 10)
2021-03-12 05:40:14,017 [main:114] - replacement of sender of type String is "piqqj"
2021-03-12 05:40:14,140 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:40:14,141 [main:66] - Compilation checking started
2021-03-12 05:40:14,759 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        var sum = 0
val log = StringBuilder()
prope0 = "piqqj"
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("/user").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5((logged("start;", 1) until logged("end;", 9)).endInclusive.toString(2079772580), "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
NullPointerException("ihxir")?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((logged("nhqqo", -1567858906)).toShort().toString(-387757984) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:14,761 [main:107] - replacing ("/user", String)
2021-03-12 05:40:14,762 [main:50] - replacing "/user" String
2021-03-12 05:40:14,762 [main:54] - Getting value of type String
2021-03-12 05:40:14,885 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:14,887 [main:58] - GENERATED VALUE OF TYPE String = "moxxx"
2021-03-12 05:40:14,887 [main:61] - GENERATED IS CALL =false
2021-03-12 05:40:14,895 [main:67] - randomType = Kla1
2021-03-12 05:40:15,022 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:40:15,024 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-12 05:40:15,165 [main:194] - Type params = []
2021-03-12 05:40:15,289 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:40:15,416 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:40:15,419 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:40:15,689 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:40:15,820 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:40:15,823 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:40:16,240 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:40:16,240 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:40:16,260 [main:106] - GETTING String from IntProgression
2021-03-12 05:40:16,273 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]]
2021-03-12 05:40:16,273 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]
2021-03-12 05:40:16,425 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:16,567 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:16,694 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:16,822 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:16,947 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:40:16,949 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:40:16,954 [main:117] - GENERATED CALL = ((logged("start;", 1) until logged("end;", 9)).reversed()).joinToString("brhek", "brutl", "ijcbw", sum * 10, StringBuilder(), {a: T -> "rcpot"})
2021-03-12 05:40:16,954 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@7531e485], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:16,954 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:17,076 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:17,078 [main:117] - GENERATED CALL = ((logged("start;", 1) until logged("end;", 9)).reversed()).first.toString(328209654)
2021-03-12 05:40:17,078 [main:114] - replacement of "/user" of type String is "moxxx"
2021-03-12 05:40:17,200 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 05:40:17,201 [main:66] - Compilation checking started
2021-03-12 05:40:17,823 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        var sum = 0
val log = StringBuilder()
prope0 = "piqqj"
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("moxxx").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5((logged("start;", 1) until logged("end;", 9)).endInclusive.toString(2079772580), "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
NullPointerException("ihxir")?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((logged("nhqqo", -1567858906)).toShort().toString(-387757984) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:17,826 [main:107] - replacing ("\n", String)
2021-03-12 05:40:17,828 [main:50] - replacing "\n" String
2021-03-12 05:40:17,828 [main:54] - Getting value of type String
2021-03-12 05:40:17,976 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:17,978 [main:58] - GENERATED VALUE OF TYPE String = "zmouc"
2021-03-12 05:40:17,979 [main:61] - GENERATED IS CALL =false
2021-03-12 05:40:18,690 [main:67] - randomType = Function2<List<Double?>, Float, Kla2>
2021-03-12 05:40:18,692 [main:106] - GETTING String from IntRange
2021-03-12 05:40:18,716 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]]
2021-03-12 05:40:18,716 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]
2021-03-12 05:40:18,838 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:18,969 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:40:18,972 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:40:19,274 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:40:19,402 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:19,405 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:19,676 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:40:19,679 [main:95] - GENERATED = StringBuilder(853280741)
2021-03-12 05:40:19,679 [main:95] - GENERATED = StringBuilder(StringBuilder(853280741))
2021-03-12 05:40:19,805 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:19,931 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:20,058 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:20,185 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:40:20,188 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:40:20,513 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:40:20,516 [main:95] - GENERATED = StringBuilder("eeupj")
2021-03-12 05:40:20,656 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:40:20,658 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:40:20,663 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).joinToString(StringBuilder(StringBuilder(853280741)), "etdwz", "bcgmz", sum * 10, StringBuilder("eeupj"), {a: T -> "bbgzj"})
2021-03-12 05:40:20,664 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@7531e485], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:20,664 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:20,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:20,791 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).first.toString(1795576405)
2021-03-12 05:40:20,791 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@23c9139c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:20,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:20,915 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:20,917 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).endInclusive.toString(-1524422403)
2021-03-12 05:40:20,917 [main:114] - replacement of "\n" of type String is "zmouc"
2021-03-12 05:40:21,041 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 05:40:21,041 [main:66] - Compilation checking started
2021-03-12 05:40:21,643 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        var sum = 0
val log = StringBuilder()
prope0 = "piqqj"
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = command.removePrefix("moxxx").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5((logged("start;", 1) until logged("end;", 9)).endInclusive.toString(2079772580), "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
NullPointerException("ihxir")?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "zmouc")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((logged("nhqqo", -1567858906)).toShort().toString(-387757984) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:21,646 [main:107] - replacing (command, String)
2021-03-12 05:40:21,647 [main:50] - replacing command String
2021-03-12 05:40:21,647 [main:54] - Getting value of type String
2021-03-12 05:40:21,788 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:21,790 [main:58] - GENERATED VALUE OF TYPE String = "bncsy"
2021-03-12 05:40:21,790 [main:61] - GENERATED IS CALL =false
2021-03-12 05:40:22,370 [main:67] - randomType = Function2<Kla5, Float?, UInt>
2021-03-12 05:40:22,371 [main:106] - GETTING String from Int
2021-03-12 05:40:22,423 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:40:22,423 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@ff6d02e]
2021-03-12 05:40:22,423 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:40:22,424 [main:117] - GENERATED CALL = (sum * 10).toLong().toString(logged("start;", 1))
2021-03-12 05:40:22,424 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]]
2021-03-12 05:40:22,424 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fd28f0e]
2021-03-12 05:40:22,547 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:40:22,549 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51765790]
2021-03-12 05:40:22,549 [main:117] - GENERATED CALL = (sum * 10).div(7575616003951901626).toString(sum * 10)
2021-03-12 05:40:22,549 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]]
2021-03-12 05:40:22,549 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:40:22,550 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ac13ce]
2021-03-12 05:40:22,550 [main:117] - GENERATED CALL = (sum * 10).toChar().uppercase()
2021-03-12 05:40:22,550 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]]
2021-03-12 05:40:22,550 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:40:22,550 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@656d978e]
2021-03-12 05:40:22,671 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:22,673 [main:117] - GENERATED CALL = (sum * 10).toChar().plus("hwwdd")
2021-03-12 05:40:22,674 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:22,674 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@164c7fed]
2021-03-12 05:40:22,674 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:22,674 [main:117] - GENERATED CALL = (sum * 10).toInt().toString(logged("nhqqo", -1567858906))
2021-03-12 05:40:22,674 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]]
2021-03-12 05:40:22,674 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@506c1549]
2021-03-12 05:40:22,674 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec58e64]
2021-03-12 05:40:22,795 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:22,798 [main:117] - GENERATED CALL = (sum * 10).toShort().toString(1761330368)
2021-03-12 05:40:22,798 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:22,798 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1290cc94]
2021-03-12 05:40:22,798 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:22,920 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:22,922 [main:117] - GENERATED CALL = (sum * 10).compareTo(logged("start;", 1)).toString(-1852477348)
2021-03-12 05:40:22,922 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:22,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:22,923 [main:117] - GENERATED CALL = (sum * 10).toString(logged("nhqqo", -1567858906))
2021-03-12 05:40:22,923 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]]
2021-03-12 05:40:22,923 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1eba8841]
2021-03-12 05:40:22,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a2955e7]
2021-03-12 05:40:22,923 [main:117] - GENERATED CALL = (sum * 10).toChar().titlecase()
2021-03-12 05:40:22,923 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]]
2021-03-12 05:40:22,923 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@278e9ffa]
2021-03-12 05:40:22,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@141252fb]
2021-03-12 05:40:22,924 [main:117] - GENERATED CALL = (sum * 10).toByte().toString(logged("start;", 1))
2021-03-12 05:40:22,924 [main:114] - replacement of command of type String is (sum * 10).toChar().titlecase()
2021-03-12 05:40:23,044 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:40:23,044 [main:66] - Compilation checking started
2021-03-12 05:40:23,681 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        var sum = 0
val log = StringBuilder()
prope0 = "piqqj"
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = (sum * 10).toChar().titlecase().removePrefix("moxxx").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5((logged("start;", 1) until logged("end;", 9)).endInclusive.toString(2079772580), "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
NullPointerException("ihxir")?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "zmouc")) }
    }

    fun fu11(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((logged("nhqqo", -1567858906)).toShort().toString(-387757984) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:23,683 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:40:23,683 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:40:23,683 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:40:23,820 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:40:23,824 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:40:24,250 [main:67] - randomType = Function2<Kla0, Kla5?, Char?>
2021-03-12 05:40:24,252 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-12 05:40:24,264 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-12 05:40:24,264 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:40:24,294 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-12 05:40:24,295 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-12 05:40:24,315 [main:106] - GETTING EmptyCoroutineContext from StringBuilder
2021-03-12 05:40:24,332 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:40:24,332 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:40:24,333 [main:106] - GETTING EmptyCoroutineContext from IntRange
2021-03-12 05:40:24,333 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:40:24,333 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"), String)
2021-03-12 05:40:24,334 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n") String
2021-03-12 05:40:24,334 [main:54] - Getting value of type String
2021-03-12 05:40:24,456 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:24,458 [main:58] - GENERATED VALUE OF TYPE String = "unllt"
2021-03-12 05:40:24,458 [main:61] - GENERATED IS CALL =false
2021-03-12 05:40:24,466 [main:67] - randomType = Kla4
2021-03-12 05:40:24,588 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:40:24,590 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "zmouc")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-12 05:40:24,597 [main:106] - GETTING String from IntRange
2021-03-12 05:40:24,621 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@7531e485], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:24,621 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:24,622 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).first.toString(logged("nhqqo", -1567858906))
2021-03-12 05:40:24,622 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@23c9139c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]]
2021-03-12 05:40:24,622 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56108c86]
2021-03-12 05:40:24,744 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:40:24,747 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).endInclusive.toString(-874376695)
2021-03-12 05:40:24,747 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]]
2021-03-12 05:40:24,747 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]
2021-03-12 05:40:24,869 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:24,998 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:25,144 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:25,271 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:25,405 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:40:25,407 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:40:25,534 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:25,537 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:25,802 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:40:25,805 [main:95] - GENERATED = StringBuilder(125783388)
2021-03-12 05:40:25,805 [main:117] - GENERATED CALL = (logged("start;", 1) until logged("end;", 9)).joinToString("jpqej", "aqtbj", "iezfs", logged("start;", 1), "exagl", {a: T -> StringBuilder(125783388)})
2021-03-12 05:40:25,805 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n") of type String is (logged("start;", 1) until logged("end;", 9)).endInclusive.toString(-874376695)
2021-03-12 05:40:25,928 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:40:25,929 [main:66] - Compilation checking started
2021-03-12 05:40:26,519 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1) until logged("end;", 9)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

private var prope0: String = "FAIL"

class Kla0 {
    suspend fun fu4(sender: String) {
        var sum = 0
val log = StringBuilder()
prope0 = "piqqj"
    }
    suspend fun fu5(recipient: String, sender: String, fu6: String) { }
    suspend fun fu6(sender: String, fu6: String) { }
}

private val prope1 = Kla0()

private suspend fun fu0(id: String, command: String) {
    var sum = 0
val log = StringBuilder()
when {
        command.startsWith("/who") -> prope1.fu4(id)
        command.startsWith("/user") -> {
            val prope10 = (sum * 10).toChar().titlecase().removePrefix("moxxx").trim()
            when {
                prope10.isEmpty() -> prope1.fu5(id, "server::help", "/user [newName]")
                else -> prope1.fu6(id, prope10)
            }
        }
        (logged("nhqqo", -1567858906)).toInt().toString(logged("start;", 1)).startsWith("/") -> prope1.fu5((logged("start;", 1) until logged("end;", 9)).endInclusive.toString(2079772580), "server::help", "Unknown command ${command.takeWhile { !it.isWhitespace() }}")
        else -> prope1.fu6(id, command)
    }
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

fun box160(): String {
    fu1 {
        fu0("OK", "/who")
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
x(prope4.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
NullPointerException("ihxir")?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu7(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "zmouc")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope5.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 1) until logged("end;", 9)).endInclusive.toString(-874376695))
    }
}

val prope2 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu12() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        214786860
        prope8 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((logged("nhqqo", -1567858906)).toShort().toString(-387757984) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope8 = {
            prope3.prope7 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:40:26,521 [main:107] - replacing (command, String)
2021-03-12 05:40:26,521 [main:50] - replacing command String
2021-03-12 05:40:26,521 [main:54] - Getting value of type String
2021-03-12 05:40:26,651 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:26,653 [main:58] - GENERATED VALUE OF TYPE String = "krjsv"
2021-03-12 05:40:26,653 [main:61] - GENERATED IS CALL =false
2021-03-12 05:40:26,657 [main:67] - randomType = String
2021-03-12 05:40:26,801 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:26,820 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fbde78a]
2021-03-12 05:40:26,943 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:27,068 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:40:27,071 [main:78] - Generated call from random type = ("daafj").replaceIndentByMargin("dieol", "wmyba")
2021-03-12 05:40:27,071 [main:106] - GETTING String from IntProgression
2021-03-12 05:40:27,083 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]]
2021-03-12 05:40:27,083 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d5e7334]
2021-03-12 05:40:27,207 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:27,335 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:27,338 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:40:27,606 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:40:27,608 [main:95] - GENERATED = StringBuilder(-1687018323)
2021-03-12 05:40:27,731 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:27,862 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:27,991 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:40:28,121 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:40:28,123 [main:302] - generating value of type = CharSequence false depth = 1
