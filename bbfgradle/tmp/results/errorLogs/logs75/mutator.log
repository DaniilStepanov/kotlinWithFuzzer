2021-03-12 04:20:51,639 [main:66] - Compilation checking started
2021-03-12 04:20:53,431 [main:43] - GENERATING CALL OF @Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java
2021-03-12 04:20:54,032 [main:61] - WITHOUT TYPE PARAMS = @Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<Long> = T::class.java
2021-03-12 04:20:54,198 [main:95] - GENERATED = javaClass<Long>()
2021-03-12 04:20:54,328 [main:45] - Trying to change 8 nodes
2021-03-12 04:20:54,332 [main:53] - replacing ("java.lang.String", String)
2021-03-12 04:20:54,333 [main:50] - replacing "java.lang.String" String
2021-03-12 04:20:54,333 [main:54] - Getting value of type String
2021-03-12 04:20:54,448 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:20:54,451 [main:58] - GENERATED VALUE OF TYPE String = "tkyjk"
2021-03-12 04:20:54,452 [main:61] - GENERATED IS CALL =false
2021-03-12 04:20:54,454 [main:67] - randomType = String
2021-03-12 04:20:54,544 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:20:54,625 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ee17264]
2021-03-12 04:20:54,626 [main:78] - Generated call from random type = ("wnckm").uppercase()
2021-03-12 04:20:54,626 [main:61] - replacement of "java.lang.String" of type String is ("wnckm").uppercase()
2021-03-12 04:20:54,727 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:20:54,727 [main:66] - Compilation checking started
2021-03-12 04:20:55,194 [main:53] - Result = true
Text:
import kotlin.*

@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != ("wnckm").uppercase()) return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}
2021-03-12 04:20:55,196 [main:53] - replacing (test.getCanonicalName() != ("wnckm").uppercase(), Boolean)
2021-03-12 04:20:55,196 [main:50] - replacing test.getCanonicalName() != ("wnckm").uppercase() Boolean
2021-03-12 04:20:55,196 [main:54] - Getting value of type Boolean
2021-03-12 04:20:55,324 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:20:55,325 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:20:55,326 [main:61] - GENERATED IS CALL =false
2021-03-12 04:20:55,436 [main:67] - randomType = Float
2021-03-12 04:20:55,603 [main:302] - generating value of type = Float true depth = 0
2021-03-12 04:20:55,739 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@181c7470]
2021-03-12 04:20:55,740 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a75a52a]
2021-03-12 04:20:55,741 [main:78] - Generated call from random type = (0.6279481f).toChar().isLetterOrDigit()
2021-03-12 04:20:55,759 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:20:55,769 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:20:55,769 [main:61] - replacement of test.getCanonicalName() != ("wnckm").uppercase() of type Boolean is (0.6279481f).toChar().isLetterOrDigit()
2021-03-12 04:20:55,873 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:20:55,874 [main:66] - Compilation checking started
2021-03-12 04:20:56,331 [main:53] - Result = true
Text:
import kotlin.*

@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if((0.6279481f).toChar().isLetterOrDigit()) return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}
2021-03-12 04:20:56,331 [main:53] - replacing (test.getCanonicalName() != ("wnckm").uppercase(), Boolean)
2021-03-12 04:20:56,331 [main:50] - replacing test.getCanonicalName() != ("wnckm").uppercase() Boolean
2021-03-12 04:20:56,331 [main:54] - Getting value of type Boolean
2021-03-12 04:20:56,425 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:20:56,426 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:20:56,426 [main:61] - GENERATED IS CALL =false
2021-03-12 04:20:56,649 [main:67] - randomType = UInt?
2021-03-12 04:20:56,739 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:20:56,847 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6f89fc23]
2021-03-12 04:20:56,848 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a357bc4]
2021-03-12 04:20:56,849 [main:78] - Generated call from random type = (1278281293.toUInt())?.toDouble().isInfinite()
2021-03-12 04:20:56,851 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:20:56,858 [main:61] - replacement of test.getCanonicalName() != ("wnckm").uppercase() of type Boolean is (1278281293.toUInt())?.toDouble().isInfinite()
2021-03-12 04:20:56,958 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:20:56,959 [main:53] - replacing ("REIFIED_TYPE_PARAMETER_NO_INLINE", String)
2021-03-12 04:20:56,960 [main:50] - replacing "REIFIED_TYPE_PARAMETER_NO_INLINE" String
2021-03-12 04:20:56,960 [main:54] - Getting value of type String
2021-03-12 04:20:57,048 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:20:57,048 [main:58] - GENERATED VALUE OF TYPE String = "tnbhc"
2021-03-12 04:20:57,048 [main:61] - GENERATED IS CALL =false
2021-03-12 04:20:57,444 [main:67] - randomType = LinkedHashMap<ULong, UByte>
2021-03-12 04:20:57,521 [main:302] - generating value of type = LinkedHashMap<ULong, UByte> false depth = 0
2021-03-12 04:20:57,607 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<ULong, UByte> = TODO()
2021-03-12 04:20:57,610 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<ULong, UByte> = TODO()
2021-03-12 04:20:57,748 [main:95] - GENERATED = LinkedHashMap<ULong, UByte>()
2021-03-12 04:20:58,035 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:20:58,119 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:20:58,121 [main:78] - Generated call from random type = (LinkedHashMap<ULong, UByte>()).size.toString(1822913062)
2021-03-12 04:20:58,121 [main:61] - replacement of "REIFIED_TYPE_PARAMETER_NO_INLINE" of type String is (LinkedHashMap<ULong, UByte>()).size.toString(1822913062)
2021-03-12 04:20:58,206 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:20:58,207 [main:66] - Compilation checking started
2021-03-12 04:20:58,601 [main:49] - Result = false
Text:
import kotlin.*

@Suppress((LinkedHashMap<ULong, UByte>()).size.toString(1822913062))
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if((0.6279481f).toChar().isLetterOrDigit()) return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}


2021-03-12 04:20:58,602 [main:53] - replacing (test.getCanonicalName() != ("wnckm").uppercase(), Boolean)
2021-03-12 04:20:58,602 [main:50] - replacing test.getCanonicalName() != ("wnckm").uppercase() Boolean
2021-03-12 04:20:58,602 [main:54] - Getting value of type Boolean
2021-03-12 04:20:58,702 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:20:58,702 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:20:58,703 [main:61] - GENERATED IS CALL =false
2021-03-12 04:20:58,703 [main:67] - randomType = Boolean
2021-03-12 04:20:58,786 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:20:58,801 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e]
2021-03-12 04:20:58,884 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]
2021-03-12 04:20:58,885 [main:78] - Generated call from random type = (false).equals(null).not()
2021-03-12 04:20:58,886 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:20:58,890 [main:61] - replacement of test.getCanonicalName() != ("wnckm").uppercase() of type Boolean is false
2021-03-12 04:20:58,970 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:20:58,970 [main:53] - replacing (test.getCanonicalName() != ("wnckm").uppercase(), Boolean)
2021-03-12 04:20:58,970 [main:50] - replacing test.getCanonicalName() != ("wnckm").uppercase() Boolean
2021-03-12 04:20:58,971 [main:54] - Getting value of type Boolean
2021-03-12 04:20:59,053 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:20:59,053 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:20:59,054 [main:61] - GENERATED IS CALL =false
2021-03-12 04:20:59,177 [main:67] - randomType = UByte
2021-03-12 04:20:59,254 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:20:59,325 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@51798f82]
2021-03-12 04:20:59,326 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@384d0737]
2021-03-12 04:20:59,415 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:20:59,416 [main:78] - Generated call from random type = (34.toUByte()).toShort().equals("tiopp")
2021-03-12 04:20:59,416 [main:61] - replacement of test.getCanonicalName() != ("wnckm").uppercase() of type Boolean is (34.toUByte()).toShort().equals("tiopp")
2021-03-12 04:20:59,494 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:20:59,572 [main:119] - TRYING TO REPLACE CONSTANT 0.6279481f
2021-03-12 04:20:59,660 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 04:20:59,661 [main:66] - Compilation checking started
2021-03-12 04:21:00,034 [main:53] - Result = true
Text:
import kotlin.*

@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(((0.6279481f)).toChar().isLetterOrDigit()) return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}


2021-03-12 04:21:00,052 [main:66] - Compilation checking started
2021-03-12 04:21:00,305 [main:41] - AFTER TRY 0 res = import kotlin.*

@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}
2021-03-12 04:21:00,627 [main:43] - GENERATING CALL OF @Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java
2021-03-12 04:21:01,365 [main:61] - WITHOUT TYPE PARAMS = @Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<Function1<Map<HashSet<Long?>, Char>, ULong?>> = T::class.java
2021-03-12 04:21:01,481 [main:95] - GENERATED = javaClass<Function1<Map<HashSet<Long?>, Char>, ULong?>>()
2021-03-12 04:21:01,569 [main:43] - Try №0
2021-03-12 04:21:17,965 [main:48] - Already checked
2021-03-12 04:21:18,225 [main:48] - Already checked
2021-03-12 04:21:22,606 [main:69] - Trying to insert suspend fun <Ty0> fu4(value: Ty0): Ty0 = value
2021-03-12 04:21:22,719 [main:66] - Compilation checking started
2021-03-12 04:21:23,939 [main:103] - Trying to change 218 nodes
2021-03-12 04:21:23,939 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 04:21:23,939 [main:50] - replacing getOrThrow() Any?
2021-03-12 04:21:23,940 [main:54] - Getting value of type Any?
2021-03-12 04:21:24,106 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:21:24,106 [main:58] - GENERATED VALUE OF TYPE Any? = "qgyvk"
2021-03-12 04:21:24,107 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:24,453 [main:67] - randomType = ULong?
2021-03-12 04:21:24,622 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:21:24,680 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:21:24,684 [main:114] - replacement of getOrThrow() of type Any? is "qgyvk"
2021-03-12 04:21:24,875 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:21:24,876 [main:66] - Compilation checking started
2021-03-12 04:21:25,314 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 {
        Kla3().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0."qgyvk"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:21:25,317 [main:107] - replacing ({
        Kla3().fu8()
    }, SuspendFunction0<Unit>)
2021-03-12 04:21:25,318 [main:50] - replacing {
        Kla3().fu8()
    } SuspendFunction0<Unit>
2021-03-12 04:21:25,318 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 04:21:25,464 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 04:21:25,466 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:21:25,474 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println()}
2021-03-12 04:21:25,474 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:25,642 [main:67] - randomType = Double
2021-03-12 04:21:25,791 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:21:25,862 [main:106] - GETTING SuspendFunction0<Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:21:25,866 [main:114] - replacement of {
        Kla3().fu8()
    } of type SuspendFunction0<Unit> is { println()}
2021-03-12 04:21:26,016 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:21:26,017 [main:66] - Compilation checking started
2021-03-12 04:21:26,699 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:21:26,702 [main:107] - replacing (it as Continuation<Any>, Continuation<Any>)
2021-03-12 04:21:26,702 [main:50] - replacing it as Continuation<Any> Continuation<Any>
2021-03-12 04:21:26,702 [main:54] - Getting value of type Continuation<Any>
2021-03-12 04:21:26,844 [main:302] - generating value of type = Continuation<Any> false depth = 0
2021-03-12 04:21:27,037 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 04:21:27,041 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 04:21:27,596 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 04:21:27,773 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:27,776 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:28,207 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 04:21:28,391 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:28,395 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:28,910 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 04:21:29,131 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:21:29,136 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:21:29,686 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:21:29,686 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:29,686 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:29,686 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 04:21:29,686 [main:58] - GENERATED VALUE OF TYPE Continuation<Any> = 
2021-03-12 04:21:30,215 [main:67] - randomType = LinkedHashSet<Array<Byte>>
2021-03-12 04:21:30,365 [main:302] - generating value of type = LinkedHashSet<Array<Byte>> false depth = 0
2021-03-12 04:21:30,514 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Array<Byte>> = TODO()
2021-03-12 04:21:30,518 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Array<Byte>> = TODO()
2021-03-12 04:21:30,815 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:21:30,818 [main:95] - GENERATED = LinkedHashSet<Array<Byte>>(-1654205868)
2021-03-12 04:21:31,110 [main:106] - GETTING Continuation<Any> from [ERROR : Class<T>]<T>
2021-03-12 04:21:31,114 [main:111] - Cant find and generate replacement for it as Continuation<Any> type Continuation<Any>
2021-03-12 04:21:31,114 [main:107] - replacing (prope1?.resumeWithException(IllegalStateException("OK")), Unit?)
2021-03-12 04:21:31,114 [main:50] - replacing prope1?.resumeWithException(IllegalStateException("OK")) Unit?
2021-03-12 04:21:31,114 [main:54] - Getting value of type Unit?
2021-03-12 04:21:31,262 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 04:21:31,406 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:21:31,409 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:21:31,729 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 04:21:31,731 [main:95] - GENERATED = check(true)
2021-03-12 04:21:31,732 [main:58] - GENERATED VALUE OF TYPE Unit? = check(true)
2021-03-12 04:21:31,732 [main:61] - GENERATED IS CALL =true
2021-03-12 04:21:31,873 [main:67] - randomType = Byte
2021-03-12 04:21:32,058 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:21:32,140 [main:106] - GETTING Unit? from [ERROR : Class<T>]<T>
2021-03-12 04:21:32,145 [main:114] - replacement of prope1?.resumeWithException(IllegalStateException("OK")) of type Unit? is check(true)
2021-03-12 04:21:32,291 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:21:32,292 [main:66] - Compilation checking started
2021-03-12 04:21:33,018 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    check(true)

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:21:33,021 [main:107] - replacing (exception, Throwable)
2021-03-12 04:21:33,021 [main:50] - replacing exception Throwable
2021-03-12 04:21:33,021 [main:54] - Getting value of type Throwable
2021-03-12 04:21:33,150 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 04:21:33,290 [main:43] - GENERATING CALL OF fun Throwable(message: kotlin.String?): Throwable = TODO()
2021-03-12 04:21:33,294 [main:61] - WITHOUT TYPE PARAMS = fun Throwable(message: kotlin.String?): Throwable = TODO()
2021-03-12 04:21:33,569 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:21:33,571 [main:95] - GENERATED = Throwable("xxpud")
2021-03-12 04:21:33,572 [main:58] - GENERATED VALUE OF TYPE Throwable = Throwable("xxpud")
2021-03-12 04:21:33,572 [main:61] - GENERATED IS CALL =true
2021-03-12 04:21:33,712 [main:67] - randomType = UInt
2021-03-12 04:21:33,857 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:21:33,896 [main:106] - GETTING Throwable from [ERROR : Class<T>]<T>
2021-03-12 04:21:33,900 [main:114] - replacement of exception of type Throwable is Throwable("xxpud")
2021-03-12 04:21:34,035 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:21:34,035 [main:66] - Compilation checking started
2021-03-12 04:21:34,667 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    check(true)

    if (prope0 != "OK") return "FAIL 2 $prope0"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:34,671 [main:107] - replacing (prope0, String)
2021-03-12 04:21:34,671 [main:50] - replacing prope0 String
2021-03-12 04:21:34,671 [main:54] - Getting value of type String
2021-03-12 04:21:34,810 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:21:34,813 [main:58] - GENERATED VALUE OF TYPE String = "ntqth"
2021-03-12 04:21:34,813 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:34,955 [main:67] - randomType = Short
2021-03-12 04:21:35,097 [main:302] - generating value of type = Short true depth = 0
2021-03-12 04:21:35,157 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e8fb0bd]
2021-03-12 04:21:35,157 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:21:35,295 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:21:35,298 [main:78] - Generated call from random type = (28057).toLong().toString(727685824)
2021-03-12 04:21:35,298 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:21:35,302 [main:114] - replacement of prope0 of type String is (28057).toLong().toString(727685824)
2021-03-12 04:21:35,438 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:21:35,438 [main:66] - Compilation checking started
2021-03-12 04:21:36,079 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    check(true)

    if (prope0 != "OK") return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:36,082 [main:107] - replacing (prope3, Kla8)
2021-03-12 04:21:36,083 [main:50] - replacing prope3 Kla8
2021-03-12 04:21:36,083 [main:54] - Getting value of type Kla8
2021-03-12 04:21:36,253 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 04:21:36,256 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 04:21:36,257 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-12 04:21:36,257 [main:61] - GENERATED IS CALL =true
2021-03-12 04:21:36,267 [main:67] - randomType = Kla4
2021-03-12 04:21:36,422 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 04:21:36,424 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}
2021-03-12 04:21:36,558 [main:194] - Type params = []
2021-03-12 04:21:36,702 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 04:21:36,842 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:36,845 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:37,123 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 04:21:37,254 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:37,258 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:37,780 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:37,780 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:37,802 [main:106] - GETTING Kla8 from [ERROR : Class<T>]<T>
2021-03-12 04:21:37,806 [main:114] - replacement of prope3 of type Kla8 is Kla8()
2021-03-12 04:21:37,933 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:21:37,933 [main:66] - Compilation checking started
2021-03-12 04:21:38,598 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    check(true)

    if (prope0 != "OK") return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:38,602 [main:107] - replacing ({ prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 04:21:38,602 [main:50] - replacing { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 04:21:38,602 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 04:21:38,750 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 04:21:38,753 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:21:38,908 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:21:38,912 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:21:39,226 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:21:39,226 [main:95] - GENERATED = println("xwnnn")
2021-03-12 04:21:39,226 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println("xwnnn")}
2021-03-12 04:21:39,226 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:39,394 [main:67] - randomType = Kla3
2021-03-12 04:21:39,520 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 04:21:39,522 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 04:21:39,536 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:21:39,539 [main:114] - replacement of { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println("xwnnn")}
2021-03-12 04:21:39,673 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:21:39,673 [main:66] - Compilation checking started
2021-03-12 04:21:40,316 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(fu1())))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    check(true)

    if (prope0 != "OK") return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:40,319 [main:107] - replacing (prope1, Continuation<Any>?)
2021-03-12 04:21:40,319 [main:50] - replacing prope1 Continuation<Any>?
2021-03-12 04:21:40,319 [main:54] - Getting value of type Continuation<Any>?
2021-03-12 04:21:40,474 [main:302] - generating value of type = Continuation<Any> false depth = 0
2021-03-12 04:21:40,618 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 04:21:40,622 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 04:21:41,026 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 04:21:41,153 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:41,156 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:41,439 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 04:21:41,571 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:41,575 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:42,065 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:42,066 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:42,066 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 04:21:42,066 [main:58] - GENERATED VALUE OF TYPE Continuation<Any>? = 
2021-03-12 04:21:42,217 [main:67] - randomType = ULong
2021-03-12 04:21:42,345 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:21:42,398 [main:106] - GETTING Continuation<Any>? from [ERROR : Class<T>]<T>
2021-03-12 04:21:42,402 [main:111] - Cant find and generate replacement for prope1 type Continuation<Any>?
2021-03-12 04:21:42,402 [main:107] - replacing (fu1(), Kla0)
2021-03-12 04:21:42,403 [main:50] - replacing fu1() Kla0
2021-03-12 04:21:42,403 [main:54] - Getting value of type Kla0
2021-03-12 04:21:42,534 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:21:42,536 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:21:42,669 [main:194] - Type params = []
2021-03-12 04:21:42,856 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:21:42,856 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("vikbs")
2021-03-12 04:21:42,857 [main:61] - GENERATED IS CALL =true
2021-03-12 04:21:43,040 [main:67] - randomType = Float
2021-03-12 04:21:43,162 [main:302] - generating value of type = Float true depth = 0
2021-03-12 04:21:43,205 [main:106] - GETTING Kla0 from [ERROR : Class<T>]<T>
2021-03-12 04:21:43,209 [main:114] - replacement of fu1() of type Kla0 is Kla0("vikbs")
2021-03-12 04:21:43,333 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:21:43,334 [main:66] - Compilation checking started
2021-03-12 04:21:43,936 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    check(true)

    if (prope0 != "OK") return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:43,938 [main:107] - replacing (prope0, Result<Any?>)
2021-03-12 04:21:43,938 [main:50] - replacing prope0 Result<Any?>
2021-03-12 04:21:43,938 [main:54] - Getting value of type Result<Any?>
2021-03-12 04:21:44,071 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 04:21:44,198 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:21:44,201 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:21:44,459 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 04:21:44,462 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:21:44,462 [main:95] - GENERATED = runCatching<Any?>({ "gckoq"})
2021-03-12 04:21:44,462 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "gckoq"})
2021-03-12 04:21:44,462 [main:61] - GENERATED IS CALL =true
2021-03-12 04:21:44,605 [main:67] - randomType = Kla4?
2021-03-12 04:21:44,726 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 04:21:44,728 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}
2021-03-12 04:21:44,880 [main:194] - Type params = []
2021-03-12 04:21:45,004 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 04:21:45,129 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:45,132 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:45,403 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 04:21:45,570 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:45,574 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:46,015 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:46,015 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:46,040 [main:106] - GETTING Result<Any?> from [ERROR : Class<T>]<T>
2021-03-12 04:21:46,044 [main:114] - replacement of prope0 of type Result<Any?> is runCatching<Any?>({ "gckoq"})
2021-03-12 04:21:46,169 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:21:46,170 [main:66] - Compilation checking started
2021-03-12 04:21:46,825 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    check(true)

    if (prope0 != "OK") return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:46,827 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 04:21:46,827 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 04:21:46,827 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 04:21:46,954 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 04:21:46,960 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 04:21:47,103 [main:67] - randomType = Int?
2021-03-12 04:21:47,221 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:21:47,271 [main:106] - GETTING EmptyCoroutineContext from [ERROR : Class<T>]<T>
2021-03-12 04:21:47,275 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 04:21:47,275 [main:107] - replacing (prope0 != "OK", Boolean)
2021-03-12 04:21:47,275 [main:50] - replacing prope0 != "OK" Boolean
2021-03-12 04:21:47,275 [main:54] - Getting value of type Boolean
2021-03-12 04:21:47,398 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:21:47,400 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:21:47,400 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:48,295 [main:67] - randomType = Function1<Pair<ArrayList<Kla7?>, Kla4>, Kla6<Short>>
2021-03-12 04:21:48,296 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:21:48,299 [main:114] - replacement of prope0 != "OK" of type Boolean is false
2021-03-12 04:21:48,431 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:21:48,432 [main:66] - Compilation checking started
2021-03-12 04:21:49,063 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        Kla2().fu8()
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:49,066 [main:107] - replacing (Kla2().fu8(), Any?)
2021-03-12 04:21:49,066 [main:50] - replacing Kla2().fu8() Any?
2021-03-12 04:21:49,066 [main:54] - Getting value of type Any?
2021-03-12 04:21:49,204 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:21:49,205 [main:58] - GENERATED VALUE OF TYPE Any? = "ujfvp"
2021-03-12 04:21:49,205 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:49,209 [main:67] - randomType = String
2021-03-12 04:21:49,333 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:21:49,355 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:21:49,357 [main:114] - replacement of Kla2().fu8() of type Any? is "ujfvp"
2021-03-12 04:21:49,474 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:21:49,474 [main:66] - Compilation checking started
2021-03-12 04:21:50,141 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:50,143 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-12 04:21:50,144 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-12 04:21:50,144 [main:54] - Getting value of type String
2021-03-12 04:21:50,284 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:21:50,286 [main:58] - GENERATED VALUE OF TYPE String = "ndupa"
2021-03-12 04:21:50,286 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:50,422 [main:67] - randomType = Kla9
2021-03-12 04:21:50,543 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 04:21:50,545 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:21:50,571 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:21:50,573 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is "ndupa"
2021-03-12 04:21:50,691 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:21:50,691 [main:66] - Compilation checking started
2021-03-12 04:21:51,296 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:51,298 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 04:21:51,298 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 04:21:51,298 [main:54] - Getting value of type String
2021-03-12 04:21:51,422 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:21:51,425 [main:58] - GENERATED VALUE OF TYPE String = "tgyoo"
2021-03-12 04:21:51,425 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:51,434 [main:67] - randomType = Kla0
2021-03-12 04:21:51,549 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:21:51,551 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:21:51,669 [main:194] - Type params = []
2021-03-12 04:21:51,784 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:21:51,789 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:21:51,790 [main:78] - Generated call from random type = (Kla0("aeaiw")).s?.toString()!!
2021-03-12 04:21:51,790 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:21:51,793 [main:114] - replacement of "tail-call optimization hit: method " of type String is "tgyoo"
2021-03-12 04:21:51,909 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:21:51,910 [main:66] - Compilation checking started
2021-03-12 04:21:52,491 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:52,493 [main:107] - replacing (true, Boolean)
2021-03-12 04:21:52,493 [main:50] - replacing true Boolean
2021-03-12 04:21:52,493 [main:54] - Getting value of type Boolean
2021-03-12 04:21:52,609 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:21:52,611 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:21:52,611 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:53,173 [main:67] - randomType = Triple<Kla9, ArrayDeque<Boolean>, Kla4>
2021-03-12 04:21:53,290 [main:302] - generating value of type = Triple<Kla9, ArrayDeque<Boolean>, Kla4> false depth = 0
2021-03-12 04:21:53,431 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla9, second: ArrayDeque<Boolean>, third: Kla4): Triple<Kla9, ArrayDeque<Boolean>, Kla4> = TODO()
2021-03-12 04:21:53,435 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla9, second: ArrayDeque<Boolean>, third: Kla4): Triple<Kla9, ArrayDeque<Boolean>, Kla4> = TODO()
2021-03-12 04:21:53,562 [main:302] - generating value of type = Kla9 false depth = 3
2021-03-12 04:21:53,565 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:21:53,565 [main:302] - generating value of type = ArrayDeque<Boolean> false depth = 3
2021-03-12 04:21:53,692 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Boolean>): ArrayDeque<Boolean> = TODO()
2021-03-12 04:21:53,695 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Boolean>): ArrayDeque<Boolean> = TODO()
2021-03-12 04:21:53,948 [main:302] - generating value of type = Collection<Boolean> false depth = 6
2021-03-12 04:21:54,074 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Collection<Boolean> = TODO()
2021-03-12 04:21:54,077 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Collection<Boolean> = TODO()
2021-03-12 04:21:54,253 [main:95] - GENERATED = hashSetOf<Boolean>()
2021-03-12 04:21:54,254 [main:95] - GENERATED = ArrayDeque<Boolean>(hashSetOf<Boolean>())
2021-03-12 04:21:54,254 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 04:21:54,256 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}
2021-03-12 04:21:54,394 [main:194] - Type params = []
2021-03-12 04:21:54,512 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 04:21:54,633 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:54,637 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:54,890 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 04:21:55,017 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:55,020 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:55,459 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 04:21:55,583 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:21:55,587 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:21:56,009 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:21:56,009 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:21:56,009 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:21:56,009 [main:95] - GENERATED = Triple<Kla9, ArrayDeque<Boolean>, Kla4>(Kla9, ArrayDeque<Boolean>(hashSetOf<Boolean>()), Kla4())
2021-03-12 04:21:56,043 [main:149] - GENERATING call of type public open fun retainAll(elements: kotlin.collections.Collection<kotlin.Boolean>): kotlin.Boolean defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@773201ee]
2021-03-12 04:21:56,184 [main:302] - generating value of type = Collection<Boolean> false depth = 0
2021-03-12 04:21:56,307 [main:43] - GENERATING CALL OF fun <T> listOf(): Collection<Boolean> = TODO()
2021-03-12 04:21:56,310 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Collection<Boolean> = TODO()
2021-03-12 04:21:56,430 [main:95] - GENERATED = listOf<Boolean>()
2021-03-12 04:21:56,430 [main:78] - Generated call from random type = (Triple<Kla9, ArrayDeque<Boolean>, Kla4>(Kla9, ArrayDeque<Boolean>(hashSetOf<Boolean>()), Kla4())).second.retainAll(listOf<Boolean>())
2021-03-12 04:21:56,431 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:21:56,434 [main:114] - replacement of true of type Boolean is false
2021-03-12 04:21:56,548 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:21:56,549 [main:66] - Compilation checking started
2021-03-12 04:21:57,109 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:21:57,112 [main:107] - replacing ("UNCHECKED_CAST", String)
2021-03-12 04:21:57,112 [main:50] - replacing "UNCHECKED_CAST" String
2021-03-12 04:21:57,112 [main:54] - Getting value of type String
2021-03-12 04:21:57,252 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:21:57,255 [main:58] - GENERATED VALUE OF TYPE String = "zezox"
2021-03-12 04:21:57,255 [main:61] - GENERATED IS CALL =false
2021-03-12 04:21:57,653 [main:67] - randomType = ArrayDeque<Char?>
2021-03-12 04:21:57,766 [main:302] - generating value of type = ArrayDeque<Char?> false depth = 0
2021-03-12 04:21:57,889 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Char?>): ArrayDeque<Char?> = TODO()
2021-03-12 04:21:57,892 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Char?>): ArrayDeque<Char?> = TODO()
2021-03-12 04:21:58,186 [main:302] - generating value of type = Collection<Char?> false depth = 3
2021-03-12 04:21:58,309 [main:43] - GENERATING CALL OF fun ULongArray(size: kotlin.Int): Collection<Char?> = TODO()
2021-03-12 04:21:58,312 [main:61] - WITHOUT TYPE PARAMS = fun ULongArray(size: kotlin.Int): Collection<Char?> = TODO()
2021-03-12 04:21:58,560 [main:302] - generating value of type = Int true depth = 6
2021-03-12 04:21:58,563 [main:95] - GENERATED = ULongArray(-460633292)
2021-03-12 04:21:58,563 [main:95] - GENERATED = ArrayDeque<Char?>(ULongArray(-460633292))
2021-03-12 04:21:58,707 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@81c63c4]
2021-03-12 04:21:58,825 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:21:58,967 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 04:21:58,970 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 04:21:59,232 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:21:59,235 [main:95] - GENERATED = StringBuilder("igkfs")
2021-03-12 04:21:59,350 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:21:59,472 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:21:59,598 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:21:59,602 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:21:59,883 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:21:59,886 [main:95] - GENERATED = StringBuilder(1336472686)
2021-03-12 04:22:00,024 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:00,139 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:22:00,259 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 04:22:00,261 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 04:22:00,267 [main:78] - Generated call from random type = (ArrayDeque<Char?>(ULongArray(-460633292))).joinToString(StringBuilder("igkfs"), "winls", StringBuilder(1336472686), -997220756, "muilr", {a: T -> "hxyuc"})
2021-03-12 04:22:00,268 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:22:00,271 [main:114] - replacement of "UNCHECKED_CAST" of type String is "zezox"
2021-03-12 04:22:00,385 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:22:00,385 [main:66] - Compilation checking started
2021-03-12 04:22:00,955 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:00,956 [main:107] - replacing (prope5, Int)
2021-03-12 04:22:00,957 [main:50] - replacing prope5 Int
2021-03-12 04:22:00,957 [main:54] - Getting value of type Int
2021-03-12 04:22:01,086 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:01,088 [main:58] - GENERATED VALUE OF TYPE Int = -51599056
2021-03-12 04:22:01,089 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:01,093 [main:67] - randomType = Int
2021-03-12 04:22:01,209 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:01,244 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@51defa7a]
2021-03-12 04:22:01,245 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@601f6fd5]
2021-03-12 04:22:01,359 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:01,362 [main:78] - Generated call from random type = (35520678).toInt().rotateRight(649080709)
2021-03-12 04:22:01,362 [main:106] - GETTING Int from [ERROR : Class<T>]<T>
2021-03-12 04:22:01,366 [main:114] - replacement of prope5 of type Int is (35520678).toInt().rotateRight(649080709)
2021-03-12 04:22:01,479 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:22:01,479 [main:66] - Compilation checking started
2021-03-12 04:22:02,040 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:02,042 [main:107] - replacing (prope5, Int)
2021-03-12 04:22:02,042 [main:50] - replacing prope5 Int
2021-03-12 04:22:02,042 [main:54] - Getting value of type Int
2021-03-12 04:22:02,159 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:02,161 [main:58] - GENERATED VALUE OF TYPE Int = 2028990891
2021-03-12 04:22:02,161 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:02,437 [main:67] - randomType = Kla9?
2021-03-12 04:22:02,555 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 04:22:02,557 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:22:02,576 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla9[DeserializedSimpleFunctionDescriptor@29f8c9ef]
2021-03-12 04:22:02,691 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:22:02,691 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0]
2021-03-12 04:22:02,816 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:02,818 [main:78] - Generated call from random type = (Kla9)?.equals("olqkg").compareTo(false)
2021-03-12 04:22:02,819 [main:106] - GETTING Int from [ERROR : Class<T>]<T>
2021-03-12 04:22:02,822 [main:114] - replacement of prope5 of type Int is (Kla9)?.equals("olqkg").compareTo(false)
2021-03-12 04:22:02,940 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:22:02,941 [main:66] - Compilation checking started
2021-03-12 04:22:03,490 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:03,492 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 04:22:03,492 [main:50] - replacing it Continuation<Unit>
2021-03-12 04:22:03,492 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 04:22:03,630 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 04:22:03,756 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 04:22:03,759 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 04:22:04,157 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 04:22:04,285 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:22:04,288 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:22:04,548 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 04:22:04,704 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:22:04,708 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:22:05,116 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:22:05,116 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:22:05,116 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 04:22:05,117 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 04:22:05,384 [main:67] - randomType = UByte?
2021-03-12 04:22:05,500 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:22:05,547 [main:106] - GETTING Continuation<Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:22:05,551 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 04:22:05,551 [main:107] - replacing (Kla7(), Kla7)
2021-03-12 04:22:05,551 [main:50] - replacing Kla7() Kla7
2021-03-12 04:22:05,551 [main:54] - Getting value of type Kla7
2021-03-12 04:22:05,697 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 04:22:05,699 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 04:22:05,700 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 04:22:05,700 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:05,710 [main:67] - randomType = Kla1
2021-03-12 04:22:05,846 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:22:05,848 [main:112] - generating klass Kla1 text = class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 04:22:05,974 [main:194] - Type params = []
2021-03-12 04:22:06,104 [main:106] - GETTING Kla7 from [ERROR : Class<T>]<T>
2021-03-12 04:22:06,107 [main:114] - replacement of Kla7() of type Kla7 is Kla7()
2021-03-12 04:22:06,223 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:22:06,225 [main:107] - replacing (prope1 !is CoroutineStackFrame, Boolean)
2021-03-12 04:22:06,226 [main:50] - replacing prope1 !is CoroutineStackFrame Boolean
2021-03-12 04:22:06,226 [main:54] - Getting value of type Boolean
2021-03-12 04:22:06,345 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:06,348 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:22:06,348 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:06,633 [main:67] - randomType = Kla6<Char>
2021-03-12 04:22:06,770 [main:302] - generating value of type = Kla6<Char> false depth = 0
2021-03-12 04:22:06,772 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:22:07,306 [main:302] - generating value of type = Kla9 false depth = 2
2021-03-12 04:22:07,308 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:22:07,329 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@76b50b55]
2021-03-12 04:22:07,453 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:22:07,454 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]
2021-03-12 04:22:07,733 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:07,735 [main:78] - Generated call from random type = (Kla9).equals("jgfbq").and(false)
2021-03-12 04:22:07,736 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:22:07,739 [main:114] - replacement of prope1 !is CoroutineStackFrame of type Boolean is true
2021-03-12 04:22:07,878 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:22:07,879 [main:66] - Compilation checking started
2021-03-12 04:22:08,257 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(prope1: Continuation<*>) {
        if (true) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:08,259 [main:107] - replacing ({
        fu11(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 04:22:08,259 [main:50] - replacing {
        fu11(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 04:22:08,259 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 04:22:08,383 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 04:22:08,385 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:22:08,511 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:22:08,514 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:22:08,895 [main:302] - generating value of type = Int true depth = 4
2021-03-12 04:22:08,898 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 04:22:08,900 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 04:22:08,906 [main:95] - GENERATED = repeat(-1769405199, {a: Int -> println()})
2021-03-12 04:22:08,906 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}
2021-03-12 04:22:08,906 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:08,915 [main:67] - randomType = Kla0
2021-03-12 04:22:09,032 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:22:09,034 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:22:09,159 [main:194] - Type params = []
2021-03-12 04:22:09,275 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:22:09,282 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:22:09,285 [main:114] - replacement of {
        fu11(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}
2021-03-12 04:22:09,403 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:22:09,404 [main:66] - Compilation checking started
2021-03-12 04:22:10,007 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:10,010 [main:107] - replacing (ss, Kla0)
2021-03-12 04:22:10,010 [main:50] - replacing ss Kla0
2021-03-12 04:22:10,010 [main:54] - Getting value of type Kla0
2021-03-12 04:22:10,133 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:22:10,135 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:22:10,262 [main:194] - Type params = []
2021-03-12 04:22:10,386 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:22:10,387 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("ykgjt")
2021-03-12 04:22:10,387 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:10,700 [main:67] - randomType = UShort?
2021-03-12 04:22:10,818 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:22:10,856 [main:106] - GETTING Kla0 from [ERROR : Class<T>]<T>
2021-03-12 04:22:10,859 [main:114] - replacement of ss of type Kla0 is Kla0("ykgjt")
2021-03-12 04:22:10,988 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:22:10,989 [main:66] - Compilation checking started
2021-03-12 04:22:11,561 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:11,564 [main:107] - replacing (0, Int)
2021-03-12 04:22:11,564 [main:50] - replacing 0 Int
2021-03-12 04:22:11,564 [main:54] - Getting value of type Int
2021-03-12 04:22:11,684 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:11,687 [main:58] - GENERATED VALUE OF TYPE Int = 1086700094
2021-03-12 04:22:11,687 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:12,098 [main:67] - randomType = List<ULong?>
2021-03-12 04:22:12,099 [main:106] - GETTING Int from [ERROR : Class<T>]<T>
2021-03-12 04:22:12,103 [main:114] - replacement of 0 of type Int is 1086700094
2021-03-12 04:22:12,219 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:22:12,220 [main:66] - Compilation checking started
2021-03-12 04:22:12,799 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("OK"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:12,801 [main:107] - replacing ("OK", String)
2021-03-12 04:22:12,801 [main:50] - replacing "OK" String
2021-03-12 04:22:12,801 [main:54] - Getting value of type String
2021-03-12 04:22:12,926 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:22:12,928 [main:58] - GENERATED VALUE OF TYPE String = "kzemy"
2021-03-12 04:22:12,928 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:13,211 [main:67] - randomType = HashMap<Kla5, Short>
2021-03-12 04:22:13,330 [main:302] - generating value of type = HashMap<Kla5, Short> false depth = 0
2021-03-12 04:22:13,455 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla5, Short> = TODO()
2021-03-12 04:22:13,459 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla5, Short> = TODO()
2021-03-12 04:22:13,607 [main:95] - GENERATED = linkedMapOf<Kla5, Short>()
2021-03-12 04:22:13,737 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:22:13,859 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:13,862 [main:78] - Generated call from random type = (linkedMapOf<Kla5, Short>()).size.toString(-1717927696)
2021-03-12 04:22:13,863 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:22:13,866 [main:114] - replacement of "OK" of type String is "kzemy"
2021-03-12 04:22:13,991 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:22:13,991 [main:66] - Compilation checking started
2021-03-12 04:22:14,549 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:14,551 [main:107] - replacing ({
        prope0.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 04:22:14,551 [main:50] - replacing {
        prope0.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 04:22:14,551 [main:54] - Getting value of type Unit?
2021-03-12 04:22:14,667 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 04:22:14,672 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-12 04:22:14,672 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:15,087 [main:67] - randomType = Map<ULong?, Int>
2021-03-12 04:22:15,088 [main:106] - GETTING Unit? from [ERROR : Class<T>]<T>
2021-03-12 04:22:15,092 [main:114] - replacement of {
        prope0.exceptionOrNull()?.let(x)
    } of type Unit? is println()
2021-03-12 04:22:15,209 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-12 04:22:15,209 [main:66] - Compilation checking started
2021-03-12 04:22:15,214 [main:71] - Wrong syntax or breaks conditions
2021-03-12 04:22:15,214 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0("vikbs"))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) println()
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:15,216 [main:107] - replacing (fu4(fu5(fu6(Kla0("vikbs")))), Kla0)
2021-03-12 04:22:15,216 [main:50] - replacing fu4(fu5(fu6(Kla0("vikbs")))) Kla0
2021-03-12 04:22:15,216 [main:54] - Getting value of type Kla0
2021-03-12 04:22:15,333 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:22:15,335 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:22:15,449 [main:194] - Type params = []
2021-03-12 04:22:15,566 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:22:15,566 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("bxgbd")
2021-03-12 04:22:15,567 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:15,575 [main:67] - randomType = Kla0
2021-03-12 04:22:15,692 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:22:15,695 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:22:15,811 [main:194] - Type params = []
2021-03-12 04:22:15,927 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:22:15,934 [main:106] - GETTING Kla0 from [ERROR : Class<T>]<T>
2021-03-12 04:22:15,938 [main:114] - replacement of fu4(fu5(fu6(Kla0("vikbs")))) of type Kla0 is Kla0("bxgbd")
2021-03-12 04:22:16,053 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:22:16,054 [main:66] - Compilation checking started
2021-03-12 04:22:16,641 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:16,644 [main:107] - replacing ({
            prope3.prope6 = true
        }, Function0<Unit>)
2021-03-12 04:22:16,644 [main:50] - replacing {
            prope3.prope6 = true
        } Function0<Unit>
2021-03-12 04:22:16,644 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:22:16,768 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:22:16,770 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:22:16,889 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:22:16,892 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:22:17,142 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:22:17,144 [main:95] - GENERATED = check(false)
2021-03-12 04:22:17,145 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 04:22:17,145 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:17,824 [main:67] - randomType = MutableMap<Function1<Char, Kla8>, UInt>?
2021-03-12 04:22:17,825 [main:106] - GETTING Function0<Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:22:17,828 [main:114] - replacement of {
            prope3.prope6 = true
        } of type Function0<Unit> is { check(false)}
2021-03-12 04:22:17,960 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:22:17,961 [main:66] - Compilation checking started
2021-03-12 04:22:18,484 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:18,486 [main:107] - replacing ("FAIL", String)
2021-03-12 04:22:18,486 [main:50] - replacing "FAIL" String
2021-03-12 04:22:18,486 [main:54] - Getting value of type String
2021-03-12 04:22:18,599 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:22:18,601 [main:58] - GENERATED VALUE OF TYPE String = "rcolu"
2021-03-12 04:22:18,601 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:18,606 [main:67] - randomType = Boolean
2021-03-12 04:22:18,720 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:18,734 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0]
2021-03-12 04:22:18,850 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:18,852 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:22:18,970 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:18,972 [main:78] - Generated call from random type = (true).compareTo(true).toString(1504727023)
2021-03-12 04:22:18,973 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:22:18,976 [main:114] - replacement of "FAIL" of type String is (true).compareTo(true).toString(1504727023)
2021-03-12 04:22:19,088 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:22:19,089 [main:66] - Compilation checking started
2021-03-12 04:22:19,669 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:19,671 [main:107] - replacing (prope0, Result<Any?>)
2021-03-12 04:22:19,671 [main:50] - replacing prope0 Result<Any?>
2021-03-12 04:22:19,671 [main:54] - Getting value of type Result<Any?>
2021-03-12 04:22:19,788 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 04:22:19,912 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:22:19,915 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:22:20,179 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 04:22:20,182 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:22:20,182 [main:95] - GENERATED = runCatching<Any?>({ "vyoew"})
2021-03-12 04:22:20,182 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "vyoew"})
2021-03-12 04:22:20,182 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:20,186 [main:67] - randomType = Int
2021-03-12 04:22:20,303 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:20,364 [main:106] - GETTING Result<Any?> from [ERROR : Class<T>]<T>
2021-03-12 04:22:20,367 [main:114] - replacement of prope0 of type Result<Any?> is runCatching<Any?>({ "vyoew"})
2021-03-12 04:22:20,485 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:22:20,486 [main:66] - Compilation checking started
2021-03-12 04:22:21,054 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:21,056 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 04:22:21,056 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 04:22:21,056 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:22:21,185 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:22:21,187 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:22:21,308 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:22:21,311 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:22:21,693 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:22:21,695 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 04:22:21,697 [main:302] - generating value of type = Any false depth = 5
2021-03-12 04:22:21,697 [main:95] - GENERATED = require(false, { "wbgmt"})
2021-03-12 04:22:21,698 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "wbgmt"})}
2021-03-12 04:22:21,698 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:21,827 [main:67] - randomType = Short
2021-03-12 04:22:21,942 [main:302] - generating value of type = Short true depth = 0
2021-03-12 04:22:21,980 [main:106] - GETTING Function0<Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:22:21,983 [main:114] - replacement of prope7 of type Function0<Unit> is { require(false, { "wbgmt"})}
2021-03-12 04:22:22,098 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 04:22:22,099 [main:66] - Compilation checking started
2021-03-12 04:22:22,487 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        { require(false, { "wbgmt"})} = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:22,490 [main:107] - replacing (method, String)
2021-03-12 04:22:22,490 [main:50] - replacing method String
2021-03-12 04:22:22,490 [main:54] - Getting value of type String
2021-03-12 04:22:22,643 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:22:22,645 [main:58] - GENERATED VALUE OF TYPE String = "bhirf"
2021-03-12 04:22:22,645 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:23,201 [main:67] - randomType = HashMap<Byte, ArrayList<Int>>?
2021-03-12 04:22:23,316 [main:302] - generating value of type = HashMap<Byte, ArrayList<Int>> false depth = 0
2021-03-12 04:22:23,440 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Byte, ArrayList<Int>>): HashMap<Byte, ArrayList<Int>> = TODO()
2021-03-12 04:22:23,443 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Byte, ArrayList<Int>>): HashMap<Byte, ArrayList<Int>> = TODO()
2021-03-12 04:22:23,565 [main:302] - generating value of type = Pair<Byte, ArrayList<Int>> false depth = 3
2021-03-12 04:22:23,686 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: ArrayList<Int>): Pair<Byte, ArrayList<Int>> = TODO()
2021-03-12 04:22:23,689 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: ArrayList<Int>): Pair<Byte, ArrayList<Int>> = TODO()
2021-03-12 04:22:23,812 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 04:22:23,814 [main:302] - generating value of type = ArrayList<Int> false depth = 6
2021-03-12 04:22:23,934 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 04:22:23,938 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 04:22:24,109 [main:302] - generating value of type = Int true depth = 9
2021-03-12 04:22:24,112 [main:95] - GENERATED = arrayListOf<Int>(786914593)
2021-03-12 04:22:24,112 [main:95] - GENERATED = Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))
2021-03-12 04:22:24,112 [main:95] - GENERATED = linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593)))
2021-03-12 04:22:24,282 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:22:24,396 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:24,399 [main:78] - Generated call from random type = (linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)
2021-03-12 04:22:24,399 [main:114] - replacement of method of type String is (linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)
2021-03-12 04:22:24,512 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:22:24,513 [main:66] - Compilation checking started
2021-03-12 04:22:25,214 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:25,217 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 04:22:25,217 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 04:22:25,218 [main:54] - Getting value of type String
2021-03-12 04:22:25,364 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:22:25,368 [main:58] - GENERATED VALUE OF TYPE String = "rhube"
2021-03-12 04:22:25,368 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:25,532 [main:67] - randomType = LinkedHashSet<String>
2021-03-12 04:22:25,697 [main:302] - generating value of type = LinkedHashSet<String> false depth = 0
2021-03-12 04:22:25,828 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<String>): LinkedHashSet<String> = TODO()
2021-03-12 04:22:25,833 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<String>): LinkedHashSet<String> = TODO()
2021-03-12 04:22:26,108 [main:302] - generating value of type = Collection<String> false depth = 3
2021-03-12 04:22:26,241 [main:43] - GENERATING CALL OF fun <T> listOf(elements: String): Collection<Strg> = TODO()
2021-03-12 04:22:26,245 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: String): Collection<Strg> = TODO()
2021-03-12 04:22:26,375 [main:302] - generating value of type = String true depth = 6
2021-03-12 04:22:26,379 [main:95] - GENERATED = listOf<String>("jarpo")
2021-03-12 04:22:26,379 [main:95] - GENERATED = LinkedHashSet<String>(listOf<String>("jarpo"))
2021-03-12 04:22:26,520 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26683409]
2021-03-12 04:22:26,643 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:26,647 [main:78] - Generated call from random type = (LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!!
2021-03-12 04:22:26,648 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:22:26,651 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!!
2021-03-12 04:22:26,770 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 04:22:26,770 [main:66] - Compilation checking started
2021-03-12 04:22:27,422 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:27,425 [main:107] - replacing (prope1 !is CoroutineStackFrame, Boolean)
2021-03-12 04:22:27,426 [main:50] - replacing prope1 !is CoroutineStackFrame Boolean
2021-03-12 04:22:27,426 [main:54] - Getting value of type Boolean
2021-03-12 04:22:27,611 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:27,615 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:22:27,615 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:29,228 [main:67] - randomType = Triple<ArrayDeque<ULong>, Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>>, ULong>
2021-03-12 04:22:29,353 [main:302] - generating value of type = Triple<ArrayDeque<ULong>, Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>>, ULong> false depth = 0
2021-03-12 04:22:29,491 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ArrayDeque<ULong>, second: Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>>, third: ULong): Triple<ArrayDeque<ULong>, Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>>, ULong> = TODO()
2021-03-12 04:22:29,496 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ArrayDeque<ULong>, second: Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>>, third: ULong): Triple<ArrayDeque<ULong>, Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>>, ULong> = TODO()
2021-03-12 04:22:29,627 [main:302] - generating value of type = ArrayDeque<ULong> false depth = 3
2021-03-12 04:22:29,756 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ULong> = TODO()
2021-03-12 04:22:29,760 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ULong> = TODO()
2021-03-12 04:22:30,031 [main:302] - generating value of type = Int true depth = 6
2021-03-12 04:22:30,035 [main:95] - GENERATED = ArrayDeque<ULong>(-405928343)
2021-03-12 04:22:30,035 [main:302] - generating value of type = Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>> false depth = 3
2021-03-12 04:22:30,169 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Map<Function2<Kla0, Float?, UShort>, Boolean>): Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>> = TODO()
2021-03-12 04:22:30,174 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Map<Function2<Kla0, Float?, UShort>, Boolean>): Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>> = TODO()
2021-03-12 04:22:30,330 [main:302] - generating value of type = Map<Function2<Kla0, Float?, UShort>, Boolean> false depth = 6
2021-03-12 04:22:30,462 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): Map<Function2<Kla0, Float?, UShort>, Boolean> = TODO()
2021-03-12 04:22:30,466 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): Map<Function2<Kla0, Float?, UShort>, Boolean> = TODO()
2021-03-12 04:22:30,597 [main:95] - GENERATED = linkedMapOf<Function2<Kla0, Float?, UShort>, Boolean>()
2021-03-12 04:22:30,597 [main:95] - GENERATED = listOfNotNull<Map<Function2<Kla0, Float?, UShort>, Boolean>>(linkedMapOf<Function2<Kla0, Float?, UShort>, Boolean>())
2021-03-12 04:22:30,597 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 04:22:30,601 [main:95] - GENERATED = Triple<ArrayDeque<ULong>, Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>>, ULong>(ArrayDeque<ULong>(-405928343), listOfNotNull<Map<Function2<Kla0, Float?, UShort>, Boolean>>(linkedMapOf<Function2<Kla0, Float?, UShort>, Boolean>()), 7902621366391197816.toULong())
2021-03-12 04:22:30,637 [main:149] - GENERATING call of type public open fun contains(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@5f74cb23]
2021-03-12 04:22:30,765 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:22:30,769 [main:78] - Generated call from random type = (Triple<ArrayDeque<ULong>, Collection<Map<Function2<Kla0, Float?, UShort>, Boolean>>, ULong>(ArrayDeque<ULong>(-405928343), listOfNotNull<Map<Function2<Kla0, Float?, UShort>, Boolean>>(linkedMapOf<Function2<Kla0, Float?, UShort>, Boolean>()), 7902621366391197816.toULong())).first.contains(8655501295237928985.toULong())
2021-03-12 04:22:30,770 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:22:30,773 [main:114] - replacement of prope1 !is CoroutineStackFrame of type Boolean is false
2021-03-12 04:22:30,894 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:22:30,895 [main:66] - Compilation checking started
2021-03-12 04:22:31,271 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (false) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:31,274 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 04:22:31,274 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 04:22:31,274 [main:54] - Getting value of type String
2021-03-12 04:22:31,407 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:22:31,411 [main:58] - GENERATED VALUE OF TYPE String = "wpent"
2021-03-12 04:22:31,411 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:32,023 [main:67] - randomType = ArrayList<Kla6<UInt?>>
2021-03-12 04:22:32,144 [main:302] - generating value of type = ArrayList<Kla6<UInt?>> false depth = 0
2021-03-12 04:22:32,273 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla6<UInt?>): ArrayList<Kla6<UInt?>> = TODO()
2021-03-12 04:22:32,278 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla6<UInt?>): ArrayList<Kla6<UInt?>> = TODO()
2021-03-12 04:22:32,407 [main:302] - generating value of type = Kla6<UInt?> false depth = 3
2021-03-12 04:22:32,411 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:22:33,625 [main:302] - generating value of type = Kla9 false depth = 5
2021-03-12 04:22:33,629 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:22:33,630 [main:95] - GENERATED = arrayListOf<Kla6<UInt?>>(Kla9)
2021-03-12 04:22:33,804 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2adf1388]
2021-03-12 04:22:33,805 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5571e88e]
2021-03-12 04:22:33,805 [main:78] - Generated call from random type = (arrayListOf<Kla6<UInt?>>(Kla9)).toArray().contentDeepToString()
2021-03-12 04:22:33,805 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (arrayListOf<Kla6<UInt?>>(Kla9)).toArray().contentDeepToString()
2021-03-12 04:22:33,931 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:22:33,931 [main:66] - Compilation checking started
2021-03-12 04:22:34,361 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(Kla0("ykgjt").s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Kla6<UInt?>>(Kla9)).toArray().contentDeepToString())
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:34,363 [main:107] - replacing (Kla0(Kla0("ykgjt").s), Kla0)
2021-03-12 04:22:34,363 [main:50] - replacing Kla0(Kla0("ykgjt").s) Kla0
2021-03-12 04:22:34,363 [main:54] - Getting value of type Kla0
2021-03-12 04:22:34,498 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:22:34,502 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:22:34,631 [main:194] - Type params = []
2021-03-12 04:22:34,767 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(null)
2021-03-12 04:22:34,767 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:34,916 [main:67] - randomType = UInt
2021-03-12 04:22:35,123 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:22:35,162 [main:106] - GETTING Kla0 from [ERROR : Class<T>]<T>
2021-03-12 04:22:35,165 [main:114] - replacement of Kla0(Kla0("ykgjt").s) of type Kla0 is Kla0(null)
2021-03-12 04:22:35,286 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:22:35,286 [main:66] - Compilation checking started
2021-03-12 04:22:35,941 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:35,943 [main:107] - replacing (checkFinished, Boolean)
2021-03-12 04:22:35,944 [main:50] - replacing checkFinished Boolean
2021-03-12 04:22:35,944 [main:54] - Getting value of type Boolean
2021-03-12 04:22:36,066 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:36,070 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:22:36,070 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:36,085 [main:67] - randomType = Kla7
2021-03-12 04:22:36,214 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 04:22:36,218 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 04:22:36,225 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@15ec4385]
2021-03-12 04:22:36,349 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:22:36,349 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]
2021-03-12 04:22:36,471 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:36,475 [main:78] - Generated call from random type = (Kla7()).equals("okkco").and(true)
2021-03-12 04:22:36,476 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:22:36,480 [main:114] - replacement of checkFinished of type Boolean is true
2021-03-12 04:22:36,602 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:22:36,603 [main:66] - Compilation checking started
2021-03-12 04:22:37,219 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:37,222 [main:107] - replacing (prope0.isSuccess, Boolean)
2021-03-12 04:22:37,222 [main:50] - replacing prope0.isSuccess Boolean
2021-03-12 04:22:37,222 [main:54] - Getting value of type Boolean
2021-03-12 04:22:37,366 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:37,370 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:22:37,370 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:37,552 [main:67] - randomType = Kla3
2021-03-12 04:22:37,700 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 04:22:37,704 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 04:22:37,716 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@10d18c5f]
2021-03-12 04:22:37,859 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:22:37,859 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:22:38,011 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:22:38,015 [main:78] - Generated call from random type = (Kla3()).equals("zsflw").or(false)
2021-03-12 04:22:38,016 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:22:38,020 [main:114] - replacement of prope0.isSuccess of type Boolean is false
2021-03-12 04:22:38,158 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:22:38,160 [main:107] - replacing (fu7().s, Any?)
2021-03-12 04:22:38,160 [main:50] - replacing fu7().s Any?
2021-03-12 04:22:38,160 [main:54] - Getting value of type Any?
2021-03-12 04:22:38,298 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:22:38,299 [main:58] - GENERATED VALUE OF TYPE Any? = "fcegm"
2021-03-12 04:22:38,299 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:38,666 [main:67] - randomType = Kla2?
2021-03-12 04:22:38,803 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 04:22:38,807 [main:112] - generating klass Kla2 text = class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 04:22:38,820 [main:149] - GENERATING call of type public final suspend fun fu4(value: Kla0): Kla0 defined in Kla2[SimpleFunctionDescriptorImpl@11c8303d]
2021-03-12 04:22:38,959 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:22:38,963 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:22:39,104 [main:194] - Type params = []
2021-03-12 04:22:39,254 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:22:39,255 [main:78] - Generated call from random type = (Kla2())?.fu4(Kla0("bgqza")).s
2021-03-12 04:22:39,256 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:22:39,259 [main:114] - replacement of fu7().s of type Any? is (Kla2())?.fu4(Kla0("bgqza")).s
2021-03-12 04:22:39,403 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:22:39,404 [main:66] - Compilation checking started
2021-03-12 04:22:40,154 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 {
        "ujfvp"
    }
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:40,157 [main:107] - replacing ({
        "ujfvp"
    }, SuspendFunction0<Unit>)
2021-03-12 04:22:40,157 [main:50] - replacing {
        "ujfvp"
    } SuspendFunction0<Unit>
2021-03-12 04:22:40,157 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 04:22:40,305 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 04:22:40,309 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:22:40,452 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:22:40,457 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:22:40,949 [main:302] - generating value of type = Int true depth = 4
2021-03-12 04:22:40,953 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 04:22:40,957 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 04:22:40,965 [main:95] - GENERATED = repeat(1850727531, {a: Int -> println()})
2021-03-12 04:22:40,965 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { repeat(1850727531, {a: Int -> println()})}
2021-03-12 04:22:40,965 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:41,126 [main:67] - randomType = ULong
2021-03-12 04:22:41,267 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:22:41,312 [main:106] - GETTING SuspendFunction0<Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:22:41,325 [main:114] - replacement of {
        "ujfvp"
    } of type SuspendFunction0<Unit> is { repeat(1850727531, {a: Int -> println()})}
2021-03-12 04:22:41,452 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:22:41,452 [main:66] - Compilation checking started
2021-03-12 04:22:42,064 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = fu7().s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:42,066 [main:107] - replacing (Kla1(), Kla1)
2021-03-12 04:22:42,066 [main:50] - replacing Kla1() Kla1
2021-03-12 04:22:42,067 [main:54] - Getting value of type Kla1
2021-03-12 04:22:42,213 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:22:42,217 [main:112] - generating klass Kla1 text = class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 04:22:42,358 [main:194] - Type params = []
2021-03-12 04:22:42,505 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 04:22:42,505 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:42,521 [main:67] - randomType = Kla0
2021-03-12 04:22:42,665 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:22:42,669 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:22:42,813 [main:194] - Type params = []
2021-03-12 04:22:42,951 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:22:42,960 [main:106] - GETTING Kla1 from [ERROR : Class<T>]<T>
2021-03-12 04:22:42,963 [main:114] - replacement of Kla1() of type Kla1 is Kla1()
2021-03-12 04:22:43,105 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:22:43,108 [main:107] - replacing (fu7(), Kla0)
2021-03-12 04:22:43,108 [main:50] - replacing fu7() Kla0
2021-03-12 04:22:43,108 [main:54] - Getting value of type Kla0
2021-03-12 04:22:43,250 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:22:43,254 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:22:43,375 [main:194] - Type params = []
2021-03-12 04:22:43,518 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:22:43,518 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("eedrc")
2021-03-12 04:22:43,518 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:44,015 [main:67] - randomType = HashSet<Float?>
2021-03-12 04:22:44,157 [main:302] - generating value of type = HashSet<Float?> false depth = 0
2021-03-12 04:22:44,305 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Float?>): HashSet<Float?> = TODO()
2021-03-12 04:22:44,311 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Float?>): HashSet<Float?> = TODO()
2021-03-12 04:22:44,637 [main:302] - generating value of type = Collection<Float?> false depth = 3
2021-03-12 04:22:44,800 [main:43] - GENERATING CALL OF fun <T> listOf(elements: Float?): Collection<Float?> = TODO()
2021-03-12 04:22:44,805 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: Float?): Collection<Float?> = TODO()
2021-03-12 04:22:44,951 [main:302] - generating value of type = Float true depth = 6
2021-03-12 04:22:44,956 [main:95] - GENERATED = listOf<Float?>(0.5336143f)
2021-03-12 04:22:44,956 [main:95] - GENERATED = LinkedHashSet<Float?>(listOf<Float?>(0.5336143f))
2021-03-12 04:22:45,083 [main:106] - GETTING Kla0 from [ERROR : Class<T>]<T>
2021-03-12 04:22:45,086 [main:114] - replacement of fu7() of type Kla0 is Kla0("eedrc")
2021-03-12 04:22:45,228 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:22:45,228 [main:66] - Compilation checking started
2021-03-12 04:22:45,831 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:45,835 [main:107] - replacing (resumeWithException(IllegalStateException("OK")), Unit?)
2021-03-12 04:22:45,835 [main:50] - replacing resumeWithException(IllegalStateException("OK")) Unit?
2021-03-12 04:22:45,835 [main:54] - Getting value of type Unit?
2021-03-12 04:22:46,043 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 04:22:46,221 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:22:46,226 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:22:46,533 [main:302] - generating value of type = Any false depth = 3
2021-03-12 04:22:46,534 [main:95] - GENERATED = print("wnqtl")
2021-03-12 04:22:46,534 [main:58] - GENERATED VALUE OF TYPE Unit? = print("wnqtl")
2021-03-12 04:22:46,534 [main:61] - GENERATED IS CALL =true
2021-03-12 04:22:46,549 [main:67] - randomType = Kla4
2021-03-12 04:22:46,689 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 04:22:46,693 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}
2021-03-12 04:22:46,827 [main:194] - Type params = []
2021-03-12 04:22:46,965 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 04:22:47,106 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:22:47,111 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:22:47,428 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 04:22:47,586 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:22:47,591 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:22:48,095 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 04:22:48,276 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:22:48,281 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:22:48,836 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 04:22:49,008 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:22:49,013 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:22:49,546 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 04:22:49,698 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:22:49,704 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:22:50,220 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 17
2021-03-12 04:22:50,220 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:22:50,220 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:22:50,220 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:22:50,220 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:22:50,220 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:22:50,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@64f6183e]
2021-03-12 04:22:50,364 [main:302] - generating value of type = T false depth = 0
2021-03-12 04:22:50,896 [main:43] - GENERATING CALL OF fun <T> minOf(a: Collection<Array<Kla7>>, other: Collection<Array<Kla7>>, comparator: kotlin.Comparator<Collection<Array<Kla7>>>): T = TODO()
2021-03-12 04:22:50,901 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Collection<Array<Kla7>>, other: Collection<Array<Kla7>>, comparator: kotlin.Comparator<Collection<Array<Kla7>>>): T = TODO()
2021-03-12 04:22:51,251 [main:302] - generating value of type = Collection<Array<Kla7>> false depth = 3
2021-03-12 04:22:51,399 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Array<Kla7>): Collection<Array<Kla7>> = TODO()
2021-03-12 04:22:51,404 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Array<Kla7>): Collection<Array<Kla7>> = TODO()
2021-03-12 04:22:51,563 [main:302] - generating value of type = Array<Kla7> false depth = 6
2021-03-12 04:22:51,708 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla7> = TODO()
2021-03-12 04:22:51,714 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla7> = TODO()
2021-03-12 04:22:51,871 [main:95] - GENERATED = emptyArray<Kla7>()
2021-03-12 04:22:51,871 [main:95] - GENERATED = listOfNotNull<Array<Kla7>>(emptyArray<Kla7>())
2021-03-12 04:22:51,871 [main:302] - generating value of type = Collection<Array<Kla7>> false depth = 3
2021-03-12 04:22:52,015 [main:43] - GENERATING CALL OF fun UShortArray(size: kotlin.Int): Collection<Array<Kla7>> = TODO()
2021-03-12 04:22:52,020 [main:61] - WITHOUT TYPE PARAMS = fun UShortArray(size: kotlin.Int): Collection<Array<Kla7>> = TODO()
2021-03-12 04:22:52,347 [main:302] - generating value of type = Int true depth = 6
2021-03-12 04:22:52,351 [main:95] - GENERATED = UShortArray(92168763)
2021-03-12 04:22:52,351 [main:302] - generating value of type = Comparator<Collection<Array<Kla7>>> false depth = 3
2021-03-12 04:22:52,859 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<Short?>, selector: (Collection<Array<Kla7>>)->Short?): Comparator<Collection<Array<Kla7>>> = TODO()
2021-03-12 04:22:52,867 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<Short?>, selector: (Collection<Array<Kla7>>)->Short?): Comparator<Collection<Array<Kla7>>> = TODO()
2021-03-12 04:22:53,381 [main:302] - generating value of type = Comparator<Short?> false depth = 6
2021-03-12 04:22:53,542 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<Short?, Comparable<*>?>): Comparator<Short?> = TODO()
2021-03-12 04:22:53,548 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<Short?, Comparable<*>?>): Comparator<Short?> = TODO()
2021-03-12 04:22:53,722 [main:302] - generating value of type = Function1<Short?, Comparable<*>?> false depth = 9
2021-03-12 04:22:53,726 [main:302] - generating value of type = Comparable<*> false depth = 10
2021-03-12 04:22:53,734 [main:95] - GENERATED = compareBy<Short?>({a: Short? -> 672556165.toUInt()})
2021-03-12 04:22:53,734 [main:302] - generating value of type = Function1<Collection<Array<Kla7>>, Short?> false depth = 6
2021-03-12 04:22:53,738 [main:302] - generating value of type = Short true depth = 7
2021-03-12 04:22:53,742 [main:95] - GENERATED = compareBy<Collection<Array<Kla7>>, Short?>(compareBy<Short?>({a: Short? -> 672556165.toUInt()}), {a: Collection<Array<Kla7>> -> -20844})
2021-03-12 04:22:53,743 [main:95] - GENERATED = minOf<Collection<Array<Kla7>>>(listOfNotNull<Array<Kla7>>(emptyArray<Kla7>()), UShortArray(92168763), compareBy<Collection<Array<Kla7>>, Short?>(compareBy<Short?>({a: Short? -> 672556165.toUInt()}), {a: Collection<Array<Kla7>> -> -20844}))
2021-03-12 04:22:53,743 [main:78] - Generated call from random type = (Kla4()).resume(minOf<Collection<Array<Kla7>>>(listOfNotNull<Array<Kla7>>(emptyArray<Kla7>()), UShortArray(92168763), compareBy<Collection<Array<Kla7>>, Short?>(compareBy<Short?>({a: Short? -> 672556165.toUInt()}), {a: Collection<Array<Kla7>> -> -20844})))
2021-03-12 04:22:53,745 [main:106] - GETTING Unit? from [ERROR : Class<T>]<T>
2021-03-12 04:22:53,748 [main:114] - replacement of resumeWithException(IllegalStateException("OK")) of type Unit? is print("wnqtl")
2021-03-12 04:22:53,881 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:22:53,882 [main:66] - Compilation checking started
2021-03-12 04:22:54,287 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.print("wnqtl")

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:54,289 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 04:22:54,289 [main:50] - replacing getOrThrow() Any?
2021-03-12 04:22:54,289 [main:54] - Getting value of type Any?
2021-03-12 04:22:54,444 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:22:54,444 [main:58] - GENERATED VALUE OF TYPE Any? = "bpkez"
2021-03-12 04:22:54,444 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:54,649 [main:67] - randomType = Kla3
2021-03-12 04:22:54,808 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 04:22:54,812 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}
2021-03-12 04:22:54,820 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla3[SimpleFunctionDescriptorImpl@2b4acabe]
2021-03-12 04:22:54,820 [main:78] - Generated call from random type = (Kla3()).fu8()
2021-03-12 04:22:54,820 [main:114] - replacement of getOrThrow() of type Any? is (Kla3()).fu8()
2021-03-12 04:22:54,952 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:22:54,953 [main:66] - Compilation checking started
2021-03-12 04:22:55,326 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).(Kla3()).fu8()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:55,328 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 04:22:55,328 [main:50] - replacing getOrThrow() Any?
2021-03-12 04:22:55,328 [main:54] - Getting value of type Any?
2021-03-12 04:22:55,464 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:22:55,464 [main:58] - GENERATED VALUE OF TYPE Any? = "evbbb"
2021-03-12 04:22:55,464 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:55,479 [main:67] - randomType = Kla5
2021-03-12 04:22:55,612 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 04:22:55,616 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 04:22:55,636 [main:78] - Generated call from random type = (Kla5()).prope0
2021-03-12 04:22:55,637 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:22:55,640 [main:114] - replacement of getOrThrow() of type Any? is "evbbb"
2021-03-12 04:22:55,777 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:22:55,777 [main:66] - Compilation checking started
2021-03-12 04:22:56,194 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"})."evbbb"
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:56,197 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 04:22:56,197 [main:50] - replacing {} Function0<Unit>
2021-03-12 04:22:56,197 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:22:56,359 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:22:56,363 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:22:56,509 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:22:56,517 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:22:57,008 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:22:57,013 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 04:22:57,017 [main:302] - generating value of type = Any false depth = 5
2021-03-12 04:22:57,017 [main:95] - GENERATED = check(true, { "hxtnr"})
2021-03-12 04:22:57,017 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "hxtnr"})}
2021-03-12 04:22:57,017 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:57,033 [main:67] - randomType = Kla8
2021-03-12 04:22:57,169 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 04:22:57,173 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 04:22:57,184 [main:78] - Generated call from random type = (Kla8()).prope7
2021-03-12 04:22:57,184 [main:114] - replacement of {} of type Function0<Unit> is (Kla8()).prope7
2021-03-12 04:22:57,325 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:22:57,326 [main:66] - Compilation checking started
2021-03-12 04:22:57,942 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:57,945 [main:107] - replacing ("Continuation " + prope1, String)
2021-03-12 04:22:57,945 [main:50] - replacing "Continuation " + prope1 String
2021-03-12 04:22:57,945 [main:54] - Getting value of type String
2021-03-12 04:22:58,086 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:22:58,090 [main:58] - GENERATED VALUE OF TYPE String = "items"
2021-03-12 04:22:58,090 [main:61] - GENERATED IS CALL =false
2021-03-12 04:22:58,098 [main:67] - randomType = Int
2021-03-12 04:22:58,257 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:58,313 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:22:58,450 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:22:58,454 [main:78] - Generated call from random type = (-1073891962).toString(-466503329)
2021-03-12 04:22:58,455 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:22:58,459 [main:114] - replacement of "Continuation " + prope1 of type String is "items"
2021-03-12 04:22:58,594 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:22:58,594 [main:66] - Compilation checking started
2021-03-12 04:22:59,161 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:22:59,164 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 04:22:59,164 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 04:22:59,164 [main:54] - Getting value of type IntRange
2021-03-12 04:22:59,302 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 04:22:59,445 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 04:22:59,450 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 04:22:59,964 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:22:59,968 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:22:59,972 [main:95] - GENERATED = IntRange(1527279442, -683545963)
2021-03-12 04:22:59,972 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1527279442, -683545963)
2021-03-12 04:22:59,972 [main:61] - GENERATED IS CALL =true
2021-03-12 04:23:01,354 [main:67] - randomType = Triple<MutableMap<Byte?, Char>, LinkedHashSet<Double>, Boolean?>?
2021-03-12 04:23:01,490 [main:302] - generating value of type = Triple<MutableMap<Byte?, Char>, LinkedHashSet<Double>, Boolean?> false depth = 0
2021-03-12 04:23:01,644 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: MutableMap<Byte?, Char>, second: LinkedHashSet<Double>, third: Boolean?): Triple<MutableMap<Byte?, Char>, LinkedHashSet<Double>, Boolean?> = TODO()
2021-03-12 04:23:01,650 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: MutableMap<Byte?, Char>, second: LinkedHashSet<Double>, third: Boolean?): Triple<MutableMap<Byte?, Char>, LinkedHashSet<Double>, Boolean?> = TODO()
2021-03-12 04:23:01,792 [main:302] - generating value of type = MutableMap<Byte?, Char> false depth = 3
2021-03-12 04:23:01,923 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): MutableMap<Byte?, Char> = TODO()
2021-03-12 04:23:01,928 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): MutableMap<Byte?, Char> = TODO()
2021-03-12 04:23:02,080 [main:95] - GENERATED = linkedMapOf<Byte?, Char>()
2021-03-12 04:23:02,080 [main:302] - generating value of type = LinkedHashSet<Double> false depth = 3
2021-03-12 04:23:02,221 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<Double> = TODO()
2021-03-12 04:23:02,226 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<Double> = TODO()
2021-03-12 04:23:02,352 [main:95] - GENERATED = LinkedHashSet<Double>()
2021-03-12 04:23:02,352 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 04:23:02,356 [main:95] - GENERATED = Triple<MutableMap<Byte?, Char>, LinkedHashSet<Double>, Boolean?>(linkedMapOf<Byte?, Char>(), LinkedHashSet<Double>(), false)
2021-03-12 04:23:02,390 [main:106] - GETTING IntRange from [ERROR : Class<T>]<T>
2021-03-12 04:23:02,392 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is IntRange(1527279442, -683545963)
2021-03-12 04:23:02,541 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:23:02,541 [main:66] - Compilation checking started
2021-03-12 04:23:03,174 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:03,178 [main:107] - replacing (prope6, Boolean)
2021-03-12 04:23:03,178 [main:50] - replacing prope6 Boolean
2021-03-12 04:23:03,178 [main:54] - Getting value of type Boolean
2021-03-12 04:23:03,374 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:23:03,378 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:23:03,379 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:03,555 [main:67] - randomType = List<Kla2>
2021-03-12 04:23:03,556 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:23:03,559 [main:114] - replacement of prope6 of type Boolean is false
2021-03-12 04:23:03,699 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:23:03,699 [main:66] - Compilation checking started
2021-03-12 04:23:04,301 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:04,303 [main:107] - replacing (prope5, Int)
2021-03-12 04:23:04,303 [main:50] - replacing prope5 Int
2021-03-12 04:23:04,303 [main:54] - Getting value of type Int
2021-03-12 04:23:04,440 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:04,444 [main:58] - GENERATED VALUE OF TYPE Int = -775135293
2021-03-12 04:23:04,445 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:04,602 [main:67] - randomType = UByte
2021-03-12 04:23:04,753 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:23:04,797 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3f4b938f]
2021-03-12 04:23:04,797 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@e05c51c]
2021-03-12 04:23:04,934 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:23:04,938 [main:78] - Generated call from random type = (35.toUByte()).toByte().div(-114)
2021-03-12 04:23:04,939 [main:106] - GETTING Int from [ERROR : Class<T>]<T>
2021-03-12 04:23:04,942 [main:114] - replacement of prope5 of type Int is (35.toUByte()).toByte().div(-114)
2021-03-12 04:23:05,064 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:23:05,064 [main:66] - Compilation checking started
2021-03-12 04:23:05,690 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:05,693 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 04:23:05,694 [main:50] - replacing getOrThrow() Any?
2021-03-12 04:23:05,694 [main:54] - Getting value of type Any?
2021-03-12 04:23:05,878 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:23:05,878 [main:58] - GENERATED VALUE OF TYPE Any? = "gklrb"
2021-03-12 04:23:05,878 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:05,897 [main:67] - randomType = Kla9
2021-03-12 04:23:06,037 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 04:23:06,041 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:23:06,060 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:23:06,062 [main:114] - replacement of getOrThrow() of type Any? is "gklrb"
2021-03-12 04:23:06,200 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:23:06,200 [main:66] - Compilation checking started
2021-03-12 04:23:06,624 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"})."gklrb"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:06,626 [main:107] - replacing (this.prope0, Any?)
2021-03-12 04:23:06,626 [main:50] - replacing this.prope0 Any?
2021-03-12 04:23:06,626 [main:54] - Getting value of type Any?
2021-03-12 04:23:06,765 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:23:06,765 [main:58] - GENERATED VALUE OF TYPE Any? = "zognu"
2021-03-12 04:23:06,765 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:06,781 [main:67] - randomType = Kla7
2021-03-12 04:23:06,915 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 04:23:06,919 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 04:23:06,927 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:23:06,930 [main:114] - replacement of this.prope0 of type Any? is "zognu"
2021-03-12 04:23:07,067 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:23:07,068 [main:66] - Compilation checking started
2021-03-12 04:23:07,469 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        "zognu" = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:07,471 [main:107] - replacing (prope0.getOrThrow(), Ty0)
2021-03-12 04:23:07,471 [main:50] - replacing prope0.getOrThrow() Ty0
2021-03-12 04:23:07,471 [main:54] - Getting value of type Ty0
2021-03-12 04:23:07,609 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:23:07,616 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:23:07,780 [main:67] - randomType = Boolean?
2021-03-12 04:23:07,918 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:23:07,936 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:23:07,939 [main:111] - Cant find and generate replacement for prope0.getOrThrow() type Ty0
2021-03-12 04:23:07,939 [main:107] - replacing (suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}, Ty0)
2021-03-12 04:23:07,939 [main:50] - replacing suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
} Ty0
2021-03-12 04:23:07,939 [main:54] - Getting value of type Ty0
2021-03-12 04:23:08,073 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:23:08,080 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:23:08,095 [main:67] - randomType = Kla4
2021-03-12 04:23:08,236 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 04:23:08,241 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}
2021-03-12 04:23:08,378 [main:194] - Type params = []
2021-03-12 04:23:08,499 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 04:23:08,646 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:08,651 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:08,985 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 04:23:09,138 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:09,143 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:09,678 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:09,678 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:09,699 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:23:09,702 [main:111] - Cant find and generate replacement for suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
} type Ty0
2021-03-12 04:23:09,702 [main:107] - replacing ("OK", String)
2021-03-12 04:23:09,702 [main:50] - replacing "OK" String
2021-03-12 04:23:09,702 [main:54] - Getting value of type String
2021-03-12 04:23:09,841 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:09,845 [main:58] - GENERATED VALUE OF TYPE String = "ddxzp"
2021-03-12 04:23:09,845 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:10,020 [main:67] - randomType = UInt
2021-03-12 04:23:10,172 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:23:10,212 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37ff6073]
2021-03-12 04:23:10,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:10,357 [main:78] - Generated call from random type = (1410920318.toUInt()).toString(473546783)
2021-03-12 04:23:10,358 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:23:10,362 [main:114] - replacement of "OK" of type String is "ddxzp"
2021-03-12 04:23:10,504 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:23:10,505 [main:66] - Compilation checking started
2021-03-12 04:23:11,094 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:11,098 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 04:23:11,098 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 04:23:11,098 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 04:23:11,244 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 04:23:11,255 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 04:23:11,264 [main:67] - randomType = Int
2021-03-12 04:23:11,403 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:11,455 [main:106] - GETTING EmptyCoroutineContext from [ERROR : Class<T>]<T>
2021-03-12 04:23:11,458 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 04:23:11,458 [main:107] - replacing ("tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-12 04:23:11,458 [main:50] - replacing "tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-12 04:23:11,458 [main:54] - Getting value of type String
2021-03-12 04:23:11,611 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:11,615 [main:58] - GENERATED VALUE OF TYPE String = "esafr"
2021-03-12 04:23:11,615 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:12,349 [main:67] - randomType = Function2<ULong, Set<HashSet<Kla9>>, Kla4>
2021-03-12 04:23:12,350 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:23:12,354 [main:114] - replacement of "tgyoo" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n") of type String is "esafr"
2021-03-12 04:23:12,491 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:23:12,492 [main:66] - Compilation checking started
2021-03-12 04:23:13,051 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:13,053 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 04:23:13,053 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 04:23:13,053 [main:54] - Getting value of type Throwable?
2021-03-12 04:23:13,218 [main:58] - GENERATED VALUE OF TYPE Throwable? = null
2021-03-12 04:23:13,218 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:13,374 [main:67] - randomType = UInt
2021-03-12 04:23:13,512 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:23:13,555 [main:106] - GETTING Throwable? from [ERROR : Class<T>]<T>
2021-03-12 04:23:13,558 [main:114] - replacement of exceptionOrNull() of type Throwable? is null
2021-03-12 04:23:13,691 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(NULL)
2021-03-12 04:23:13,694 [main:107] - replacing (prope0, String)
2021-03-12 04:23:13,694 [main:50] - replacing prope0 String
2021-03-12 04:23:13,694 [main:54] - Getting value of type String
2021-03-12 04:23:13,817 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:13,821 [main:58] - GENERATED VALUE OF TYPE String = "jxuet"
2021-03-12 04:23:13,821 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:14,141 [main:67] - randomType = Double?
2021-03-12 04:23:14,280 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:23:14,321 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@51defa7a]
2021-03-12 04:23:14,321 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:23:14,453 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:14,457 [main:78] - Generated call from random type = (0.9545966088583131)?.toInt().toString(704792987)
2021-03-12 04:23:14,458 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:23:14,462 [main:114] - replacement of prope0 of type String is "jxuet"
2021-03-12 04:23:14,599 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:23:14,599 [main:66] - Compilation checking started
2021-03-12 04:23:15,003 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    "jxuet" = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:15,005 [main:107] - replacing (false, Boolean)
2021-03-12 04:23:15,005 [main:50] - replacing false Boolean
2021-03-12 04:23:15,005 [main:54] - Getting value of type Boolean
2021-03-12 04:23:15,154 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:23:15,158 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:23:15,159 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:16,003 [main:67] - randomType = Function1<Long, Collection<ArrayList<Kla3?>>>
2021-03-12 04:23:16,004 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:23:16,007 [main:114] - replacement of false of type Boolean is false
2021-03-12 04:23:16,147 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:23:16,149 [main:107] - replacing (prope0.getOrThrow(), Ty0)
2021-03-12 04:23:16,150 [main:50] - replacing prope0.getOrThrow() Ty0
2021-03-12 04:23:16,150 [main:54] - Getting value of type Ty0
2021-03-12 04:23:16,287 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:23:16,294 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:23:16,598 [main:67] - randomType = UShort?
2021-03-12 04:23:16,734 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:23:16,779 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:23:16,782 [main:111] - Cant find and generate replacement for prope0.getOrThrow() type Ty0
2021-03-12 04:23:16,782 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709), String)
2021-03-12 04:23:16,782 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709) String
2021-03-12 04:23:16,782 [main:54] - Getting value of type String
2021-03-12 04:23:16,919 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:16,923 [main:58] - GENERATED VALUE OF TYPE String = "pmeja"
2021-03-12 04:23:16,923 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:16,931 [main:67] - randomType = Long
2021-03-12 04:23:17,066 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:23:17,116 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6f935613]
2021-03-12 04:23:17,254 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:23:17,259 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:23:17,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:17,402 [main:78] - Generated call from random type = (7450551393361150876).compareTo(102).toString(-491068702)
2021-03-12 04:23:17,402 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (35520678).toInt().rotateRight(649080709) of type String is (7450551393361150876).compareTo(102).toString(-491068702)
2021-03-12 04:23:17,522 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:23:17,522 [main:66] - Compilation checking started
2021-03-12 04:23:18,090 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(fu1())
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:18,093 [main:107] - replacing (fu1(), Kla0)
2021-03-12 04:23:18,093 [main:50] - replacing fu1() Kla0
2021-03-12 04:23:18,093 [main:54] - Getting value of type Kla0
2021-03-12 04:23:18,230 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:23:18,236 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)
2021-03-12 04:23:18,371 [main:194] - Type params = []
2021-03-12 04:23:18,492 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:23:18,492 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("ufjpn")
2021-03-12 04:23:18,492 [main:61] - GENERATED IS CALL =true
2021-03-12 04:23:18,500 [main:67] - randomType = Int
2021-03-12 04:23:18,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:18,678 [main:106] - GETTING Kla0 from [ERROR : Class<T>]<T>
2021-03-12 04:23:18,681 [main:114] - replacement of fu1() of type Kla0 is Kla0("ufjpn")
2021-03-12 04:23:18,815 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:23:18,815 [main:66] - Compilation checking started
2021-03-12 04:23:19,402 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:19,404 [main:107] - replacing ("UNSUPPORTED_FEATURE", String)
2021-03-12 04:23:19,404 [main:50] - replacing "UNSUPPORTED_FEATURE" String
2021-03-12 04:23:19,405 [main:54] - Getting value of type String
2021-03-12 04:23:19,547 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:19,551 [main:58] - GENERATED VALUE OF TYPE String = "vopgl"
2021-03-12 04:23:19,552 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:20,590 [main:67] - randomType = MutableMap<Kla6<Kla5>, Pair<Short, Double>>
2021-03-12 04:23:20,591 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:23:20,595 [main:114] - replacement of "UNSUPPORTED_FEATURE" of type String is "vopgl"
2021-03-12 04:23:20,740 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:23:20,740 [main:66] - Compilation checking started
2021-03-12 04:23:21,292 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:21,295 [main:107] - replacing ("OK", String)
2021-03-12 04:23:21,295 [main:50] - replacing "OK" String
2021-03-12 04:23:21,295 [main:54] - Getting value of type String
2021-03-12 04:23:21,445 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:21,449 [main:58] - GENERATED VALUE OF TYPE String = "cocrc"
2021-03-12 04:23:21,450 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:21,465 [main:67] - randomType = Kla5
2021-03-12 04:23:21,609 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 04:23:21,613 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 04:23:21,637 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:23:21,638 [main:78] - Generated call from random type = (Kla5()).prope0?.toString()!!
2021-03-12 04:23:21,638 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:23:21,642 [main:114] - replacement of "OK" of type String is "cocrc"
2021-03-12 04:23:21,805 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:23:21,806 [main:66] - Compilation checking started
2021-03-12 04:23:22,422 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:22,425 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 04:23:22,426 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 04:23:22,426 [main:54] - Getting value of type String
2021-03-12 04:23:22,591 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:22,596 [main:58] - GENERATED VALUE OF TYPE String = "neuyg"
2021-03-12 04:23:22,596 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:22,757 [main:67] - randomType = Float
2021-03-12 04:23:22,901 [main:302] - generating value of type = Float true depth = 0
2021-03-12 04:23:22,956 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7a8233ec]
2021-03-12 04:23:22,957 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]
2021-03-12 04:23:23,101 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:23,105 [main:78] - Generated call from random type = (0.48702413f).toByte().toString(-757670949)
2021-03-12 04:23:23,106 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:23:23,110 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (0.48702413f).toByte().toString(-757670949)
2021-03-12 04:23:23,250 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:23:23,251 [main:66] - Compilation checking started
2021-03-12 04:23:23,849 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:23,852 [main:107] - replacing (prope1, Continuation<Any>?)
2021-03-12 04:23:23,852 [main:50] - replacing prope1 Continuation<Any>?
2021-03-12 04:23:23,852 [main:54] - Getting value of type Continuation<Any>?
2021-03-12 04:23:24,007 [main:58] - GENERATED VALUE OF TYPE Continuation<Any>? = null
2021-03-12 04:23:24,007 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:24,191 [main:67] - randomType = Kla6<UByte>
2021-03-12 04:23:24,340 [main:302] - generating value of type = Kla6<UByte> false depth = 0
2021-03-12 04:23:24,344 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:23:24,828 [main:302] - generating value of type = Kla9 false depth = 2
2021-03-12 04:23:24,833 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:23:24,856 [main:106] - GETTING Continuation<Any>? from [ERROR : Class<T>]<T>
2021-03-12 04:23:24,859 [main:114] - replacement of prope1 of type Continuation<Any>? is null
2021-03-12 04:23:24,997 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(NULL)
2021-03-12 04:23:24,998 [main:66] - Compilation checking started
2021-03-12 04:23:25,370 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    null?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = "FAIL 3"

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:25,372 [main:107] - replacing (value, Ty0)
2021-03-12 04:23:25,372 [main:50] - replacing value Ty0
2021-03-12 04:23:25,372 [main:54] - Getting value of type Ty0
2021-03-12 04:23:25,513 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:23:25,520 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:23:25,536 [main:67] - randomType = Kla2
2021-03-12 04:23:25,670 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 04:23:25,674 [main:112] - generating klass Kla2 text = class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}
2021-03-12 04:23:25,686 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:23:25,689 [main:111] - Cant find and generate replacement for value type Ty0
2021-03-12 04:23:25,689 [main:107] - replacing ("FAIL 3", String)
2021-03-12 04:23:25,689 [main:50] - replacing "FAIL 3" String
2021-03-12 04:23:25,689 [main:54] - Getting value of type String
2021-03-12 04:23:25,810 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:25,814 [main:58] - GENERATED VALUE OF TYPE String = "pcchn"
2021-03-12 04:23:25,814 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:25,822 [main:67] - randomType = UByte
2021-03-12 04:23:25,959 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:23:25,998 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2899aae4]
2021-03-12 04:23:25,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7183edec]
2021-03-12 04:23:26,133 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:26,137 [main:78] - Generated call from random type = (46.toUByte()).toUShort().toString(557946651)
2021-03-12 04:23:26,137 [main:114] - replacement of "FAIL 3" of type String is (46.toUByte()).toUShort().toString(557946651)
2021-03-12 04:23:26,259 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:23:26,259 [main:66] - Compilation checking started
2021-03-12 04:23:26,885 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return "FAIL 2 $(28057).toLong().toString(727685824)"

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:26,888 [main:107] - replacing ("FAIL 2 $(28057).toLong().toString(727685824)", String)
2021-03-12 04:23:26,889 [main:50] - replacing "FAIL 2 $(28057).toLong().toString(727685824)" String
2021-03-12 04:23:26,889 [main:54] - Getting value of type String
2021-03-12 04:23:27,049 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:27,053 [main:58] - GENERATED VALUE OF TYPE String = "ebcjj"
2021-03-12 04:23:27,054 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:27,216 [main:67] - randomType = Short
2021-03-12 04:23:27,338 [main:302] - generating value of type = Short true depth = 0
2021-03-12 04:23:27,372 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@8b9a4dc]
2021-03-12 04:23:27,373 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79b82659]
2021-03-12 04:23:27,373 [main:78] - Generated call from random type = (1256).toChar().uppercase()
2021-03-12 04:23:27,373 [main:114] - replacement of "FAIL 2 $(28057).toLong().toString(727685824)" of type String is (1256).toChar().uppercase()
2021-03-12 04:23:27,513 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:23:27,514 [main:66] - Compilation checking started
2021-03-12 04:23:28,192 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("kzemy"))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:28,194 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 04:23:28,194 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 04:23:28,195 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 04:23:28,356 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 04:23:28,364 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 04:23:28,543 [main:67] - randomType = Double
2021-03-12 04:23:28,670 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:23:28,725 [main:106] - GETTING EmptyCoroutineContext from [ERROR : Class<T>]<T>
2021-03-12 04:23:28,728 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 04:23:28,728 [main:107] - replacing (IllegalStateException("kzemy"), IllegalStateException)
2021-03-12 04:23:28,729 [main:50] - replacing IllegalStateException("kzemy") IllegalStateException
2021-03-12 04:23:28,729 [main:54] - Getting value of type IllegalStateException
2021-03-12 04:23:28,888 [main:302] - generating value of type = IllegalStateException false depth = 0
2021-03-12 04:23:29,053 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): IllegalStateException = TODO()
2021-03-12 04:23:29,059 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): IllegalStateException = TODO()
2021-03-12 04:23:29,532 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:23:29,536 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 04:23:29,543 [main:95] - GENERATED = IllegalStateException("rpzmp", NullPointerException())
2021-03-12 04:23:29,543 [main:58] - GENERATED VALUE OF TYPE IllegalStateException = IllegalStateException("rpzmp", NullPointerException())
2021-03-12 04:23:29,543 [main:61] - GENERATED IS CALL =true
2021-03-12 04:23:29,905 [main:67] - randomType = Double?
2021-03-12 04:23:30,046 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:23:30,094 [main:106] - GETTING IllegalStateException from [ERROR : Class<T>]<T>
2021-03-12 04:23:30,097 [main:114] - replacement of IllegalStateException("kzemy") of type IllegalStateException is IllegalStateException("rpzmp", NullPointerException())
2021-03-12 04:23:30,233 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:23:30,233 [main:66] - Compilation checking started
2021-03-12 04:23:30,806 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:30,808 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 04:23:30,809 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 04:23:30,809 [main:54] - Getting value of type String
2021-03-12 04:23:30,948 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:30,952 [main:58] - GENERATED VALUE OF TYPE String = "gyols"
2021-03-12 04:23:30,952 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:30,968 [main:67] - randomType = Kla8
2021-03-12 04:23:31,104 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 04:23:31,108 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}
2021-03-12 04:23:31,119 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:23:31,122 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is "gyols"
2021-03-12 04:23:31,247 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:23:31,248 [main:66] - Compilation checking started
2021-03-12 04:23:31,844 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = runCatching<Any?>({ "vyoew"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:31,847 [main:107] - replacing (runCatching<Any?>({ "vyoew"}).getOrThrow(), Any?)
2021-03-12 04:23:31,847 [main:50] - replacing runCatching<Any?>({ "vyoew"}).getOrThrow() Any?
2021-03-12 04:23:31,847 [main:54] - Getting value of type Any?
2021-03-12 04:23:31,992 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:23:31,993 [main:58] - GENERATED VALUE OF TYPE Any? = "maoii"
2021-03-12 04:23:31,993 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:32,009 [main:67] - randomType = Kla0
2021-03-12 04:23:32,169 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:23:32,175 [main:112] - generating klass Kla0 text = @Suppress("vopgl")
inline class Kla0(val s: Any?)
2021-03-12 04:23:32,308 [main:194] - Type params = []
2021-03-12 04:23:32,463 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:23:32,470 [main:78] - Generated call from random type = (Kla0("xyibz")).s
2021-03-12 04:23:32,472 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:23:32,475 [main:114] - replacement of runCatching<Any?>({ "vyoew"}).getOrThrow() of type Any? is (Kla0("xyibz")).s
2021-03-12 04:23:32,625 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:23:32,626 [main:66] - Compilation checking started
2021-03-12 04:23:33,209 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:33,212 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 04:23:33,212 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 04:23:33,212 [main:54] - Getting value of type String
2021-03-12 04:23:33,369 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:23:33,373 [main:58] - GENERATED VALUE OF TYPE String = "mlnyx"
2021-03-12 04:23:33,373 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:33,389 [main:67] - randomType = Kla7
2021-03-12 04:23:33,529 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 04:23:33,533 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}
2021-03-12 04:23:33,541 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:23:33,545 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is "mlnyx"
2021-03-12 04:23:33,687 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:23:33,687 [main:66] - Compilation checking started
2021-03-12 04:23:34,278 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        runCatching<Any?>({ "gckoq"}).getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:34,280 [main:107] - replacing (runCatching<Any?>({ "gckoq"}).getOrThrow(), Any?)
2021-03-12 04:23:34,280 [main:50] - replacing runCatching<Any?>({ "gckoq"}).getOrThrow() Any?
2021-03-12 04:23:34,280 [main:54] - Getting value of type Any?
2021-03-12 04:23:34,427 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:23:34,427 [main:58] - GENERATED VALUE OF TYPE Any? = "uaesw"
2021-03-12 04:23:34,428 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:34,603 [main:67] - randomType = List<Byte>
2021-03-12 04:23:34,605 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:23:34,608 [main:114] - replacement of runCatching<Any?>({ "gckoq"}).getOrThrow() of type Any? is "uaesw"
2021-03-12 04:23:34,731 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:23:34,732 [main:66] - Compilation checking started
2021-03-12 04:23:35,292 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:35,294 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 04:23:35,295 [main:50] - replacing getOrThrow() Ty0
2021-03-12 04:23:35,295 [main:54] - Getting value of type Ty0
2021-03-12 04:23:35,431 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:23:35,438 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:23:35,453 [main:67] - randomType = Kla0
2021-03-12 04:23:35,594 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:23:35,598 [main:112] - generating klass Kla0 text = @Suppress("vopgl")
inline class Kla0(val s: Any?)
2021-03-12 04:23:35,718 [main:194] - Type params = []
2021-03-12 04:23:35,857 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:23:35,863 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:23:35,867 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 04:23:35,867 [main:107] - replacing (fu3 {
        prope0 = it.message!!
    }, Continuation<Any?>)
2021-03-12 04:23:35,867 [main:50] - replacing fu3 {
        prope0 = it.message!!
    } Continuation<Any?>
2021-03-12 04:23:35,867 [main:54] - Getting value of type Continuation<Any?>
2021-03-12 04:23:36,004 [main:302] - generating value of type = Continuation<Any?> false depth = 0
2021-03-12 04:23:36,133 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 04:23:36,138 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 04:23:36,631 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 04:23:36,775 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:36,780 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:37,101 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 04:23:37,257 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:37,262 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:37,744 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 04:23:37,877 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:23:37,881 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:23:38,377 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:23:38,377 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:38,377 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:38,377 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<Any?> = TODO()
2021-03-12 04:23:38,377 [main:58] - GENERATED VALUE OF TYPE Continuation<Any?> = 
2021-03-12 04:23:38,385 [main:67] - randomType = Long
2021-03-12 04:23:38,529 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:23:38,581 [main:106] - GETTING Continuation<Any?> from [ERROR : Class<T>]<T>
2021-03-12 04:23:38,585 [main:111] - Cant find and generate replacement for fu3 {
        prope0 = it.message!!
    } type Continuation<Any?>
2021-03-12 04:23:38,585 [main:107] - replacing (fu8(), Any?)
2021-03-12 04:23:38,585 [main:50] - replacing fu8() Any?
2021-03-12 04:23:38,585 [main:54] - Getting value of type Any?
2021-03-12 04:23:38,723 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:23:38,723 [main:58] - GENERATED VALUE OF TYPE Any? = "eocbi"
2021-03-12 04:23:38,723 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:38,904 [main:67] - randomType = Boolean?
2021-03-12 04:23:39,044 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:23:39,063 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:23:39,066 [main:114] - replacement of fu8() of type Any? is "eocbi"
2021-03-12 04:23:39,186 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:23:39,186 [main:66] - Compilation checking started
2021-03-12 04:23:39,551 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1()."eocbi"
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:39,555 [main:107] - replacing (Kla8().prope7, Function0<Unit>)
2021-03-12 04:23:39,555 [main:50] - replacing Kla8().prope7 Function0<Unit>
2021-03-12 04:23:39,555 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:23:39,706 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:23:39,710 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:23:39,860 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:23:39,865 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:23:40,171 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:23:40,175 [main:95] - GENERATED = require(true)
2021-03-12 04:23:40,175 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-12 04:23:40,175 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:40,339 [main:67] - randomType = UInt
2021-03-12 04:23:40,460 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:23:40,492 [main:106] - GETTING Function0<Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:23:40,495 [main:114] - replacement of Kla8().prope7 of type Function0<Unit> is { require(true)}
2021-03-12 04:23:40,629 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 04:23:40,630 [main:66] - Compilation checking started
2021-03-12 04:23:41,035 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions)
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { require(true)} = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:41,037 [main:107] - replacing (t, Ty0)
2021-03-12 04:23:41,037 [main:50] - replacing t Ty0
2021-03-12 04:23:41,037 [main:54] - Getting value of type Ty0
2021-03-12 04:23:41,179 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:23:41,186 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:23:41,346 [main:67] - randomType = Short
2021-03-12 04:23:41,467 [main:302] - generating value of type = Short true depth = 0
2021-03-12 04:23:41,508 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:23:41,511 [main:111] - Cant find and generate replacement for t type Ty0
2021-03-12 04:23:41,511 [main:107] - replacing ((Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions, Boolean)
2021-03-12 04:23:41,511 [main:50] - replacing (Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions Boolean
2021-03-12 04:23:41,511 [main:54] - Getting value of type Boolean
2021-03-12 04:23:41,654 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:23:41,658 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:23:41,659 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:42,009 [main:67] - randomType = HashMap<ArrayList<Kla0>, UShort>
2021-03-12 04:23:42,151 [main:302] - generating value of type = HashMap<ArrayList<Kla0>, UShort> false depth = 0
2021-03-12 04:23:42,280 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<ArrayList<Kla0>, UShort>): HashMap<ArrayList<Kla0>, UShort> = TODO()
2021-03-12 04:23:42,285 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<ArrayList<Kla0>, UShort>): HashMap<ArrayList<Kla0>, UShort> = TODO()
2021-03-12 04:23:42,436 [main:302] - generating value of type = Pair<ArrayList<Kla0>, UShort> false depth = 3
2021-03-12 04:23:42,581 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ArrayList<Kla0>, second: UShort): Pair<ArrayList<Kla0>, UShort> = TODO()
2021-03-12 04:23:42,586 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ArrayList<Kla0>, second: UShort): Pair<ArrayList<Kla0>, UShort> = TODO()
2021-03-12 04:23:42,716 [main:302] - generating value of type = ArrayList<Kla0> false depth = 6
2021-03-12 04:23:42,869 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Kla0> = TODO()
2021-03-12 04:23:42,874 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Kla0> = TODO()
2021-03-12 04:23:43,018 [main:95] - GENERATED = ArrayList<Kla0>()
2021-03-12 04:23:43,019 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 04:23:43,023 [main:95] - GENERATED = Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort())
2021-03-12 04:23:43,023 [main:95] - GENERATED = hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))
2021-03-12 04:23:43,155 [main:149] - GENERATING call of type public abstract fun containsAll(elements: kotlin.collections.Collection<kotlin.collections.ArrayList<Kla0>>): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@182d9519]
2021-03-12 04:23:43,298 [main:302] - generating value of type = Collection<ArrayList<Kla0>> false depth = 0
2021-03-12 04:23:43,447 [main:43] - GENERATING CALL OF fun <T> listOf(): Collection<ArrayList<Kla0>> = TODO()
2021-03-12 04:23:43,452 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Collection<ArrayList<Kla0>> = TODO()
2021-03-12 04:23:43,580 [main:95] - GENERATED = listOf<ArrayList<Kla0>>()
2021-03-12 04:23:43,580 [main:78] - Generated call from random type = (hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>())
2021-03-12 04:23:43,581 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:23:43,584 [main:114] - replacement of (Kla9)?.equals("olqkg").compareTo(false) != numberOfSuspensions of type Boolean is (hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>())
2021-03-12 04:23:43,725 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:23:43,726 [main:66] - Compilation checking started
2021-03-12 04:23:44,380 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:44,383 [main:107] - replacing (prope5, Int)
2021-03-12 04:23:44,384 [main:50] - replacing prope5 Int
2021-03-12 04:23:44,384 [main:54] - Getting value of type Int
2021-03-12 04:23:44,560 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:44,565 [main:58] - GENERATED VALUE OF TYPE Int = -1945383629
2021-03-12 04:23:44,565 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:45,478 [main:67] - randomType = Pair<Sequence<ULong>, Kla3>?
2021-03-12 04:23:45,619 [main:302] - generating value of type = Pair<Sequence<ULong>, Kla3> false depth = 0
2021-03-12 04:23:45,754 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Sequence<ULong>, second: Kla3): Pair<Sequence<ULong>, Kla3> = TODO()
2021-03-12 04:23:45,759 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Sequence<ULong>, second: Kla3): Pair<Sequence<ULong>, Kla3> = TODO()
2021-03-12 04:23:45,923 [main:302] - generating value of type = Sequence<ULong> false depth = 3
2021-03-12 04:23:46,080 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: ULong): Sequence<ULong> = TODO()
2021-03-12 04:23:46,085 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: ULong): Sequence<ULong> = TODO()
2021-03-12 04:23:46,217 [main:302] - generating value of type = ULong true depth = 6
2021-03-12 04:23:46,221 [main:95] - GENERATED = sequenceOf<ULong>(5544840499046964000.toULong())
2021-03-12 04:23:46,222 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-12 04:23:46,225 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}
2021-03-12 04:23:46,225 [main:95] - GENERATED = Pair<Sequence<ULong>, Kla3>(sequenceOf<ULong>(5544840499046964000.toULong()), Kla3())
2021-03-12 04:23:46,246 [main:149] - GENERATING call of type public inline fun <T> kotlin.sequences.Sequence<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.sequences[DeserializedSimpleFunctionDescriptor@4590b3e4]
2021-03-12 04:23:46,387 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 04:23:46,391 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:23:46,396 [main:78] - Generated call from random type = (Pair<Sequence<ULong>, Kla3>(sequenceOf<ULong>(5544840499046964000.toULong()), Kla3()))?.first.indexOfFirst({a: T -> false})
2021-03-12 04:23:46,397 [main:106] - GETTING Int from [ERROR : Class<T>]<T>
2021-03-12 04:23:46,400 [main:114] - replacement of prope5 of type Int is (Pair<Sequence<ULong>, Kla3>(sequenceOf<ULong>(5544840499046964000.toULong()), Kla3()))?.first.indexOfFirst({a: T -> false})
2021-03-12 04:23:46,540 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:23:46,540 [main:66] - Compilation checking started
2021-03-12 04:23:46,968 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if ((Pair<Sequence<ULong>, Kla3>(sequenceOf<ULong>(5544840499046964000.toULong()), Kla3()))?.first.indexOfFirst({a: T -> false}) != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:46,971 [main:107] - replacing (resumeWithException(IllegalStateException("rpzmp", NullPointerException())), Unit?)
2021-03-12 04:23:46,971 [main:50] - replacing resumeWithException(IllegalStateException("rpzmp", NullPointerException())) Unit?
2021-03-12 04:23:46,971 [main:54] - Getting value of type Unit?
2021-03-12 04:23:47,123 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 04:23:47,276 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:23:47,281 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:23:47,759 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 04:23:47,763 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 04:23:47,768 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:23:47,768 [main:95] - GENERATED = check(false, { "kzxtx"})
2021-03-12 04:23:47,768 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false, { "kzxtx"})
2021-03-12 04:23:47,768 [main:61] - GENERATED IS CALL =true
2021-03-12 04:23:48,105 [main:67] - randomType = Sequence<Kla3>
2021-03-12 04:23:48,107 [main:106] - GETTING Unit? from [ERROR : Class<T>]<T>
2021-03-12 04:23:48,110 [main:114] - replacement of resumeWithException(IllegalStateException("rpzmp", NullPointerException())) of type Unit? is check(false, { "kzxtx"})
2021-03-12 04:23:48,234 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:23:48,234 [main:66] - Compilation checking started
2021-03-12 04:23:48,617 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.check(false, { "kzxtx"})

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:48,620 [main:107] - replacing (prope0, Any?)
2021-03-12 04:23:48,620 [main:50] - replacing prope0 Any?
2021-03-12 04:23:48,620 [main:54] - Getting value of type Any?
2021-03-12 04:23:48,780 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:23:48,780 [main:58] - GENERATED VALUE OF TYPE Any? = "dlezh"
2021-03-12 04:23:48,780 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:49,326 [main:67] - randomType = Function2<Kla2, LinkedHashSet<Short>, Kla4>
2021-03-12 04:23:49,327 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:23:49,331 [main:114] - replacement of prope0 of type Any? is "dlezh"
2021-03-12 04:23:49,476 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:23:49,476 [main:66] - Compilation checking started
2021-03-12 04:23:49,924 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this."dlezh" = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:49,926 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 04:23:49,927 [main:50] - replacing prope1 Continuation<*>
2021-03-12 04:23:49,927 [main:54] - Getting value of type Continuation<*>
2021-03-12 04:23:50,066 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 04:23:50,213 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:23:50,218 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:23:50,698 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 04:23:50,826 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:50,831 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:51,175 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 04:23:51,310 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:51,315 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:51,808 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 04:23:51,979 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:23:51,984 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:23:52,482 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 04:23:52,634 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:23:52,639 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:23:53,173 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:23:53,173 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:23:53,173 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:23:53,173 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:53,173 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:23:53,174 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 04:23:53,192 [main:67] - randomType = Kla5
2021-03-12 04:23:53,339 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 04:23:53,344 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}
2021-03-12 04:23:53,363 [main:106] - GETTING Continuation<*> from [ERROR : Class<T>]<T>
2021-03-12 04:23:53,367 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 04:23:53,367 [main:107] - replacing (Kla8(), Kla8)
2021-03-12 04:23:53,367 [main:50] - replacing Kla8() Kla8
2021-03-12 04:23:53,367 [main:54] - Getting value of type Kla8
2021-03-12 04:23:53,514 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 04:23:53,518 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}
2021-03-12 04:23:53,519 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-12 04:23:53,519 [main:61] - GENERATED IS CALL =true
2021-03-12 04:23:53,527 [main:67] - randomType = Int
2021-03-12 04:23:53,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:23:53,738 [main:106] - GETTING Kla8 from [ERROR : Class<T>]<T>
2021-03-12 04:23:53,742 [main:114] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-12 04:23:53,866 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:23:53,868 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 04:23:53,868 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 04:23:53,868 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 04:23:54,010 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 04:23:54,017 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 04:23:54,192 [main:67] - randomType = Array<String>
2021-03-12 04:23:54,317 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 04:23:54,479 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-12 04:23:54,484 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-12 04:23:54,779 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:23:54,783 [main:95] - GENERATED = arrayOfNulls<String>(-2136900980)
2021-03-12 04:23:54,795 [main:106] - GETTING EmptyCoroutineContext from [ERROR : Class<T>]<T>
2021-03-12 04:23:54,798 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 04:23:54,798 [main:107] - replacing (fu8(), Any?)
2021-03-12 04:23:54,798 [main:50] - replacing fu8() Any?
2021-03-12 04:23:54,798 [main:54] - Getting value of type Any?
2021-03-12 04:23:54,949 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:23:54,949 [main:58] - GENERATED VALUE OF TYPE Any? = "eatku"
2021-03-12 04:23:54,949 [main:61] - GENERATED IS CALL =false
2021-03-12 04:23:55,126 [main:67] - randomType = Kla5?
2021-03-12 04:23:55,249 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 04:23:55,253 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}
2021-03-12 04:23:55,269 [main:78] - Generated call from random type = (Kla5())?.prope0
2021-03-12 04:23:55,270 [main:106] - GETTING Any? from [ERROR : Class<T>]<T>
2021-03-12 04:23:55,272 [main:114] - replacement of fu8() of type Any? is "eatku"
2021-03-12 04:23:55,410 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:23:55,411 [main:66] - Compilation checking started
2021-03-12 04:23:55,838 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1()."eatku"
    }
    prope1?.resumeWithException(IllegalStateException("ddxzp"))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:55,841 [main:107] - replacing (value, Ty0)
2021-03-12 04:23:55,841 [main:50] - replacing value Ty0
2021-03-12 04:23:55,841 [main:54] - Getting value of type Ty0
2021-03-12 04:23:55,985 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:23:55,992 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:23:56,008 [main:67] - randomType = Kla5
2021-03-12 04:23:56,149 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 04:23:56,153 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}
2021-03-12 04:23:56,174 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:23:56,177 [main:111] - Cant find and generate replacement for value type Ty0
2021-03-12 04:23:56,177 [main:107] - replacing (IllegalStateException("ddxzp"), IllegalStateException)
2021-03-12 04:23:56,178 [main:50] - replacing IllegalStateException("ddxzp") IllegalStateException
2021-03-12 04:23:56,178 [main:54] - Getting value of type IllegalStateException
2021-03-12 04:23:56,300 [main:302] - generating value of type = IllegalStateException false depth = 0
2021-03-12 04:23:56,445 [main:43] - GENERATING CALL OF fun IllegalStateException(cause: kotlin.Throwable?): IllegalStateException = TODO()
2021-03-12 04:23:56,450 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(cause: kotlin.Throwable?): IllegalStateException = TODO()
2021-03-12 04:23:56,747 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 04:23:56,895 [main:43] - GENERATING CALL OF fun IllegalArgumentException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 04:23:56,901 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 04:23:57,196 [main:302] - generating value of type = Throwable false depth = 6
2021-03-12 04:23:57,348 [main:43] - GENERATING CALL OF fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 04:23:57,353 [main:61] - WITHOUT TYPE PARAMS = fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 04:23:57,661 [main:302] - generating value of type = String true depth = 9
2021-03-12 04:23:57,665 [main:95] - GENERATED = NotImplementedError("nnsju")
2021-03-12 04:23:57,665 [main:95] - GENERATED = IllegalArgumentException(NotImplementedError("nnsju"))
2021-03-12 04:23:57,666 [main:95] - GENERATED = IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju")))
2021-03-12 04:23:57,666 [main:58] - GENERATED VALUE OF TYPE IllegalStateException = IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju")))
2021-03-12 04:23:57,666 [main:61] - GENERATED IS CALL =true
2021-03-12 04:23:57,673 [main:67] - randomType = Boolean
2021-03-12 04:23:57,817 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:23:57,835 [main:106] - GETTING IllegalStateException from [ERROR : Class<T>]<T>
2021-03-12 04:23:57,838 [main:114] - replacement of IllegalStateException("ddxzp") of type IllegalStateException is IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju")))
2021-03-12 04:23:57,979 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:23:57,979 [main:66] - Compilation checking started
2021-03-12 04:23:58,558 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:23:58,560 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 04:23:58,561 [main:50] - replacing prope1 Continuation<*>
2021-03-12 04:23:58,561 [main:54] - Getting value of type Continuation<*>
2021-03-12 04:23:58,725 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 04:23:58,874 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:23:58,879 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:23:59,397 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 04:23:59,528 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:59,533 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:23:59,877 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 04:24:00,015 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:24:00,020 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:24:00,520 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:24:00,520 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:24:00,520 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:24:00,520 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 04:24:00,528 [main:67] - randomType = Long
2021-03-12 04:24:00,682 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:24:00,733 [main:106] - GETTING Continuation<*> from [ERROR : Class<T>]<T>
2021-03-12 04:24:00,736 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 04:24:00,736 [main:107] - replacing (fu7(), Kla0)
2021-03-12 04:24:00,737 [main:50] - replacing fu7() Kla0
2021-03-12 04:24:00,737 [main:54] - Getting value of type Kla0
2021-03-12 04:24:00,881 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:24:00,885 [main:112] - generating klass Kla0 text = @Suppress("vopgl")
inline class Kla0(val s: Any?)
2021-03-12 04:24:01,008 [main:194] - Type params = []
2021-03-12 04:24:01,149 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:24:01,149 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("zunew")
2021-03-12 04:24:01,149 [main:61] - GENERATED IS CALL =true
2021-03-12 04:24:02,045 [main:67] - randomType = Function1<Kla8, Function1<Map<Kla7, String>, Double?>>
2021-03-12 04:24:02,046 [main:106] - GETTING Kla0 from [ERROR : Class<T>]<T>
2021-03-12 04:24:02,049 [main:114] - replacement of fu7() of type Kla0 is Kla0("zunew")
2021-03-12 04:24:02,196 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:24:02,197 [main:66] - Compilation checking started
2021-03-12 04:24:02,799 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if (prope0 != "cocrc") return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:02,802 [main:107] - replacing (prope0 != "cocrc", Boolean)
2021-03-12 04:24:02,802 [main:50] - replacing prope0 != "cocrc" Boolean
2021-03-12 04:24:02,802 [main:54] - Getting value of type Boolean
2021-03-12 04:24:02,950 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:24:02,954 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:24:02,955 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:03,124 [main:67] - randomType = Kla9
2021-03-12 04:24:03,248 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 04:24:03,252 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:24:03,270 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla9[DeserializedSimpleFunctionDescriptor@1c1963af]
2021-03-12 04:24:03,413 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:24:03,414 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]
2021-03-12 04:24:03,557 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:24:03,561 [main:78] - Generated call from random type = (Kla9).equals("hpizo").xor(false)
2021-03-12 04:24:03,562 [main:106] - GETTING Boolean from [ERROR : Class<T>]<T>
2021-03-12 04:24:03,565 [main:114] - replacement of prope0 != "cocrc" of type Boolean is (Kla9).equals("hpizo").xor(false)
2021-03-12 04:24:03,694 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:24:03,694 [main:66] - Compilation checking started
2021-03-12 04:24:04,299 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:04,301 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 04:24:04,301 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 04:24:04,301 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 04:24:04,454 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 04:24:04,462 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 04:24:04,639 [main:67] - randomType = Kla2?
2021-03-12 04:24:04,761 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 04:24:04,765 [main:112] - generating klass Kla2 text = class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}
2021-03-12 04:24:04,773 [main:106] - GETTING EmptyCoroutineContext from [ERROR : Class<T>]<T>
2021-03-12 04:24:04,776 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 04:24:04,776 [main:107] - replacing (t, Ty0)
2021-03-12 04:24:04,776 [main:50] - replacing t Ty0
2021-03-12 04:24:04,776 [main:54] - Getting value of type Ty0
2021-03-12 04:24:04,917 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:24:04,923 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:24:05,432 [main:67] - randomType = Map<Kla1?, ULong>
2021-03-12 04:24:05,433 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:24:05,436 [main:111] - Cant find and generate replacement for t type Ty0
2021-03-12 04:24:05,437 [main:107] - replacing (let(x), Unit?)
2021-03-12 04:24:05,437 [main:50] - replacing let(x) Unit?
2021-03-12 04:24:05,437 [main:54] - Getting value of type Unit?
2021-03-12 04:24:05,581 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 04:24:05,719 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:24:05,724 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:24:06,055 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 04:24:06,059 [main:95] - GENERATED = check(false)
2021-03-12 04:24:06,060 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false)
2021-03-12 04:24:06,060 [main:61] - GENERATED IS CALL =true
2021-03-12 04:24:06,740 [main:67] - randomType = HashMap<Kla4, Kla6<Function1<Short, Boolean>>>
2021-03-12 04:24:06,894 [main:302] - generating value of type = HashMap<Kla4, Kla6<Function1<Short, Boolean>>> false depth = 0
2021-03-12 04:24:07,047 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): HashMap<Kla4, Kla6<Function1<Short, Boolean>>> = TODO()
2021-03-12 04:24:07,053 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): HashMap<Kla4, Kla6<Function1<Short, Boolean>>> = TODO()
2021-03-12 04:24:07,190 [main:95] - GENERATED = LinkedHashMap<Kla4, Kla6<Function1<Short, Boolean>>>()
2021-03-12 04:24:07,369 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <K, V> kotlin.collections.MutableMap<K, V>.minusAssign(key: K): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3c108134]
2021-03-12 04:24:07,517 [main:302] - generating value of type = K false depth = 0
2021-03-12 04:24:07,524 [main:158] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <K, V> kotlin.collections.MutableMap<K, V>.minusAssign(key: K): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3c108134]
2021-03-12 04:24:07,524 [main:78] - Generated call from random type = (LinkedHashMap<Kla4, Kla6<Function1<Short, Boolean>>>()).null
2021-03-12 04:24:07,526 [main:106] - GETTING Unit? from [ERROR : Class<T>]<T>
2021-03-12 04:24:07,529 [main:114] - replacement of let(x) of type Unit? is check(false)
2021-03-12 04:24:07,671 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:24:07,671 [main:66] - Compilation checking started
2021-03-12 04:24:08,063 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.check(false)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:08,065 [main:107] - replacing ("\n", String)
2021-03-12 04:24:08,065 [main:50] - replacing "\n" String
2021-03-12 04:24:08,065 [main:54] - Getting value of type String
2021-03-12 04:24:08,227 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:08,231 [main:58] - GENERATED VALUE OF TYPE String = "buvat"
2021-03-12 04:24:08,231 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:08,409 [main:67] - randomType = List<Long>
2021-03-12 04:24:08,410 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:24:08,413 [main:114] - replacement of "\n" of type String is "buvat"
2021-03-12 04:24:08,538 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:24:08,539 [main:66] - Compilation checking started
2021-03-12 04:24:09,106 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(true)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:09,109 [main:107] - replacing (value, Ty0)
2021-03-12 04:24:09,109 [main:50] - replacing value Ty0
2021-03-12 04:24:09,109 [main:54] - Getting value of type Ty0
2021-03-12 04:24:09,256 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:24:09,263 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:24:09,973 [main:67] - randomType = HashMap<Kla7?, ArrayDeque<Kla2>>?
2021-03-12 04:24:10,117 [main:302] - generating value of type = HashMap<Kla7?, ArrayDeque<Kla2>> false depth = 0
2021-03-12 04:24:10,266 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla7?, ArrayDeque<Kla2>> = TODO()
2021-03-12 04:24:10,271 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla7?, ArrayDeque<Kla2>> = TODO()
2021-03-12 04:24:10,403 [main:95] - GENERATED = linkedMapOf<Kla7?, ArrayDeque<Kla2>>()
2021-03-12 04:24:10,555 [main:106] - GETTING Ty0 from [ERROR : Class<T>]<T>
2021-03-12 04:24:10,558 [main:111] - Cant find and generate replacement for value type Ty0
2021-03-12 04:24:10,705 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 04:24:10,846 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:24:10,847 [main:66] - Compilation checking started
2021-03-12 04:24:11,444 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:11,445 [main:141] - TRYING TO REPLACE CONSTANT 1769405199
2021-03-12 04:24:11,596 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 04:24:11,597 [main:66] - Compilation checking started
2021-03-12 04:24:12,047 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(prope5, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(false)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:12,047 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 04:24:12,196 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(IS_EXPRESSION)
2021-03-12 04:24:12,197 [main:66] - Compilation checking started
2021-03-12 04:24:12,831 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = (true).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:12,832 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 04:24:12,993 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:24:12,994 [main:66] - Compilation checking started
2021-03-12 04:24:13,649 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(1504727023)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:13,650 [main:141] - TRYING TO REPLACE CONSTANT 1504727023
2021-03-12 04:24:13,797 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 04:24:13,797 [main:66] - Compilation checking started
2021-03-12 04:24:14,422 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:14,422 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 04:24:14,570 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 04:24:14,570 [main:66] - Compilation checking started
2021-03-12 04:24:15,018 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(prope8 != null).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-301713948)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:15,019 [main:141] - TRYING TO REPLACE CONSTANT 301713948
2021-03-12 04:24:15,176 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 04:24:15,177 [main:66] - Compilation checking started
2021-03-12 04:24:15,801 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(786914593))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:15,801 [main:141] - TRYING TO REPLACE CONSTANT 106
2021-03-12 04:24:15,949 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:15,949 [main:66] - Compilation checking started
2021-03-12 04:24:16,396 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(757670949, arrayListOf<Int>(786914593))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:16,396 [main:141] - TRYING TO REPLACE CONSTANT 786914593
2021-03-12 04:24:16,551 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:16,552 [main:66] - Compilation checking started
2021-03-12 04:24:17,179 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(-21415310)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:17,179 [main:141] - TRYING TO REPLACE CONSTANT 21415310
2021-03-12 04:24:17,323 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:17,323 [main:66] - Compilation checking started
2021-03-12 04:24:17,938 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(1850727531, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:17,939 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-12 04:24:18,091 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 04:24:18,092 [main:141] - TRYING TO REPLACE CONSTANT 1850727531
2021-03-12 04:24:18,242 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:18,242 [main:66] - Compilation checking started
2021-03-12 04:24:18,840 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(1527279442, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:18,840 [main:141] - TRYING TO REPLACE CONSTANT 1527279442
2021-03-12 04:24:18,997 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 04:24:18,997 [main:66] - Compilation checking started
2021-03-12 04:24:19,678 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -683545963)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:19,678 [main:141] - TRYING TO REPLACE CONSTANT 683545963
2021-03-12 04:24:19,826 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 04:24:19,827 [main:66] - Compilation checking started
2021-03-12 04:24:20,481 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (35.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:20,481 [main:141] - TRYING TO REPLACE CONSTANT 35
2021-03-12 04:24:20,626 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:20,627 [main:66] - Compilation checking started
2021-03-12 04:24:21,266 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-114))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:21,267 [main:141] - TRYING TO REPLACE CONSTANT 114
2021-03-12 04:24:21,435 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 04:24:21,435 [main:66] - Compilation checking started
2021-03-12 04:24:22,050 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error((7450551393361150876).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:22,050 [main:141] - TRYING TO REPLACE CONSTANT 7450551393361150876
2021-03-12 04:24:22,192 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 04:24:22,193 [main:66] - Compilation checking started
2021-03-12 04:24:22,785 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(102).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:22,785 [main:141] - TRYING TO REPLACE CONSTANT 102
2021-03-12 04:24:22,945 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:22,946 [main:66] - Compilation checking started
2021-03-12 04:24:23,577 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(-491068702))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:23,578 [main:141] - TRYING TO REPLACE CONSTANT 491068702
2021-03-12 04:24:23,725 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:23,726 [main:66] - Compilation checking started
2021-03-12 04:24:24,320 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error((0.48702413f).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:24,320 [main:141] - TRYING TO REPLACE CONSTANT 0.48702413f
2021-03-12 04:24:24,467 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 04:24:24,467 [main:66] - Compilation checking started
2021-03-12 04:24:25,081 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:25,081 [main:141] - TRYING TO REPLACE CONSTANT 757670949
2021-03-12 04:24:25,225 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 04:24:25,226 [main:66] - Compilation checking started
2021-03-12 04:24:25,672 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (46.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(size))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:25,672 [main:141] - TRYING TO REPLACE CONSTANT 46
2021-03-12 04:24:25,820 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:25,821 [main:66] - Compilation checking started
2021-03-12 04:24:26,422 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:26,422 [main:141] - TRYING TO REPLACE CONSTANT 557946651
2021-03-12 04:24:26,568 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 04:24:26,569 [main:66] - Compilation checking started
2021-03-12 04:24:27,004 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (1256).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(prope5)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:27,005 [main:141] - TRYING TO REPLACE CONSTANT 1256
2021-03-12 04:24:27,154 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:27,155 [main:66] - Compilation checking started
2021-03-12 04:24:27,772 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 19855.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:27,772 [main:141] - TRYING TO REPLACE CONSTANT 19855
2021-03-12 04:24:27,912 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:24:27,913 [main:66] - Compilation checking started
2021-03-12 04:24:28,519 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:28,519 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 04:24:28,669 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 04:24:28,670 [main:66] - Compilation checking started
2021-03-12 04:24:29,328 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:29,328 [main:41] - AFTER TRY 1 res = import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}


2021-03-12 04:24:29,633 [main:112] - generating klass Kla0 text = @Suppress("vopgl")
inline class Kla0(val s: Any?)
2021-03-12 04:24:29,758 [main:194] - Type params = []
2021-03-12 04:24:29,885 [main:302] - generating value of type = Any false depth = 1
2021-03-12 04:24:29,885 [main:112] - generating klass Kla1 text = class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}
2021-03-12 04:24:30,010 [main:194] - Type params = []
2021-03-12 04:24:30,133 [main:112] - generating klass Kla2 text = class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}
2021-03-12 04:24:30,133 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}
2021-03-12 04:24:30,133 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}
2021-03-12 04:24:30,256 [main:194] - Type params = []
2021-03-12 04:24:30,377 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 04:24:30,505 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:24:30,510 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:24:30,877 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 04:24:31,013 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:24:31,018 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:24:31,456 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:24:31,456 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:24:31,456 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}
2021-03-12 04:24:31,456 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:24:31,889 [main:302] - generating value of type = Kla9 false depth = 1
2021-03-12 04:24:31,893 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:24:31,894 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}
2021-03-12 04:24:31,894 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}
2021-03-12 04:24:31,894 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:24:31,894 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}
2021-03-12 04:24:31,895 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}
2021-03-12 04:24:31,895 [main:112] - generating klass Kla10 text = companion object Kla10 : Kla4()
2021-03-12 04:24:32,194 [main:43] - GENERATING CALL OF @Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java
2021-03-12 04:24:32,206 [main:61] - WITHOUT TYPE PARAMS = @Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<Boolean> = T::class.java
2021-03-12 04:24:32,346 [main:95] - GENERATED = javaClass<Boolean>()
2021-03-12 04:24:32,508 [main:43] - GENERATING CALL OF fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}
2021-03-12 04:24:32,512 [main:61] - WITHOUT TYPE PARAMS = fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}
2021-03-12 04:24:32,870 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 04:24:32,874 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 04:24:33,013 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:24:33,018 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:24:33,353 [main:302] - generating value of type = Any false depth = 5
2021-03-12 04:24:33,354 [main:95] - GENERATED = print("zrtlt")
2021-03-12 04:24:33,354 [main:95] - GENERATED = fu0({ print("zrtlt")})
2021-03-12 04:24:33,492 [main:43] - GENERATING CALL OF suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}
2021-03-12 04:24:33,871 [main:61] - WITHOUT TYPE PARAMS = suspend fun <Ty0> fu1(): Set<Int?> = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}
2021-03-12 04:24:34,005 [main:95] - GENERATED = fu1<Set<Int?>>()
2021-03-12 04:24:34,159 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}
2021-03-12 04:24:34,345 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (Long?) -> Unit): Continuation<Long?> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}
2021-03-12 04:24:34,670 [main:302] - generating value of type = Function1<Long?, Unit> false depth = 1
2021-03-12 04:24:34,675 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 04:24:34,831 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:24:34,837 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:24:35,163 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 04:24:35,168 [main:95] - GENERATED = require(true)
2021-03-12 04:24:35,168 [main:95] - GENERATED = fu2<Long?>({a: Long? -> require(true)})
2021-03-12 04:24:35,315 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}
2021-03-12 04:24:35,319 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}
2021-03-12 04:24:35,640 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 04:24:35,645 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 04:24:35,653 [main:95] - GENERATED = fu3({a: Throwable -> println()})
2021-03-12 04:24:35,832 [main:43] - Try №1
2021-03-12 04:24:36,884 [main:69] - Trying to insert fun fu17(a: String, b: String, c: () -> String): String {
    return a + b + c();
}
2021-03-12 04:24:37,134 [main:66] - Compilation checking started
2021-03-12 04:24:38,252 [main:103] - Trying to change 89 nodes
2021-03-12 04:24:38,252 [main:107] - replacing (prope9, String)
2021-03-12 04:24:38,254 [main:50] - replacing prope9 String
2021-03-12 04:24:38,254 [main:54] - Getting value of type String
2021-03-12 04:24:38,458 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:38,464 [main:58] - GENERATED VALUE OF TYPE String = "gvcwc"
2021-03-12 04:24:38,464 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:38,484 [main:67] - randomType = Kla7
2021-03-12 04:24:38,682 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 04:24:38,687 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}
2021-03-12 04:24:38,694 [main:106] - GETTING String from String
2021-03-12 04:24:38,722 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c3b3d]]
2021-03-12 04:24:38,723 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c3b3d]
2021-03-12 04:24:38,911 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:24:38,916 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:24:38,922 [main:117] - GENERATED CALL = (Kla2().fu6()).takeLastWhile({a: Char -> true})
2021-03-12 04:24:38,922 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c334908]]
2021-03-12 04:24:38,922 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c334908]
2021-03-12 04:24:39,139 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:24:39,147 [main:117] - GENERATED CALL = (Kla2().fu6()).replaceAfter('멞', Kla2().fu6(), prope0)
2021-03-12 04:24:39,147 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2736e026]]
2021-03-12 04:24:39,147 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2736e026]
2021-03-12 04:24:39,147 [main:117] - GENERATED CALL = (Kla2().fu6()).toLowerCase()
2021-03-12 04:24:39,147 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e22e318]]
2021-03-12 04:24:39,147 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e22e318]
2021-03-12 04:24:39,148 [main:117] - GENERATED CALL = (Kla2().fu6()).substring((786914593))
2021-03-12 04:24:39,148 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40d35e50], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@479ad565]]
2021-03-12 04:24:39,148 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40d35e50]
2021-03-12 04:24:39,313 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:24:39,318 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@479ad565]
2021-03-12 04:24:39,318 [main:117] - GENERATED CALL = (Kla2().fu6()).get(-2089422811).lowercase()
2021-03-12 04:24:39,318 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@336fcf86]]
2021-03-12 04:24:39,318 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@336fcf86]
2021-03-12 04:24:39,508 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:24:39,513 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:24:39,518 [main:117] - GENERATED CALL = (Kla2().fu6()).dropWhile({a: Char -> true})
2021-03-12 04:24:39,518 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a4b608]]
2021-03-12 04:24:39,518 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a4b608]
2021-03-12 04:24:39,518 [main:117] - GENERATED CALL = (Kla2().fu6()).trimStart()
2021-03-12 04:24:39,519 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@566ab5cd]]
2021-03-12 04:24:39,519 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@566ab5cd]
2021-03-12 04:24:39,690 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:24:39,695 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:24:39,700 [main:117] - GENERATED CALL = (Kla2().fu6()).filter({a: Char -> false})
2021-03-12 04:24:39,700 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16eef84b]]
2021-03-12 04:24:39,700 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16eef84b]
2021-03-12 04:24:39,701 [main:117] - GENERATED CALL = (Kla2().fu6()).concat(var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
2021-03-12 04:24:39,701 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@592560f7]]
2021-03-12 04:24:39,701 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@592560f7]
2021-03-12 04:24:39,872 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:24:40,066 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 04:24:40,072 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 04:24:40,447 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:24:40,452 [main:95] - GENERATED = StringBuilder("yerxm")
2021-03-12 04:24:40,453 [main:117] - GENERATED CALL = (Kla2().fu6()).removeSuffix(StringBuilder("yerxm"))
2021-03-12 04:24:40,453 [main:114] - replacement of prope9 of type String is Kla2().fu6()
2021-03-12 04:24:40,638 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:24:40,639 [main:66] - Compilation checking started
2021-03-12 04:24:41,160 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {Kla2().fu6() += "K"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 1: $prope9 != KOL or $prope10 != OKL"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = fu17(c = {prope9 += "L"; "L"}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}())
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    return a + b + c();
}


2021-03-12 04:24:41,161 [main:107] - replacing ("fail 1: $prope9 != KOL or $prope10 != OKL", String)
2021-03-12 04:24:41,161 [main:50] - replacing "fail 1: $prope9 != KOL or $prope10 != OKL" String
2021-03-12 04:24:41,161 [main:54] - Getting value of type String
2021-03-12 04:24:41,364 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:41,369 [main:58] - GENERATED VALUE OF TYPE String = "zsqex"
2021-03-12 04:24:41,370 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:41,578 [main:67] - randomType = Kla3
2021-03-12 04:24:41,763 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 04:24:41,768 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}
2021-03-12 04:24:41,777 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla3[SimpleFunctionDescriptorImpl@78dc1a1a]
2021-03-12 04:24:41,778 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:24:41,778 [main:78] - Generated call from random type = (Kla3()).fu8()?.toString()!!
2021-03-12 04:24:41,779 [main:106] - GETTING String from Boolean
2021-03-12 04:24:41,791 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:24:41,791 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0]
2021-03-12 04:24:41,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:24:41,792 [main:117] - GENERATED CALL = (Kla8().prope6).compareTo(Kla8().prope6).toString((786914593))
2021-03-12 04:24:41,792 [main:114] - replacement of "fail 1: $prope9 != KOL or $prope10 != OKL" of type String is "zsqex"
2021-03-12 04:24:41,957 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:24:41,957 [main:66] - Compilation checking started
2021-03-12 04:24:42,610 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = fu17(c = {prope9 += "L"; "L"}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}())
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    return a + b + c();
}


2021-03-12 04:24:42,611 [main:107] - replacing (prope9 != "KOL" || prope10 != "OKL", Boolean)
2021-03-12 04:24:42,612 [main:50] - replacing prope9 != "KOL" || prope10 != "OKL" Boolean
2021-03-12 04:24:42,612 [main:54] - Getting value of type Boolean
2021-03-12 04:24:42,857 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:24:42,865 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:24:42,865 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:44,980 [main:67] - randomType = Triple<Char, MutableMap<UInt, Kla9?>, Function2<Short?, List<Kla4>, Kla9>>?
2021-03-12 04:24:45,176 [main:302] - generating value of type = Triple<Char, MutableMap<UInt, Kla9?>, Function2<Short?, List<Kla4>, Kla9>> false depth = 0
2021-03-12 04:24:45,360 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Char, second: MutableMap<UInt, Kla9?>, third: Function2<Short?, List<Kla4>, Kla9>): Triple<Char, MutableMap<UInt, Kla9?>, Function2<Short?, List<Kla4>, Kla9>> = TODO()
2021-03-12 04:24:45,366 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Char, second: MutableMap<UInt, Kla9?>, third: Function2<Short?, List<Kla4>, Kla9>): Triple<Char, MutableMap<UInt, Kla9?>, Function2<Short?, List<Kla4>, Kla9>> = TODO()
2021-03-12 04:24:45,534 [main:302] - generating value of type = Char true depth = 3
2021-03-12 04:24:45,539 [main:302] - generating value of type = MutableMap<UInt, Kla9?> false depth = 3
2021-03-12 04:24:45,732 [main:43] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<UInt, Kla9?>): MutableMap<UInt, Kla9?> = TODO()
2021-03-12 04:24:45,738 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<UInt, Kla9?>): MutableMap<UInt, Kla9?> = TODO()
2021-03-12 04:24:46,116 [main:302] - generating value of type = Map<UInt, Kla9?> false depth = 6
2021-03-12 04:24:46,313 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): Map<UInt, Kla9?> = TODO()
2021-03-12 04:24:46,320 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): Map<UInt, Kla9?> = TODO()
2021-03-12 04:24:46,685 [main:302] - generating value of type = Int true depth = 9
2021-03-12 04:24:46,692 [main:95] - GENERATED = LinkedHashMap<UInt, Kla9?>(918159324)
2021-03-12 04:24:46,692 [main:95] - GENERATED = HashMap<UInt, Kla9?>(LinkedHashMap<UInt, Kla9?>(918159324))
2021-03-12 04:24:46,692 [main:302] - generating value of type = Function2<Short?, List<Kla4>, Kla9> false depth = 3
2021-03-12 04:24:46,697 [main:302] - generating value of type = Kla9 false depth = 4
2021-03-12 04:24:46,702 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:24:46,702 [main:95] - GENERATED = Triple<Char, MutableMap<UInt, Kla9?>, Function2<Short?, List<Kla4>, Kla9>>('ᆷ', HashMap<UInt, Kla9?>(LinkedHashMap<UInt, Kla9?>(918159324)), {a: Short?, b: List<Kla4> -> Kla9})
2021-03-12 04:24:46,742 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@2d8a273b]
2021-03-12 04:24:46,743 [main:78] - Generated call from random type = (Triple<Char, MutableMap<UInt, Kla9?>, Function2<Short?, List<Kla4>, Kla9>>('ᆷ', HashMap<UInt, Kla9?>(LinkedHashMap<UInt, Kla9?>(918159324)), {a: Short?, b: List<Kla4> -> Kla9}))?.equals(Kla1().fu8())
2021-03-12 04:24:46,744 [main:106] - GETTING Boolean from UByte
2021-03-12 04:24:46,771 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7e688bc8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@646759b2]]
2021-03-12 04:24:46,771 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7e688bc8]
2021-03-12 04:24:46,771 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@646759b2]
2021-03-12 04:24:46,771 [main:117] - GENERATED CALL = (1504727023.toUByte()).toByte().equals(Kla2().fu8())
2021-03-12 04:24:46,771 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@464d65a9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c706708]]
2021-03-12 04:24:46,771 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@464d65a9]
2021-03-12 04:24:46,771 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c706708]
2021-03-12 04:24:46,950 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:24:46,950 [main:117] - GENERATED CALL = (1504727023.toUByte()).toFloat().equals("tpxqw")
2021-03-12 04:24:46,950 [main:113] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7a3c8fff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24300ae1]]
2021-03-12 04:24:46,950 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7a3c8fff]
2021-03-12 04:24:46,951 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24300ae1]
2021-03-12 04:24:46,951 [main:117] - GENERATED CALL = (1504727023.toUByte()).compareTo((1504727023.toUByte())).equals(Kla5().prope0)
2021-03-12 04:24:46,951 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3f13e2a7], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@39a5937a]]
2021-03-12 04:24:46,951 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3f13e2a7]
2021-03-12 04:24:46,951 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@39a5937a]
2021-03-12 04:24:46,951 [main:117] - GENERATED CALL = (1504727023.toUByte()).toDouble().isFinite()
2021-03-12 04:24:46,951 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@178e50b1]]
2021-03-12 04:24:46,951 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@178e50b1]
2021-03-12 04:24:47,123 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:24:47,123 [main:117] - GENERATED CALL = (1504727023.toUByte()).equals("qopvv")
2021-03-12 04:24:47,123 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@178e50b1], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]]
2021-03-12 04:24:47,123 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@178e50b1]
2021-03-12 04:24:47,124 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:24:47,277 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:24:47,282 [main:117] - GENERATED CALL = (1504727023.toUByte()).equals(Kla2().fu8()).or(false)
2021-03-12 04:24:47,283 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@464d65a9], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3430415c]]
2021-03-12 04:24:47,283 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@464d65a9]
2021-03-12 04:24:47,283 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3430415c]
2021-03-12 04:24:47,283 [main:117] - GENERATED CALL = (1504727023.toUByte()).toFloat().isFinite()
2021-03-12 04:24:47,283 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3f13e2a7], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a357bc4]]
2021-03-12 04:24:47,283 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3f13e2a7]
2021-03-12 04:24:47,283 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a357bc4]
2021-03-12 04:24:47,283 [main:117] - GENERATED CALL = (1504727023.toUByte()).toDouble().isInfinite()
2021-03-12 04:24:47,283 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4bfa85ac], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@2e34bf02]]
2021-03-12 04:24:47,283 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4bfa85ac]
2021-03-12 04:24:47,458 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:24:47,463 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@2e34bf02]
2021-03-12 04:24:47,464 [main:117] - GENERATED CALL = (1504727023.toUByte()).rangeTo(23.toUByte()).equals(Kla0("jkydd").s)
2021-03-12 04:24:47,464 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@502d6fe9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@384d0737]]
2021-03-12 04:24:47,464 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@502d6fe9]
2021-03-12 04:24:47,464 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@384d0737]
2021-03-12 04:24:47,464 [main:117] - GENERATED CALL = (1504727023.toUByte()).toShort().equals(Kla5().prope0)
2021-03-12 04:24:47,464 [main:114] - replacement of prope9 != "KOL" || prope10 != "OKL" of type Boolean is (1504727023.toUByte()).equals("qopvv")
2021-03-12 04:24:47,635 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:24:47,635 [main:66] - Compilation checking started
2021-03-12 04:24:48,327 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = fu17(c = {prope9 += "L"; "L"}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}())
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    return a + b + c();
}


2021-03-12 04:24:48,328 [main:107] - replacing ("K", String)
2021-03-12 04:24:48,329 [main:50] - replacing "K" String
2021-03-12 04:24:48,329 [main:54] - Getting value of type String
2021-03-12 04:24:48,521 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:48,526 [main:58] - GENERATED VALUE OF TYPE String = "rnjjo"
2021-03-12 04:24:48,526 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:48,740 [main:67] - randomType = Kla0?
2021-03-12 04:24:48,887 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:24:48,891 [main:112] - generating klass Kla0 text = @Suppress("vopgl")
inline class Kla0(val s: Any?)
2021-03-12 04:24:49,080 [main:194] - Type params = []
2021-03-12 04:24:49,245 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:24:49,252 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:24:49,253 [main:78] - Generated call from random type = (Kla0("dcsdj"))?.s?.toString()!!
2021-03-12 04:24:49,253 [main:106] - GETTING String from Kla0
2021-03-12 04:24:49,259 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@248ea51a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:24:49,260 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:24:49,260 [main:117] - GENERATED CALL = (Kla2().fu7()).s?.toString()
2021-03-12 04:24:49,260 [main:114] - replacement of "K" of type String is "rnjjo"
2021-03-12 04:24:49,412 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:24:49,412 [main:66] - Compilation checking started
2021-03-12 04:24:50,058 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = fu17(c = {prope9 += "L"; "L"}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}())
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    return a + b + c();
}


2021-03-12 04:24:50,059 [main:107] - replacing (c(), String)
2021-03-12 04:24:50,060 [main:50] - replacing c() String
2021-03-12 04:24:50,060 [main:54] - Getting value of type String
2021-03-12 04:24:50,234 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:50,240 [main:58] - GENERATED VALUE OF TYPE String = "lfjgx"
2021-03-12 04:24:50,240 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:50,250 [main:67] - randomType = String
2021-03-12 04:24:50,442 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:50,481 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72ba2d6f]
2021-03-12 04:24:50,481 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@612b9e08]
2021-03-12 04:24:50,650 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:24:50,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:24:50,843 [main:78] - Generated call from random type = ("kwjpq").subSequence((786914593), (786914593)).substring(-1637566219, -1217348014)
2021-03-12 04:24:50,844 [main:106] - GETTING String from Kla1
2021-03-12 04:24:50,855 [main:113] - Case = [public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@4db37cc1], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:24:50,855 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@4db37cc1]
2021-03-12 04:24:50,855 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:24:50,856 [main:117] - GENERATED CALL = (Kla1()).fu8()?.toString()
2021-03-12 04:24:50,856 [main:114] - replacement of c() of type String is (Kla1()).fu8()?.toString()
2021-03-12 04:24:51,025 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:24:51,025 [main:66] - Compilation checking started
2021-03-12 04:24:51,474 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = fu17(c = {prope9 += "L"; "L"}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}())
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + (Kla1()).fu8()?.toString();
}


2021-03-12 04:24:51,475 [main:107] - replacing ("L", String)
2021-03-12 04:24:51,475 [main:50] - replacing "L" String
2021-03-12 04:24:51,475 [main:54] - Getting value of type String
2021-03-12 04:24:51,650 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:51,655 [main:58] - GENERATED VALUE OF TYPE String = "evpmk"
2021-03-12 04:24:51,656 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:51,666 [main:67] - randomType = Float
2021-03-12 04:24:51,835 [main:302] - generating value of type = Float true depth = 0
2021-03-12 04:24:51,887 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3deba98e]
2021-03-12 04:24:51,888 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:24:51,888 [main:78] - Generated call from random type = (0.9774583f).toLong().toString((786914593))
2021-03-12 04:24:51,889 [main:106] - GETTING String from Any?
2021-03-12 04:24:51,894 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:24:51,894 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:24:51,894 [main:117] - GENERATED CALL = (Kla2().fu8()).toString()
2021-03-12 04:24:51,894 [main:114] - replacement of "L" of type String is (Kla2().fu8()).toString()
2021-03-12 04:24:52,075 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:24:52,075 [main:66] - Compilation checking started
2021-03-12 04:24:52,571 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = fu17(c = {prope9 += "L"; (Kla2().fu8()).toString()}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}())
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:24:52,572 [main:107] - replacing (fu17(c = {prope9 += "L"; "L"}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}()), String)
2021-03-12 04:24:52,572 [main:50] - replacing fu17(c = {prope9 += "L"; "L"}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}()) String
2021-03-12 04:24:52,572 [main:54] - Getting value of type String
2021-03-12 04:24:52,743 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:52,748 [main:58] - GENERATED VALUE OF TYPE String = "fjqzj"
2021-03-12 04:24:52,748 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:52,759 [main:67] - randomType = String
2021-03-12 04:24:52,927 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:52,958 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72ba2d6f]
2021-03-12 04:24:53,113 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:24:53,118 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@612b9e08]
2021-03-12 04:24:53,293 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:24:53,298 [main:78] - Generated call from random type = ("nwgrl").subSequence((786914593), 1456214242).substring((786914593), -722368772)
2021-03-12 04:24:53,299 [main:106] - GETTING String from [ERROR : Class<T>]<T>
2021-03-12 04:24:53,303 [main:106] - GETTING String from Kla9
2021-03-12 04:24:53,327 [main:106] - GETTING String from CoroutineContext
2021-03-12 04:24:53,335 [main:106] - GETTING String from Boolean
2021-03-12 04:24:53,346 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:24:53,346 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0]
2021-03-12 04:24:53,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:24:53,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:24:53,518 [main:117] - GENERATED CALL = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
2021-03-12 04:24:53,518 [main:114] - replacement of fu17(c = {prope9 += "L"; "L"}, b = {prope9 += "K"; "K"}(), a = {prope9+="O"; "O"}()) of type String is ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
2021-03-12 04:24:53,671 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:24:53,672 [main:66] - Compilation checking started
2021-03-12 04:24:54,304 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:24:54,305 [main:107] - replacing ("KOL", String)
2021-03-12 04:24:54,305 [main:50] - replacing "KOL" String
2021-03-12 04:24:54,305 [main:54] - Getting value of type String
2021-03-12 04:24:54,499 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:54,505 [main:58] - GENERATED VALUE OF TYPE String = "imiax"
2021-03-12 04:24:54,505 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:55,098 [main:67] - randomType = Function1<UShort, LinkedHashSet<Short>>
2021-03-12 04:24:55,100 [main:106] - GETTING String from Kla0
2021-03-12 04:24:55,106 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@248ea51a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:24:55,106 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:24:55,107 [main:117] - GENERATED CALL = (Kla1().fu7()).s?.toString()
2021-03-12 04:24:55,107 [main:114] - replacement of "KOL" of type String is (Kla1().fu7()).s?.toString()
2021-03-12 04:24:55,273 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:24:55,274 [main:66] - Compilation checking started
2021-03-12 04:24:55,718 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != (Kla1().fu7()).s?.toString() || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:24:55,718 [main:107] - replacing (prope9, String)
2021-03-12 04:24:55,719 [main:50] - replacing prope9 String
2021-03-12 04:24:55,719 [main:54] - Getting value of type String
2021-03-12 04:24:55,888 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:55,894 [main:58] - GENERATED VALUE OF TYPE String = "oawdo"
2021-03-12 04:24:55,894 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:57,194 [main:67] - randomType = Map<Array<Kla8>, Double?>?
2021-03-12 04:24:57,195 [main:106] - GETTING String from Kla9
2021-03-12 04:24:57,228 [main:106] - GETTING String from Any?
2021-03-12 04:24:57,232 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:24:57,232 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:24:57,232 [main:117] - GENERATED CALL = (Kla2().fu8()).toString()
2021-03-12 04:24:57,232 [main:114] - replacement of prope9 of type String is (Kla2().fu8()).toString()
2021-03-12 04:24:57,413 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:24:57,413 [main:66] - Compilation checking started
2021-03-12 04:24:57,880 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if ((Kla2().fu8()).toString() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:24:57,881 [main:107] - replacing (prope9, String)
2021-03-12 04:24:57,881 [main:50] - replacing prope9 String
2021-03-12 04:24:57,882 [main:54] - Getting value of type String
2021-03-12 04:24:58,046 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:58,051 [main:58] - GENERATED VALUE OF TYPE String = "bussv"
2021-03-12 04:24:58,051 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:58,254 [main:67] - randomType = Long?
2021-03-12 04:24:58,399 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:24:58,434 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7ceffb96]
2021-03-12 04:24:58,434 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de101f1]
2021-03-12 04:24:58,435 [main:78] - Generated call from random type = (-464391147461088832)?.toChar().plus(var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
2021-03-12 04:24:58,435 [main:114] - replacement of prope9 of type String is (-464391147461088832)?.toChar().plus(var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
2021-03-12 04:24:58,601 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 04:24:58,601 [main:66] - Compilation checking started
2021-03-12 04:24:58,610 [main:71] - Wrong syntax or breaks conditions
2021-03-12 04:24:58,610 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {(-464391147461088832)?.toChar().plus(var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948) += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:24:58,611 [main:107] - replacing ("OKL", String)
2021-03-12 04:24:58,611 [main:50] - replacing "OKL" String
2021-03-12 04:24:58,611 [main:54] - Getting value of type String
2021-03-12 04:24:58,794 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:24:58,799 [main:58] - GENERATED VALUE OF TYPE String = "somzc"
2021-03-12 04:24:58,799 [main:61] - GENERATED IS CALL =false
2021-03-12 04:24:59,637 [main:67] - randomType = Kla6<Collection<Kla9?>?>
2021-03-12 04:24:59,813 [main:302] - generating value of type = Kla6<Collection<Kla9?>?> false depth = 0
2021-03-12 04:24:59,820 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:25:00,602 [main:302] - generating value of type = Kla9 false depth = 2
2021-03-12 04:25:00,607 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:25:00,630 [main:106] - GETTING String from Kla1
2021-03-12 04:25:00,636 [main:113] - Case = [public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@4db37cc1], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:00,636 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@4db37cc1]
2021-03-12 04:25:00,636 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:00,637 [main:117] - GENERATED CALL = (Kla1()).fu8()?.toString()
2021-03-12 04:25:00,637 [main:114] - replacement of "OKL" of type String is (Kla1()).fu8()?.toString()
2021-03-12 04:25:00,797 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:25:00,798 [main:66] - Compilation checking started
2021-03-12 04:25:01,260 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != (Kla1()).fu8()?.toString()) return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:01,261 [main:107] - replacing ("L", String)
2021-03-12 04:25:01,261 [main:50] - replacing "L" String
2021-03-12 04:25:01,261 [main:54] - Getting value of type String
2021-03-12 04:25:01,431 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:01,436 [main:58] - GENERATED VALUE OF TYPE String = "swyil"
2021-03-12 04:25:01,436 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:01,655 [main:67] - randomType = Set<Kla8>
2021-03-12 04:25:01,656 [main:106] - GETTING String from Kla0
2021-03-12 04:25:01,662 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@248ea51a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:01,662 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:01,663 [main:117] - GENERATED CALL = (Kla1().fu7()).s?.toString()
2021-03-12 04:25:01,663 [main:114] - replacement of "L" of type String is (Kla1().fu7()).s?.toString()
2021-03-12 04:25:01,818 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:25:01,819 [main:66] - Compilation checking started
2021-03-12 04:25:02,264 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; (Kla1().fu7()).s?.toString()}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $prope10 != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:02,264 [main:107] - replacing (prope10, String)
2021-03-12 04:25:02,265 [main:50] - replacing prope10 String
2021-03-12 04:25:02,265 [main:54] - Getting value of type String
2021-03-12 04:25:02,438 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:02,443 [main:58] - GENERATED VALUE OF TYPE String = "qqmyj"
2021-03-12 04:25:02,443 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:02,640 [main:67] - randomType = Double
2021-03-12 04:25:02,786 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:25:02,819 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4203cb07]
2021-03-12 04:25:02,819 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de101f1]
2021-03-12 04:25:02,819 [main:78] - Generated call from random type = (0.6953488611269064).toChar().plus(Kla2().fu6())
2021-03-12 04:25:02,820 [main:106] - GETTING String from Kla0
2021-03-12 04:25:02,824 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@248ea51a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:02,824 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:02,824 [main:117] - GENERATED CALL = (Kla3().fu7()).s?.toString()
2021-03-12 04:25:02,824 [main:114] - replacement of prope10 of type String is (Kla3().fu7()).s?.toString()
2021-03-12 04:25:02,986 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:25:02,986 [main:66] - Compilation checking started
2021-03-12 04:25:03,676 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $prope10 != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:03,677 [main:107] - replacing (prope10, String)
2021-03-12 04:25:03,677 [main:50] - replacing prope10 String
2021-03-12 04:25:03,677 [main:54] - Getting value of type String
2021-03-12 04:25:03,850 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:03,855 [main:58] - GENERATED VALUE OF TYPE String = "auzmm"
2021-03-12 04:25:03,855 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:03,875 [main:67] - randomType = Kla1
2021-03-12 04:25:04,038 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:25:04,043 [main:112] - generating klass Kla1 text = class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}
2021-03-12 04:25:04,190 [main:194] - Type params = []
2021-03-12 04:25:04,384 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@751ba933]
2021-03-12 04:25:04,384 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:04,384 [main:78] - Generated call from random type = (Kla1()).fu8()?.toString()!!
2021-03-12 04:25:04,386 [main:106] - GETTING String from UByte
2021-03-12 04:25:04,421 [main:113] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7a3c8fff], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:25:04,421 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7a3c8fff]
2021-03-12 04:25:04,421 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:04,596 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:04,602 [main:117] - GENERATED CALL = (1504727023.toUByte()).compareTo(1504727023.toUByte()).toString(-1296288564)
2021-03-12 04:25:04,602 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@29bebf0f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7183edec]]
2021-03-12 04:25:04,602 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@29bebf0f]
2021-03-12 04:25:04,602 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7183edec]
2021-03-12 04:25:04,747 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:04,752 [main:117] - GENERATED CALL = (1504727023.toUByte()).toUShort().toString(-1456493342)
2021-03-12 04:25:04,752 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23cf64e5]]
2021-03-12 04:25:04,752 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23cf64e5]
2021-03-12 04:25:04,753 [main:117] - GENERATED CALL = (1504727023.toUByte()).toString((786914593))
2021-03-12 04:25:04,753 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@708bad85], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]]
2021-03-12 04:25:04,753 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@708bad85]
2021-03-12 04:25:04,753 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:25:04,753 [main:117] - GENERATED CALL = (1504727023.toUByte()).toLong().toString((786914593))
2021-03-12 04:25:04,753 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@502d6fe9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a215398]]
2021-03-12 04:25:04,753 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@502d6fe9]
2021-03-12 04:25:04,753 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a215398]
2021-03-12 04:25:04,754 [main:117] - GENERATED CALL = (1504727023.toUByte()).toShort().toString((786914593))
2021-03-12 04:25:04,754 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7e688bc8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]]
2021-03-12 04:25:04,754 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7e688bc8]
2021-03-12 04:25:04,754 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]
2021-03-12 04:25:04,754 [main:117] - GENERATED CALL = (1504727023.toUByte()).toByte().toString((786914593))
2021-03-12 04:25:04,754 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1b63a315], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37ff6073]]
2021-03-12 04:25:04,754 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1b63a315]
2021-03-12 04:25:04,922 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:25:04,928 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37ff6073]
2021-03-12 04:25:04,928 [main:117] - GENERATED CALL = (1504727023.toUByte()).div(61.toUByte()).toString((786914593))
2021-03-12 04:25:04,928 [main:114] - replacement of prope10 of type String is (1504727023.toUByte()).toByte().toString((786914593))
2021-03-12 04:25:05,095 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:05,096 [main:66] - Compilation checking started
2021-03-12 04:25:05,909 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = {prope9 += "K"; "K"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:05,910 [main:107] - replacing ({prope9 += "K"; "K"}, Function0<String>)
2021-03-12 04:25:05,910 [main:50] - replacing {prope9 += "K"; "K"} Function0<String>
2021-03-12 04:25:05,910 [main:54] - Getting value of type Function0<String>
2021-03-12 04:25:06,092 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 04:25:06,098 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:25:06,104 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "eahwo"}
2021-03-12 04:25:06,104 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:06,114 [main:67] - randomType = Int
2021-03-12 04:25:06,285 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:06,345 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:06,353 [main:106] - GETTING Function0<String> from String
2021-03-12 04:25:06,378 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:06,379 [main:106] - GETTING Function0<String> from Kla9
2021-03-12 04:25:06,397 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:06,398 [main:106] - GETTING Function0<String> from Continuation<Long?>
2021-03-12 04:25:06,407 [main:106] - GETTING Function0<String> from Kla9
2021-03-12 04:25:06,408 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:06,412 [main:106] - GETTING Function0<String> from String
2021-03-12 04:25:06,413 [main:106] - GETTING Function0<String> from Kla1
2021-03-12 04:25:06,421 [main:106] - GETTING Function0<String> from UByte
2021-03-12 04:25:06,443 [main:106] - GETTING Function0<String> from [ERROR : Class<T>]<T>
2021-03-12 04:25:06,446 [main:106] - GETTING Function0<String> from Unit?
2021-03-12 04:25:06,451 [main:106] - GETTING Function0<String> from Int
2021-03-12 04:25:06,481 [main:106] - GETTING Function0<String> from Continuation<Any?>
2021-03-12 04:25:06,488 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:06,489 [main:106] - GETTING Function0<String> from UByte
2021-03-12 04:25:06,490 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:06,492 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:06,498 [main:106] - GETTING Function0<String> from Unit?
2021-03-12 04:25:06,499 [main:106] - GETTING Function0<String> from UShort
2021-03-12 04:25:06,522 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 04:25:06,531 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:06,532 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:06,533 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:06,534 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:06,535 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 04:25:06,536 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:06,537 [main:106] - GETTING Function0<String> from Char
2021-03-12 04:25:06,556 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:06,557 [main:106] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-12 04:25:06,572 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:06,573 [main:106] - GETTING Function0<String> from Set<Int?>
2021-03-12 04:25:06,596 [main:106] - GETTING Function0<String> from Continuation<Any>?
2021-03-12 04:25:06,604 [main:106] - GETTING Function0<String> from Function0<Unit>
2021-03-12 04:25:06,612 [main:114] - replacement of {prope9 += "K"; "K"} of type Function0<String> is { "eahwo"}
2021-03-12 04:25:06,792 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:25:06,792 [main:66] - Compilation checking started
2021-03-12 04:25:07,485 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; "K"}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:07,485 [main:107] - replacing ("K", String)
2021-03-12 04:25:07,486 [main:50] - replacing "K" String
2021-03-12 04:25:07,486 [main:54] - Getting value of type String
2021-03-12 04:25:07,659 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:07,665 [main:58] - GENERATED VALUE OF TYPE String = "doiow"
2021-03-12 04:25:07,665 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:07,675 [main:67] - randomType = Int
2021-03-12 04:25:07,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:07,947 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e8fb0bd]
2021-03-12 04:25:07,948 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:25:08,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:08,095 [main:78] - Generated call from random type = (-1453651276).toLong().toString(-1012814592)
2021-03-12 04:25:08,096 [main:106] - GETTING String from Kla9
2021-03-12 04:25:08,118 [main:106] - GETTING String from Kla9
2021-03-12 04:25:08,118 [main:106] - GETTING String from Continuation<Long?>
2021-03-12 04:25:08,127 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 04:25:08,134 [main:106] - GETTING String from Kla0
2021-03-12 04:25:08,138 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@248ea51a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:08,138 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:08,138 [main:117] - GENERATED CALL = (Kla1().fu5()).s?.toString()
2021-03-12 04:25:08,138 [main:114] - replacement of "K" of type String is (-1453651276).toLong().toString(-1012814592)
2021-03-12 04:25:08,304 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:08,304 [main:66] - Compilation checking started
2021-03-12 04:25:09,009 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; (-1453651276).toLong().toString(-1012814592)}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:09,010 [main:107] - replacing (prope10, String)
2021-03-12 04:25:09,010 [main:50] - replacing prope10 String
2021-03-12 04:25:09,010 [main:54] - Getting value of type String
2021-03-12 04:25:09,233 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:09,238 [main:58] - GENERATED VALUE OF TYPE String = "hdfmg"
2021-03-12 04:25:09,239 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:09,429 [main:67] - randomType = Short
2021-03-12 04:25:09,574 [main:302] - generating value of type = Short true depth = 0
2021-03-12 04:25:09,609 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@51defa7a]
2021-03-12 04:25:09,609 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:09,609 [main:78] - Generated call from random type = (30933).toInt().toString((786914593))
2021-03-12 04:25:09,610 [main:106] - GETTING String from CoroutineContext
2021-03-12 04:25:09,615 [main:106] - GETTING String from Function0<Unit>
2021-03-12 04:25:09,624 [main:106] - GETTING String from Int
2021-03-12 04:25:09,654 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ade2e48], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]]
2021-03-12 04:25:09,654 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ade2e48]
2021-03-12 04:25:09,654 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]
2021-03-12 04:25:09,655 [main:117] - GENERATED CALL = ((786914593)).toByte().toString((786914593))
2021-03-12 04:25:09,655 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@51defa7a], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:25:09,655 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@51defa7a]
2021-03-12 04:25:09,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:09,655 [main:117] - GENERATED CALL = ((786914593)).toInt().toString((786914593))
2021-03-12 04:25:09,655 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de101f1]]
2021-03-12 04:25:09,655 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0]
2021-03-12 04:25:09,655 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de101f1]
2021-03-12 04:25:09,655 [main:117] - GENERATED CALL = ((786914593)).toChar().plus(prope0)
2021-03-12 04:25:09,655 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79b82659]]
2021-03-12 04:25:09,655 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0]
2021-03-12 04:25:09,656 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79b82659]
2021-03-12 04:25:09,656 [main:117] - GENERATED CALL = ((786914593)).toChar().uppercase()
2021-03-12 04:25:09,656 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@46d9c67c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:25:09,656 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@46d9c67c]
2021-03-12 04:25:09,656 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:09,824 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:09,829 [main:117] - GENERATED CALL = ((786914593)).compareTo((786914593)).toString(491637251)
2021-03-12 04:25:09,829 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@df9940b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a215398]]
2021-03-12 04:25:09,830 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@df9940b]
2021-03-12 04:25:09,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a215398]
2021-03-12 04:25:10,010 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:10,016 [main:117] - GENERATED CALL = ((786914593)).toShort().toString(-1155255421)
2021-03-12 04:25:10,016 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20953adc], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]]
2021-03-12 04:25:10,016 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20953adc]
2021-03-12 04:25:10,166 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:25:10,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:25:10,171 [main:117] - GENERATED CALL = ((786914593)).div(7320179988816921940).toString((786914593))
2021-03-12 04:25:10,171 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:25:10,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:10,341 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:10,346 [main:117] - GENERATED CALL = ((786914593)).toString(2084598474)
2021-03-12 04:25:10,346 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@479ad565]]
2021-03-12 04:25:10,346 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0]
2021-03-12 04:25:10,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@479ad565]
2021-03-12 04:25:10,347 [main:117] - GENERATED CALL = ((786914593)).toChar().lowercase()
2021-03-12 04:25:10,347 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e8fb0bd], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]]
2021-03-12 04:25:10,347 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e8fb0bd]
2021-03-12 04:25:10,347 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:25:10,512 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:10,518 [main:117] - GENERATED CALL = ((786914593)).toLong().toString(-1484913705)
2021-03-12 04:25:10,518 [main:114] - replacement of prope10 of type String is ((786914593)).toChar().uppercase()
2021-03-12 04:25:10,672 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:10,672 [main:66] - Compilation checking started
2021-03-12 04:25:11,128 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; (-1453651276).toLong().toString(-1012814592)}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    ((786914593)).toChar().uppercase() = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:11,129 [main:107] - replacing (prope9, String)
2021-03-12 04:25:11,129 [main:50] - replacing prope9 String
2021-03-12 04:25:11,129 [main:54] - Getting value of type String
2021-03-12 04:25:11,306 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:11,311 [main:58] - GENERATED VALUE OF TYPE String = "lwaou"
2021-03-12 04:25:11,311 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:11,502 [main:67] - randomType = Double
2021-03-12 04:25:11,651 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:25:11,688 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4203cb07]
2021-03-12 04:25:11,688 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@374bc3de]
2021-03-12 04:25:11,688 [main:78] - Generated call from random type = (0.7084662516283333).toChar().titlecase()
2021-03-12 04:25:11,689 [main:106] - GETTING String from Kla0
2021-03-12 04:25:11,693 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@248ea51a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:11,693 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:11,693 [main:117] - GENERATED CALL = (Kla2().fu7()).s?.toString()
2021-03-12 04:25:11,693 [main:114] - replacement of prope9 of type String is (Kla2().fu7()).s?.toString()
2021-03-12 04:25:11,867 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:25:11,867 [main:66] - Compilation checking started
2021-03-12 04:25:12,339 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; (-1453651276).toLong().toString(-1012814592)}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    (Kla2().fu7()).s?.toString() = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "L"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:12,339 [main:107] - replacing ("L", String)
2021-03-12 04:25:12,340 [main:50] - replacing "L" String
2021-03-12 04:25:12,340 [main:54] - Getting value of type String
2021-03-12 04:25:12,502 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:12,507 [main:58] - GENERATED VALUE OF TYPE String = "yhahr"
2021-03-12 04:25:12,507 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:12,736 [main:67] - randomType = Pair<Float, Kla1>
2021-03-12 04:25:12,890 [main:302] - generating value of type = Pair<Float, Kla1> false depth = 0
2021-03-12 04:25:13,086 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: Kla1): Pair<Float, Kla1> = TODO()
2021-03-12 04:25:13,093 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: Kla1): Pair<Float, Kla1> = TODO()
2021-03-12 04:25:13,279 [main:302] - generating value of type = Float true depth = 3
2021-03-12 04:25:13,284 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-12 04:25:13,289 [main:112] - generating klass Kla1 text = class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}
2021-03-12 04:25:13,441 [main:194] - Type params = []
2021-03-12 04:25:13,632 [main:95] - GENERATED = Pair<Float, Kla1>(0.9543052f, Kla1())
2021-03-12 04:25:13,649 [main:106] - GETTING String from Continuation<Any>?
2021-03-12 04:25:13,660 [main:106] - GETTING String from Kla9
2021-03-12 04:25:13,690 [main:106] - GETTING String from Kla1
2021-03-12 04:25:13,701 [main:113] - Case = [public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@4db37cc1], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:13,701 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@4db37cc1]
2021-03-12 04:25:13,701 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:13,701 [main:117] - GENERATED CALL = (Kla1()).fu8()?.toString()
2021-03-12 04:25:13,701 [main:114] - replacement of "L" of type String is "yhahr"
2021-03-12 04:25:13,861 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:25:13,862 [main:66] - Compilation checking started
2021-03-12 04:25:14,510 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; (-1453651276).toLong().toString(-1012814592)}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:14,510 [main:107] - replacing (prope9, String)
2021-03-12 04:25:14,511 [main:50] - replacing prope9 String
2021-03-12 04:25:14,511 [main:54] - Getting value of type String
2021-03-12 04:25:14,706 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:14,712 [main:58] - GENERATED VALUE OF TYPE String = "ikauy"
2021-03-12 04:25:14,712 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:14,735 [main:67] - randomType = Kla0
2021-03-12 04:25:14,906 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:25:14,912 [main:112] - generating klass Kla0 text = @Suppress("vopgl")
inline class Kla0(val s: Any?)
2021-03-12 04:25:15,066 [main:194] - Type params = []
2021-03-12 04:25:15,251 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:25:15,258 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:15,259 [main:78] - Generated call from random type = (Kla0("rvfaj")).s?.toString()!!
2021-03-12 04:25:15,259 [main:114] - replacement of prope9 of type String is (Kla0("rvfaj")).s?.toString()!!
2021-03-12 04:25:15,430 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 04:25:15,430 [main:66] - Compilation checking started
2021-03-12 04:25:15,872 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = fu17(b = {prope9 += "rnjjo"; (-1453651276).toLong().toString(-1012814592)}(), a = {(Kla0("rvfaj")).s?.toString()!!+="O"; "O"}(), c = {prope9 += "L"; "L"})
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:15,873 [main:107] - replacing (fu17(b = {prope9 += "rnjjo"; (-1453651276).toLong().toString(-1012814592)}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"}), String)
2021-03-12 04:25:15,874 [main:50] - replacing fu17(b = {prope9 += "rnjjo"; (-1453651276).toLong().toString(-1012814592)}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"}) String
2021-03-12 04:25:15,874 [main:54] - Getting value of type String
2021-03-12 04:25:16,037 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:16,042 [main:58] - GENERATED VALUE OF TYPE String = "fhppl"
2021-03-12 04:25:16,042 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:16,656 [main:67] - randomType = HashMap<Kla2?, ULong>
2021-03-12 04:25:16,821 [main:302] - generating value of type = HashMap<Kla2?, ULong> false depth = 0
2021-03-12 04:25:16,980 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Kla2?, ULong> = TODO()
2021-03-12 04:25:16,986 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Kla2?, ULong> = TODO()
2021-03-12 04:25:17,167 [main:95] - GENERATED = hashMapOf<Kla2?, ULong>()
2021-03-12 04:25:17,287 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:17,288 [main:78] - Generated call from random type = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
2021-03-12 04:25:17,288 [main:106] - GETTING String from CoroutineContext
2021-03-12 04:25:17,295 [main:106] - GETTING String from Boolean
2021-03-12 04:25:17,317 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:25:17,317 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0]
2021-03-12 04:25:17,318 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:17,318 [main:117] - GENERATED CALL = ((Kla9).equals("hpizo")).compareTo(Kla8().prope6).toString((786914593))
2021-03-12 04:25:17,318 [main:114] - replacement of fu17(b = {prope9 += "rnjjo"; (-1453651276).toLong().toString(-1012814592)}(), a = {prope9+="O"; "O"}(), c = {prope9 += "L"; "L"}) of type String is (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
2021-03-12 04:25:17,468 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:17,469 [main:66] - Compilation checking started
2021-03-12 04:25:18,087 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = {prope9+="O"; "O"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:18,088 [main:107] - replacing ({prope9+="O"; "O"}, Function0<String>)
2021-03-12 04:25:18,088 [main:50] - replacing {prope9+="O"; "O"} Function0<String>
2021-03-12 04:25:18,088 [main:54] - Getting value of type Function0<String>
2021-03-12 04:25:18,259 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 04:25:18,264 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:25:18,269 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "wbfxz"}
2021-03-12 04:25:18,269 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:18,279 [main:67] - randomType = Char
2021-03-12 04:25:18,437 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:25:18,471 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:18,479 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:18,480 [main:106] - GETTING Function0<String> from Char
2021-03-12 04:25:18,510 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:18,515 [main:106] - GETTING Function0<String> from Continuation<Any?>
2021-03-12 04:25:18,527 [main:106] - GETTING Function0<String> from Set<Int?>
2021-03-12 04:25:18,561 [main:106] - GETTING Function0<String> from Kla9
2021-03-12 04:25:18,590 [main:106] - GETTING Function0<String> from Int
2021-03-12 04:25:18,623 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:18,628 [main:106] - GETTING Function0<String> from [ERROR : Class<T>]<T>
2021-03-12 04:25:18,631 [main:106] - GETTING Function0<String> from String
2021-03-12 04:25:18,648 [main:106] - GETTING Function0<String> from UShort
2021-03-12 04:25:18,670 [main:106] - GETTING Function0<String> from Kla9
2021-03-12 04:25:18,671 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:18,672 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:18,673 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:18,674 [main:106] - GETTING Function0<String> from String
2021-03-12 04:25:18,675 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:18,676 [main:106] - GETTING Function0<String> from UByte
2021-03-12 04:25:18,698 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:18,699 [main:106] - GETTING Function0<String> from UByte
2021-03-12 04:25:18,700 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 04:25:18,710 [main:106] - GETTING Function0<String> from Continuation<Long?>
2021-03-12 04:25:18,718 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:18,719 [main:106] - GETTING Function0<String> from Continuation<Any>?
2021-03-12 04:25:18,727 [main:106] - GETTING Function0<String> from Function0<Unit>
2021-03-12 04:25:18,736 [main:106] - GETTING Function0<String> from Unit?
2021-03-12 04:25:18,740 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 04:25:18,741 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:18,742 [main:106] - GETTING Function0<String> from Kla1
2021-03-12 04:25:18,749 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:18,750 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:18,751 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:18,752 [main:106] - GETTING Function0<String> from Unit?
2021-03-12 04:25:18,753 [main:106] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-12 04:25:18,766 [main:114] - replacement of {prope9+="O"; "O"} of type Function0<String> is { "wbfxz"}
2021-03-12 04:25:18,926 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:25:18,926 [main:66] - Compilation checking started
2021-03-12 04:25:19,570 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || prope10 != "OKL") return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:19,570 [main:107] - replacing (prope10 != "OKL", Boolean)
2021-03-12 04:25:19,571 [main:50] - replacing prope10 != "OKL" Boolean
2021-03-12 04:25:19,571 [main:54] - Getting value of type Boolean
2021-03-12 04:25:19,737 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:25:19,742 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:25:19,742 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:19,941 [main:67] - randomType = HashSet<Float>
2021-03-12 04:25:20,082 [main:302] - generating value of type = HashSet<Float> false depth = 0
2021-03-12 04:25:20,251 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Float): HashSet<Float> = TODO()
2021-03-12 04:25:20,258 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Float): HashSet<Float> = TODO()
2021-03-12 04:25:20,425 [main:302] - generating value of type = Float true depth = 3
2021-03-12 04:25:20,430 [main:95] - GENERATED = hashSetOf<Float>(0.6053255f)
2021-03-12 04:25:20,585 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@74089699]
2021-03-12 04:25:20,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3bfbc6e9]
2021-03-12 04:25:20,585 [main:78] - Generated call from random type = (hashSetOf<Float>(0.6053255f)).toArray().isNullOrEmpty()
2021-03-12 04:25:20,586 [main:106] - GETTING Boolean from Function0<Unit>
2021-03-12 04:25:20,595 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]]
2021-03-12 04:25:20,595 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56]
2021-03-12 04:25:20,595 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]
2021-03-12 04:25:20,596 [main:117] - GENERATED CALL = (Kla8().prope7).equals(Kla2().fu8()).not()
2021-03-12 04:25:20,596 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56]]
2021-03-12 04:25:20,596 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56]
2021-03-12 04:25:20,596 [main:117] - GENERATED CALL = (Kla8().prope7).equals(Kla1().fu8())
2021-03-12 04:25:20,596 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]]
2021-03-12 04:25:20,596 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56]
2021-03-12 04:25:20,596 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:25:20,759 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:25:20,764 [main:117] - GENERATED CALL = (Kla8().prope7).equals(Kla2().fu8()).or(false)
2021-03-12 04:25:20,764 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]]
2021-03-12 04:25:20,764 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56]
2021-03-12 04:25:20,922 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:25:20,922 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]
2021-03-12 04:25:20,922 [main:117] - GENERATED CALL = (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)
2021-03-12 04:25:20,922 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]]
2021-03-12 04:25:20,922 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56]
2021-03-12 04:25:20,922 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]
2021-03-12 04:25:20,923 [main:117] - GENERATED CALL = (Kla8().prope7).equals(Kla0("jkydd").s).xor((Kla9).equals("hpizo"))
2021-03-12 04:25:20,923 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@22479a23], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@59b24c42]]
2021-03-12 04:25:20,923 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@22479a23]
2021-03-12 04:25:20,923 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@59b24c42]
2021-03-12 04:25:20,923 [main:117] - GENERATED CALL = (Kla8().prope7).invoke().equals(Kla0("jkydd").s)
2021-03-12 04:25:20,923 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]]
2021-03-12 04:25:20,923 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@45387d56]
2021-03-12 04:25:21,068 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:25:21,068 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]
2021-03-12 04:25:21,224 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:25:21,230 [main:117] - GENERATED CALL = (Kla8().prope7).equals("bzral").and(true)
2021-03-12 04:25:21,230 [main:114] - replacement of prope10 != "OKL" of type Boolean is (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)
2021-03-12 04:25:21,379 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:21,379 [main:66] - Compilation checking started
2021-03-12 04:25:22,050 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "KOL" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:22,050 [main:107] - replacing ("KOL", String)
2021-03-12 04:25:22,051 [main:50] - replacing "KOL" String
2021-03-12 04:25:22,051 [main:54] - Getting value of type String
2021-03-12 04:25:22,212 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:22,217 [main:58] - GENERATED VALUE OF TYPE String = "bukqm"
2021-03-12 04:25:22,217 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:22,238 [main:67] - randomType = Kla1
2021-03-12 04:25:22,393 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:25:22,398 [main:112] - generating klass Kla1 text = class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}
2021-03-12 04:25:22,541 [main:194] - Type params = []
2021-03-12 04:25:22,715 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@6d53ebd8]
2021-03-12 04:25:22,716 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:22,716 [main:78] - Generated call from random type = (Kla1()).fu8()?.toString()!!
2021-03-12 04:25:22,717 [main:106] - GETTING String from Function0<Unit>
2021-03-12 04:25:22,731 [main:106] - GETTING String from Any?
2021-03-12 04:25:22,736 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:22,736 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:22,736 [main:117] - GENERATED CALL = (Kla5().prope0).toString()
2021-03-12 04:25:22,736 [main:114] - replacement of "KOL" of type String is "bukqm"
2021-03-12 04:25:22,903 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 04:25:22,904 [main:66] - Compilation checking started
2021-03-12 04:25:23,535 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "bukqm" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:23,536 [main:107] - replacing (prope9, String)
2021-03-12 04:25:23,536 [main:50] - replacing prope9 String
2021-03-12 04:25:23,536 [main:54] - Getting value of type String
2021-03-12 04:25:23,712 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:23,718 [main:58] - GENERATED VALUE OF TYPE String = "uvyjn"
2021-03-12 04:25:23,718 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:24,719 [main:67] - randomType = HashMap<Long, LinkedHashMap<Char, UShort?>?>?
2021-03-12 04:25:24,877 [main:302] - generating value of type = HashMap<Long, LinkedHashMap<Char, UShort?>?> false depth = 0
2021-03-12 04:25:25,044 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Long, LinkedHashMap<Char, UShort?>?>): HashMap<Long, LkedHashMap<Char, UShort?>?> = TODO()
2021-03-12 04:25:25,050 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Long, LinkedHashMap<Char, UShort?>?>): HashMap<Long, LkedHashMap<Char, UShort?>?> = TODO()
2021-03-12 04:25:25,201 [main:302] - generating value of type = Pair<Long, LinkedHashMap<Char, UShort?>?> false depth = 3
2021-03-12 04:25:25,372 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: LinkedHashMap<Char, UShort?>?): Pair<Long, LinkedHashMap<Char, UShort?>?> = TODO()
2021-03-12 04:25:25,379 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: LinkedHashMap<Char, UShort?>?): Pair<Long, LinkedHashMap<Char, UShort?>?> = TODO()
2021-03-12 04:25:25,546 [main:302] - generating value of type = Long true depth = 6
2021-03-12 04:25:25,551 [main:302] - generating value of type = LinkedHashMap<Char, UShort?> false depth = 6
2021-03-12 04:25:25,702 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Char, UShort?> = TODO()
2021-03-12 04:25:25,708 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Char, UShort?> = TODO()
2021-03-12 04:25:25,896 [main:95] - GENERATED = linkedMapOf<Char, UShort?>()
2021-03-12 04:25:25,896 [main:95] - GENERATED = Pair<Long, LinkedHashMap<Char, UShort?>?>(2315101838018999691, linkedMapOf<Char, UShort?>())
2021-03-12 04:25:25,896 [main:95] - GENERATED = hashMapOf<Long, LinkedHashMap<Char, UShort?>?>(Pair<Long, LinkedHashMap<Char, UShort?>?>(2315101838018999691, linkedMapOf<Char, UShort?>()))
2021-03-12 04:25:26,092 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:26,092 [main:78] - Generated call from random type = (hashMapOf<Long, LinkedHashMap<Char, UShort?>?>(Pair<Long, LinkedHashMap<Char, UShort?>?>(2315101838018999691, linkedMapOf<Char, UShort?>())))?.size.toString((786914593))
2021-03-12 04:25:26,093 [main:106] - GETTING String from Boolean
2021-03-12 04:25:26,106 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:25:26,106 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0]
2021-03-12 04:25:26,107 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:26,107 [main:117] - GENERATED CALL = (Kla8().prope6).compareTo((Kla9).equals("hpizo")).toString((786914593))
2021-03-12 04:25:26,107 [main:114] - replacement of prope9 of type String is (hashMapOf<Long, LinkedHashMap<Char, UShort?>?>(Pair<Long, LinkedHashMap<Char, UShort?>?>(2315101838018999691, linkedMapOf<Char, UShort?>())))?.size.toString((786914593))
2021-03-12 04:25:26,257 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:26,258 [main:66] - Compilation checking started
2021-03-12 04:25:26,673 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = "";
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {(hashMapOf<Long, LinkedHashMap<Char, UShort?>?>(Pair<Long, LinkedHashMap<Char, UShort?>?>(2315101838018999691, linkedMapOf<Char, UShort?>())))?.size.toString((786914593)) += "yhahr"; "L"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "bukqm" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:26,674 [main:107] - replacing ("", String)
2021-03-12 04:25:26,675 [main:50] - replacing "" String
2021-03-12 04:25:26,675 [main:54] - Getting value of type String
2021-03-12 04:25:26,850 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:26,855 [main:58] - GENERATED VALUE OF TYPE String = "kkigi"
2021-03-12 04:25:26,855 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:26,865 [main:67] - randomType = String
2021-03-12 04:25:27,024 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:27,056 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16eef84b]
2021-03-12 04:25:27,198 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:27,203 [main:78] - Generated call from random type = ("atcvj").concat("iljtf")
2021-03-12 04:25:27,204 [main:106] - GETTING String from Any?
2021-03-12 04:25:27,207 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:27,207 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:27,207 [main:117] - GENERATED CALL = (Kla0("jkydd").s).toString()
2021-03-12 04:25:27,207 [main:114] - replacement of "" of type String is (Kla0("jkydd").s).toString()
2021-03-12 04:25:27,361 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:27,361 [main:66] - Compilation checking started
2021-03-12 04:25:28,021 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "bukqm" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:28,022 [main:107] - replacing (prope9, String)
2021-03-12 04:25:28,022 [main:50] - replacing prope9 String
2021-03-12 04:25:28,022 [main:54] - Getting value of type String
2021-03-12 04:25:28,179 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:28,184 [main:58] - GENERATED VALUE OF TYPE String = "txoxl"
2021-03-12 04:25:28,185 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:28,195 [main:67] - randomType = UShort
2021-03-12 04:25:28,352 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:25:28,394 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@306781a5]
2021-03-12 04:25:28,394 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23cf64e5]
2021-03-12 04:25:28,395 [main:78] - Generated call from random type = (7378.toUShort()).toUByte().toString((786914593))
2021-03-12 04:25:28,395 [main:106] - GETTING String from Kla0
2021-03-12 04:25:28,401 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@248ea51a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:28,401 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:28,402 [main:117] - GENERATED CALL = (Kla2().fu5()).s?.toString()
2021-03-12 04:25:28,402 [main:114] - replacement of prope9 of type String is "txoxl"
2021-03-12 04:25:28,547 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:25:28,547 [main:66] - Compilation checking started
2021-03-12 04:25:28,967 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    "txoxl" = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "bukqm" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:28,968 [main:107] - replacing (prope10, String)
2021-03-12 04:25:28,968 [main:50] - replacing prope10 String
2021-03-12 04:25:28,969 [main:54] - Getting value of type String
2021-03-12 04:25:29,124 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:29,129 [main:58] - GENERATED VALUE OF TYPE String = "pyrzv"
2021-03-12 04:25:29,130 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:29,517 [main:67] - randomType = ArrayList<Kla6<Kla9>>
2021-03-12 04:25:29,680 [main:302] - generating value of type = ArrayList<Kla6<Kla9>> false depth = 0
2021-03-12 04:25:29,852 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla6<Kla9>): ArrayList<Kla6<Kla9>> = TODO()
2021-03-12 04:25:29,859 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla6<Kla9>): ArrayList<Kla6<Kla9>> = TODO()
2021-03-12 04:25:30,013 [main:302] - generating value of type = Kla6<Kla9> false depth = 3
2021-03-12 04:25:30,018 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:25:30,591 [main:302] - generating value of type = Kla9 false depth = 5
2021-03-12 04:25:30,596 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:25:30,596 [main:95] - GENERATED = arrayListOf<Kla6<Kla9>>(Kla9)
2021-03-12 04:25:30,753 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:30,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:30,923 [main:78] - Generated call from random type = (arrayListOf<Kla6<Kla9>>(Kla9)).size.toString(-1603476859)
2021-03-12 04:25:30,924 [main:106] - GETTING String from UByte
2021-03-12 04:25:30,960 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@29bebf0f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7183edec]]
2021-03-12 04:25:30,960 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@29bebf0f]
2021-03-12 04:25:30,960 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7183edec]
2021-03-12 04:25:30,960 [main:117] - GENERATED CALL = (1504727023.toUByte()).toUShort().toString((786914593))
2021-03-12 04:25:30,960 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@502d6fe9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a215398]]
2021-03-12 04:25:30,960 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@502d6fe9]
2021-03-12 04:25:30,961 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a215398]
2021-03-12 04:25:30,961 [main:117] - GENERATED CALL = (1504727023.toUByte()).toShort().toString((786914593))
2021-03-12 04:25:30,961 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1b63a315], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37ff6073]]
2021-03-12 04:25:30,961 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1b63a315]
2021-03-12 04:25:30,961 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37ff6073]
2021-03-12 04:25:30,961 [main:117] - GENERATED CALL = (1504727023.toUByte()).div(1504727023.toUByte()).toString((786914593))
2021-03-12 04:25:30,961 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@708bad85], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]]
2021-03-12 04:25:30,961 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@708bad85]
2021-03-12 04:25:30,962 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:25:30,962 [main:117] - GENERATED CALL = (1504727023.toUByte()).toLong().toString((786914593))
2021-03-12 04:25:30,962 [main:113] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7a3c8fff], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:25:30,962 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7a3c8fff]
2021-03-12 04:25:31,119 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:25:31,124 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:31,282 [main:117] - GENERATED CALL = (1504727023.toUByte()).compareTo(38.toUByte()).toString((786914593))
2021-03-12 04:25:31,282 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23cf64e5]]
2021-03-12 04:25:31,282 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23cf64e5]
2021-03-12 04:25:31,282 [main:117] - GENERATED CALL = (1504727023.toUByte()).toString((786914593))
2021-03-12 04:25:31,282 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7e688bc8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]]
2021-03-12 04:25:31,282 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7e688bc8]
2021-03-12 04:25:31,282 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]
2021-03-12 04:25:31,446 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:31,451 [main:117] - GENERATED CALL = (1504727023.toUByte()).toByte().toString(2131744686)
2021-03-12 04:25:31,451 [main:114] - replacement of prope10 of type String is (1504727023.toUByte()).compareTo(38.toUByte()).toString((786914593))
2021-03-12 04:25:31,613 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:31,613 [main:66] - Compilation checking started
2021-03-12 04:25:32,048 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    (1504727023.toUByte()).compareTo(38.toUByte()).toString((786914593)) = fu17(b = { "eahwo"}(), c = {prope9 += "yhahr"; "L"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "bukqm" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:32,049 [main:107] - replacing ({prope9 += "yhahr"; "L"}, Function0<String>)
2021-03-12 04:25:32,049 [main:50] - replacing {prope9 += "yhahr"; "L"} Function0<String>
2021-03-12 04:25:32,049 [main:54] - Getting value of type Function0<String>
2021-03-12 04:25:32,210 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 04:25:32,215 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:25:32,220 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "tjhrl"}
2021-03-12 04:25:32,220 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:32,861 [main:67] - randomType = HashMap<Kla5, Kla3?>?
2021-03-12 04:25:33,022 [main:302] - generating value of type = HashMap<Kla5, Kla3?> false depth = 0
2021-03-12 04:25:33,177 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Kla5, Kla3?> = TODO()
2021-03-12 04:25:33,184 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Kla5, Kla3?> = TODO()
2021-03-12 04:25:33,360 [main:95] - GENERATED = hashMapOf<Kla5, Kla3?>()
2021-03-12 04:25:33,513 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 04:25:33,527 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:33,532 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:33,542 [main:106] - GETTING Function0<String> from Unit?
2021-03-12 04:25:33,548 [main:106] - GETTING Function0<String> from EmptyCoroutineContext
2021-03-12 04:25:33,573 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:33,580 [main:106] - GETTING Function0<String> from Char
2021-03-12 04:25:33,611 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:33,612 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:33,613 [main:106] - GETTING Function0<String> from UByte
2021-03-12 04:25:33,653 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:33,654 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:33,655 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:33,657 [main:106] - GETTING Function0<String> from [ERROR : Class<T>]<T>
2021-03-12 04:25:33,661 [main:106] - GETTING Function0<String> from CoroutineContext
2021-03-12 04:25:33,662 [main:106] - GETTING Function0<String> from Boolean
2021-03-12 04:25:33,664 [main:106] - GETTING Function0<String> from Function0<Unit>
2021-03-12 04:25:33,679 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:33,681 [main:106] - GETTING Function0<String> from String
2021-03-12 04:25:33,700 [main:106] - GETTING Function0<String> from Kla9
2021-03-12 04:25:33,717 [main:106] - GETTING Function0<String> from UShort
2021-03-12 04:25:33,739 [main:106] - GETTING Function0<String> from Continuation<Long?>
2021-03-12 04:25:33,748 [main:106] - GETTING Function0<String> from Int
2021-03-12 04:25:33,777 [main:106] - GETTING Function0<String> from Continuation<Any?>
2021-03-12 04:25:33,784 [main:106] - GETTING Function0<String> from Kla1
2021-03-12 04:25:33,791 [main:106] - GETTING Function0<String> from Kla9
2021-03-12 04:25:33,792 [main:106] - GETTING Function0<String> from Unit?
2021-03-12 04:25:33,793 [main:106] - GETTING Function0<String> from UByte
2021-03-12 04:25:33,794 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:33,795 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:33,796 [main:106] - GETTING Function0<String> from String
2021-03-12 04:25:33,797 [main:106] - GETTING Function0<String> from Continuation<Any>?
2021-03-12 04:25:33,805 [main:106] - GETTING Function0<String> from Any?
2021-03-12 04:25:33,806 [main:106] - GETTING Function0<String> from Set<Int?>
2021-03-12 04:25:33,829 [main:106] - GETTING Function0<String> from Kla0
2021-03-12 04:25:33,829 [main:114] - replacement of {prope9 += "yhahr"; "L"} of type Function0<String> is { "tjhrl"}
2021-03-12 04:25:33,989 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:25:33,990 [main:66] - Compilation checking started
2021-03-12 04:25:34,628 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "bukqm" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:34,629 [main:107] - replacing ("", String)
2021-03-12 04:25:34,629 [main:50] - replacing "" String
2021-03-12 04:25:34,629 [main:54] - Getting value of type String
2021-03-12 04:25:34,788 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:34,793 [main:58] - GENERATED VALUE OF TYPE String = "qrhxx"
2021-03-12 04:25:34,793 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:34,814 [main:67] - randomType = Kla3
2021-03-12 04:25:34,969 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 04:25:34,974 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}
2021-03-12 04:25:34,984 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla3[SimpleFunctionDescriptorImpl@326adf01]
2021-03-12 04:25:34,985 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:34,985 [main:78] - Generated call from random type = (Kla3()).fu8()?.toString()!!
2021-03-12 04:25:34,986 [main:106] - GETTING String from CoroutineContext
2021-03-12 04:25:34,994 [main:106] - GETTING String from Unit?
2021-03-12 04:25:34,999 [main:106] - GETTING String from Set<Int?>
2021-03-12 04:25:35,032 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@81c63c4]]
2021-03-12 04:25:35,032 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@81c63c4]
2021-03-12 04:25:35,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:25:35,343 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:25:35,517 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:25:35,673 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:25:35,679 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:25:36,025 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:25:36,030 [main:95] - GENERATED = StringBuilder(-1990709093)
2021-03-12 04:25:36,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:25:36,339 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 04:25:36,344 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 04:25:36,355 [main:117] - GENERATED CALL = (fu1<Set<Int?>>()).joinToString(StringBuilder(), "iuzzm", StringBuilder(-1990709093), (786914593), "veppy", {a: T -> "ucnvl"})
2021-03-12 04:25:36,355 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.Set[DeserializedPropertyDescriptor@225e4020], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:25:36,355 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:25:36,355 [main:117] - GENERATED CALL = (fu1<Set<Int?>>()).size.toString((786914593))
2021-03-12 04:25:36,355 [main:114] - replacement of "" of type String is (Kla3()).fu8()?.toString()!!
2021-03-12 04:25:36,531 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-12 04:25:36,531 [main:66] - Compilation checking started
2021-03-12 04:25:36,950 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if (prope9 != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = (Kla3()).fu8()?.toString()!!;
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "bukqm" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:36,951 [main:107] - replacing (prope9, String)
2021-03-12 04:25:36,952 [main:50] - replacing prope9 String
2021-03-12 04:25:36,952 [main:54] - Getting value of type String
2021-03-12 04:25:37,108 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:37,113 [main:58] - GENERATED VALUE OF TYPE String = "bxzcf"
2021-03-12 04:25:37,113 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:37,297 [main:67] - randomType = Double
2021-03-12 04:25:37,437 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:25:37,473 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4203cb07]
2021-03-12 04:25:37,473 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@479ad565]
2021-03-12 04:25:37,474 [main:78] - Generated call from random type = (0.2958644149240166).toChar().lowercase()
2021-03-12 04:25:37,474 [main:114] - replacement of prope9 of type String is (0.2958644149240166).toChar().lowercase()
2021-03-12 04:25:37,635 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:37,635 [main:66] - Compilation checking started
2021-03-12 04:25:38,295 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (prope9 != "bukqm" || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:38,296 [main:107] - replacing (prope9 != "bukqm", Boolean)
2021-03-12 04:25:38,296 [main:50] - replacing prope9 != "bukqm" Boolean
2021-03-12 04:25:38,296 [main:54] - Getting value of type Boolean
2021-03-12 04:25:38,454 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:25:38,459 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:25:38,460 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:38,470 [main:67] - randomType = Long
2021-03-12 04:25:38,627 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:25:38,675 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6cd42516]
2021-03-12 04:25:38,676 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:25:38,816 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:25:38,821 [main:78] - Generated call from random type = (-6901340533927370996).equals(Kla5().prope0).or(true)
2021-03-12 04:25:38,821 [main:114] - replacement of prope9 != "bukqm" of type Boolean is (-6901340533927370996).equals(Kla5().prope0).or(true)
2021-03-12 04:25:38,979 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:38,980 [main:66] - Compilation checking started
2021-03-12 04:25:39,644 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $prope9 != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:39,645 [main:107] - replacing (prope9, String)
2021-03-12 04:25:39,645 [main:50] - replacing prope9 String
2021-03-12 04:25:39,645 [main:54] - Getting value of type String
2021-03-12 04:25:39,832 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:39,837 [main:58] - GENERATED VALUE OF TYPE String = "jaklc"
2021-03-12 04:25:39,837 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:40,577 [main:67] - randomType = Array<ArrayDeque<Short>>
2021-03-12 04:25:40,718 [main:302] - generating value of type = Array<ArrayDeque<Short>> false depth = 0
2021-03-12 04:25:40,889 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: ArrayDeque<Short>): Array<ArrayDeque<Short>> = TODO()
2021-03-12 04:25:40,896 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: ArrayDeque<Short>): Array<ArrayDeque<Short>> = TODO()
2021-03-12 04:25:41,065 [main:302] - generating value of type = ArrayDeque<Short> false depth = 3
2021-03-12 04:25:41,213 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Short> = TODO()
2021-03-12 04:25:41,224 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Short> = TODO()
2021-03-12 04:25:41,582 [main:302] - generating value of type = Int true depth = 6
2021-03-12 04:25:41,588 [main:95] - GENERATED = ArrayDeque<Short>(-1148575743)
2021-03-12 04:25:41,588 [main:95] - GENERATED = arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))
2021-03-12 04:25:41,612 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@491e2270]
2021-03-12 04:25:41,753 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:25:41,917 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:25:42,092 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:25:42,098 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:25:42,470 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:25:42,476 [main:95] - GENERATED = StringBuilder(1673725244)
2021-03-12 04:25:42,639 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:25:42,789 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:25:42,967 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:25:42,974 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:25:43,316 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 04:25:43,324 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 04:25:43,482 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 04:25:43,488 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 04:25:43,655 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:25:43,661 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:25:44,027 [main:302] - generating value of type = Int true depth = 4
2021-03-12 04:25:44,032 [main:95] - GENERATED = StringBuilder(-1733499459)
2021-03-12 04:25:44,033 [main:78] - Generated call from random type = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)})
2021-03-12 04:25:44,033 [main:114] - replacement of prope9 of type String is (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)})
2021-03-12 04:25:44,192 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:44,192 [main:66] - Compilation checking started
2021-03-12 04:25:44,802 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:44,803 [main:107] - replacing ("KOL", String)
2021-03-12 04:25:44,803 [main:50] - replacing "KOL" String
2021-03-12 04:25:44,804 [main:54] - Getting value of type String
2021-03-12 04:25:44,970 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:44,977 [main:58] - GENERATED VALUE OF TYPE String = "gzgzy"
2021-03-12 04:25:44,977 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:44,988 [main:67] - randomType = ULong
2021-03-12 04:25:45,162 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:25:45,208 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@69b04ed4]
2021-03-12 04:25:45,208 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]
2021-03-12 04:25:45,358 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:25:45,363 [main:78] - Generated call from random type = (2543850315787570617.toULong()).toByte().toString(1227317509)
2021-03-12 04:25:45,364 [main:106] - GETTING String from Kla0
2021-03-12 04:25:45,370 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@248ea51a], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:45,370 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:45,370 [main:117] - GENERATED CALL = (Kla3().fu7()).s?.toString()
2021-03-12 04:25:45,370 [main:114] - replacement of "KOL" of type String is (Kla3().fu7()).s?.toString()
2021-03-12 04:25:45,534 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:25:45,534 [main:66] - Compilation checking started
2021-03-12 04:25:46,010 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != (Kla3().fu7()).s?.toString() || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:46,011 [main:107] - replacing (prope10, String)
2021-03-12 04:25:46,012 [main:50] - replacing prope10 String
2021-03-12 04:25:46,012 [main:54] - Getting value of type String
2021-03-12 04:25:46,177 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:25:46,182 [main:58] - GENERATED VALUE OF TYPE String = "bkznr"
2021-03-12 04:25:46,183 [main:61] - GENERATED IS CALL =false
2021-03-12 04:25:46,203 [main:67] - randomType = Kla9
2021-03-12 04:25:46,367 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 04:25:46,372 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:25:46,401 [main:106] - GETTING String from Any?
2021-03-12 04:25:46,405 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:25:46,405 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:25:46,405 [main:117] - GENERATED CALL = (Kla2().fu8()).toString()
2021-03-12 04:25:46,405 [main:114] - replacement of prope10 of type String is (Kla2().fu8()).toString()
2021-03-12 04:25:46,549 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:46,549 [main:66] - Compilation checking started
2021-03-12 04:25:46,973 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    (Kla2().fu8()).toString() = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if ((1504727023.toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:47,146 [main:141] - TRYING TO REPLACE CONSTANT 1504727023
2021-03-12 04:25:47,312 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:25:47,312 [main:66] - Compilation checking started
2021-03-12 04:25:47,968 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:47,968 [main:141] - TRYING TO REPLACE CONSTANT 425352747
2021-03-12 04:25:48,163 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:25:48,164 [main:66] - Compilation checking started
2021-03-12 04:25:48,611 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $(1504727023.toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(compareTo(true))
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:48,612 [main:141] - TRYING TO REPLACE CONSTANT 1504727023
2021-03-12 04:25:48,817 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 04:25:48,817 [main:66] - Compilation checking started
2021-03-12 04:25:49,461 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $((786914593).toUByte()).toByte().toString((786914593)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:49,462 [main:141] - TRYING TO REPLACE CONSTANT 786914593
2021-03-12 04:25:49,634 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 04:25:49,634 [main:66] - Compilation checking started
2021-03-12 04:25:50,301 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((786914593))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:50,301 [main:141] - TRYING TO REPLACE CONSTANT 786914593
2021-03-12 04:25:50,482 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:25:50,482 [main:66] - Compilation checking started
2021-03-12 04:25:51,139 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if ((-6901340533927370996).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:51,140 [main:141] - TRYING TO REPLACE CONSTANT 0.2958644149240166
2021-03-12 04:25:51,319 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 04:25:51,319 [main:66] - Compilation checking started
2021-03-12 04:25:51,973 [main:141] - TRYING TO REPLACE CONSTANT 6901340533927370996
2021-03-12 04:25:52,141 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-12 04:25:52,142 [main:66] - Compilation checking started
2021-03-12 04:25:52,789 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:52,789 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 04:25:52,957 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 04:25:52,958 [main:66] - Compilation checking started
2021-03-12 04:25:53,420 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), (786914593), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(isSuccess) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:53,420 [main:141] - TRYING TO REPLACE CONSTANT 786914593
2021-03-12 04:25:53,592 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 04:25:53,593 [main:66] - Compilation checking started
2021-03-12 04:25:54,246 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(1673725244), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:54,247 [main:141] - TRYING TO REPLACE CONSTANT 1673725244
2021-03-12 04:25:54,417 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 04:25:54,418 [main:66] - Compilation checking started
2021-03-12 04:25:55,082 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(-1148575743))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:55,082 [main:141] - TRYING TO REPLACE CONSTANT 1148575743
2021-03-12 04:25:55,257 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 04:25:55,257 [main:66] - Compilation checking started
2021-03-12 04:25:55,932 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(-1733499459)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:55,932 [main:141] - TRYING TO REPLACE CONSTANT 1733499459
2021-03-12 04:25:56,100 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 04:25:56,100 [main:66] - Compilation checking started
2021-03-12 04:25:56,811 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:56,811 [main:41] - AFTER TRY 2 res = import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}


2021-03-12 04:25:57,154 [main:112] - generating klass Kla0 text = @Suppress("vopgl")
inline class Kla0(val s: Any?)
2021-03-12 04:25:57,305 [main:194] - Type params = []
2021-03-12 04:25:57,468 [main:302] - generating value of type = Any false depth = 1
2021-03-12 04:25:57,468 [main:112] - generating klass Kla1 text = class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}
2021-03-12 04:25:57,631 [main:194] - Type params = []
2021-03-12 04:25:57,784 [main:112] - generating klass Kla2 text = class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}
2021-03-12 04:25:57,785 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}
2021-03-12 04:25:57,785 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}
2021-03-12 04:25:57,956 [main:194] - Type params = []
2021-03-12 04:25:58,107 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 04:25:58,270 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:25:58,277 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:25:58,630 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 04:25:58,808 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:25:58,814 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:25:59,327 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 7
2021-03-12 04:25:59,480 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:25:59,486 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:25:59,988 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 10
2021-03-12 04:26:00,220 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:00,227 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:00,722 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 13
2021-03-12 04:26:00,883 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:00,889 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:01,382 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:01,382 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:01,382 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:26:01,382 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:26:01,382 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:26:01,383 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}
2021-03-12 04:26:01,383 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:26:02,154 [main:302] - generating value of type = Kla9 false depth = 1
2021-03-12 04:26:02,159 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:26:02,159 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}
2021-03-12 04:26:02,159 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}
2021-03-12 04:26:02,159 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:26:02,160 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}
2021-03-12 04:26:02,160 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}
2021-03-12 04:26:02,160 [main:112] - generating klass Kla10 text = companion object Kla10 : Kla4()
2021-03-12 04:26:02,469 [main:43] - GENERATING CALL OF @Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java
2021-03-12 04:26:02,653 [main:61] - WITHOUT TYPE PARAMS = @Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<Collection<Long>> = T::class.java
2021-03-12 04:26:02,794 [main:95] - GENERATED = javaClass<Collection<Long>>()
2021-03-12 04:26:02,933 [main:43] - GENERATING CALL OF fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}
2021-03-12 04:26:02,938 [main:61] - WITHOUT TYPE PARAMS = fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}
2021-03-12 04:26:03,248 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 04:26:03,253 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 04:26:03,262 [main:95] - GENERATED = fu0({ println()})
2021-03-12 04:26:03,401 [main:43] - GENERATING CALL OF suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}
2021-03-12 04:26:03,832 [main:61] - WITHOUT TYPE PARAMS = suspend fun <Ty0> fu1(): Map<Kla5, Array<ULong>> = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}
2021-03-12 04:26:03,981 [main:95] - GENERATED = fu1<Map<Kla5, Array<ULong>>>()
2021-03-12 04:26:04,119 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}
2021-03-12 04:26:04,135 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (Double) -> Unit): Continuation<Double> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}
2021-03-12 04:26:04,454 [main:302] - generating value of type = Function1<Double, Unit> false depth = 1
2021-03-12 04:26:04,462 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 04:26:04,615 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:26:04,621 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:26:04,925 [main:302] - generating value of type = Any false depth = 5
2021-03-12 04:26:04,926 [main:95] - GENERATED = print("hdglg")
2021-03-12 04:26:04,926 [main:95] - GENERATED = fu2<Double>({a: Double -> print("hdglg")})
2021-03-12 04:26:05,064 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}
2021-03-12 04:26:05,069 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}
2021-03-12 04:26:05,398 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 04:26:05,403 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 04:26:05,607 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:26:05,614 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:26:05,982 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 04:26:05,987 [main:95] - GENERATED = check(false)
2021-03-12 04:26:05,988 [main:95] - GENERATED = fu3({a: Throwable -> check(false)})
2021-03-12 04:26:06,153 [main:43] - GENERATING CALL OF fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}
2021-03-12 04:26:06,158 [main:61] - WITHOUT TYPE PARAMS = fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}
2021-03-12 04:26:06,502 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:26:06,508 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:26:06,513 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 04:26:06,518 [main:302] - generating value of type = String true depth = 2
2021-03-12 04:26:06,523 [main:95] - GENERATED = fu17("yanwf", "lemny", { "fpntb"})
2021-03-12 04:26:06,723 [main:43] - Try №2
2021-03-12 04:26:12,195 [main:48] - Already checked
2021-03-12 04:26:14,580 [main:69] - Trying to insert override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
2021-03-12 04:26:14,695 [main:66] - Compilation checking started
2021-03-12 04:26:16,056 [main:103] - Trying to change 149 nodes
2021-03-12 04:26:16,056 [main:107] - replacing (" has state-machine ", String)
2021-03-12 04:26:16,058 [main:50] - replacing " has state-machine " String
2021-03-12 04:26:16,058 [main:54] - Getting value of type String
2021-03-12 04:26:16,287 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:26:16,295 [main:58] - GENERATED VALUE OF TYPE String = "moisc"
2021-03-12 04:26:16,296 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:16,312 [main:67] - randomType = Int
2021-03-12 04:26:16,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:26:16,563 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e8fb0bd]
2021-03-12 04:26:16,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:26:16,564 [main:78] - Generated call from random type = (326275971).toLong().toString((hashMapOf<Kla2?, ULong>()).size)
2021-03-12 04:26:16,565 [main:106] - GETTING String from Kla0
2021-03-12 04:26:16,569 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@56638429], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:26:16,569 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:26:16,569 [main:117] - GENERATED CALL = (Kla0("jkydd")).s?.toString()
2021-03-12 04:26:16,569 [main:114] - replacement of " has state-machine " of type String is (Kla0("jkydd")).s?.toString()
2021-03-12 04:26:16,778 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:26:16,779 [main:66] - Compilation checking started
2021-03-12 04:26:17,622 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope13 = "FAIL"
    fu21 {
        prope13 = if (fu19(::fu18)) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:17,624 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 04:26:17,624 [main:50] - replacing {} Function0<Unit>
2021-03-12 04:26:17,624 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:26:17,844 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:26:17,852 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:26:18,076 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:26:18,086 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:26:18,567 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:26:18,568 [main:95] - GENERATED = println("utavx")
2021-03-12 04:26:18,568 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("utavx")}
2021-03-12 04:26:18,568 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:19,990 [main:67] - randomType = Map<Long, Function1<Kla0, Set<Double?>>>?
2021-03-12 04:26:19,991 [main:106] - GETTING Function0<Unit> from String
2021-03-12 04:26:20,014 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 04:26:20,027 [main:106] - GETTING Function0<Unit> from Array<ArrayDeque<Short>>
2021-03-12 04:26:20,053 [main:106] - GETTING Function0<Unit> from UByte
2021-03-12 04:26:20,104 [main:106] - GETTING Function0<Unit> from UByte
2021-03-12 04:26:20,105 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 04:26:20,113 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 04:26:20,126 [main:114] - replacement of {} of type Function0<Unit> is { println("utavx")}
2021-03-12 04:26:20,318 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:26:20,318 [main:66] - Compilation checking started
2021-03-12 04:26:21,114 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope13 = "FAIL"
    fu21 {
        prope13 = if (fu19(::fu18)) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:21,115 [main:107] - replacing (false, Boolean)
2021-03-12 04:26:21,116 [main:50] - replacing false Boolean
2021-03-12 04:26:21,116 [main:54] - Getting value of type Boolean
2021-03-12 04:26:21,320 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:26:21,328 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:26:21,328 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:21,602 [main:67] - randomType = Kla12?
2021-03-12 04:26:21,809 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-12 04:26:21,817 [main:112] - generating klass Kla12 text = class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}
2021-03-12 04:26:21,835 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla12[DeserializedSimpleFunctionDescriptor@35bd14f1]
2021-03-12 04:26:21,835 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:26:22,031 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:26:22,038 [main:78] - Generated call from random type = (Kla12())?.equals(Kla1().fu8()).or(false)
2021-03-12 04:26:22,039 [main:106] - GETTING Boolean from Array<ArrayDeque<Short>>
2021-03-12 04:26:22,059 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.collections.ArrayDeque<kotlin.Short> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@7f9b16d8], public open fun isEmpty(): kotlin.Boolean defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@35f663a6]]
2021-03-12 04:26:22,060 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.collections.ArrayDeque<kotlin.Short> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@7f9b16d8]
2021-03-12 04:26:22,060 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@35f663a6]
2021-03-12 04:26:22,060 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).get(((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).isEmpty()
2021-03-12 04:26:22,060 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5aa332e4]]
2021-03-12 04:26:22,060 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5aa332e4]
2021-03-12 04:26:22,060 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).isNotEmpty()
2021-03-12 04:26:22,060 [main:113] - Case = [public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d430022]]
2021-03-12 04:26:22,060 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d430022]
2021-03-12 04:26:22,254 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 04:26:22,262 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:26:22,269 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).all({a: T -> true})
2021-03-12 04:26:22,269 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@c850aa8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24300ae1]]
2021-03-12 04:26:22,269 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24300ae1]
2021-03-12 04:26:22,270 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).size.equals(Kla1().fu8())
2021-03-12 04:26:22,270 [main:113] - Case = [public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@73484926]]
2021-03-12 04:26:22,270 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@73484926]
2021-03-12 04:26:22,270 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).none()
2021-03-12 04:26:22,270 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3203d5]]
2021-03-12 04:26:22,270 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3203d5]
2021-03-12 04:26:22,490 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 04:26:22,708 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-12 04:26:22,722 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-12 04:26:22,924 [main:95] - GENERATED = emptyArray<T>()
2021-03-12 04:26:22,925 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).contentEquals(emptyArray<T>())
2021-03-12 04:26:22,925 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@234ab2d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]]
2021-03-12 04:26:22,925 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@234ab2d]
2021-03-12 04:26:23,133 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:26:23,133 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:26:23,134 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))
2021-03-12 04:26:23,134 [main:113] - Case = [public final operator fun set(index: kotlin.Int, value: kotlin.collections.ArrayDeque<kotlin.Short>): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@3addb66d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@4c674e03]]
2021-03-12 04:26:23,134 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.collections.ArrayDeque<kotlin.Short>): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@3addb66d]
2021-03-12 04:26:23,328 [main:302] - generating value of type = ArrayDeque<Short> false depth = 0
2021-03-12 04:26:23,515 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Short> = TODO()
2021-03-12 04:26:23,523 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Short> = TODO()
2021-03-12 04:26:23,741 [main:95] - GENERATED = ArrayDeque<Short>()
2021-03-12 04:26:23,741 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@4c674e03]
2021-03-12 04:26:23,741 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).set((19855.toUByte()).toByte().div(-491068702), ArrayDeque<Short>()).equals((Kla3().fu7()).s)
2021-03-12 04:26:23,741 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@234ab2d]]
2021-03-12 04:26:23,742 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@234ab2d]
2021-03-12 04:26:23,742 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals(Kla5().prope0)
2021-03-12 04:26:23,742 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@234ab2d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]]
2021-03-12 04:26:23,742 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@234ab2d]
2021-03-12 04:26:23,742 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]
2021-03-12 04:26:23,743 [main:117] - GENERATED CALL = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals(Kla1().fu8()).equals((Kla3().fu7()).s)
2021-03-12 04:26:23,743 [main:114] - replacement of false of type Boolean is (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))
2021-03-12 04:26:23,935 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:26:23,936 [main:66] - Compilation checking started
2021-03-12 04:26:24,738 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope13 = "FAIL"
    fu21 {
        prope13 = if (fu19(::fu18)) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:24,741 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 04:26:24,742 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 04:26:24,742 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 04:26:24,950 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 04:26:24,958 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:26:25,176 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:26:25,186 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:26:25,653 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 04:26:25,661 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 04:26:25,873 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:26:25,882 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:26:26,350 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 04:26:26,358 [main:95] - GENERATED = check(false)
2021-03-12 04:26:26,359 [main:95] - GENERATED = contract({ check(false)})
2021-03-12 04:26:26,359 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> contract({ check(false)})}
2021-03-12 04:26:26,359 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:26,391 [main:67] - randomType = Kla7
2021-03-12 04:26:26,595 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 04:26:26,603 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}
2021-03-12 04:26:26,611 [main:106] - GETTING Function1<Throwable, Unit> from Char
2021-03-12 04:26:26,641 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:26,676 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-12 04:26:26,710 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:26,738 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:26,755 [main:106] - GETTING Function1<Throwable, Unit> from Array<ArrayDeque<Short>>
2021-03-12 04:26:26,770 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:26,779 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 04:26:26,789 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:26,790 [main:106] - GETTING Function1<Throwable, Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:26:26,794 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:26,799 [main:106] - GETTING Function1<Throwable, Unit> from Byte
2021-03-12 04:26:26,829 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:26,830 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:26,836 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 04:26:26,842 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:26,843 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-12 04:26:26,844 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:26,845 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:26,847 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:26,848 [main:106] - GETTING Function1<Throwable, Unit> from Unit?
2021-03-12 04:26:26,853 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:26,854 [main:106] - GETTING Function1<Throwable, Unit> from Kla9
2021-03-12 04:26:26,872 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:26,873 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:26,874 [main:106] - GETTING Function1<Throwable, Unit> from Function0<String>
2021-03-12 04:26:26,885 [main:106] - GETTING Function1<Throwable, Unit> from EmptyCoroutineContext
2021-03-12 04:26:26,900 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Double>
2021-03-12 04:26:26,908 [main:106] - GETTING Function1<Throwable, Unit> from Char
2021-03-12 04:26:26,909 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:26,910 [main:106] - GETTING Function1<Throwable, Unit> from Kla9
2021-03-12 04:26:26,911 [main:106] - GETTING Function1<Throwable, Unit> from Kla5
2021-03-12 04:26:26,926 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:26,927 [main:106] - GETTING Function1<Throwable, Unit> from HashMap<Kla2?, ULong>
2021-03-12 04:26:27,047 [main:106] - GETTING Function1<Throwable, Unit> from HashMap<Kla2?, ULong>
2021-03-12 04:26:27,048 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:27,049 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:27,050 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:27,051 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:27,053 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:27,054 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Any?>
2021-03-12 04:26:27,062 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:27,063 [main:106] - GETTING Function1<Throwable, Unit> from Byte
2021-03-12 04:26:27,065 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:27,066 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:27,067 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:27,068 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:27,069 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:27,070 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 04:26:27,072 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-12 04:26:27,073 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:27,074 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:27,075 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:27,076 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 04:26:27,078 [main:106] - GETTING Function1<Throwable, Unit> from Array<ArrayDeque<Short>>
2021-03-12 04:26:27,079 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 04:26:27,080 [main:106] - GETTING Function1<Throwable, Unit> from Map<Kla5, Array<ULong>>
2021-03-12 04:26:27,108 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:27,109 [main:106] - GETTING Function1<Throwable, Unit> from Function0<String>
2021-03-12 04:26:27,111 [main:106] - GETTING Function1<Throwable, Unit> from UShort
2021-03-12 04:26:27,134 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:27,135 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Any>?
2021-03-12 04:26:27,143 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:27,144 [main:106] - GETTING Function1<Throwable, Unit> from Double
2021-03-12 04:26:27,173 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:27,174 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:27,175 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 04:26:27,177 [main:106] - GETTING Function1<Throwable, Unit> from Unit?
2021-03-12 04:26:27,178 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:27,179 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:27,180 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:27,181 [main:106] - GETTING Function1<Throwable, Unit> from Kla1
2021-03-12 04:26:27,190 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:27,192 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:27,193 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:27,194 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:27,195 [main:106] - GETTING Function1<Throwable, Unit> from Kla3
2021-03-12 04:26:27,202 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> contract({ check(false)})}
2021-03-12 04:26:27,432 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 04:26:27,433 [main:66] - Compilation checking started
2021-03-12 04:26:28,054 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope13 = "FAIL"
    fu21 {
        prope13 = if (fu19(::fu18)) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope14.exceptionOrNull()?.let({a: Throwable -> contract({ check(false)})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:28,056 [main:107] - replacing (checkFinished && !prope17, Boolean)
2021-03-12 04:26:28,058 [main:50] - replacing checkFinished && !prope17 Boolean
2021-03-12 04:26:28,058 [main:54] - Getting value of type Boolean
2021-03-12 04:26:28,281 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:26:28,289 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:26:28,289 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:28,306 [main:67] - randomType = Float
2021-03-12 04:26:28,512 [main:302] - generating value of type = Float true depth = 0
2021-03-12 04:26:28,572 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3deba98e]
2021-03-12 04:26:28,573 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6cd42516]
2021-03-12 04:26:28,573 [main:78] - Generated call from random type = (0.6433124f).toLong().equals(Kla2().fu8())
2021-03-12 04:26:28,574 [main:106] - GETTING Boolean from Long
2021-03-12 04:26:28,620 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6e9eaa96], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3430415c]]
2021-03-12 04:26:28,620 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6e9eaa96]
2021-03-12 04:26:28,620 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3430415c]
2021-03-12 04:26:28,620 [main:117] - GENERATED CALL = (((-6901340533927370996))).toFloat().isFinite()
2021-03-12 04:26:28,621 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6e9eaa96], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4e076f02]]
2021-03-12 04:26:28,621 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6e9eaa96]
2021-03-12 04:26:28,621 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4e076f02]
2021-03-12 04:26:28,621 [main:117] - GENERATED CALL = (((-6901340533927370996))).toFloat().isNaN()
2021-03-12 04:26:28,621 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@40147ace], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.LongRange.contains(element: kotlin.Long?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7e77ec04]]
2021-03-12 04:26:28,621 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@40147ace]
2021-03-12 04:26:28,835 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:26:28,844 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.LongRange.contains(element: kotlin.Long?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7e77ec04]
2021-03-12 04:26:29,049 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:26:29,057 [main:117] - GENERATED CALL = (((-6901340533927370996))).rangeTo(99).contains(4216144316947792905)
2021-03-12 04:26:29,057 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7ceffb96], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@159b8ae4]]
2021-03-12 04:26:29,057 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7ceffb96]
2021-03-12 04:26:29,057 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@159b8ae4]
2021-03-12 04:26:29,058 [main:117] - GENERATED CALL = (((-6901340533927370996))).toChar().isDefined()
2021-03-12 04:26:29,058 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@40147ace], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@71ed0498]]
2021-03-12 04:26:29,058 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@40147ace]
2021-03-12 04:26:29,058 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@71ed0498]
2021-03-12 04:26:29,245 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:26:29,246 [main:117] - GENERATED CALL = (((-6901340533927370996))).rangeTo((19855.toUByte()).toByte()).equals("zsrxr")
2021-03-12 04:26:29,246 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7645a8e8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@384d0737]]
2021-03-12 04:26:29,246 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7645a8e8]
2021-03-12 04:26:29,246 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@384d0737]
2021-03-12 04:26:29,246 [main:117] - GENERATED CALL = (((-6901340533927370996))).toShort().equals(Kla5().prope0)
2021-03-12 04:26:29,246 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7ceffb96], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e70c33d]]
2021-03-12 04:26:29,246 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7ceffb96]
2021-03-12 04:26:29,246 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e70c33d]
2021-03-12 04:26:29,247 [main:117] - GENERATED CALL = (((-6901340533927370996))).toChar().isUpperCase()
2021-03-12 04:26:29,247 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1bfe395b], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a357bc4]]
2021-03-12 04:26:29,247 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1bfe395b]
2021-03-12 04:26:29,247 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@a357bc4]
2021-03-12 04:26:29,247 [main:117] - GENERATED CALL = (((-6901340533927370996))).div((0.2958644149240166)).isInfinite()
2021-03-12 04:26:29,247 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6cd42516], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]]
2021-03-12 04:26:29,247 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6cd42516]
2021-03-12 04:26:29,247 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]
2021-03-12 04:26:29,247 [main:117] - GENERATED CALL = (((-6901340533927370996))).equals((Kla3().fu7()).s).not()
2021-03-12 04:26:29,247 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7ceffb96], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68c2786c]]
2021-03-12 04:26:29,247 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7ceffb96]
2021-03-12 04:26:29,247 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68c2786c]
2021-03-12 04:26:29,248 [main:117] - GENERATED CALL = (((-6901340533927370996))).toChar().isISOControl()
2021-03-12 04:26:29,248 [main:114] - replacement of checkFinished && !prope17 of type Boolean is (((-6901340533927370996))).toChar().isUpperCase()
2021-03-12 04:26:29,464 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:26:29,464 [main:66] - Compilation checking started
2021-03-12 04:26:30,375 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope13 = "FAIL"
    fu21 {
        prope13 = if (fu19(::fu18)) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:30,377 [main:107] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-12 04:26:30,377 [main:50] - replacing "tail-call optimization miss: method at " + it String
2021-03-12 04:26:30,377 [main:54] - Getting value of type String
2021-03-12 04:26:30,594 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:26:30,602 [main:58] - GENERATED VALUE OF TYPE String = "walqh"
2021-03-12 04:26:30,603 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:30,905 [main:67] - randomType = Kla13<Kla9>
2021-03-12 04:26:31,130 [main:302] - generating value of type = Kla13<Kla9> false depth = 0
2021-03-12 04:26:31,138 [main:112] - generating klass Kla13 text = abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 04:26:31,939 [main:302] - generating value of type = Kla16 false depth = 2
2021-03-12 04:26:31,947 [main:112] - generating klass Kla16 text = object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}
2021-03-12 04:26:31,968 [main:106] - GETTING String from Int
2021-03-12 04:26:31,998 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79b82659]]
2021-03-12 04:26:31,998 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0]
2021-03-12 04:26:31,998 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79b82659]
2021-03-12 04:26:31,998 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().uppercase()
2021-03-12 04:26:31,999 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@df9940b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a215398]]
2021-03-12 04:26:31,999 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@df9940b]
2021-03-12 04:26:31,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a215398]
2021-03-12 04:26:32,213 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:26:32,222 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toShort().toString(-425399437)
2021-03-12 04:26:32,222 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ade2e48], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]]
2021-03-12 04:26:32,222 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ade2e48]
2021-03-12 04:26:32,222 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775ffcc]
2021-03-12 04:26:32,222 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toByte().toString((hashMapOf<Kla2?, ULong>()).size)
2021-03-12 04:26:32,223 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de101f1]]
2021-03-12 04:26:32,223 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0]
2021-03-12 04:26:32,223 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de101f1]
2021-03-12 04:26:32,223 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0)
2021-03-12 04:26:32,223 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@46d9c67c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:26:32,223 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@46d9c67c]
2021-03-12 04:26:32,223 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:26:32,428 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:26:32,437 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).compareTo((19855.toUByte()).toByte().div(-491068702)).toString(-1898057127)
2021-03-12 04:26:32,437 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:26:32,437 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:26:32,437 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toString((hashMapOf<Kla2?, ULong>()).size)
2021-03-12 04:26:32,437 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e8fb0bd], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]]
2021-03-12 04:26:32,437 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e8fb0bd]
2021-03-12 04:26:32,437 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:26:32,438 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toLong().toString((hashMapOf<Kla2?, ULong>()).size)
2021-03-12 04:26:32,438 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@479ad565]]
2021-03-12 04:26:32,438 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a7412b0]
2021-03-12 04:26:32,438 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@479ad565]
2021-03-12 04:26:32,438 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().lowercase()
2021-03-12 04:26:32,438 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20953adc], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]]
2021-03-12 04:26:32,438 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20953adc]
2021-03-12 04:26:32,625 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:26:32,633 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:26:32,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:26:32,855 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).div(8024854824372522685).toString(183710293)
2021-03-12 04:26:32,855 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@51defa7a], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:26:32,855 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@51defa7a]
2021-03-12 04:26:32,855 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:26:32,855 [main:117] - GENERATED CALL = (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toInt().toString(((Kla9).equals("hpizo")).compareTo(true))
2021-03-12 04:26:32,856 [main:114] - replacement of "tail-call optimization miss: method at " + it of type String is (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0)
2021-03-12 04:26:33,073 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:26:33,073 [main:66] - Compilation checking started
2021-03-12 04:26:33,902 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope13 = "FAIL"
    fu21 {
        prope13 = if (fu19(::fu18)) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { it?.methodName?.startsWith(method) == true }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:33,904 [main:107] - replacing ({ c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 04:26:33,904 [main:50] - replacing { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 04:26:33,904 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 04:26:34,123 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 04:26:34,131 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:26:34,143 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-12 04:26:34,143 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:34,160 [main:67] - randomType = Boolean
2021-03-12 04:26:34,371 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:26:34,393 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Double>
2021-03-12 04:26:34,404 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 04:26:34,414 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:34,422 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-12 04:26:34,452 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Array<ArrayDeque<Short>>
2021-03-12 04:26:34,469 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 04:26:34,473 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 04:26:34,491 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla5
2021-03-12 04:26:34,504 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 04:26:34,512 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-12 04:26:34,515 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 04:26:34,517 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 04:26:34,520 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-12 04:26:34,523 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 04:26:34,549 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 04:26:34,551 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 04:26:34,552 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-12 04:26:34,554 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:34,556 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from HashMap<Kla2?, ULong>
2021-03-12 04:26:34,679 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Unit?
2021-03-12 04:26:34,684 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 04:26:34,693 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 04:26:34,695 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 04:26:34,696 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from HashMap<Kla2?, ULong>
2021-03-12 04:26:34,698 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla9
2021-03-12 04:26:34,716 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:34,718 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Char
2021-03-12 04:26:34,737 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<String>
2021-03-12 04:26:34,747 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Map<Kla5, Array<ULong>>
2021-03-12 04:26:34,771 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:34,772 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:34,774 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 04:26:34,775 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 04:26:34,777 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:34,778 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 04:26:34,811 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Char
2021-03-12 04:26:34,812 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-12 04:26:34,843 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-12 04:26:34,844 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 04:26:34,846 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:26:34,851 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 04:26:34,852 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 04:26:34,854 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 04:26:34,856 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Unit?
2021-03-12 04:26:34,857 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 04:26:34,859 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 04:26:34,870 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 04:26:34,872 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-12 04:26:34,873 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:34,875 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 04:26:34,876 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 04:26:34,878 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 04:26:34,880 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 04:26:34,881 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any>?
2021-03-12 04:26:34,890 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 04:26:34,892 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 04:26:34,893 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 04:26:34,895 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla9
2021-03-12 04:26:34,897 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UShort
2021-03-12 04:26:34,921 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 04:26:34,922 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 04:26:34,924 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<String>
2021-03-12 04:26:34,925 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Byte
2021-03-12 04:26:34,957 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla3
2021-03-12 04:26:34,965 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-12 04:26:34,966 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-12 04:26:34,968 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-12 04:26:34,969 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-12 04:26:34,999 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Array<ArrayDeque<Short>>
2021-03-12 04:26:35,000 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Byte
2021-03-12 04:26:35,002 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 04:26:35,004 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 04:26:35,005 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:35,007 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 04:26:35,008 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-12 04:26:35,010 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla1
2021-03-12 04:26:35,018 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 04:26:35,018 [main:114] - replacement of { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-12 04:26:35,240 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:26:35,240 [main:66] - Compilation checking started
2021-03-12 04:26:36,105 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope13 = "FAIL"
    fu21 {
        prope13 = if (fu19(::fu18)) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { it?.methodName?.startsWith(method) == true }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:36,107 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 04:26:36,108 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 04:26:36,108 [main:54] - Getting value of type Boolean
2021-03-12 04:26:36,319 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:26:36,328 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:26:36,328 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:37,168 [main:67] - randomType = Kla6<List<Kla7>>?
2021-03-12 04:26:37,360 [main:302] - generating value of type = Kla6<List<Kla7>> false depth = 0
2021-03-12 04:26:37,368 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:26:38,190 [main:302] - generating value of type = Kla9 false depth = 2
2021-03-12 04:26:38,198 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:26:38,219 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@7ed2cc69]
2021-03-12 04:26:38,425 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:26:38,425 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]
2021-03-12 04:26:38,612 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:26:38,612 [main:78] - Generated call from random type = (Kla9)?.equals("hyacv").equals("lqkeo")
2021-03-12 04:26:38,612 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla9)?.equals("hyacv").equals("lqkeo")
2021-03-12 04:26:38,852 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:26:38,853 [main:66] - Compilation checking started
2021-03-12 04:26:39,749 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope13 = "FAIL"
    fu21 {
        prope13 = if (fu19(::fu18)) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:39,751 [main:107] - replacing (fu19(::fu18), Boolean)
2021-03-12 04:26:39,753 [main:50] - replacing fu19(::fu18) Boolean
2021-03-12 04:26:39,753 [main:54] - Getting value of type Boolean
2021-03-12 04:26:39,973 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:26:39,982 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:26:39,982 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:40,282 [main:67] - randomType = ArrayDeque<String?>
2021-03-12 04:26:40,501 [main:302] - generating value of type = ArrayDeque<String?> false depth = 0
2021-03-12 04:26:40,723 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<String?> = TODO()
2021-03-12 04:26:40,733 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<String?> = TODO()
2021-03-12 04:26:41,247 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:26:41,257 [main:95] - GENERATED = ArrayDeque<String?>(790331986)
2021-03-12 04:26:41,439 [main:149] - GENERATING call of type public open fun contains(element: kotlin.String?): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@7b27377d]
2021-03-12 04:26:41,646 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:26:41,655 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]
2021-03-12 04:26:41,655 [main:78] - Generated call from random type = (ArrayDeque<String?>(790331986)).contains("ondkb").not()
2021-03-12 04:26:41,655 [main:106] - GETTING Boolean from Boolean
2021-03-12 04:26:41,664 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]]
2021-03-12 04:26:41,664 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e]
2021-03-12 04:26:41,880 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:26:41,881 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]
2021-03-12 04:26:41,881 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").equals("gsxhl").not()
2021-03-12 04:26:41,881 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]]
2021-03-12 04:26:41,881 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]
2021-03-12 04:26:41,881 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").xor((Kla8().prope7).equals("apntx"))
2021-03-12 04:26:41,881 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]]
2021-03-12 04:26:41,881 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]
2021-03-12 04:26:41,882 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").equals(Kla3().fu8())
2021-03-12 04:26:41,882 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]]
2021-03-12 04:26:41,882 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e]
2021-03-12 04:26:42,096 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:26:42,096 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:26:42,096 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").equals("ocqbh").or(((Kla9).equals("hpizo")))
2021-03-12 04:26:42,096 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]]
2021-03-12 04:26:42,096 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:26:42,097 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").or((Kla9).equals("hpizo"))
2021-03-12 04:26:42,097 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]]
2021-03-12 04:26:42,097 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]
2021-03-12 04:26:42,097 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").and((Kla8().prope7).equals("apntx"))
2021-03-12 04:26:42,097 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24300ae1]]
2021-03-12 04:26:42,097 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0]
2021-03-12 04:26:42,097 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24300ae1]
2021-03-12 04:26:42,098 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").compareTo(((-6901340533927370996)).equals(Kla5().prope0).or(true)).equals((Kla3().fu7()).s)
2021-03-12 04:26:42,098 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]]
2021-03-12 04:26:42,098 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e]
2021-03-12 04:26:42,309 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:26:42,309 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]
2021-03-12 04:26:42,309 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").equals("tyean").and(Kla8().prope6)
2021-03-12 04:26:42,309 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]]
2021-03-12 04:26:42,309 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1c5a561e]
2021-03-12 04:26:42,309 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]
2021-03-12 04:26:42,310 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").equals((Kla0("jkydd").s)).equals(Kla2().fu8())
2021-03-12 04:26:42,310 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]]
2021-03-12 04:26:42,310 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]
2021-03-12 04:26:42,310 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").not()
2021-03-12 04:26:42,310 [main:114] - replacement of fu19(::fu18) of type Boolean is (ArrayDeque<String?>(790331986)).contains("ondkb").not()
2021-03-12 04:26:42,538 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:26:42,539 [main:66] - Compilation checking started
2021-03-12 04:26:43,433 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:43,435 [main:107] - replacing (prope14.exceptionOrNull(), Throwable?)
2021-03-12 04:26:43,435 [main:50] - replacing prope14.exceptionOrNull() Throwable?
2021-03-12 04:26:43,435 [main:54] - Getting value of type Throwable?
2021-03-12 04:26:43,679 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 04:26:43,693 [main:58] - GENERATED VALUE OF TYPE Throwable? = NumberFormatException()
2021-03-12 04:26:43,693 [main:61] - GENERATED IS CALL =true
2021-03-12 04:26:44,280 [main:67] - randomType = Function1<Float?, Kla4>
2021-03-12 04:26:44,281 [main:106] - GETTING Throwable? from Long
2021-03-12 04:26:44,319 [main:106] - GETTING Throwable? from String
2021-03-12 04:26:44,339 [main:106] - GETTING Throwable? from Any?
2021-03-12 04:26:44,344 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 04:26:44,358 [main:106] - GETTING Throwable? from HashMap<Kla2?, ULong>
2021-03-12 04:26:44,556 [main:106] - GETTING Throwable? from Boolean
2021-03-12 04:26:44,569 [main:106] - GETTING Throwable? from Boolean
2021-03-12 04:26:44,569 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 04:26:44,589 [main:106] - GETTING Throwable? from Any?
2021-03-12 04:26:44,590 [main:106] - GETTING Throwable? from String
2021-03-12 04:26:44,590 [main:106] - GETTING Throwable? from Continuation<Any>?
2021-03-12 04:26:44,598 [main:106] - GETTING Throwable? from Int
2021-03-12 04:26:44,627 [main:106] - GETTING Throwable? from Kla3
2021-03-12 04:26:44,634 [main:106] - GETTING Throwable? from Any?
2021-03-12 04:26:44,634 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,639 [main:106] - GETTING Throwable? from Char
2021-03-12 04:26:44,655 [main:106] - GETTING Throwable? from Any?
2021-03-12 04:26:44,656 [main:106] - GETTING Throwable? from Any?
2021-03-12 04:26:44,657 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,657 [main:106] - GETTING Throwable? from Boolean
2021-03-12 04:26:44,658 [main:106] - GETTING Throwable? from Any?
2021-03-12 04:26:44,659 [main:106] - GETTING Throwable? from Kla9
2021-03-12 04:26:44,676 [main:106] - GETTING Throwable? from Int
2021-03-12 04:26:44,677 [main:106] - GETTING Throwable? from HashMap<Kla2?, ULong>
2021-03-12 04:26:44,677 [main:106] - GETTING Throwable? from Boolean
2021-03-12 04:26:44,678 [main:106] - GETTING Throwable? from Boolean
2021-03-12 04:26:44,678 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,679 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,680 [main:106] - GETTING Throwable? from Int
2021-03-12 04:26:44,680 [main:106] - GETTING Throwable? from Byte
2021-03-12 04:26:44,711 [main:106] - GETTING Throwable? from Int
2021-03-12 04:26:44,711 [main:106] - GETTING Throwable? from Double
2021-03-12 04:26:44,739 [main:106] - GETTING Throwable? from Long
2021-03-12 04:26:44,739 [main:106] - GETTING Throwable? from Unit?
2021-03-12 04:26:44,743 [main:106] - GETTING Throwable? from Kla1
2021-03-12 04:26:44,749 [main:106] - GETTING Throwable? from UByte
2021-03-12 04:26:44,771 [main:106] - GETTING Throwable? from Kla5
2021-03-12 04:26:44,783 [main:106] - GETTING Throwable? from Any?
2021-03-12 04:26:44,784 [main:106] - GETTING Throwable? from Kla9
2021-03-12 04:26:44,784 [main:106] - GETTING Throwable? from UShort
2021-03-12 04:26:44,807 [main:106] - GETTING Throwable? from Array<ArrayDeque<Short>>
2021-03-12 04:26:44,822 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,822 [main:106] - GETTING Throwable? from Boolean
2021-03-12 04:26:44,823 [main:106] - GETTING Throwable? from String
2021-03-12 04:26:44,824 [main:106] - GETTING Throwable? from UByte
2021-03-12 04:26:44,824 [main:106] - GETTING Throwable? from UByte
2021-03-12 04:26:44,825 [main:106] - GETTING Throwable? from Function0<String>
2021-03-12 04:26:44,835 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,835 [main:106] - GETTING Throwable? from Any?
2021-03-12 04:26:44,836 [main:106] - GETTING Throwable? from Int
2021-03-12 04:26:44,837 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 04:26:44,837 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,838 [main:106] - GETTING Throwable? from Function0<String>
2021-03-12 04:26:44,839 [main:106] - GETTING Throwable? from String
2021-03-12 04:26:44,839 [main:106] - GETTING Throwable? from Long
2021-03-12 04:26:44,840 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 04:26:44,849 [main:106] - GETTING Throwable? from String
2021-03-12 04:26:44,850 [main:106] - GETTING Throwable? from UByte
2021-03-12 04:26:44,851 [main:106] - GETTING Throwable? from Unit?
2021-03-12 04:26:44,851 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 04:26:44,852 [main:106] - GETTING Throwable? from UByte
2021-03-12 04:26:44,852 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 04:26:44,853 [main:106] - GETTING Throwable? from Continuation<Double>
2021-03-12 04:26:44,860 [main:106] - GETTING Throwable? from Char
2021-03-12 04:26:44,861 [main:106] - GETTING Throwable? from UByte
2021-03-12 04:26:44,862 [main:106] - GETTING Throwable? from Array<ArrayDeque<Short>>
2021-03-12 04:26:44,862 [main:106] - GETTING Throwable? from UByte
2021-03-12 04:26:44,863 [main:106] - GETTING Throwable? from String
2021-03-12 04:26:44,864 [main:106] - GETTING Throwable? from Map<Kla5, Array<ULong>>
2021-03-12 04:26:44,887 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,887 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 04:26:44,894 [main:106] - GETTING Throwable? from Boolean
2021-03-12 04:26:44,895 [main:106] - GETTING Throwable? from Byte
2021-03-12 04:26:44,896 [main:106] - GETTING Throwable? from UByte
2021-03-12 04:26:44,896 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 04:26:44,897 [main:106] - GETTING Throwable? from [ERROR : Class<T>]<T>
2021-03-12 04:26:44,900 [main:106] - GETTING Throwable? from Kla0
2021-03-12 04:26:44,901 [main:114] - replacement of prope14.exceptionOrNull() of type Throwable? is NumberFormatException()
2021-03-12 04:26:45,113 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:26:45,114 [main:66] - Compilation checking started
2021-03-12 04:26:46,026 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:46,028 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 04:26:46,029 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 04:26:46,029 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 04:26:46,271 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 04:26:46,280 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:26:46,518 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:26:46,528 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:26:47,290 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:26:47,298 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 04:26:47,306 [main:302] - generating value of type = Any false depth = 5
2021-03-12 04:26:47,306 [main:95] - GENERATED = require(false, { "dwigs"})
2021-03-12 04:26:47,307 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> require(false, { "dwigs"})}
2021-03-12 04:26:47,307 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:47,323 [main:67] - randomType = String
2021-03-12 04:26:47,536 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:26:47,568 [main:106] - GETTING Function1<Throwable, Unit> from Array<ArrayDeque<Short>>
2021-03-12 04:26:47,589 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:47,601 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:47,607 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:47,614 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:47,616 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:47,617 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 04:26:47,630 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:47,632 [main:106] - GETTING Function1<Throwable, Unit> from UShort
2021-03-12 04:26:47,662 [main:106] - GETTING Function1<Throwable, Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:26:47,676 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Double>
2021-03-12 04:26:47,686 [main:106] - GETTING Function1<Throwable, Unit> from Byte
2021-03-12 04:26:47,731 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:47,757 [main:106] - GETTING Function1<Throwable, Unit> from Kla5
2021-03-12 04:26:47,777 [main:106] - GETTING Function1<Throwable, Unit> from Kla9
2021-03-12 04:26:47,804 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:47,805 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:47,806 [main:106] - GETTING Function1<Throwable, Unit> from Char
2021-03-12 04:26:47,834 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:47,835 [main:106] - GETTING Function1<Throwable, Unit> from EmptyCoroutineContext
2021-03-12 04:26:47,855 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:47,856 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Any?>
2021-03-12 04:26:47,866 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:47,899 [main:106] - GETTING Function1<Throwable, Unit> from Kla1
2021-03-12 04:26:47,906 [main:106] - GETTING Function1<Throwable, Unit> from Unit?
2021-03-12 04:26:47,910 [main:106] - GETTING Function1<Throwable, Unit> from Map<Kla5, Array<ULong>>
2021-03-12 04:26:47,933 [main:106] - GETTING Function1<Throwable, Unit> from Function0<String>
2021-03-12 04:26:47,944 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:47,945 [main:106] - GETTING Function1<Throwable, Unit> from Double
2021-03-12 04:26:47,983 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:47,984 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-12 04:26:48,013 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 04:26:48,014 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:48,016 [main:106] - GETTING Function1<Throwable, Unit> from Kla9
2021-03-12 04:26:48,017 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:48,018 [main:106] - GETTING Function1<Throwable, Unit> from Unit?
2021-03-12 04:26:48,019 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:48,020 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:48,021 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 04:26:48,028 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:48,051 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 04:26:48,052 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:48,054 [main:106] - GETTING Function1<Throwable, Unit> from Array<ArrayDeque<Short>>
2021-03-12 04:26:48,055 [main:106] - GETTING Function1<Throwable, Unit> from Char
2021-03-12 04:26:48,056 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 04:26:48,057 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:48,058 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:48,059 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:48,061 [main:106] - GETTING Function1<Throwable, Unit> from HashMap<Kla2?, ULong>
2021-03-12 04:26:48,173 [main:106] - GETTING Function1<Throwable, Unit> from Kla3
2021-03-12 04:26:48,180 [main:106] - GETTING Function1<Throwable, Unit> from HashMap<Kla2?, ULong>
2021-03-12 04:26:48,181 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:48,182 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:48,184 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:48,185 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:48,186 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:48,187 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 04:26:48,188 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:48,189 [main:106] - GETTING Function1<Throwable, Unit> from Byte
2021-03-12 04:26:48,191 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-12 04:26:48,192 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:48,193 [main:106] - GETTING Function1<Throwable, Unit> from Function0<String>
2021-03-12 04:26:48,194 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:48,195 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 04:26:48,196 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:48,198 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:48,199 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:48,200 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 04:26:48,201 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 04:26:48,202 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:48,203 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:48,204 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-12 04:26:48,206 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:48,207 [main:106] - GETTING Function1<Throwable, Unit> from UByte
2021-03-12 04:26:48,208 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 04:26:48,209 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Any>?
2021-03-12 04:26:48,217 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 04:26:48,218 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> require(false, { "dwigs"})}
2021-03-12 04:26:48,434 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 04:26:48,435 [main:66] - Compilation checking started
2021-03-12 04:26:49,470 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:26:49,472 [main:107] - replacing (Kla15(), Kla15)
2021-03-12 04:26:49,472 [main:50] - replacing Kla15() Kla15
2021-03-12 04:26:49,472 [main:54] - Getting value of type Kla15
2021-03-12 04:26:49,723 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-12 04:26:49,732 [main:112] - generating klass Kla15 text = class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 04:26:49,732 [main:58] - GENERATED VALUE OF TYPE Kla15 = Kla15()
2021-03-12 04:26:49,732 [main:61] - GENERATED IS CALL =true
2021-03-12 04:26:49,750 [main:67] - randomType = Char
2021-03-12 04:26:49,966 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:26:50,001 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,007 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:26:50,019 [main:106] - GETTING Kla15 from Array<ArrayDeque<Short>>
2021-03-12 04:26:50,041 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,042 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:26:50,067 [main:106] - GETTING Kla15 from String
2021-03-12 04:26:50,084 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:26:50,087 [main:106] - GETTING Kla15 from Kla3
2021-03-12 04:26:50,093 [main:106] - GETTING Kla15 from Long
2021-03-12 04:26:50,121 [main:106] - GETTING Kla15 from Char
2021-03-12 04:26:50,138 [main:106] - GETTING Kla15 from Function0<String>
2021-03-12 04:26:50,147 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:26:50,148 [main:106] - GETTING Kla15 from Int
2021-03-12 04:26:50,177 [main:106] - GETTING Kla15 from Unit?
2021-03-12 04:26:50,180 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:26:50,181 [main:106] - GETTING Kla15 from Int
2021-03-12 04:26:50,182 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:26:50,182 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 04:26:50,188 [main:106] - GETTING Kla15 from Byte
2021-03-12 04:26:50,217 [main:106] - GETTING Kla15 from Kla9
2021-03-12 04:26:50,234 [main:106] - GETTING Kla15 from Unit?
2021-03-12 04:26:50,234 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,235 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:26:50,235 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:26:50,236 [main:106] - GETTING Kla15 from HashMap<Kla2?, ULong>
2021-03-12 04:26:50,350 [main:106] - GETTING Kla15 from Array<ArrayDeque<Short>>
2021-03-12 04:26:50,350 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,351 [main:106] - GETTING Kla15 from Continuation<Double>
2021-03-12 04:26:50,358 [main:106] - GETTING Kla15 from String
2021-03-12 04:26:50,358 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:26:50,359 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 04:26:50,359 [main:106] - GETTING Kla15 from String
2021-03-12 04:26:50,360 [main:106] - GETTING Kla15 from Byte
2021-03-12 04:26:50,361 [main:106] - GETTING Kla15 from Function0<String>
2021-03-12 04:26:50,361 [main:106] - GETTING Kla15 from Kla9
2021-03-12 04:26:50,362 [main:106] - GETTING Kla15 from Continuation<Any>?
2021-03-12 04:26:50,369 [main:106] - GETTING Kla15 from Map<Kla5, Array<ULong>>
2021-03-12 04:26:50,391 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:26:50,392 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:26:50,392 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:26:50,393 [main:106] - GETTING Kla15 from UShort
2021-03-12 04:26:50,415 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,416 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:26:50,416 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 04:26:50,417 [main:106] - GETTING Kla15 from Double
2021-03-12 04:26:50,444 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 04:26:50,453 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,454 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:26:50,454 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:26:50,455 [main:106] - GETTING Kla15 from HashMap<Kla2?, ULong>
2021-03-12 04:26:50,455 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:26:50,456 [main:106] - GETTING Kla15 from String
2021-03-12 04:26:50,457 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-12 04:26:50,470 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-12 04:26:50,477 [main:106] - GETTING Kla15 from Kla1
2021-03-12 04:26:50,483 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,484 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:26:50,485 [main:106] - GETTING Kla15 from Char
2021-03-12 04:26:50,485 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:26:50,486 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:26:50,486 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,487 [main:106] - GETTING Kla15 from [ERROR : Class<T>]<T>
2021-03-12 04:26:50,490 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:26:50,491 [main:106] - GETTING Kla15 from Long
2021-03-12 04:26:50,492 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:26:50,492 [main:106] - GETTING Kla15 from String
2021-03-12 04:26:50,493 [main:106] - GETTING Kla15 from Int
2021-03-12 04:26:50,493 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:26:50,494 [main:106] - GETTING Kla15 from Kla5
2021-03-12 04:26:50,507 [main:106] - GETTING Kla15 from Long
2021-03-12 04:26:50,508 [main:106] - GETTING Kla15 from Int
2021-03-12 04:26:50,508 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 04:26:50,509 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:26:50,510 [main:106] - GETTING Kla15 from Int
2021-03-12 04:26:50,510 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 04:26:50,511 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:26:50,511 [main:106] - GETTING Kla15 from String
2021-03-12 04:26:50,511 [main:114] - replacement of Kla15() of type Kla15 is Kla15()
2021-03-12 04:26:50,730 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:26:50,732 [main:107] - replacing (prope14, Result<Ty1>)
2021-03-12 04:26:50,734 [main:50] - replacing prope14 Result<Ty1>
2021-03-12 04:26:50,734 [main:54] - Getting value of type Result<Ty1>
2021-03-12 04:26:50,952 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-12 04:26:51,162 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 04:26:51,173 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 04:26:51,696 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 04:26:51,696 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-12 04:26:51,713 [main:67] - randomType = Double
2021-03-12 04:26:51,961 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:26:52,012 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:26:52,024 [main:106] - GETTING Result<Ty1> from Char
2021-03-12 04:26:52,047 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:26:52,100 [main:106] - GETTING Result<Ty1> from Kla9
2021-03-12 04:26:52,128 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:26:52,157 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:26:52,196 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:26:52,203 [main:106] - GETTING Result<Ty1> from Long
2021-03-12 04:26:52,256 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:26:52,258 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 04:26:52,275 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:26:52,277 [main:106] - GETTING Result<Ty1> from Array<ArrayDeque<Short>>
2021-03-12 04:26:52,301 [main:106] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-12 04:26:52,321 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:26:52,323 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 04:26:52,329 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:26:52,330 [main:106] - GETTING Result<Ty1> from Array<ArrayDeque<Short>>
2021-03-12 04:26:52,331 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:26:52,332 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,338 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 04:26:52,341 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:26:52,342 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,343 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:26:52,344 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:26:52,346 [main:106] - GETTING Result<Ty1> from UShort
2021-03-12 04:26:52,371 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:26:52,372 [main:106] - GETTING Result<Ty1> from Continuation<Any>?
2021-03-12 04:26:52,379 [main:106] - GETTING Result<Ty1> from Byte
2021-03-12 04:26:52,413 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:26:52,414 [main:106] - GETTING Result<Ty1> from [ERROR : Class<T>]<T>
2021-03-12 04:26:52,419 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:26:52,420 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:26:52,421 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:26:52,422 [main:106] - GETTING Result<Ty1> from Long
2021-03-12 04:26:52,423 [main:106] - GETTING Result<Ty1> from Byte
2021-03-12 04:26:52,424 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,425 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:26:52,427 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:26:52,428 [main:106] - GETTING Result<Ty1> from Unit?
2021-03-12 04:26:52,434 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:26:52,435 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 04:26:52,436 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,437 [main:106] - GETTING Result<Ty1> from Map<Kla5, Array<ULong>>
2021-03-12 04:26:52,463 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:26:52,464 [main:106] - GETTING Result<Ty1> from Kla5
2021-03-12 04:26:52,480 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 04:26:52,481 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:26:52,482 [main:106] - GETTING Result<Ty1> from HashMap<Kla2?, ULong>
2021-03-12 04:26:52,605 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:26:52,606 [main:106] - GETTING Result<Ty1> from Unit?
2021-03-12 04:26:52,607 [main:106] - GETTING Result<Ty1> from Continuation<Double>
2021-03-12 04:26:52,615 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:26:52,616 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:26:52,617 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:26:52,618 [main:106] - GETTING Result<Ty1> from Kla3
2021-03-12 04:26:52,626 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:26:52,627 [main:106] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-12 04:26:52,636 [main:106] - GETTING Result<Ty1> from Function0<String>
2021-03-12 04:26:52,645 [main:106] - GETTING Result<Ty1> from Kla9
2021-03-12 04:26:52,646 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 04:26:52,647 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,649 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:26:52,650 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,651 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:26:52,652 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:26:52,653 [main:106] - GETTING Result<Ty1> from Kla1
2021-03-12 04:26:52,661 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,662 [main:106] - GETTING Result<Ty1> from Char
2021-03-12 04:26:52,663 [main:106] - GETTING Result<Ty1> from Double
2021-03-12 04:26:52,692 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:26:52,693 [main:106] - GETTING Result<Ty1> from HashMap<Kla2?, ULong>
2021-03-12 04:26:52,694 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:26:52,695 [main:106] - GETTING Result<Ty1> from Function0<String>
2021-03-12 04:26:52,697 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:26:52,698 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,699 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:26:52,700 [main:106] - GETTING Result<Ty1> from Long
2021-03-12 04:26:52,700 [main:111] - Cant find and generate replacement for prope14 type Result<Ty1>
2021-03-12 04:26:52,700 [main:107] - replacing (prope19 != null, Boolean)
2021-03-12 04:26:52,702 [main:50] - replacing prope19 != null Boolean
2021-03-12 04:26:52,702 [main:54] - Getting value of type Boolean
2021-03-12 04:26:52,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:26:52,933 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:26:52,934 [main:61] - GENERATED IS CALL =false
2021-03-12 04:26:53,238 [main:67] - randomType = HashSet<Byte>
2021-03-12 04:26:53,476 [main:302] - generating value of type = HashSet<Byte> false depth = 0
2021-03-12 04:26:53,714 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Byte): HashSet<Byte> = TODO()
2021-03-12 04:26:53,724 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Byte): HashSet<Byte> = TODO()
2021-03-12 04:26:53,936 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 04:26:53,945 [main:95] - GENERATED = linkedSetOf<Byte>(-16)
2021-03-12 04:26:54,045 [main:149] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@21d9fd21]
2021-03-12 04:26:54,046 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@5049aaa3]
2021-03-12 04:26:54,046 [main:78] - Generated call from random type = (linkedSetOf<Byte>(-16)).clear().equals(Kla0("aosbv").s)
2021-03-12 04:26:54,047 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 04:26:54,053 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@49657d63], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@2d54db64]]
2021-03-12 04:26:54,053 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@49657d63]
2021-03-12 04:26:54,284 [main:302] - generating value of type = R false depth = 0
2021-03-12 04:26:54,550 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Float, block: T.()->Double): R = TODO()
2021-03-12 04:26:54,560 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Float, block: T.()->Double): R = TODO()
2021-03-12 04:26:55,090 [main:302] - generating value of type = Float true depth = 3
2021-03-12 04:26:55,099 [main:385] - Cant generate call of fun <T, R> with(receiver: Float, block: T.()->Double): R = TODO()
2021-03-12 04:26:55,319 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 04:26:55,327 [main:302] - generating value of type = R false depth = 1
2021-03-12 04:26:55,553 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Double): R = TODO()
2021-03-12 04:26:55,564 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Double): R = TODO()
2021-03-12 04:26:56,109 [main:302] - generating value of type = Function0<Double> false depth = 4
2021-03-12 04:26:56,118 [main:302] - generating value of type = Double true depth = 5
2021-03-12 04:26:56,127 [main:95] - GENERATED = run<Double>({ 0.6218246585908214})
2021-03-12 04:26:56,127 [main:158] - CANT GENERATE PARAMS FOR public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@49657d63]
2021-03-12 04:26:56,127 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]]
2021-03-12 04:26:56,127 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]
2021-03-12 04:26:56,127 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]
2021-03-12 04:26:56,128 [main:117] - GENERATED CALL = (Kla4().context).equals(Kla5().prope0).xor((Kla8().prope7).equals("apntx"))
2021-03-12 04:26:56,128 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]]
2021-03-12 04:26:56,128 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]
2021-03-12 04:26:56,364 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:26:56,364 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]
2021-03-12 04:26:56,365 [main:117] - GENERATED CALL = (Kla4().context).equals("hjtyf").and((Kla9).equals("hpizo"))
2021-03-12 04:26:56,365 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@59cb2523], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@36771e4d]]
2021-03-12 04:26:56,365 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@59cb2523]
2021-03-12 04:26:56,592 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 04:26:56,813 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 04:26:56,823 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 04:26:57,703 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 3
2021-03-12 04:26:57,944 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:26:57,954 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:26:58,790 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 6
2021-03-12 04:26:59,064 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:59,075 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:59,934 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:26:59,934 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:26:59,934 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 04:26:59,935 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@59cb2523]
2021-03-12 04:26:59,935 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]]
2021-03-12 04:26:59,935 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]
2021-03-12 04:26:59,935 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]
2021-03-12 04:26:59,935 [main:117] - GENERATED CALL = (Kla4().context).equals((Kla0("jkydd").s)).not()
2021-03-12 04:26:59,935 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@49657d63], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ed88a6b]]
2021-03-12 04:26:59,935 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@49657d63]
2021-03-12 04:27:00,168 [main:302] - generating value of type = R false depth = 0
2021-03-12 04:27:03,264 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: HashSet<Boolean?>, block: T.()->HashSet<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>>?): R = TODO()
2021-03-12 04:27:03,275 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: HashSet<Boolean?>, block: T.()->HashSet<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>>?): R = TODO()
2021-03-12 04:27:03,858 [main:302] - generating value of type = HashSet<Boolean?> false depth = 3
2021-03-12 04:27:04,088 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Boolean?): HashSet<Boolean?> = TODO()
2021-03-12 04:27:04,098 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Boolean?): HashSet<Boolean?> = TODO()
2021-03-12 04:27:04,311 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 04:27:04,320 [main:95] - GENERATED = linkedSetOf<Boolean?>(true)
2021-03-12 04:27:04,320 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, HashSet<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>>?> false depth = 3
2021-03-12 04:27:04,329 [main:302] - generating value of type = HashSet<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>> false depth = 4
2021-03-12 04:27:04,569 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>> = TODO()
2021-03-12 04:27:04,580 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>> = TODO()
2021-03-12 04:27:04,818 [main:95] - GENERATED = hashSetOf<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>>()
2021-03-12 04:27:04,818 [main:95] - GENERATED = with<HashSet<Boolean?>, HashSet<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>>?>(linkedSetOf<Boolean?>(true), { hashSetOf<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>>()})
2021-03-12 04:27:05,021 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 04:27:05,030 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ed88a6b]
2021-03-12 04:27:05,252 [main:302] - generating value of type = T false depth = 0
2021-03-12 04:27:05,508 [main:43] - GENERATING CALL OF fun <T> maxOf(a: ULong, other: ULong, comparator: kotlin.Comparator<ULong>): T = TODO()
2021-03-12 04:27:05,520 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: ULong, other: ULong, comparator: kotlin.Comparator<ULong>): T = TODO()
2021-03-12 04:27:06,052 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 04:27:06,061 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 04:27:06,070 [main:302] - generating value of type = Comparator<ULong> false depth = 3
2021-03-12 04:27:06,300 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (ULong)->kotlin.Comparable<*>?): Comparator<ULong> = TODO()
2021-03-12 04:27:06,310 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (ULong)->kotlin.Comparable<*>?): Comparator<ULong> = TODO()
2021-03-12 04:27:06,828 [main:302] - generating value of type = Function1<ULong, Comparable<*>?> false depth = 6
2021-03-12 04:27:06,836 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-12 04:27:06,849 [main:95] - GENERATED = compareBy<ULong>({a: ULong -> '隔'})
2021-03-12 04:27:06,850 [main:95] - GENERATED = maxOf<ULong>(6324841289557096572.toULong(), 4257862114663069345.toULong(), compareBy<ULong>({a: ULong -> '隔'}))
2021-03-12 04:27:06,851 [main:117] - GENERATED CALL = (Kla4().context).fold(with<HashSet<Boolean?>, HashSet<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>>?>(linkedSetOf<Boolean?>(true), { hashSetOf<Function2<Kla7, ArrayList<Map<Char, Kla1>>?, UByte>>()}), {a: R, b: Element -> null})?.contains(maxOf<ULong>(6324841289557096572.toULong(), 4257862114663069345.toULong(), compareBy<ULong>({a: ULong -> '隔'})))
2021-03-12 04:27:06,851 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]]
2021-03-12 04:27:06,851 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]
2021-03-12 04:27:07,068 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:27:07,069 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]
2021-03-12 04:27:07,069 [main:117] - GENERATED CALL = (Kla4().context).equals("flnja").equals((Kla3().fu7()).s)
2021-03-12 04:27:07,069 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]]
2021-03-12 04:27:07,069 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]
2021-03-12 04:27:07,069 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:27:07,070 [main:117] - GENERATED CALL = (Kla4().context).equals((Kla0("jkydd").s)).or((Kla8().prope7).equals("apntx"))
2021-03-12 04:27:07,070 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]]
2021-03-12 04:27:07,070 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]
2021-03-12 04:27:07,070 [main:117] - GENERATED CALL = (Kla4().context).equals(Kla1().fu8())
2021-03-12 04:27:07,070 [main:114] - replacement of prope19 != null of type Boolean is (linkedSetOf<Byte>(-16)).clear().equals(Kla0("aosbv").s)
2021-03-12 04:27:07,268 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:27:07,268 [main:66] - Compilation checking started
2021-03-12 04:27:07,871 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while ((linkedSetOf<Byte>(-16)).clear().equals(Kla0("aosbv").s)) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:07,873 [main:107] - replacing ({
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }, Unit?)
2021-03-12 04:27:07,873 [main:50] - replacing {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    } Unit?
2021-03-12 04:27:07,873 [main:54] - Getting value of type Unit?
2021-03-12 04:27:08,112 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 04:27:08,352 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:27:08,362 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:27:08,880 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-12 04:27:08,889 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 04:27:09,119 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:27:09,129 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:27:09,631 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 04:27:09,640 [main:95] - GENERATED = check(false)
2021-03-12 04:27:09,641 [main:95] - GENERATED = contract({ check(false)})
2021-03-12 04:27:09,641 [main:58] - GENERATED VALUE OF TYPE Unit? = contract({ check(false)})
2021-03-12 04:27:09,641 [main:61] - GENERATED IS CALL =true
2021-03-12 04:27:09,676 [main:67] - randomType = Kla14
2021-03-12 04:27:09,908 [main:302] - generating value of type = Kla14 false depth = 0
2021-03-12 04:27:09,917 [main:112] - generating klass Kla14 text = class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}
2021-03-12 04:27:09,923 [main:149] - GENERATING call of type public final fun fu27(method: kotlin.String): kotlin.Unit defined in Kla14[SimpleFunctionDescriptorImpl@2e271119]
2021-03-12 04:27:09,924 [main:78] - Generated call from random type = (Kla14()).fu27((0.2958644149240166).toChar().lowercase())
2021-03-12 04:27:09,925 [main:106] - GETTING Unit? from Double
2021-03-12 04:27:09,975 [main:106] - GETTING Unit? from CoroutineContext
2021-03-12 04:27:09,984 [main:106] - GETTING Unit? from CoroutineContext
2021-03-12 04:27:09,986 [main:106] - GETTING Unit? from String
2021-03-12 04:27:10,008 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@620d921b]]
2021-03-12 04:27:10,008 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@620d921b]
2021-03-12 04:27:10,252 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 04:27:10,261 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:27:10,274 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase())?.forEachIndexed({a: Int, b: Char -> println()})
2021-03-12 04:27:10,274 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ae02d7]]
2021-03-12 04:27:10,274 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ae02d7]
2021-03-12 04:27:10,493 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 04:27:10,501 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:27:10,713 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:27:10,723 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 04:27:11,576 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:27:11,585 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 04:27:11,594 [main:302] - generating value of type = Any false depth = 5
2021-03-12 04:27:11,594 [main:95] - GENERATED = check(false, { "oplmh"})
2021-03-12 04:27:11,595 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase())?.forEach({a: Char -> check(false, { "oplmh"})})
2021-03-12 04:27:11,595 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72ba2d6f], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ae02d7]]
2021-03-12 04:27:11,595 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72ba2d6f]
2021-03-12 04:27:11,595 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ae02d7]
2021-03-12 04:27:11,811 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 04:27:11,820 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:27:12,028 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:27:12,038 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:27:12,572 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:27:12,572 [main:95] - GENERATED = print("rcdsb")
2021-03-12 04:27:12,573 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase())?.subSequence((hashMapOf<Kla2?, ULong>()).size, (786914593)).forEach({a: Char -> print("rcdsb")})
2021-03-12 04:27:12,573 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72ba2d6f], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@620d921b]]
2021-03-12 04:27:12,573 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72ba2d6f]
2021-03-12 04:27:12,769 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:27:12,778 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@620d921b]
2021-03-12 04:27:13,007 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 04:27:13,016 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:27:13,248 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:27:13,258 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:27:13,780 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:27:13,780 [main:95] - GENERATED = print("vtksn")
2021-03-12 04:27:13,780 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase())?.subSequence((19855.toUByte()).toByte().div(-491068702), 2010816791).forEachIndexed({a: Int, b: Char -> print("vtksn")})
2021-03-12 04:27:13,781 [main:114] - replacement of {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    } of type Unit? is (Kla14()).fu27((0.2958644149240166).toChar().lowercase())
2021-03-12 04:27:14,011 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:27:14,012 [main:66] - Compilation checking started
2021-03-12 04:27:14,028 [main:71] - Wrong syntax or breaks conditions
2021-03-12 04:27:14,028 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) (Kla14()).fu27((0.2958644149240166).toChar().lowercase())
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:14,031 [main:107] - replacing (prope17, Boolean)
2021-03-12 04:27:14,033 [main:50] - replacing prope17 Boolean
2021-03-12 04:27:14,033 [main:54] - Getting value of type Boolean
2021-03-12 04:27:14,256 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:27:14,264 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:27:14,264 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:14,581 [main:67] - randomType = Collection<Short>
2021-03-12 04:27:14,582 [main:106] - GETTING Boolean from Byte
2021-03-12 04:27:14,631 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@646759b2], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]]
2021-03-12 04:27:14,631 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@646759b2]
2021-03-12 04:27:14,631 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]
2021-03-12 04:27:14,631 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).equals((Kla0("jkydd").s)).xor(Kla8().prope6)
2021-03-12 04:27:14,631 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c3816a3]]
2021-03-12 04:27:14,631 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34]
2021-03-12 04:27:14,632 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c3816a3]
2021-03-12 04:27:14,632 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).toChar().isDigit()
2021-03-12 04:27:14,632 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@159b8ae4]]
2021-03-12 04:27:14,632 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34]
2021-03-12 04:27:14,632 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@159b8ae4]
2021-03-12 04:27:14,632 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).toChar().isDefined()
2021-03-12 04:27:14,632 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6e9eaa96], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6da08b63]]
2021-03-12 04:27:14,632 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6e9eaa96]
2021-03-12 04:27:14,632 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6da08b63]
2021-03-12 04:27:14,632 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).toFloat().isInfinite()
2021-03-12 04:27:14,632 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66fc7a13], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6c3f8f83]]
2021-03-12 04:27:14,632 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66fc7a13]
2021-03-12 04:27:14,632 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6c3f8f83]
2021-03-12 04:27:14,857 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:27:14,857 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).toDouble().equals("evjna")
2021-03-12 04:27:14,858 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@655ebf25]]
2021-03-12 04:27:14,858 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34]
2021-03-12 04:27:14,858 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@655ebf25]
2021-03-12 04:27:14,858 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).toChar().isSurrogate()
2021-03-12 04:27:14,858 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1e3b1cf2], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@171158d0]]
2021-03-12 04:27:14,858 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1e3b1cf2]
2021-03-12 04:27:14,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@171158d0]
2021-03-12 04:27:15,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:27:15,107 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).rangeTo(((786914593).toUByte()).toByte()).contains(2134797800)
2021-03-12 04:27:15,107 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6e9eaa96], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4e076f02]]
2021-03-12 04:27:15,107 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6e9eaa96]
2021-03-12 04:27:15,107 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4e076f02]
2021-03-12 04:27:15,107 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).toFloat().isNaN()
2021-03-12 04:27:15,107 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67f4d464]]
2021-03-12 04:27:15,107 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34]
2021-03-12 04:27:15,107 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67f4d464]
2021-03-12 04:27:15,107 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).toChar().isTitleCase()
2021-03-12 04:27:15,107 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236cf14a]]
2021-03-12 04:27:15,107 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30696c34]
2021-03-12 04:27:15,107 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236cf14a]
2021-03-12 04:27:15,108 [main:117] - GENERATED CALL = ((19855.toUByte()).toByte()).toChar().isHighSurrogate()
2021-03-12 04:27:15,108 [main:114] - replacement of prope17 of type Boolean is true
2021-03-12 04:27:15,329 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:27:15,330 [main:66] - Compilation checking started
2021-03-12 04:27:15,941 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        true = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:15,944 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 04:27:15,946 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 04:27:15,946 [main:54] - Getting value of type Boolean
2021-03-12 04:27:16,184 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:27:16,194 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:27:16,194 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:16,232 [main:67] - randomType = String?
2021-03-12 04:27:16,458 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:27:16,497 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@213c1600]
2021-03-12 04:27:16,745 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:27:16,745 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b96532c]
2021-03-12 04:27:16,746 [main:78] - Generated call from random type = ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo"))
2021-03-12 04:27:16,747 [main:106] - GETTING Boolean from Continuation<Any?>
2021-03-12 04:27:16,757 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]]
2021-03-12 04:27:16,757 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3]
2021-03-12 04:27:16,996 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3c066b66]
2021-03-12 04:27:17,200 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:27:17,209 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(false)})).equals(null).and(true)
2021-03-12 04:27:17,209 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]]
2021-03-12 04:27:17,209 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3]
2021-03-12 04:27:17,449 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:27:17,449 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@31e0312f]
2021-03-12 04:27:17,449 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(false)})).equals("pbhth").equals(Kla0("jkydd").s)
2021-03-12 04:27:17,450 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@e4e2fdd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]]
2021-03-12 04:27:17,450 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36e83a79]
2021-03-12 04:27:17,684 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:27:17,684 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(false)})).context.equals("ccnnd")
2021-03-12 04:27:17,684 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3]]
2021-03-12 04:27:17,684 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3]
2021-03-12 04:27:17,892 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:27:17,893 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(false)})).equals("zbgco")
2021-03-12 04:27:17,893 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]]
2021-03-12 04:27:17,893 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3]
2021-03-12 04:27:18,127 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:27:18,127 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f51cdf4]
2021-03-12 04:27:18,368 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:27:18,380 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(false)})).equals("cwgwu").xor(false)
2021-03-12 04:27:18,380 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]]
2021-03-12 04:27:18,380 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3]
2021-03-12 04:27:18,380 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37754509]
2021-03-12 04:27:18,381 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(false)})).equals((Kla0("jkydd").s)).or((Kla9).equals("hpizo"))
2021-03-12 04:27:18,381 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7c66a842], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@55018f07]]
2021-03-12 04:27:18,381 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7c66a842]
2021-03-12 04:27:18,586 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 04:27:18,834 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:27:18,846 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:27:19,354 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 04:27:19,363 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:27:19,363 [main:95] - GENERATED = runCatching<Any?>({ "fiwrw"})
2021-03-12 04:27:19,363 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@55018f07]
2021-03-12 04:27:19,364 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(false)})).resumeWith(runCatching<Any?>({ "fiwrw"})).equals(Kla5().prope0)
2021-03-12 04:27:19,364 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]]
2021-03-12 04:27:19,364 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@36093cd3]
2021-03-12 04:27:19,599 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:27:19,599 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29ffc1f3]
2021-03-12 04:27:19,600 [main:117] - GENERATED CALL = (fu3({a: Throwable -> check(false)})).equals("ieupv").not()
2021-03-12 04:27:19,600 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo"))
2021-03-12 04:27:19,826 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:27:19,826 [main:66] - Compilation checking started
2021-03-12 04:27:20,736 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:20,739 [main:107] - replacing (c, Continuation<*>)
2021-03-12 04:27:20,739 [main:50] - replacing c Continuation<*>
2021-03-12 04:27:20,739 [main:54] - Getting value of type Continuation<*>
2021-03-12 04:27:20,984 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 04:27:21,238 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:27:21,249 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:27:22,090 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 04:27:22,354 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:27:22,365 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:27:22,945 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 04:27:23,193 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:27:23,205 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:27:24,066 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:27:24,067 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:27:24,067 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 04:27:24,067 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 04:27:24,085 [main:67] - randomType = Char
2021-03-12 04:27:24,289 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:27:24,317 [main:106] - GETTING Continuation<*> from Char
2021-03-12 04:27:24,335 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 04:27:24,338 [main:106] - GETTING Continuation<*> from UByte
2021-03-12 04:27:24,360 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,365 [main:106] - GETTING Continuation<*> from Map<Kla5, Array<ULong>>
2021-03-12 04:27:24,387 [main:106] - GETTING Continuation<*> from String
2021-03-12 04:27:24,404 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 04:27:24,410 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,411 [main:106] - GETTING Continuation<*> from Kla9
2021-03-12 04:27:24,428 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 04:27:24,429 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,429 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 04:27:24,439 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 04:27:24,440 [main:106] - GETTING Continuation<*> from Continuation<Any>?
2021-03-12 04:27:24,447 [main:106] - GETTING Continuation<*> from Kla3
2021-03-12 04:27:24,454 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,455 [main:106] - GETTING Continuation<*> from Kla9
2021-03-12 04:27:24,456 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 04:27:24,465 [main:106] - GETTING Continuation<*> from String
2021-03-12 04:27:24,466 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 04:27:24,467 [main:106] - GETTING Continuation<*> from Kla5
2021-03-12 04:27:24,481 [main:106] - GETTING Continuation<*> from String
2021-03-12 04:27:24,482 [main:106] - GETTING Continuation<*> from Function0<String>
2021-03-12 04:27:24,491 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 04:27:24,492 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 04:27:24,507 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,508 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 04:27:24,509 [main:106] - GETTING Continuation<*> from HashMap<Kla2?, ULong>
2021-03-12 04:27:24,622 [main:106] - GETTING Continuation<*> from Int
2021-03-12 04:27:24,652 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 04:27:24,653 [main:106] - GETTING Continuation<*> from UShort
2021-03-12 04:27:24,675 [main:106] - GETTING Continuation<*> from Int
2021-03-12 04:27:24,676 [main:106] - GETTING Continuation<*> from Continuation<Double>
2021-03-12 04:27:24,683 [main:106] - GETTING Continuation<*> from UByte
2021-03-12 04:27:24,684 [main:106] - GETTING Continuation<*> from Unit?
2021-03-12 04:27:24,687 [main:106] - GETTING Continuation<*> from String
2021-03-12 04:27:24,688 [main:106] - GETTING Continuation<*> from Double
2021-03-12 04:27:24,717 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 04:27:24,718 [main:106] - GETTING Continuation<*> from Unit?
2021-03-12 04:27:24,718 [main:106] - GETTING Continuation<*> from [ERROR : Class<T>]<T>
2021-03-12 04:27:24,722 [main:106] - GETTING Continuation<*> from Int
2021-03-12 04:27:24,723 [main:106] - GETTING Continuation<*> from Long
2021-03-12 04:27:24,752 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 04:27:24,760 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 04:27:24,761 [main:106] - GETTING Continuation<*> from String
2021-03-12 04:27:24,761 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,762 [main:106] - GETTING Continuation<*> from Byte
2021-03-12 04:27:24,793 [main:106] - GETTING Continuation<*> from Char
2021-03-12 04:27:24,794 [main:106] - GETTING Continuation<*> from HashMap<Kla2?, ULong>
2021-03-12 04:27:24,795 [main:106] - GETTING Continuation<*> from Long
2021-03-12 04:27:24,795 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 04:27:24,796 [main:106] - GETTING Continuation<*> from UByte
2021-03-12 04:27:24,797 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 04:27:24,798 [main:106] - GETTING Continuation<*> from UByte
2021-03-12 04:27:24,799 [main:106] - GETTING Continuation<*> from Int
2021-03-12 04:27:24,800 [main:106] - GETTING Continuation<*> from Array<ArrayDeque<Short>>
2021-03-12 04:27:24,816 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,817 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,818 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 04:27:24,819 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 04:27:24,820 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 04:27:24,821 [main:106] - GETTING Continuation<*> from UByte
2021-03-12 04:27:24,822 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 04:27:24,822 [main:106] - GETTING Continuation<*> from Array<ArrayDeque<Short>>
2021-03-12 04:27:24,823 [main:106] - GETTING Continuation<*> from Kla0
2021-03-12 04:27:24,824 [main:106] - GETTING Continuation<*> from Function0<String>
2021-03-12 04:27:24,825 [main:106] - GETTING Continuation<*> from Long
2021-03-12 04:27:24,826 [main:106] - GETTING Continuation<*> from Byte
2021-03-12 04:27:24,827 [main:106] - GETTING Continuation<*> from UByte
2021-03-12 04:27:24,828 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 04:27:24,828 [main:106] - GETTING Continuation<*> from String
2021-03-12 04:27:24,829 [main:106] - GETTING Continuation<*> from Int
2021-03-12 04:27:24,830 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 04:27:24,831 [main:106] - GETTING Continuation<*> from Kla1
2021-03-12 04:27:24,839 [main:106] - GETTING Continuation<*> from UByte
2021-03-12 04:27:24,840 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 04:27:24,841 [main:106] - GETTING Continuation<*> from UByte
2021-03-12 04:27:24,841 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 04:27:24,841 [main:107] - replacing (prope12, Kla15)
2021-03-12 04:27:24,842 [main:50] - replacing prope12 Kla15
2021-03-12 04:27:24,842 [main:54] - Getting value of type Kla15
2021-03-12 04:27:25,088 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-12 04:27:25,098 [main:112] - generating klass Kla15 text = class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 04:27:25,099 [main:58] - GENERATED VALUE OF TYPE Kla15 = Kla15()
2021-03-12 04:27:25,099 [main:61] - GENERATED IS CALL =true
2021-03-12 04:27:25,119 [main:67] - randomType = Short
2021-03-12 04:27:25,351 [main:302] - generating value of type = Short true depth = 0
2021-03-12 04:27:25,409 [main:106] - GETTING Kla15 from String
2021-03-12 04:27:25,439 [main:106] - GETTING Kla15 from Int
2021-03-12 04:27:25,472 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:27:25,493 [main:106] - GETTING Kla15 from Char
2021-03-12 04:27:25,510 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,514 [main:106] - GETTING Kla15 from Byte
2021-03-12 04:27:25,543 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:27:25,546 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:27:25,554 [main:106] - GETTING Kla15 from [ERROR : Class<T>]<T>
2021-03-12 04:27:25,556 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:27:25,557 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:27:25,558 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:27:25,558 [main:106] - GETTING Kla15 from Continuation<Double>
2021-03-12 04:27:25,566 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:27:25,566 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,567 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,567 [main:106] - GETTING Kla15 from Kla9
2021-03-12 04:27:25,584 [main:106] - GETTING Kla15 from Continuation<Any>?
2021-03-12 04:27:25,591 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-12 04:27:25,604 [main:106] - GETTING Kla15 from Int
2021-03-12 04:27:25,604 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:27:25,605 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:27:25,605 [main:106] - GETTING Kla15 from Kla9
2021-03-12 04:27:25,606 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:27:25,607 [main:106] - GETTING Kla15 from Long
2021-03-12 04:27:25,636 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-12 04:27:25,642 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:27:25,643 [main:106] - GETTING Kla15 from String
2021-03-12 04:27:25,644 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:27:25,644 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:27:25,645 [main:106] - GETTING Kla15 from Long
2021-03-12 04:27:25,645 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,646 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:27:25,646 [main:106] - GETTING Kla15 from Array<ArrayDeque<Short>>
2021-03-12 04:27:25,662 [main:106] - GETTING Kla15 from String
2021-03-12 04:27:25,663 [main:106] - GETTING Kla15 from Function0<String>
2021-03-12 04:27:25,672 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 04:27:25,682 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:27:25,682 [main:106] - GETTING Kla15 from Unit?
2021-03-12 04:27:25,685 [main:106] - GETTING Kla15 from Double
2021-03-12 04:27:25,713 [main:106] - GETTING Kla15 from Kla3
2021-03-12 04:27:25,719 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:27:25,720 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:27:25,720 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 04:27:25,725 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,726 [main:106] - GETTING Kla15 from Kla5
2021-03-12 04:27:25,739 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,739 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,740 [main:106] - GETTING Kla15 from Char
2021-03-12 04:27:25,740 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:27:25,741 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 04:27:25,742 [main:106] - GETTING Kla15 from Kla1
2021-03-12 04:27:25,749 [main:106] - GETTING Kla15 from HashMap<Kla2?, ULong>
2021-03-12 04:27:25,859 [main:106] - GETTING Kla15 from Int
2021-03-12 04:27:25,860 [main:106] - GETTING Kla15 from String
2021-03-12 04:27:25,861 [main:106] - GETTING Kla15 from UShort
2021-03-12 04:27:25,883 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 04:27:25,884 [main:106] - GETTING Kla15 from Function0<String>
2021-03-12 04:27:25,884 [main:106] - GETTING Kla15 from Array<ArrayDeque<Short>>
2021-03-12 04:27:25,885 [main:106] - GETTING Kla15 from Long
2021-03-12 04:27:25,886 [main:106] - GETTING Kla15 from Unit?
2021-03-12 04:27:25,886 [main:106] - GETTING Kla15 from Int
2021-03-12 04:27:25,887 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:27:25,888 [main:106] - GETTING Kla15 from Byte
2021-03-12 04:27:25,888 [main:106] - GETTING Kla15 from String
2021-03-12 04:27:25,889 [main:106] - GETTING Kla15 from Boolean
2021-03-12 04:27:25,889 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 04:27:25,890 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:27:25,891 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 04:27:25,891 [main:106] - GETTING Kla15 from Int
2021-03-12 04:27:25,892 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,892 [main:106] - GETTING Kla15 from Kla0
2021-03-12 04:27:25,893 [main:106] - GETTING Kla15 from HashMap<Kla2?, ULong>
2021-03-12 04:27:25,894 [main:106] - GETTING Kla15 from Map<Kla5, Array<ULong>>
2021-03-12 04:27:25,920 [main:106] - GETTING Kla15 from UByte
2021-03-12 04:27:25,921 [main:106] - GETTING Kla15 from String
2021-03-12 04:27:25,921 [main:106] - GETTING Kla15 from Any?
2021-03-12 04:27:25,922 [main:114] - replacement of prope12 of type Kla15 is Kla15()
2021-03-12 04:27:26,162 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:27:26,163 [main:66] - Compilation checking started
2021-03-12 04:27:27,121 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:27,124 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 04:27:27,124 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 04:27:27,124 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 04:27:27,372 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 04:27:27,387 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 04:27:27,409 [main:67] - randomType = Char
2021-03-12 04:27:27,642 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:27:27,677 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:27,684 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 04:27:27,725 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 04:27:27,734 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:27,734 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 04:27:27,746 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla5().context
2021-03-12 04:27:27,984 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:27:27,984 [main:66] - Compilation checking started
2021-03-12 04:27:28,922 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:28,926 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-12 04:27:28,926 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-12 04:27:28,926 [main:54] - Getting value of type String
2021-03-12 04:27:29,188 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:27:29,198 [main:58] - GENERATED VALUE OF TYPE String = "utcgs"
2021-03-12 04:27:29,198 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:29,242 [main:67] - randomType = String?
2021-03-12 04:27:29,493 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:27:29,536 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@213c1600]
2021-03-12 04:27:29,537 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2acaed18]
2021-03-12 04:27:29,796 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:29,811 [main:78] - Generated call from random type = ("pertj")?.plus((Kla3().fu7()).s).removeSurrounding(StringBuilder())
2021-03-12 04:27:29,812 [main:106] - GETTING String from Array<ArrayDeque<Short>>
2021-03-12 04:27:29,834 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@c850aa8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:27:29,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:27:29,834 [main:117] - GENERATED CALL = ((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).size.toString((hashMapOf<Kla2?, ULong>()).size)
2021-03-12 04:27:29,835 [main:113] - Case = [public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@491e2270]]
2021-03-12 04:27:29,835 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@491e2270]
2021-03-12 04:27:30,088 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:30,362 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:30,627 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:30,865 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:31,137 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 04:27:31,149 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 04:27:31,163 [main:117] - GENERATED CALL = ((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).joinToString("txrhp", "gnkax", StringBuilder(), (19855.toUByte()).toByte().div(-491068702), StringBuilder(), {a: T -> StringBuilder()})
2021-03-12 04:27:31,163 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5571e88e]]
2021-03-12 04:27:31,163 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5571e88e]
2021-03-12 04:27:31,163 [main:117] - GENERATED CALL = ((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString()
2021-03-12 04:27:31,163 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60dac476]]
2021-03-12 04:27:31,163 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60dac476]
2021-03-12 04:27:31,163 [main:117] - GENERATED CALL = ((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentToString()
2021-03-12 04:27:31,163 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is ((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString()
2021-03-12 04:27:31,395 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:27:31,395 [main:66] - Compilation checking started
2021-03-12 04:27:32,338 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:32,342 [main:107] - replacing (", got ", String)
2021-03-12 04:27:32,342 [main:50] - replacing ", got " String
2021-03-12 04:27:32,342 [main:54] - Getting value of type String
2021-03-12 04:27:32,643 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:27:32,655 [main:58] - GENERATED VALUE OF TYPE String = "qkfgn"
2021-03-12 04:27:32,655 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:32,680 [main:67] - randomType = UByte
2021-03-12 04:27:32,920 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:27:32,968 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3dc4066]
2021-03-12 04:27:32,969 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d1f6263]
2021-03-12 04:27:33,204 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:27:33,216 [main:78] - Generated call from random type = (57.toUByte()).toLong().toString(1383378338)
2021-03-12 04:27:33,217 [main:106] - GETTING String from Map<Kla5, Array<ULong>>
2021-03-12 04:27:33,244 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.Map[DeserializedPropertyDescriptor@48aaae2f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:27:33,244 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:27:33,244 [main:117] - GENERATED CALL = (fu1<Map<Kla5, Array<ULong>>>()).size.toString((hashMapOf<Kla2?, ULong>()).size)
2021-03-12 04:27:33,244 [main:113] - Case = [public abstract operator fun get(key: Kla5): kotlin.Array<kotlin.ULong>? defined in kotlin.collections.Map[DeserializedSimpleFunctionDescriptor@775004e9], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5571e88e]]
2021-03-12 04:27:33,244 [main:149] - GENERATING call of type public abstract operator fun get(key: Kla5): kotlin.Array<kotlin.ULong>? defined in kotlin.collections.Map[DeserializedSimpleFunctionDescriptor@775004e9]
2021-03-12 04:27:33,244 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5571e88e]
2021-03-12 04:27:33,245 [main:117] - GENERATED CALL = (fu1<Map<Kla5, Array<ULong>>>()).get(Kla5())?.contentDeepToString()
2021-03-12 04:27:33,245 [main:113] - Case = [public abstract operator fun get(key: Kla5): kotlin.Array<kotlin.ULong>? defined in kotlin.collections.Map[DeserializedSimpleFunctionDescriptor@775004e9], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60dac476]]
2021-03-12 04:27:33,245 [main:149] - GENERATING call of type public abstract operator fun get(key: Kla5): kotlin.Array<kotlin.ULong>? defined in kotlin.collections.Map[DeserializedSimpleFunctionDescriptor@775004e9]
2021-03-12 04:27:33,245 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60dac476]
2021-03-12 04:27:33,245 [main:117] - GENERATED CALL = (fu1<Map<Kla5, Array<ULong>>>()).get(Kla5())?.contentToString()
2021-03-12 04:27:33,245 [main:113] - Case = [public abstract operator fun get(key: Kla5): kotlin.Array<kotlin.ULong>? defined in kotlin.collections.Map[DeserializedSimpleFunctionDescriptor@775004e9], public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@491e2270]]
2021-03-12 04:27:33,245 [main:149] - GENERATING call of type public abstract operator fun get(key: Kla5): kotlin.Array<kotlin.ULong>? defined in kotlin.collections.Map[DeserializedSimpleFunctionDescriptor@775004e9]
2021-03-12 04:27:33,245 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@491e2270]
2021-03-12 04:27:33,479 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:33,705 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 04:27:33,716 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 04:27:34,269 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:27:34,279 [main:95] - GENERATED = StringBuilder("egvsi")
2021-03-12 04:27:34,562 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:34,806 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:35,029 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:27:35,274 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:27:35,564 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 04:27:35,574 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 04:27:35,835 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:27:35,847 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:27:36,362 [main:302] - generating value of type = Int true depth = 4
2021-03-12 04:27:36,371 [main:95] - GENERATED = StringBuilder(-145680530)
2021-03-12 04:27:36,372 [main:117] - GENERATED CALL = (fu1<Map<Kla5, Array<ULong>>>()).get(Kla5())?.joinToString(StringBuilder("egvsi"), "vpvty", "rshdw", -454518664, "khabm", {a: T -> StringBuilder(-145680530)})
2021-03-12 04:27:36,372 [main:114] - replacement of ", got " of type String is (fu1<Map<Kla5, Array<ULong>>>()).size.toString((hashMapOf<Kla2?, ULong>()).size)
2021-03-12 04:27:36,613 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:27:36,614 [main:66] - Compilation checking started
2021-03-12 04:27:37,286 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { (Kla9)?.equals("hyacv").equals("lqkeo") }?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (fu1<Map<Kla5, Array<ULong>>>()).size.toString((hashMapOf<Kla2?, ULong>()).size) + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:37,291 [main:107] - replacing ({ (Kla9)?.equals("hyacv").equals("lqkeo") }, Function0<Boolean>)
2021-03-12 04:27:37,291 [main:50] - replacing { (Kla9)?.equals("hyacv").equals("lqkeo") } Function0<Boolean>
2021-03-12 04:27:37,292 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 04:27:37,561 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 04:27:37,570 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:27:37,580 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 04:27:37,580 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:37,618 [main:67] - randomType = Kla2
2021-03-12 04:27:37,858 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 04:27:37,869 [main:112] - generating klass Kla2 text = class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}
2021-03-12 04:27:37,882 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 04:27:37,893 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-12 04:27:37,917 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 04:27:37,923 [main:106] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-12 04:27:37,934 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:37,939 [main:106] - GETTING Function0<Boolean> from Kla1
2021-03-12 04:27:37,946 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 04:27:37,977 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 04:27:37,982 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 04:27:37,983 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 04:27:37,984 [main:106] - GETTING Function0<Boolean> from Continuation<Any>?
2021-03-12 04:27:37,992 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 04:27:38,024 [main:106] - GETTING Function0<Boolean> from Byte
2021-03-12 04:27:38,058 [main:106] - GETTING Function0<Boolean> from Continuation<Double>
2021-03-12 04:27:38,065 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-12 04:27:38,066 [main:106] - GETTING Function0<Boolean> from Kla3
2021-03-12 04:27:38,075 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 04:27:38,077 [main:106] - GETTING Function0<Boolean> from Continuation<Any?>
2021-03-12 04:27:38,085 [main:106] - GETTING Function0<Boolean> from Char
2021-03-12 04:27:38,105 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:38,106 [main:106] - GETTING Function0<Boolean> from Kla9
2021-03-12 04:27:38,125 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 04:27:38,126 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 04:27:38,127 [main:106] - GETTING Function0<Boolean> from [ERROR : Class<T>]<T>
2021-03-12 04:27:38,131 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 04:27:38,152 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 04:27:38,153 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-12 04:27:38,154 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-12 04:27:38,155 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:38,156 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 04:27:38,157 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:38,158 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 04:27:38,159 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:38,160 [main:106] - GETTING Function0<Boolean> from UShort
2021-03-12 04:27:38,185 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:38,186 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 04:27:38,187 [main:106] - GETTING Function0<Boolean> from Byte
2021-03-12 04:27:38,188 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 04:27:38,189 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 04:27:38,190 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 04:27:38,192 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 04:27:38,193 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 04:27:38,195 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 04:27:38,197 [main:106] - GETTING Function0<Boolean> from Double
2021-03-12 04:27:38,228 [main:106] - GETTING Function0<Boolean> from HashMap<Kla2?, ULong>
2021-03-12 04:27:38,348 [main:106] - GETTING Function0<Boolean> from Function0<String>
2021-03-12 04:27:38,358 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 04:27:38,359 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 04:27:38,360 [main:106] - GETTING Function0<Boolean> from Char
2021-03-12 04:27:38,361 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:38,362 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 04:27:38,363 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-12 04:27:38,364 [main:106] - GETTING Function0<Boolean> from Unit?
2021-03-12 04:27:38,369 [main:106] - GETTING Function0<Boolean> from Kla5
2021-03-12 04:27:38,382 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-12 04:27:38,383 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:38,384 [main:106] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-12 04:27:38,385 [main:106] - GETTING Function0<Boolean> from Function0<String>
2021-03-12 04:27:38,386 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 04:27:38,387 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 04:27:38,388 [main:106] - GETTING Function0<Boolean> from HashMap<Kla2?, ULong>
2021-03-12 04:27:38,389 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 04:27:38,390 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 04:27:38,391 [main:106] - GETTING Function0<Boolean> from Unit?
2021-03-12 04:27:38,392 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 04:27:38,393 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-12 04:27:38,394 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 04:27:38,395 [main:106] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-12 04:27:38,396 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 04:27:38,397 [main:106] - GETTING Function0<Boolean> from EmptyCoroutineContext
2021-03-12 04:27:38,412 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 04:27:38,413 [main:106] - GETTING Function0<Boolean> from Array<ArrayDeque<Short>>
2021-03-12 04:27:38,429 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-12 04:27:38,430 [main:106] - GETTING Function0<Boolean> from Array<ArrayDeque<Short>>
2021-03-12 04:27:38,431 [main:106] - GETTING Function0<Boolean> from Map<Kla5, Array<ULong>>
2021-03-12 04:27:38,454 [main:106] - GETTING Function0<Boolean> from Kla9
2021-03-12 04:27:38,455 [main:106] - GETTING Function0<Boolean> from UByte
2021-03-12 04:27:38,455 [main:114] - replacement of { (Kla9)?.equals("hyacv").equals("lqkeo") } of type Function0<Boolean> is { true}
2021-03-12 04:27:38,717 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:27:38,718 [main:66] - Compilation checking started
2021-03-12 04:27:39,841 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:39,844 [main:107] - replacing (prope14.exceptionOrNull()!!, Throwable)
2021-03-12 04:27:39,846 [main:50] - replacing prope14.exceptionOrNull()!! Throwable
2021-03-12 04:27:39,846 [main:54] - Getting value of type Throwable
2021-03-12 04:27:40,101 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 04:27:40,346 [main:43] - GENERATING CALL OF fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 04:27:40,357 [main:61] - WITHOUT TYPE PARAMS = fun CharacterCodingException(message: kotlin.String?): Throwable = TODO()
2021-03-12 04:27:40,892 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:27:40,902 [main:95] - GENERATED = CharacterCodingException("uhvsn")
2021-03-12 04:27:40,902 [main:58] - GENERATED VALUE OF TYPE Throwable = CharacterCodingException("uhvsn")
2021-03-12 04:27:40,903 [main:61] - GENERATED IS CALL =true
2021-03-12 04:27:41,246 [main:67] - randomType = Sequence<Kla5>
2021-03-12 04:27:41,247 [main:106] - GETTING Throwable from Function0<String>
2021-03-12 04:27:41,261 [main:106] - GETTING Throwable from Boolean
2021-03-12 04:27:41,270 [main:106] - GETTING Throwable from UByte
2021-03-12 04:27:41,294 [main:106] - GETTING Throwable from [ERROR : Class<T>]<T>
2021-03-12 04:27:41,300 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 04:27:41,306 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,311 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 04:27:41,319 [main:106] - GETTING Throwable from Byte
2021-03-12 04:27:41,351 [main:106] - GETTING Throwable from HashMap<Kla2?, ULong>
2021-03-12 04:27:41,470 [main:106] - GETTING Throwable from Int
2021-03-12 04:27:41,503 [main:106] - GETTING Throwable from Array<ArrayDeque<Short>>
2021-03-12 04:27:41,520 [main:106] - GETTING Throwable from Long
2021-03-12 04:27:41,551 [main:106] - GETTING Throwable from UByte
2021-03-12 04:27:41,552 [main:106] - GETTING Throwable from UByte
2021-03-12 04:27:41,553 [main:106] - GETTING Throwable from Any?
2021-03-12 04:27:41,557 [main:106] - GETTING Throwable from UShort
2021-03-12 04:27:41,580 [main:106] - GETTING Throwable from Kla3
2021-03-12 04:27:41,589 [main:106] - GETTING Throwable from Char
2021-03-12 04:27:41,607 [main:106] - GETTING Throwable from Map<Kla5, Array<ULong>>
2021-03-12 04:27:41,633 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 04:27:41,642 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,643 [main:106] - GETTING Throwable from Char
2021-03-12 04:27:41,644 [main:106] - GETTING Throwable from String
2021-03-12 04:27:41,663 [main:106] - GETTING Throwable from Continuation<Any>?
2021-03-12 04:27:41,670 [main:106] - GETTING Throwable from String
2021-03-12 04:27:41,671 [main:106] - GETTING Throwable from UByte
2021-03-12 04:27:41,672 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,674 [main:106] - GETTING Throwable from Any?
2021-03-12 04:27:41,676 [main:106] - GETTING Throwable from Unit?
2021-03-12 04:27:41,680 [main:106] - GETTING Throwable from Int
2021-03-12 04:27:41,681 [main:106] - GETTING Throwable from Boolean
2021-03-12 04:27:41,682 [main:106] - GETTING Throwable from Function0<String>
2021-03-12 04:27:41,683 [main:106] - GETTING Throwable from Kla1
2021-03-12 04:27:41,690 [main:106] - GETTING Throwable from Long
2021-03-12 04:27:41,692 [main:106] - GETTING Throwable from Int
2021-03-12 04:27:41,692 [main:106] - GETTING Throwable from Any?
2021-03-12 04:27:41,693 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,694 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,696 [main:106] - GETTING Throwable from Kla5
2021-03-12 04:27:41,711 [main:106] - GETTING Throwable from Boolean
2021-03-12 04:27:41,712 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 04:27:41,713 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 04:27:41,714 [main:106] - GETTING Throwable from UByte
2021-03-12 04:27:41,715 [main:106] - GETTING Throwable from Boolean
2021-03-12 04:27:41,716 [main:106] - GETTING Throwable from Byte
2021-03-12 04:27:41,717 [main:106] - GETTING Throwable from String
2021-03-12 04:27:41,719 [main:106] - GETTING Throwable from UByte
2021-03-12 04:27:41,720 [main:106] - GETTING Throwable from Int
2021-03-12 04:27:41,722 [main:106] - GETTING Throwable from Kla9
2021-03-12 04:27:41,740 [main:106] - GETTING Throwable from Array<ArrayDeque<Short>>
2021-03-12 04:27:41,742 [main:106] - GETTING Throwable from Double
2021-03-12 04:27:41,773 [main:106] - GETTING Throwable from Boolean
2021-03-12 04:27:41,774 [main:106] - GETTING Throwable from Int
2021-03-12 04:27:41,775 [main:106] - GETTING Throwable from Continuation<Double>
2021-03-12 04:27:41,783 [main:106] - GETTING Throwable from Any?
2021-03-12 04:27:41,784 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 04:27:41,785 [main:106] - GETTING Throwable from String
2021-03-12 04:27:41,787 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,789 [main:106] - GETTING Throwable from UByte
2021-03-12 04:27:41,790 [main:106] - GETTING Throwable from Any?
2021-03-12 04:27:41,791 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 04:27:41,792 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 04:27:41,806 [main:106] - GETTING Throwable from Boolean
2021-03-12 04:27:41,807 [main:106] - GETTING Throwable from Any?
2021-03-12 04:27:41,809 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,811 [main:106] - GETTING Throwable from String
2021-03-12 04:27:41,812 [main:106] - GETTING Throwable from Boolean
2021-03-12 04:27:41,813 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,814 [main:106] - GETTING Throwable from Unit?
2021-03-12 04:27:41,815 [main:106] - GETTING Throwable from Kla9
2021-03-12 04:27:41,816 [main:106] - GETTING Throwable from HashMap<Kla2?, ULong>
2021-03-12 04:27:41,817 [main:106] - GETTING Throwable from Long
2021-03-12 04:27:41,818 [main:106] - GETTING Throwable from Any?
2021-03-12 04:27:41,819 [main:106] - GETTING Throwable from Any?
2021-03-12 04:27:41,820 [main:106] - GETTING Throwable from String
2021-03-12 04:27:41,821 [main:106] - GETTING Throwable from Kla0
2021-03-12 04:27:41,822 [main:106] - GETTING Throwable from UByte
2021-03-12 04:27:41,822 [main:114] - replacement of prope14.exceptionOrNull()!! of type Throwable is CharacterCodingException("uhvsn")
2021-03-12 04:27:42,066 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:27:42,069 [main:107] - replacing (prope13, String)
2021-03-12 04:27:42,070 [main:50] - replacing prope13 String
2021-03-12 04:27:42,070 [main:54] - Getting value of type String
2021-03-12 04:27:42,307 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:27:42,316 [main:58] - GENERATED VALUE OF TYPE String = "yuytn"
2021-03-12 04:27:42,317 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:42,354 [main:67] - randomType = Kla12
2021-03-12 04:27:42,562 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-12 04:27:42,571 [main:112] - generating klass Kla12 text = class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}
2021-03-12 04:27:42,586 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:27:42,586 [main:78] - Generated call from random type = (Kla12()).prope14?.toString()!!
2021-03-12 04:27:42,587 [main:106] - GETTING String from Kla0
2021-03-12 04:27:42,590 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@7a5efcb], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:27:42,591 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:27:42,591 [main:117] - GENERATED CALL = (Kla2().fu7()).s?.toString()
2021-03-12 04:27:42,591 [main:114] - replacement of prope13 of type String is (Kla2().fu7()).s?.toString()
2021-03-12 04:27:42,842 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:27:42,843 [main:66] - Compilation checking started
2021-03-12 04:27:43,518 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return (Kla2().fu7()).s?.toString()
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:43,522 [main:107] - replacing (prope14, Result<Ty1>)
2021-03-12 04:27:43,522 [main:50] - replacing prope14 Result<Ty1>
2021-03-12 04:27:43,522 [main:54] - Getting value of type Result<Ty1>
2021-03-12 04:27:43,772 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-12 04:27:44,017 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 04:27:44,028 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 04:27:44,572 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 04:27:44,572 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-12 04:27:45,220 [main:67] - randomType = Map<Kla11, UInt>
2021-03-12 04:27:45,221 [main:106] - GETTING Result<Ty1> from Array<ArrayDeque<Short>>
2021-03-12 04:27:45,243 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:27:45,277 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:27:45,299 [main:106] - GETTING Result<Ty1> from Function0<String>
2021-03-12 04:27:45,312 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:27:45,323 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:27:45,325 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,342 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:27:45,343 [main:106] - GETTING Result<Ty1> from Char
2021-03-12 04:27:45,371 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,372 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 04:27:45,381 [main:106] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-12 04:27:45,391 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 04:27:45,392 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:27:45,443 [main:106] - GETTING Result<Ty1> from Map<Kla5, Array<ULong>>
2021-03-12 04:27:45,473 [main:106] - GETTING Result<Ty1> from Unit?
2021-03-12 04:27:45,480 [main:106] - GETTING Result<Ty1> from Byte
2021-03-12 04:27:45,537 [main:106] - GETTING Result<Ty1> from Kla1
2021-03-12 04:27:45,552 [main:106] - GETTING Result<Ty1> from Long
2021-03-12 04:27:45,588 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:27:45,590 [main:106] - GETTING Result<Ty1> from Kla9
2021-03-12 04:27:45,607 [main:106] - GETTING Result<Ty1> from Long
2021-03-12 04:27:45,609 [main:106] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-12 04:27:45,625 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,626 [main:106] - GETTING Result<Ty1> from Continuation<Double>
2021-03-12 04:27:45,636 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:27:45,637 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:27:45,638 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,639 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:27:45,643 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:27:45,644 [main:106] - GETTING Result<Ty1> from UShort
2021-03-12 04:27:45,669 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 04:27:45,670 [main:106] - GETTING Result<Ty1> from Continuation<Any>?
2021-03-12 04:27:45,680 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 04:27:45,689 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:27:45,691 [main:106] - GETTING Result<Ty1> from Array<ArrayDeque<Short>>
2021-03-12 04:27:45,692 [main:106] - GETTING Result<Ty1> from Char
2021-03-12 04:27:45,693 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,694 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:27:45,695 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:27:45,697 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:27:45,699 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:27:45,700 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:27:45,702 [main:106] - GETTING Result<Ty1> from Double
2021-03-12 04:27:45,733 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:27:45,734 [main:106] - GETTING Result<Ty1> from Kla9
2021-03-12 04:27:45,736 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:27:45,737 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:27:45,738 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 04:27:45,739 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:27:45,740 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:27:45,742 [main:106] - GETTING Result<Ty1> from Kla5
2021-03-12 04:27:45,760 [main:106] - GETTING Result<Ty1> from Kla3
2021-03-12 04:27:45,770 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:27:45,772 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:27:45,773 [main:106] - GETTING Result<Ty1> from HashMap<Kla2?, ULong>
2021-03-12 04:27:45,909 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:27:45,910 [main:106] - GETTING Result<Ty1> from UByte
2021-03-12 04:27:45,911 [main:106] - GETTING Result<Ty1> from Byte
2021-03-12 04:27:45,912 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:27:45,914 [main:106] - GETTING Result<Ty1> from String
2021-03-12 04:27:45,915 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,916 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:27:45,917 [main:106] - GETTING Result<Ty1> from [ERROR : Class<T>]<T>
2021-03-12 04:27:45,923 [main:106] - GETTING Result<Ty1> from Int
2021-03-12 04:27:45,924 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:27:45,925 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 04:27:45,926 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:27:45,927 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 04:27:45,929 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,930 [main:106] - GETTING Result<Ty1> from Long
2021-03-12 04:27:45,931 [main:106] - GETTING Result<Ty1> from Function0<String>
2021-03-12 04:27:45,932 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 04:27:45,933 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,934 [main:106] - GETTING Result<Ty1> from HashMap<Kla2?, ULong>
2021-03-12 04:27:45,936 [main:106] - GETTING Result<Ty1> from Kla0
2021-03-12 04:27:45,937 [main:106] - GETTING Result<Ty1> from Unit?
2021-03-12 04:27:45,937 [main:111] - Cant find and generate replacement for prope14 type Result<Ty1>
2021-03-12 04:27:45,937 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16, String)
2021-03-12 04:27:45,937 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16 String
2021-03-12 04:27:45,937 [main:54] - Getting value of type String
2021-03-12 04:27:46,195 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:27:46,205 [main:58] - GENERATED VALUE OF TYPE String = "zhwji"
2021-03-12 04:27:46,205 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:46,548 [main:67] - randomType = Sequence<Kla1>
2021-03-12 04:27:46,550 [main:106] - GETTING String from Boolean
2021-03-12 04:27:46,561 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]]
2021-03-12 04:27:46,561 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4eba05c0]
2021-03-12 04:27:46,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@319fe6a6]
2021-03-12 04:27:46,562 [main:117] - GENERATED CALL = ((0.2958644149240166).toChar().lowercase() != "KOL").compareTo(Kla8().prope6).toString((hashMapOf<Kla2?, ULong>()).size)
2021-03-12 04:27:46,562 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16 of type String is "zhwji"
2021-03-12 04:27:46,817 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:27:46,818 [main:66] - Compilation checking started
2021-03-12 04:27:47,762 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:47,765 [main:107] - replacing (c, SuspendFunction0<String>)
2021-03-12 04:27:47,766 [main:50] - replacing c SuspendFunction0<String>
2021-03-12 04:27:47,766 [main:54] - Getting value of type SuspendFunction0<String>
2021-03-12 04:27:48,021 [main:302] - generating value of type = SuspendFunction0<String> false depth = 0
2021-03-12 04:27:48,030 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:27:48,041 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<String> = { "sahag"}
2021-03-12 04:27:48,041 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:48,082 [main:67] - randomType = Kla0
2021-03-12 04:27:48,322 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:27:48,331 [main:112] - generating klass Kla0 text = @Suppress("vopgl")
inline class Kla0(val s: Any?)
2021-03-12 04:27:48,590 [main:194] - Type params = []
2021-03-12 04:27:48,835 [main:302] - generating value of type = Any false depth = 2
2021-03-12 04:27:48,843 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:27:48,857 [main:106] - GETTING SuspendFunction0<String> from Array<ArrayDeque<Short>>
2021-03-12 04:27:48,879 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:27:48,885 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:27:48,886 [main:106] - GETTING SuspendFunction0<String> from Map<Kla5, Array<ULong>>
2021-03-12 04:27:48,918 [main:106] - GETTING SuspendFunction0<String> from Unit?
2021-03-12 04:27:48,924 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:27:48,938 [main:106] - GETTING SuspendFunction0<String> from Char
2021-03-12 04:27:48,956 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:27:48,963 [main:106] - GETTING SuspendFunction0<String> from Kla1
2021-03-12 04:27:48,970 [main:106] - GETTING SuspendFunction0<String> from Kla5
2021-03-12 04:27:48,984 [main:106] - GETTING SuspendFunction0<String> from Double
2021-03-12 04:27:49,014 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:27:49,015 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:27:49,033 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,038 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:27:49,069 [main:106] - GETTING SuspendFunction0<String> from Kla9
2021-03-12 04:27:49,088 [main:106] - GETTING SuspendFunction0<String> from Kla3
2021-03-12 04:27:49,096 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:27:49,097 [main:106] - GETTING SuspendFunction0<String> from Continuation<Any?>
2021-03-12 04:27:49,104 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:27:49,105 [main:106] - GETTING SuspendFunction0<String> from [ERROR : Class<T>]<T>
2021-03-12 04:27:49,109 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:27:49,133 [main:106] - GETTING SuspendFunction0<String> from Unit?
2021-03-12 04:27:49,134 [main:106] - GETTING SuspendFunction0<String> from Kla9
2021-03-12 04:27:49,135 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:27:49,136 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:27:49,169 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:27:49,170 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:27:49,170 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:27:49,171 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:27:49,172 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:27:49,173 [main:106] - GETTING SuspendFunction0<String> from Char
2021-03-12 04:27:49,174 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:27:49,175 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,176 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:27:49,177 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,178 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:27:49,179 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:27:49,179 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,180 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:27:49,181 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:27:49,182 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:27:49,184 [main:106] - GETTING SuspendFunction0<String> from Function0<String>
2021-03-12 04:27:49,195 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:27:49,196 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,197 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:27:49,197 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:27:49,198 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,199 [main:106] - GETTING SuspendFunction0<String> from HashMap<Kla2?, ULong>
2021-03-12 04:27:49,322 [main:106] - GETTING SuspendFunction0<String> from Function0<String>
2021-03-12 04:27:49,323 [main:106] - GETTING SuspendFunction0<String> from UShort
2021-03-12 04:27:49,348 [main:106] - GETTING SuspendFunction0<String> from Continuation<Any>?
2021-03-12 04:27:49,355 [main:106] - GETTING SuspendFunction0<String> from HashMap<Kla2?, ULong>
2021-03-12 04:27:49,356 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:27:49,357 [main:106] - GETTING SuspendFunction0<String> from EmptyCoroutineContext
2021-03-12 04:27:49,373 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:27:49,374 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:27:49,375 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:27:49,376 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:27:49,377 [main:106] - GETTING SuspendFunction0<String> from Byte
2021-03-12 04:27:49,412 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:27:49,413 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:27:49,414 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,415 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,415 [main:106] - GETTING SuspendFunction0<String> from Continuation<Double>
2021-03-12 04:27:49,423 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:27:49,424 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:27:49,425 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:27:49,426 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:27:49,427 [main:106] - GETTING SuspendFunction0<String> from Array<ArrayDeque<Short>>
2021-03-12 04:27:49,428 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:27:49,429 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:27:49,431 [main:106] - GETTING SuspendFunction0<String> from Byte
2021-03-12 04:27:49,433 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:27:49,433 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:27:49,434 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:27:49,434 [main:114] - replacement of c of type SuspendFunction0<String> is { "sahag"}
2021-03-12 04:27:49,689 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 04:27:49,689 [main:66] - Compilation checking started
2021-03-12 04:27:50,536 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = { "sahag"} is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:50,540 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 04:27:50,541 [main:50] - replacing {} Function0<Unit>
2021-03-12 04:27:50,541 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:27:50,776 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:27:50,785 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:27:51,035 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:27:51,046 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:27:51,602 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:27:51,612 [main:95] - GENERATED = check(true)
2021-03-12 04:27:51,612 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 04:27:51,612 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:51,633 [main:67] - randomType = Int
2021-03-12 04:27:51,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:27:51,929 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 04:27:51,957 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 04:27:51,959 [main:106] - GETTING Function0<Unit> from UByte
2021-03-12 04:27:51,981 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 04:27:51,985 [main:106] - GETTING Function0<Unit> from Array<ArrayDeque<Short>>
2021-03-12 04:27:52,001 [main:106] - GETTING Function0<Unit> from Kla5
2021-03-12 04:27:52,015 [main:106] - GETTING Function0<Unit> from Char
2021-03-12 04:27:52,037 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 04:27:52,038 [main:106] - GETTING Function0<Unit> from HashMap<Kla2?, ULong>
2021-03-12 04:27:52,157 [main:106] - GETTING Function0<Unit> from String
2021-03-12 04:27:52,174 [main:106] - GETTING Function0<Unit> from Continuation<Any>?
2021-03-12 04:27:52,182 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 04:27:52,188 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 04:27:52,191 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 04:27:52,192 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 04:27:52,193 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 04:27:52,223 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 04:27:52,224 [main:106] - GETTING Function0<Unit> from Kla9
2021-03-12 04:27:52,241 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 04:27:52,242 [main:106] - GETTING Function0<Unit> from [ERROR : Class<T>]<T>
2021-03-12 04:27:52,245 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 04:27:52,253 [main:114] - replacement of {} of type Function0<Unit> is { check(true)}
2021-03-12 04:27:52,497 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:27:52,498 [main:66] - Compilation checking started
2021-03-12 04:27:53,440 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:53,444 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 04:27:53,444 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 04:27:53,444 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 04:27:53,693 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 04:27:53,705 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 04:27:53,727 [main:67] - randomType = Int
2021-03-12 04:27:53,959 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:27:54,014 [main:106] - GETTING EmptyCoroutineContext from Array<ArrayDeque<Short>>
2021-03-12 04:27:54,036 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 04:27:54,059 [main:106] - GETTING EmptyCoroutineContext from Array<ArrayDeque<Short>>
2021-03-12 04:27:54,060 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-12 04:27:54,077 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 04:27:54,081 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 04:27:54,081 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 04:27:54,089 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 04:27:54,090 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 04:27:54,118 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 04:27:54,119 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 04:27:54,119 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 04:27:54,128 [main:106] - GETTING EmptyCoroutineContext from Function0<String>
2021-03-12 04:27:54,137 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-12 04:27:54,138 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 04:27:54,143 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 04:27:54,172 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:54,176 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 04:27:54,177 [main:106] - GETTING EmptyCoroutineContext from UShort
2021-03-12 04:27:54,199 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 04:27:54,199 [main:106] - GETTING EmptyCoroutineContext from Double
2021-03-12 04:27:54,226 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 04:27:54,227 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 04:27:54,228 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-12 04:27:54,250 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 04:27:54,250 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 04:27:54,251 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:54,251 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:54,252 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 04:27:54,253 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 04:27:54,253 [main:106] - GETTING EmptyCoroutineContext from [ERROR : Class<T>]<T>
2021-03-12 04:27:54,257 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any>?
2021-03-12 04:27:54,265 [main:106] - GETTING EmptyCoroutineContext from Map<Kla5, Array<ULong>>
2021-03-12 04:27:54,288 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 04:27:54,288 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:54,289 [main:106] - GETTING EmptyCoroutineContext from Kla1
2021-03-12 04:27:54,296 [main:106] - GETTING EmptyCoroutineContext from Unit?
2021-03-12 04:27:54,299 [main:106] - GETTING EmptyCoroutineContext from Kla3
2021-03-12 04:27:54,305 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 04:27:54,306 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:54,307 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 04:27:54,307 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:54,308 [main:106] - GETTING EmptyCoroutineContext from UByte
2021-03-12 04:27:54,309 [main:106] - GETTING EmptyCoroutineContext from Byte
2021-03-12 04:27:54,339 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 04:27:54,339 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 04:27:54,340 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 04:27:54,341 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 04:27:54,347 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 04:27:54,359 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla5().context
2021-03-12 04:27:54,615 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:27:54,615 [main:66] - Compilation checking started
2021-03-12 04:27:55,698 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla5().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:55,702 [main:107] - replacing ({
            prope12.prope17 = true
        }, Function0<Unit>)
2021-03-12 04:27:55,702 [main:50] - replacing {
            prope12.prope17 = true
        } Function0<Unit>
2021-03-12 04:27:55,702 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:27:55,947 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:27:55,957 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:27:56,200 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:27:56,212 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:27:56,794 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 04:27:56,804 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 04:27:57,048 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:27:57,059 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:27:57,589 [main:302] - generating value of type = Any false depth = 8
2021-03-12 04:27:57,590 [main:95] - GENERATED = println("hxyss")
2021-03-12 04:27:57,590 [main:95] - GENERATED = contract({ println("hxyss")})
2021-03-12 04:27:57,590 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("hxyss")})}
2021-03-12 04:27:57,590 [main:61] - GENERATED IS CALL =false
2021-03-12 04:27:57,629 [main:67] - randomType = Kla14
2021-03-12 04:27:57,857 [main:302] - generating value of type = Kla14 false depth = 0
2021-03-12 04:27:57,866 [main:112] - generating klass Kla14 text = class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}
2021-03-12 04:27:57,875 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 04:27:57,888 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 04:27:57,896 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 04:27:57,901 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 04:27:57,902 [main:106] - GETTING Function0<Unit> from UByte
2021-03-12 04:27:57,937 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 04:27:57,944 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 04:27:57,945 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 04:27:57,946 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 04:27:57,976 [main:106] - GETTING Function0<Unit> from Kla5
2021-03-12 04:27:57,989 [main:106] - GETTING Function0<Unit> from Continuation<Any>?
2021-03-12 04:27:57,996 [main:106] - GETTING Function0<Unit> from Map<Kla5, Array<ULong>>
2021-03-12 04:27:58,019 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 04:27:58,019 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 04:27:58,027 [main:114] - replacement of {
            prope12.prope17 = true
        } of type Function0<Unit> is Kla8().prope7
2021-03-12 04:27:58,268 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:27:58,268 [main:66] - Compilation checking started
2021-03-12 04:27:59,228 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = (c as suspend () -> String)()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla5().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = Kla8().prope7
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:27:59,231 [main:107] - replacing (prope14.getOrThrow(), Ty1)
2021-03-12 04:27:59,231 [main:50] - replacing prope14.getOrThrow() Ty1
2021-03-12 04:27:59,231 [main:54] - Getting value of type Ty1
2021-03-12 04:27:59,476 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 04:27:59,489 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 04:27:59,509 [main:67] - randomType = ULong
2021-03-12 04:27:59,742 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:27:59,791 [main:106] - GETTING Ty1 from Long
2021-03-12 04:27:59,833 [main:106] - GETTING Ty1 from Kla5
2021-03-12 04:27:59,846 [main:106] - GETTING Ty1 from Any?
2021-03-12 04:27:59,849 [main:106] - GETTING Ty1 from Char
2021-03-12 04:27:59,866 [main:106] - GETTING Ty1 from Any?
2021-03-12 04:27:59,866 [main:106] - GETTING Ty1 from Unit?
2021-03-12 04:27:59,869 [main:106] - GETTING Ty1 from UByte
2021-03-12 04:27:59,891 [main:106] - GETTING Ty1 from Any?
2021-03-12 04:27:59,892 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:27:59,896 [main:106] - GETTING Ty1 from Any?
2021-03-12 04:27:59,897 [main:106] - GETTING Ty1 from Boolean
2021-03-12 04:27:59,906 [main:106] - GETTING Ty1 from String
2021-03-12 04:27:59,922 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 04:27:59,931 [main:106] - GETTING Ty1 from Function0<String>
2021-03-12 04:27:59,940 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:27:59,940 [main:106] - GETTING Ty1 from String
2021-03-12 04:27:59,941 [main:106] - GETTING Ty1 from UByte
2021-03-12 04:27:59,942 [main:106] - GETTING Ty1 from Kla9
2021-03-12 04:27:59,959 [main:106] - GETTING Ty1 from Array<ArrayDeque<Short>>
2021-03-12 04:27:59,974 [main:106] - GETTING Ty1 from Int
2021-03-12 04:28:00,004 [main:106] - GETTING Ty1 from HashMap<Kla2?, ULong>
2021-03-12 04:28:00,118 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 04:28:00,123 [main:106] - GETTING Ty1 from Long
2021-03-12 04:28:00,124 [main:106] - GETTING Ty1 from Continuation<Double>
2021-03-12 04:28:00,131 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:28:00,132 [main:106] - GETTING Ty1 from Kla1
2021-03-12 04:28:00,138 [main:106] - GETTING Ty1 from Map<Kla5, Array<ULong>>
2021-03-12 04:28:00,161 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:28:00,161 [main:106] - GETTING Ty1 from Byte
2021-03-12 04:28:00,191 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:28:00,192 [main:106] - GETTING Ty1 from Any?
2021-03-12 04:28:00,193 [main:106] - GETTING Ty1 from Kla3
2021-03-12 04:28:00,199 [main:106] - GETTING Ty1 from String
2021-03-12 04:28:00,200 [main:106] - GETTING Ty1 from Boolean
2021-03-12 04:28:00,201 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:28:00,201 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 04:28:00,202 [main:106] - GETTING Ty1 from Any?
2021-03-12 04:28:00,202 [main:106] - GETTING Ty1 from Char
2021-03-12 04:28:00,203 [main:106] - GETTING Ty1 from UByte
2021-03-12 04:28:00,204 [main:106] - GETTING Ty1 from Boolean
2021-03-12 04:28:00,204 [main:106] - GETTING Ty1 from Int
2021-03-12 04:28:00,205 [main:106] - GETTING Ty1 from Function0<String>
2021-03-12 04:28:00,205 [main:106] - GETTING Ty1 from Boolean
2021-03-12 04:28:00,206 [main:106] - GETTING Ty1 from UByte
2021-03-12 04:28:00,207 [main:106] - GETTING Ty1 from UShort
2021-03-12 04:28:00,229 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 04:28:00,236 [main:106] - GETTING Ty1 from Any?
2021-03-12 04:28:00,237 [main:106] - GETTING Ty1 from UByte
2021-03-12 04:28:00,237 [main:106] - GETTING Ty1 from String
2021-03-12 04:28:00,238 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 04:28:00,238 [main:106] - GETTING Ty1 from Long
2021-03-12 04:28:00,239 [main:106] - GETTING Ty1 from Unit?
2021-03-12 04:28:00,239 [main:106] - GETTING Ty1 from HashMap<Kla2?, ULong>
2021-03-12 04:28:00,240 [main:106] - GETTING Ty1 from Int
2021-03-12 04:28:00,241 [main:106] - GETTING Ty1 from Byte
2021-03-12 04:28:00,241 [main:106] - GETTING Ty1 from Boolean
2021-03-12 04:28:00,242 [main:106] - GETTING Ty1 from [ERROR : Class<T>]<T>
2021-03-12 04:28:00,245 [main:106] - GETTING Ty1 from UByte
2021-03-12 04:28:00,246 [main:106] - GETTING Ty1 from Int
2021-03-12 04:28:00,247 [main:106] - GETTING Ty1 from Double
2021-03-12 04:28:00,275 [main:106] - GETTING Ty1 from Boolean
2021-03-12 04:28:00,275 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:28:00,276 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:28:00,277 [main:106] - GETTING Ty1 from UByte
2021-03-12 04:28:00,277 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 04:28:00,278 [main:106] - GETTING Ty1 from Int
2021-03-12 04:28:00,278 [main:106] - GETTING Ty1 from Continuation<Any>?
2021-03-12 04:28:00,286 [main:106] - GETTING Ty1 from Kla0
2021-03-12 04:28:00,286 [main:106] - GETTING Ty1 from Kla9
2021-03-12 04:28:00,287 [main:106] - GETTING Ty1 from UByte
2021-03-12 04:28:00,288 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 04:28:00,288 [main:106] - GETTING Ty1 from Array<ArrayDeque<Short>>
2021-03-12 04:28:00,289 [main:106] - GETTING Ty1 from String
2021-03-12 04:28:00,289 [main:106] - GETTING Ty1 from String
2021-03-12 04:28:00,290 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 04:28:00,304 [main:106] - GETTING Ty1 from Boolean
2021-03-12 04:28:00,304 [main:106] - GETTING Ty1 from Any?
2021-03-12 04:28:00,304 [main:111] - Cant find and generate replacement for prope14.getOrThrow() type Ty1
2021-03-12 04:28:00,305 [main:107] - replacing (c as suspend () -> String, SuspendFunction0<String>)
2021-03-12 04:28:00,305 [main:50] - replacing c as suspend () -> String SuspendFunction0<String>
2021-03-12 04:28:00,305 [main:54] - Getting value of type SuspendFunction0<String>
2021-03-12 04:28:00,545 [main:302] - generating value of type = SuspendFunction0<String> false depth = 0
2021-03-12 04:28:00,554 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:28:00,564 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<String> = { "iwjrw"}
2021-03-12 04:28:00,564 [main:61] - GENERATED IS CALL =false
2021-03-12 04:28:00,584 [main:67] - randomType = UShort
2021-03-12 04:28:00,832 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:28:00,877 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:00,913 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:00,944 [main:106] - GETTING SuspendFunction0<String> from Char
2021-03-12 04:28:00,962 [main:106] - GETTING SuspendFunction0<String> from Continuation<Any>?
2021-03-12 04:28:00,969 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:00,973 [main:106] - GETTING SuspendFunction0<String> from UShort
2021-03-12 04:28:00,995 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:00,996 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:01,004 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:01,005 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:28:01,035 [main:106] - GETTING SuspendFunction0<String> from Kla3
2021-03-12 04:28:01,041 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:01,042 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:28:01,048 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:01,052 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:01,053 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:01,054 [main:106] - GETTING SuspendFunction0<String> from Continuation<Double>
2021-03-12 04:28:01,061 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:01,078 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:01,079 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:28:01,079 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:01,080 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:01,081 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:01,082 [main:106] - GETTING SuspendFunction0<String> from Kla1
2021-03-12 04:28:01,090 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:01,091 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:01,092 [main:106] - GETTING SuspendFunction0<String> from Kla9
2021-03-12 04:28:01,109 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:01,110 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:01,111 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:28:01,112 [main:106] - GETTING SuspendFunction0<String> from Continuation<Any?>
2021-03-12 04:28:01,119 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:01,120 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:01,121 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:01,122 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:01,123 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:01,124 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:01,125 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:01,126 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:01,127 [main:106] - GETTING SuspendFunction0<String> from Char
2021-03-12 04:28:01,128 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:01,128 [main:106] - GETTING SuspendFunction0<String> from Double
2021-03-12 04:28:01,157 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:28:01,166 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:01,167 [main:106] - GETTING SuspendFunction0<String> from Byte
2021-03-12 04:28:01,197 [main:106] - GETTING SuspendFunction0<String> from [ERROR : Class<T>]<T>
2021-03-12 04:28:01,201 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:01,202 [main:106] - GETTING SuspendFunction0<String> from Byte
2021-03-12 04:28:01,202 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:28:01,203 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:01,204 [main:106] - GETTING SuspendFunction0<String> from Array<ArrayDeque<Short>>
2021-03-12 04:28:01,221 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:01,222 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:01,223 [main:106] - GETTING SuspendFunction0<String> from Unit?
2021-03-12 04:28:01,227 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:01,228 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:01,228 [main:106] - GETTING SuspendFunction0<String> from Function0<String>
2021-03-12 04:28:01,238 [main:106] - GETTING SuspendFunction0<String> from EmptyCoroutineContext
2021-03-12 04:28:01,252 [main:106] - GETTING SuspendFunction0<String> from Map<Kla5, Array<ULong>>
2021-03-12 04:28:01,276 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:01,277 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:01,278 [main:106] - GETTING SuspendFunction0<String> from Function0<String>
2021-03-12 04:28:01,279 [main:106] - GETTING SuspendFunction0<String> from Kla5
2021-03-12 04:28:01,292 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:01,293 [main:106] - GETTING SuspendFunction0<String> from Array<ArrayDeque<Short>>
2021-03-12 04:28:01,294 [main:106] - GETTING SuspendFunction0<String> from HashMap<Kla2?, ULong>
2021-03-12 04:28:01,407 [main:106] - GETTING SuspendFunction0<String> from HashMap<Kla2?, ULong>
2021-03-12 04:28:01,408 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:28:01,409 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:01,410 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:01,410 [main:106] - GETTING SuspendFunction0<String> from Kla9
2021-03-12 04:28:01,411 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:28:01,412 [main:106] - GETTING SuspendFunction0<String> from Unit?
2021-03-12 04:28:01,413 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:01,414 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:01,415 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:01,416 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:28:01,416 [main:114] - replacement of c as suspend () -> String of type SuspendFunction0<String> is { "iwjrw"}
2021-03-12 04:28:01,670 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on LAMBDA_EXPRESSION
2021-03-12 04:28:01,671 [main:66] - Compilation checking started
2021-03-12 04:28:02,639 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = ({ "iwjrw"})()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla5().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = Kla8().prope7
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:28:02,642 [main:107] - replacing (c, SuspendFunction0<String>)
2021-03-12 04:28:02,642 [main:50] - replacing c SuspendFunction0<String>
2021-03-12 04:28:02,642 [main:54] - Getting value of type SuspendFunction0<String>
2021-03-12 04:28:02,897 [main:302] - generating value of type = SuspendFunction0<String> false depth = 0
2021-03-12 04:28:02,907 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:28:02,916 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<String> = { "qqsew"}
2021-03-12 04:28:02,917 [main:61] - GENERATED IS CALL =false
2021-03-12 04:28:03,232 [main:67] - randomType = Sequence<Char>
2021-03-12 04:28:03,234 [main:106] - GETTING SuspendFunction0<String> from Map<Kla5, Array<ULong>>
2021-03-12 04:28:03,258 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:03,262 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,269 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:03,270 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:03,287 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:03,288 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:28:03,316 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:03,346 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:03,368 [main:106] - GETTING SuspendFunction0<String> from Kla3
2021-03-12 04:28:03,375 [main:106] - GETTING SuspendFunction0<String> from Array<ArrayDeque<Short>>
2021-03-12 04:28:03,390 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:28:03,396 [main:106] - GETTING SuspendFunction0<String> from [ERROR : Class<T>]<T>
2021-03-12 04:28:03,399 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:28:03,408 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:03,409 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:03,410 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:28:03,411 [main:106] - GETTING SuspendFunction0<String> from Array<ArrayDeque<Short>>
2021-03-12 04:28:03,412 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:28:03,413 [main:106] - GETTING SuspendFunction0<String> from Kla5
2021-03-12 04:28:03,426 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,427 [main:106] - GETTING SuspendFunction0<String> from Unit?
2021-03-12 04:28:03,431 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,432 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:03,440 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:03,441 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:03,442 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:28:03,443 [main:106] - GETTING SuspendFunction0<String> from Function0<String>
2021-03-12 04:28:03,453 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,454 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,455 [main:106] - GETTING SuspendFunction0<String> from HashMap<Kla2?, ULong>
2021-03-12 04:28:03,567 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:03,568 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:03,569 [main:106] - GETTING SuspendFunction0<String> from Continuation<Double>
2021-03-12 04:28:03,576 [main:106] - GETTING SuspendFunction0<String> from Continuation<Any?>
2021-03-12 04:28:03,583 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:03,584 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:03,585 [main:106] - GETTING SuspendFunction0<String> from Kla9
2021-03-12 04:28:03,603 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:03,604 [main:106] - GETTING SuspendFunction0<String> from Char
2021-03-12 04:28:03,621 [main:106] - GETTING SuspendFunction0<String> from Long
2021-03-12 04:28:03,622 [main:106] - GETTING SuspendFunction0<String> from Char
2021-03-12 04:28:03,623 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:03,624 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,625 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:03,626 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:03,627 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 04:28:03,627 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:03,628 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:03,629 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:03,630 [main:106] - GETTING SuspendFunction0<String> from HashMap<Kla2?, ULong>
2021-03-12 04:28:03,631 [main:106] - GETTING SuspendFunction0<String> from Function0<Unit>
2021-03-12 04:28:03,632 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,633 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:03,634 [main:106] - GETTING SuspendFunction0<String> from CoroutineContext
2021-03-12 04:28:03,635 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:03,636 [main:106] - GETTING SuspendFunction0<String> from Kla1
2021-03-12 04:28:03,643 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:03,644 [main:106] - GETTING SuspendFunction0<String> from UShort
2021-03-12 04:28:03,667 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:03,668 [main:106] - GETTING SuspendFunction0<String> from Boolean
2021-03-12 04:28:03,669 [main:106] - GETTING SuspendFunction0<String> from Unit?
2021-03-12 04:28:03,670 [main:106] - GETTING SuspendFunction0<String> from Kla9
2021-03-12 04:28:03,671 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,671 [main:106] - GETTING SuspendFunction0<String> from Byte
2021-03-12 04:28:03,702 [main:106] - GETTING SuspendFunction0<String> from Byte
2021-03-12 04:28:03,703 [main:106] - GETTING SuspendFunction0<String> from Double
2021-03-12 04:28:03,731 [main:106] - GETTING SuspendFunction0<String> from Any?
2021-03-12 04:28:03,732 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:03,733 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:03,734 [main:106] - GETTING SuspendFunction0<String> from Function0<String>
2021-03-12 04:28:03,735 [main:106] - GETTING SuspendFunction0<String> from Continuation<Any>?
2021-03-12 04:28:03,743 [main:106] - GETTING SuspendFunction0<String> from UByte
2021-03-12 04:28:03,744 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:03,745 [main:106] - GETTING SuspendFunction0<String> from Int
2021-03-12 04:28:03,746 [main:106] - GETTING SuspendFunction0<String> from Kla0
2021-03-12 04:28:03,747 [main:106] - GETTING SuspendFunction0<String> from EmptyCoroutineContext
2021-03-12 04:28:03,760 [main:114] - replacement of c of type SuspendFunction0<String> is { "qqsew"}
2021-03-12 04:28:04,002 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 04:28:04,003 [main:66] - Compilation checking started
2021-03-12 04:28:04,694 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = { "qqsew"} is suspend () -> String

suspend fun fu20(c: suspend () -> String) = ({ "iwjrw"})()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla5().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = Kla8().prope7
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:28:04,697 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-12 04:28:04,698 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-12 04:28:04,698 [main:54] - Getting value of type String
2021-03-12 04:28:04,958 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:28:04,968 [main:58] - GENERATED VALUE OF TYPE String = "fhzhp"
2021-03-12 04:28:04,968 [main:61] - GENERATED IS CALL =false
2021-03-12 04:28:05,010 [main:67] - randomType = Kla14
2021-03-12 04:28:05,252 [main:302] - generating value of type = Kla14 false depth = 0
2021-03-12 04:28:05,263 [main:112] - generating klass Kla14 text = class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}
2021-03-12 04:28:05,272 [main:106] - GETTING String from Kla0
2021-03-12 04:28:05,280 [main:113] - Case = [public final val s: kotlin.Any? defined in Kla0[PropertyDescriptorImpl@56638429], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:28:05,280 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:28:05,280 [main:117] - GENERATED CALL = (Kla3().fu7()).s?.toString()
2021-03-12 04:28:05,280 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (Kla3().fu7()).s?.toString()
2021-03-12 04:28:05,535 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:28:05,535 [main:66] - Compilation checking started
2021-03-12 04:28:06,202 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = ({ "iwjrw"})()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla5().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error((Kla3().fu7()).s?.toString() + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = Kla8().prope7
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:28:06,205 [main:107] - replacing ({
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }, Unit?)
2021-03-12 04:28:06,206 [main:50] - replacing {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    } Unit?
2021-03-12 04:28:06,206 [main:54] - Getting value of type Unit?
2021-03-12 04:28:06,449 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 04:28:06,694 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:28:06,706 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:28:07,546 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:28:07,556 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-12 04:28:07,565 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 04:28:07,577 [main:95] - GENERATED = repeat(-1837383708, {a: Int -> println()})
2021-03-12 04:28:07,578 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(-1837383708, {a: Int -> println()})
2021-03-12 04:28:07,578 [main:61] - GENERATED IS CALL =true
2021-03-12 04:28:07,922 [main:67] - randomType = Kla13<Double>
2021-03-12 04:28:08,156 [main:302] - generating value of type = Kla13<Double> false depth = 0
2021-03-12 04:28:08,167 [main:112] - generating klass Kla13 text = abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 04:28:09,739 [main:302] - generating value of type = Kla16 false depth = 2
2021-03-12 04:28:09,748 [main:112] - generating klass Kla16 text = object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = Kla8().prope7
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}
2021-03-12 04:28:09,768 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@39810d27]
2021-03-12 04:28:10,007 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 04:28:10,020 [main:78] - Generated call from random type = (Kla16).resumeWithException(NumberFormatException())
2021-03-12 04:28:10,021 [main:106] - GETTING Unit? from Kla5
2021-03-12 04:28:10,041 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@39810d27]]
2021-03-12 04:28:10,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@39810d27]
2021-03-12 04:28:10,275 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 04:28:10,288 [main:117] - GENERATED CALL = (Kla5())?.resumeWithException(NullPointerException())
2021-03-12 04:28:10,288 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@64f6183e]]
2021-03-12 04:28:10,288 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@64f6183e]
2021-03-12 04:28:10,502 [main:117] - GENERATED CALL = (Kla5())?.resume(null)
2021-03-12 04:28:10,502 [main:113] - Case = [public open fun resumeWith(prope0: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in Kla5[SimpleFunctionDescriptorImpl@45008e08]]
2021-03-12 04:28:10,503 [main:149] - GENERATING call of type public open fun resumeWith(prope0: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in Kla5[SimpleFunctionDescriptorImpl@45008e08]
2021-03-12 04:28:10,753 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 04:28:11,009 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:28:11,020 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:28:11,592 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 04:28:11,601 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:28:11,602 [main:95] - GENERATED = runCatching<Any?>({ "xwasw"})
2021-03-12 04:28:11,602 [main:117] - GENERATED CALL = (Kla5())?.resumeWith(runCatching<Any?>({ "xwasw"}))
2021-03-12 04:28:11,602 [main:114] - replacement of {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    } of type Unit? is (Kla16).resumeWithException(NumberFormatException())
2021-03-12 04:28:11,834 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:28:11,834 [main:66] - Compilation checking started
2021-03-12 04:28:11,848 [main:71] - Wrong syntax or breaks conditions
2021-03-12 04:28:11,849 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = ({ "iwjrw"})()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla5().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) (Kla16).resumeWithException(NumberFormatException())
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = Kla8().prope7
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:28:11,852 [main:107] - replacing ((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n"), String)
2021-03-12 04:28:11,852 [main:50] - replacing (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n") String
2021-03-12 04:28:11,852 [main:54] - Getting value of type String
2021-03-12 04:28:12,068 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:28:12,077 [main:58] - GENERATED VALUE OF TYPE String = "cavrp"
2021-03-12 04:28:12,077 [main:61] - GENERATED IS CALL =false
2021-03-12 04:28:12,113 [main:67] - randomType = Kla9
2021-03-12 04:28:12,360 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 04:28:12,371 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}
2021-03-12 04:28:12,398 [main:106] - GETTING String from Unit?
2021-03-12 04:28:12,402 [main:106] - GETTING String from Kla1
2021-03-12 04:28:12,412 [main:113] - Case = [public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@6b08daf8], public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]]
2021-03-12 04:28:12,412 [main:149] - GENERATING call of type public final suspend fun fu8(): kotlin.Any? defined in Kla1[SimpleFunctionDescriptorImpl@6b08daf8]
2021-03-12 04:28:12,412 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6a54bf3]
2021-03-12 04:28:12,412 [main:117] - GENERATED CALL = (Kla1()).fu8()?.toString()
2021-03-12 04:28:12,412 [main:114] - replacement of (((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n") of type String is (Kla1()).fu8()?.toString()
2021-03-12 04:28:12,654 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 04:28:12,655 [main:66] - Compilation checking started
2021-03-12 04:28:13,274 [main:49] - Result = false
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = ({ "iwjrw"})()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla5().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((Kla1()).fu8()?.toString()) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = Kla8().prope7
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:28:13,277 [main:107] - replacing (this, Kla12)
2021-03-12 04:28:13,278 [main:50] - replacing this Kla12
2021-03-12 04:28:13,278 [main:54] - Getting value of type Kla12
2021-03-12 04:28:13,515 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-12 04:28:13,524 [main:112] - generating klass Kla12 text = class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}
2021-03-12 04:28:13,524 [main:58] - GENERATED VALUE OF TYPE Kla12 = Kla12()
2021-03-12 04:28:13,524 [main:61] - GENERATED IS CALL =true
2021-03-12 04:28:13,563 [main:67] - randomType = Kla15
2021-03-12 04:28:13,805 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-12 04:28:13,817 [main:112] - generating klass Kla15 text = class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 04:28:13,828 [main:106] - GETTING Kla12 from Kla5
2021-03-12 04:28:13,851 [main:106] - GETTING Kla12 from Any?
2021-03-12 04:28:13,855 [main:106] - GETTING Kla12 from Kla9
2021-03-12 04:28:13,884 [main:106] - GETTING Kla12 from UByte
2021-03-12 04:28:13,919 [main:106] - GETTING Kla12 from UByte
2021-03-12 04:28:13,920 [main:106] - GETTING Kla12 from Byte
2021-03-12 04:28:13,959 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:13,963 [main:106] - GETTING Kla12 from UByte
2021-03-12 04:28:13,963 [main:106] - GETTING Kla12 from Char
2021-03-12 04:28:13,982 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:13,983 [main:106] - GETTING Kla12 from UByte
2021-03-12 04:28:13,983 [main:106] - GETTING Kla12 from Map<Kla5, Array<ULong>>
2021-03-12 04:28:14,008 [main:106] - GETTING Kla12 from Function0<Unit>
2021-03-12 04:28:14,017 [main:106] - GETTING Kla12 from Any?
2021-03-12 04:28:14,017 [main:106] - GETTING Kla12 from Any?
2021-03-12 04:28:14,018 [main:106] - GETTING Kla12 from Boolean
2021-03-12 04:28:14,028 [main:106] - GETTING Kla12 from EmptyCoroutineContext
2021-03-12 04:28:14,041 [main:106] - GETTING Kla12 from CoroutineContext
2021-03-12 04:28:14,047 [main:106] - GETTING Kla12 from Function0<String>
2021-03-12 04:28:14,057 [main:106] - GETTING Kla12 from Long
2021-03-12 04:28:14,087 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:14,088 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:14,089 [main:106] - GETTING Kla12 from UByte
2021-03-12 04:28:14,089 [main:106] - GETTING Kla12 from String
2021-03-12 04:28:14,108 [main:106] - GETTING Kla12 from Int
2021-03-12 04:28:14,139 [main:106] - GETTING Kla12 from UByte
2021-03-12 04:28:14,139 [main:106] - GETTING Kla12 from String
2021-03-12 04:28:14,140 [main:106] - GETTING Kla12 from Char
2021-03-12 04:28:14,142 [main:106] - GETTING Kla12 from Any?
2021-03-12 04:28:14,143 [main:106] - GETTING Kla12 from Unit?
2021-03-12 04:28:14,147 [main:106] - GETTING Kla12 from UByte
2021-03-12 04:28:14,148 [main:106] - GETTING Kla12 from Function0<Unit>
2021-03-12 04:28:14,148 [main:106] - GETTING Kla12 from CoroutineContext
2021-03-12 04:28:14,149 [main:106] - GETTING Kla12 from Boolean
2021-03-12 04:28:14,149 [main:106] - GETTING Kla12 from String
2021-03-12 04:28:14,150 [main:106] - GETTING Kla12 from Function0<Unit>
2021-03-12 04:28:14,150 [main:106] - GETTING Kla12 from Kla3
2021-03-12 04:28:14,158 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:14,158 [main:106] - GETTING Kla12 from Continuation<Any>?
2021-03-12 04:28:14,166 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:14,167 [main:106] - GETTING Kla12 from Boolean
2021-03-12 04:28:14,168 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:14,169 [main:106] - GETTING Kla12 from CoroutineContext
2021-03-12 04:28:14,169 [main:106] - GETTING Kla12 from Int
2021-03-12 04:28:14,170 [main:106] - GETTING Kla12 from Any?
2021-03-12 04:28:14,171 [main:106] - GETTING Kla12 from Any?
2021-03-12 04:28:14,171 [main:106] - GETTING Kla12 from Boolean
2021-03-12 04:28:14,172 [main:106] - GETTING Kla12 from Any?
2021-03-12 04:28:14,172 [main:106] - GETTING Kla12 from Byte
2021-03-12 04:28:14,173 [main:106] - GETTING Kla12 from Array<ArrayDeque<Short>>
2021-03-12 04:28:14,190 [main:106] - GETTING Kla12 from Continuation<Any?>
2021-03-12 04:28:14,197 [main:106] - GETTING Kla12 from [ERROR : Class<T>]<T>
2021-03-12 04:28:14,200 [main:106] - GETTING Kla12 from Boolean
2021-03-12 04:28:14,201 [main:106] - GETTING Kla12 from Continuation<Double>
2021-03-12 04:28:14,208 [main:106] - GETTING Kla12 from HashMap<Kla2?, ULong>
2021-03-12 04:28:14,331 [main:106] - GETTING Kla12 from Double
2021-03-12 04:28:14,360 [main:106] - GETTING Kla12 from Function0<String>
2021-03-12 04:28:14,361 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:14,362 [main:106] - GETTING Kla12 from String
2021-03-12 04:28:14,362 [main:106] - GETTING Kla12 from Int
2021-03-12 04:28:14,363 [main:106] - GETTING Kla12 from UByte
2021-03-12 04:28:14,363 [main:106] - GETTING Kla12 from Int
2021-03-12 04:28:14,364 [main:106] - GETTING Kla12 from Kla0
2021-03-12 04:28:14,364 [main:106] - GETTING Kla12 from Boolean
2021-03-12 04:28:14,365 [main:106] - GETTING Kla12 from Boolean
2021-03-12 04:28:14,366 [main:106] - GETTING Kla12 from Long
2021-03-12 04:28:14,366 [main:106] - GETTING Kla12 from Kla9
2021-03-12 04:28:14,367 [main:106] - GETTING Kla12 from UShort
2021-03-12 04:28:14,392 [main:106] - GETTING Kla12 from HashMap<Kla2?, ULong>
2021-03-12 04:28:14,393 [main:106] - GETTING Kla12 from String
2021-03-12 04:28:14,393 [main:106] - GETTING Kla12 from Kla1
2021-03-12 04:28:14,402 [main:106] - GETTING Kla12 from Any?
2021-03-12 04:28:14,403 [main:106] - GETTING Kla12 from Array<ArrayDeque<Short>>
2021-03-12 04:28:14,403 [main:106] - GETTING Kla12 from Int
2021-03-12 04:28:14,404 [main:106] - GETTING Kla12 from String
2021-03-12 04:28:14,404 [main:106] - GETTING Kla12 from Long
2021-03-12 04:28:14,405 [main:106] - GETTING Kla12 from Unit?
2021-03-12 04:28:14,405 [main:114] - replacement of this of type Kla12 is Kla12()
2021-03-12 04:28:14,662 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:28:14,662 [main:66] - Compilation checking started
2021-03-12 04:28:15,604 [main:53] - Result = true
Text:
import kotlin.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


@Suppress("REIFIED_TYPE_PARAMETER_NO_INLINE")
inline fun <reified T: Any> javaClass(): Class<T> = T::class.java

val test = "lala".javaClass

val test2 = javaClass<Iterator<Int>> ()

fun box(): String {
    if(test.getCanonicalName() != "java.lang.String") return "fail"
    if(test2.getCanonicalName() != "java.util.Iterator") return "fail"
    return "OK"
}

var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("vopgl")
inline class Kla0(val s: Any?)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("zezox")
    prope1 = it as Continuation<Any>
}

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(null)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return Kla0("bxgbd")
    }

    suspend fun fu8() = Kla0("zunew").s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: String): Kla0 = Kla0(s)

    suspend fun fu6(): String = fu1()

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = (Kla2())?.fu4(Kla0("bgqza")).s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0("ufjpn"))
    }

    suspend fun fu8() = Kla0("eedrc").s
}

fun box415(): String {
    fu0 {
        Kla1().fu8()
    }
    prope1?.resumeWithException(IllegalStateException(IllegalArgumentException(NotImplementedError("nnsju"))))

    if ((Kla9).equals("hpizo").xor(true && !false)) return "FAIL 1 $prope0"

    prope0 = "FAIL2"

    fu0 { repeat(102, {a: Int -> println()})}
    check(false)

    if (false) return (786914593).toChar().uppercase()

    prope0 = (1504727023.toUByte()).toUShort().toString(557946651)

    fu0 { println()}
    prope1?.resumeWithException(IllegalStateException("rpzmp", NullPointerException()))

    return prope0 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope0: Result<Any?>) {
        "uaesw"
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = (Kla0("xyibz")).s
    }

    var prope0: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1769405199, {a: Int -> println()})}

    fun fu11(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("items" + "mlnyx")
        prope4.clear()
        var prope8: CoroutineStackFrame? = prope1
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("ndupa" +
                prope4.joinToString(separator = "buvat")) }
    }

    fun fu13(method: String) {
        prope4.find { it?.methodName?.startsWith((linkedMapOf<Byte, ArrayList<Int>>(Pair<Byte, ArrayList<Int>>(-106, arrayListOf<Int>(0))))?.size.toString(-21415310)) == true } ?: error("esafr")
    }
}

val prope2 = Kla7()

class Kla8 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu14() {
        prope5 = 1086700094
        prope6 = false
        prope7 = (Kla8()).prope7
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("xwnnn")}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = false) {
        for (i in IntRange(-491068702, -491068702)) {
            if (prope5 != i) error(((7450551393361150876)).compareTo(1850727531).toString(1527279442))
            prope7()
        }
        if ((hashMapOf<ArrayList<Kla0>, UShort>(Pair<ArrayList<Kla0>, UShort>(ArrayList<Kla0>(), 1086700094.toUShort()))).keys.containsAll(listOf<ArrayList<Kla0>>()))
            error((LinkedHashSet<String>(listOf<String>("jarpo"))).elementAtOrNull(102)!! + ", got " + (19855.toUByte()).toByte().div(-491068702))
        if (prope6) error("gyols")
        prope7()
        if (true && !false) error(((0.48702413f)).toByte().toString(-757670949))
    }
}

val prope3 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla8().prope7 = { check(prope1 !is CoroutineStackFrame)}
    }

    override fun resumeWithException(exception: Throwable) {
        throw Throwable("xxpud")
    }
}

fun box542(): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope9 = (Kla0("jkydd").s).toString();
    var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
    if ((0.2958644149240166).toChar().lowercase() != "KOL" || prope10 != "OKL") return "zsqex"

    prope9 = "";
    prope10 = fu17(b = { "eahwo"}(), c = { "tjhrl"}, a = { "wbfxz"}())
    if (((19855.toUByte()).toByte().div(-491068702).toUByte()).equals("qopvv")) return "fail 2: $(arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).joinToString(StringBuilder(), StringBuilder(div(-491068702)), StringBuilder(), ((786914593)), StringBuilder(StringBuilder()), {a: T -> StringBuilder(786914593)}) != KOL or $((786914593).toUByte()).toByte().toString((-301713948)) != OKL"


    prope9 = "";
    prope10 = ((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo")).toString(-425352747)
    if (((-6901340533927370996)).equals(Kla5().prope0).or(true) || (Kla8().prope7).equals("apntx").equals(Kla0("jkydd").s)) return "fail 3: $prope9 != KOL or $(Kla3().fu7()).s?.toString() != OKL"

    return "OK"

}

fun fu17(a: String, b: String, c: () -> String): String {
    var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
return a + b + c();
}

fun fu18(): String = "OK"

suspend fun fu19(c: suspend () -> String) = c is suspend () -> String

suspend fun fu20(c: suspend () -> String) = ({ "iwjrw"})()

fun fu21(c: suspend () -> Unit) {
    c.startCoroutine(Kla11)
}

fun box768(): String {
    var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
var prope13 = "FAIL"
    fu21 {
        prope13 = if ((ArrayDeque<String?>(790331986)).contains("ondkb").not()) fu20(::fu18) else "!isSuspend"
    }
    return prope13
}

fun <Ty1> fu22(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = Kla5().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
x(prope14.getOrThrow())
    }
}

fun fu23(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
NumberFormatException()?.let({a: Throwable -> require(false, { "dwigs"})})
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla12().prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu24(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu24(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu26() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu26(it)
    }

    fun fu26(c: Continuation<*>) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu27(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { true}?.let { error((((Kla9).equals("hpizo")).compareTo((Kla9).equals("hpizo"))).toChar().plus(prope0) + (Kla0("jkydd")).s?.toString() +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu28(method: String) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope15.find { ("eskca")?.plus("qspkt").startsWith((0.2958644149240166).toChar().lowercase(), (Kla9).equals("hpizo")) } ?: error(((arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023)))).contentDeepToString() +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla14()

class Kla15 {
    private var prope16 = 0
    var prope17 = (arrayOf<ArrayDeque<Short>>(ArrayDeque<Short>(1504727023))).equals("gqorc").or(((Kla9).equals("hpizo")))

    var prope18: () -> Unit = { println("utavx")}

    fun fu29() {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
prope16 = 0
        prope17 = false
        prope18 = { check(true)}
    }

    suspend fun fu30() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu31(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("zhwji")
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if ((((-6901340533927370996))).toChar().isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = Kla5().context

    override fun resume(value: Unit) {
        var prope9 = (Kla0("jkydd").s).toString()
var prope10 = (hashMapOf<Kla2?, ULong>()).size.toString((0))
var prope0 = ((Kla9).equals("hpizo")).compareTo(true).toString(-301713948)
var prope1: Continuation<Any>? = null
val prope2 = Kla7()
val prope3 = Kla8()
Kla15().prope18 = Kla8().prope7
    }

    override fun fu24(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:28:15,608 [main:107] - replacing (prope18, Function0<Unit>)
2021-03-12 04:28:15,608 [main:50] - replacing prope18 Function0<Unit>
2021-03-12 04:28:15,608 [main:54] - Getting value of type Function0<Unit>
