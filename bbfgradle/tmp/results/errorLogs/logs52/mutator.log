2021-03-12 00:15:52,783 [main:66] - Compilation checking started
2021-03-12 00:15:55,269 [main:45] - Trying to change 42 nodes
2021-03-12 00:15:55,271 [main:53] - replacing (1L, Long)
2021-03-12 00:15:55,271 [main:50] - replacing 1L Long
2021-03-12 00:15:55,271 [main:54] - Getting value of type Long
2021-03-12 00:15:55,410 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:15:55,413 [main:58] - GENERATED VALUE OF TYPE Long = -1261108305471113416
2021-03-12 00:15:55,414 [main:61] - GENERATED IS CALL =false
2021-03-12 00:15:56,073 [main:67] - randomType = Short
2021-03-12 00:15:56,228 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:15:56,390 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070]
2021-03-12 00:15:56,391 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2239d38a]
2021-03-12 00:15:56,392 [main:78] - Generated call from random type = (-19330).toLong().inc()
2021-03-12 00:15:56,406 [main:106] - GETTING Long from CharRange
2021-03-12 00:15:56,500 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]]
2021-03-12 00:15:56,500 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]
2021-03-12 00:15:56,502 [main:117] - GENERATED CALL = (charRange()).first.toLong()
2021-03-12 00:15:56,502 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11cd442d]]
2021-03-12 00:15:56,502 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11cd442d]
2021-03-12 00:15:56,647 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:15:56,649 [main:117] - GENERATED CALL = (charRange()).step.plus(1981678060045693674)
2021-03-12 00:15:56,649 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]]
2021-03-12 00:15:56,649 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]
2021-03-12 00:15:56,650 [main:117] - GENERATED CALL = (charRange()).endInclusive.toLong()
2021-03-12 00:15:56,650 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13f1d350]]
2021-03-12 00:15:56,650 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13f1d350]
2021-03-12 00:15:56,840 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:15:56,843 [main:117] - GENERATED CALL = (charRange()).step.rem(4068208699669687022)
2021-03-12 00:15:56,846 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@fdee9a5]]
2021-03-12 00:15:56,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@fdee9a5]
2021-03-12 00:15:57,011 [main:302] - generating value of type = Function1<T, Long> false depth = 0
2021-03-12 00:15:57,012 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:15:57,015 [main:117] - GENERATED CALL = (charRange()).sumOf({a: T -> 3046614280254084192})
2021-03-12 00:15:57,015 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1273fee8]]
2021-03-12 00:15:57,015 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1273fee8]
2021-03-12 00:15:57,016 [main:117] - GENERATED CALL = (charRange()).sum()
2021-03-12 00:15:57,016 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]]
2021-03-12 00:15:57,016 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]
2021-03-12 00:15:57,180 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:15:57,181 [main:117] - GENERATED CALL = (charRange()).step.times(-4569742307714735369)
2021-03-12 00:15:57,182 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68496278]]
2021-03-12 00:15:57,182 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68496278]
2021-03-12 00:15:57,298 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:15:57,299 [main:117] - GENERATED CALL = (charRange()).step.minus(4725498399539611386)
2021-03-12 00:15:57,299 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]]
2021-03-12 00:15:57,299 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]
2021-03-12 00:15:57,437 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:15:57,439 [main:117] - GENERATED CALL = (charRange()).step.div(6206812284537497497)
2021-03-12 00:15:57,439 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a3769ed]]
2021-03-12 00:15:57,439 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a3769ed]
2021-03-12 00:15:57,440 [main:117] - GENERATED CALL = (charRange()).step.toLong()
2021-03-12 00:15:57,440 [main:61] - replacement of 1L of type Long is (charRange()).sum()
2021-03-12 00:15:57,579 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:15:57,580 [main:66] - Compilation checking started
2021-03-12 00:15:58,069 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = (charRange()).sum() .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}
2021-03-12 00:15:58,071 [main:53] - replacing ('1', Char)
2021-03-12 00:15:58,071 [main:50] - replacing '1' Char
2021-03-12 00:15:58,071 [main:54] - Getting value of type Char
2021-03-12 00:15:58,192 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:15:58,193 [main:58] - GENERATED VALUE OF TYPE Char = '皷'
2021-03-12 00:15:58,194 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:00,612 [main:67] - randomType = Function2<MutableMap<Sequence<UShort>, MutableMap<Char, Function2<ULong, Triple<LinkedHashSet<UInt>, UInt, UInt>, Set<UInt>>>>, Double, Short>
2021-03-12 00:16:00,614 [main:106] - GETTING Char from IntRange
2021-03-12 00:16:00,656 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]]
2021-03-12 00:16:00,657 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]
2021-03-12 00:16:00,657 [main:117] - GENERATED CALL = (intRange()).endInclusive.toChar()
2021-03-12 00:16:00,658 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71136897]]
2021-03-12 00:16:00,658 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71136897]
2021-03-12 00:16:00,658 [main:117] - GENERATED CALL = (intRange()).endInclusive.digitToChar()
2021-03-12 00:16:00,659 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71136897]]
2021-03-12 00:16:00,659 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71136897]
2021-03-12 00:16:00,659 [main:117] - GENERATED CALL = (intRange()).first.digitToChar()
2021-03-12 00:16:00,660 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]]
2021-03-12 00:16:00,660 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]
2021-03-12 00:16:00,660 [main:117] - GENERATED CALL = (intRange()).first.toChar()
2021-03-12 00:16:00,660 [main:61] - replacement of '1' of type Char is (intRange()).endInclusive.digitToChar()
2021-03-12 00:16:00,793 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:00,793 [main:66] - Compilation checking started
2021-03-12 00:16:01,343 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = (intRange()).endInclusive.digitToChar() .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}
2021-03-12 00:16:01,345 [main:53] - replacing (0, Int)
2021-03-12 00:16:01,345 [main:50] - replacing 0 Int
2021-03-12 00:16:01,345 [main:54] - Getting value of type Int
2021-03-12 00:16:01,453 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:01,453 [main:58] - GENERATED VALUE OF TYPE Int = 1989637408
2021-03-12 00:16:01,454 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:01,454 [main:67] - randomType = Int
2021-03-12 00:16:01,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:01,637 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d1c219]
2021-03-12 00:16:01,637 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@730b7e7e]
2021-03-12 00:16:01,739 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:01,740 [main:78] - Generated call from random type = (-2018316555).compareTo(sum).rem(-61)
2021-03-12 00:16:01,741 [main:106] - GETTING Int from CharRange
2021-03-12 00:16:01,787 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@10641ce9]]
2021-03-12 00:16:01,787 [main:117] - GENERATED CALL = (charRange()).step.absoluteValue
2021-03-12 00:16:01,788 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]]
2021-03-12 00:16:01,788 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]
2021-03-12 00:16:01,896 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:01,897 [main:117] - GENERATED CALL = (charRange()).endInclusive.compareTo('ꆂ')
2021-03-12 00:16:01,897 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3615fc07]]
2021-03-12 00:16:01,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3615fc07]
2021-03-12 00:16:01,898 [main:117] - GENERATED CALL = (charRange()).step.takeHighestOneBit()
2021-03-12 00:16:01,898 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharProgression[DeserializedSimpleFunctionDescriptor@4cdf35fd], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]]
2021-03-12 00:16:01,898 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharProgression[DeserializedSimpleFunctionDescriptor@4cdf35fd]
2021-03-12 00:16:01,999 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:16:02,001 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]
2021-03-12 00:16:02,120 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:02,122 [main:117] - GENERATED CALL = (charRange()).equals("juwyw").compareTo(false)
2021-03-12 00:16:02,122 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@74bd894b]]
2021-03-12 00:16:02,122 [main:117] - GENERATED CALL = (charRange()).endInclusive.code
2021-03-12 00:16:02,123 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45ed3fa9]]
2021-03-12 00:16:02,123 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45ed3fa9]
2021-03-12 00:16:02,230 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:02,231 [main:117] - GENERATED CALL = (charRange()).step.shl(1418845563)
2021-03-12 00:16:02,232 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61bfcf43]]
2021-03-12 00:16:02,233 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61bfcf43]
2021-03-12 00:16:02,331 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:16:02,331 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:16:02,337 [main:117] - GENERATED CALL = (charRange()).indexOfFirst({a: T -> false})
2021-03-12 00:16:02,337 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a909132]]
2021-03-12 00:16:02,337 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a909132]
2021-03-12 00:16:02,337 [main:117] - GENERATED CALL = (charRange()).step.inv()
2021-03-12 00:16:02,337 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e9e59ca]]
2021-03-12 00:16:02,338 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e9e59ca]
2021-03-12 00:16:02,338 [main:117] - GENERATED CALL = (charRange()).endInclusive.toInt()
2021-03-12 00:16:02,338 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-12 00:16:02,338 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-12 00:16:02,468 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 00:16:02,469 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:16:02,470 [main:117] - GENERATED CALL = (charRange()).sumBy({a: T -> -1228364307})
2021-03-12 00:16:02,470 [main:61] - replacement of 0 of type Int is (-2018316555).compareTo(sum).rem(-61)
2021-03-12 00:16:02,578 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:02,579 [main:66] - Compilation checking started
2021-03-12 00:16:02,956 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = (intRange()).endInclusive.digitToChar() .. '4'

fun box(): String {
    var sum = (-2018316555).compareTo(sum).rem(-61)
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}
2021-03-12 00:16:02,958 [main:53] - replacing (sumC * 10 + i.toInt() - '0'.toInt(), Int)
2021-03-12 00:16:02,958 [main:50] - replacing sumC * 10 + i.toInt() - '0'.toInt() Int
2021-03-12 00:16:02,958 [main:54] - Getting value of type Int
2021-03-12 00:16:03,070 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:03,070 [main:58] - GENERATED VALUE OF TYPE Int = 1812409892
2021-03-12 00:16:03,071 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:03,781 [main:67] - randomType = MutableMap<Set<Boolean?>?, Double>
2021-03-12 00:16:03,782 [main:106] - GETTING Int from Long
2021-03-12 00:16:03,845 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60d31a5e]]
2021-03-12 00:16:03,845 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:03,846 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60d31a5e]
2021-03-12 00:16:03,846 [main:117] - GENERATED CALL = (sumL).toInt().countOneBits()
2021-03-12 00:16:03,846 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@62442217], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1ebb3621]]
2021-03-12 00:16:03,846 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@62442217]
2021-03-12 00:16:03,846 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1ebb3621]
2021-03-12 00:16:03,943 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:03,944 [main:117] - GENERATED CALL = (sumL).toByte().minus(-117)
2021-03-12 00:16:03,944 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]]
2021-03-12 00:16:03,944 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:04,061 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:04,062 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]
2021-03-12 00:16:04,063 [main:117] - GENERATED CALL = (sumL).compareTo(110).or(sumC)
2021-03-12 00:16:04,063 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2270b999], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@31cddebb]]
2021-03-12 00:16:04,064 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2270b999]
2021-03-12 00:16:04,064 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@31cddebb]
2021-03-12 00:16:04,064 [main:117] - GENERATED CALL = (sumL).toShort().toInt()
2021-03-12 00:16:04,064 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d63b66b]]
2021-03-12 00:16:04,064 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:04,168 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:04,169 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d63b66b]
2021-03-12 00:16:04,276 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:04,277 [main:117] - GENERATED CALL = (sumL).compareTo(-23).plus(-106)
2021-03-12 00:16:04,277 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74d8a788]]
2021-03-12 00:16:04,277 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:04,277 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74d8a788]
2021-03-12 00:16:04,412 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:04,413 [main:117] - GENERATED CALL = (sumL).toInt().coerceAtMost(1664213558)
2021-03-12 00:16:04,413 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60d31a5e]]
2021-03-12 00:16:04,414 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:04,511 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:04,511 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60d31a5e]
2021-03-12 00:16:04,512 [main:117] - GENERATED CALL = (sumL).compareTo(-70).countOneBits()
2021-03-12 00:16:04,512 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]]
2021-03-12 00:16:04,512 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:04,512 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]
2021-03-12 00:16:04,513 [main:117] - GENERATED CALL = (sumL).toInt().or(sum)
2021-03-12 00:16:04,513 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d3d8794]]
2021-03-12 00:16:04,513 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:04,513 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d3d8794]
2021-03-12 00:16:04,606 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:04,607 [main:117] - GENERATED CALL = (sumL).toInt().compareTo(-67)
2021-03-12 00:16:04,607 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@86093db], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6be9e443]]
2021-03-12 00:16:04,607 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@86093db]
2021-03-12 00:16:04,607 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6be9e443]
2021-03-12 00:16:04,608 [main:117] - GENERATED CALL = (sumL).toFloat().toBits()
2021-03-12 00:16:04,608 [main:61] - replacement of sumC * 10 + i.toInt() - '0'.toInt() of type Int is (sumL).toShort().toInt()
2021-03-12 00:16:04,756 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:04,756 [main:66] - Compilation checking started
2021-03-12 00:16:05,239 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = (intRange()).endInclusive.digitToChar() .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}
2021-03-12 00:16:05,241 [main:53] - replacing (0, Int)
2021-03-12 00:16:05,241 [main:50] - replacing 0 Int
2021-03-12 00:16:05,241 [main:54] - Getting value of type Int
2021-03-12 00:16:05,330 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:05,330 [main:58] - GENERATED VALUE OF TYPE Int = 1415874642
2021-03-12 00:16:05,330 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:05,432 [main:67] - randomType = UShort
2021-03-12 00:16:05,545 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:16:05,594 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3e37e4e7]
2021-03-12 00:16:05,594 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3b6ead]
2021-03-12 00:16:05,594 [main:78] - Generated call from random type = (22175.toUShort()).toLong().countOneBits()
2021-03-12 00:16:05,596 [main:106] - GETTING Int from CharRange
2021-03-12 00:16:05,630 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12c25f3]]
2021-03-12 00:16:05,631 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12c25f3]
2021-03-12 00:16:05,728 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:05,729 [main:117] - GENERATED CALL = (charRange()).step.ushr(1955081284)
2021-03-12 00:16:05,729 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1170e97c]]
2021-03-12 00:16:05,729 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1170e97c]
2021-03-12 00:16:05,730 [main:117] - GENERATED CALL = (charRange()).count()
2021-03-12 00:16:05,730 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@74bd894b]]
2021-03-12 00:16:05,730 [main:117] - GENERATED CALL = (charRange()).first.code
2021-03-12 00:16:05,730 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e9e59ca]]
2021-03-12 00:16:05,730 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e9e59ca]
2021-03-12 00:16:05,731 [main:117] - GENERATED CALL = (charRange()).first.toInt()
2021-03-12 00:16:05,731 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7bf1c78]]
2021-03-12 00:16:05,731 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7bf1c78]
2021-03-12 00:16:05,731 [main:117] - GENERATED CALL = (charRange()).step.coerceAtLeast(sumC)
2021-03-12 00:16:05,731 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f9bba41]]
2021-03-12 00:16:05,731 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f9bba41]
2021-03-12 00:16:05,732 [main:117] - GENERATED CALL = (charRange()).step.unaryMinus()
2021-03-12 00:16:05,732 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-12 00:16:05,732 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-12 00:16:05,824 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 00:16:05,825 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:16:05,826 [main:117] - GENERATED CALL = (charRange()).sumBy({a: T -> -1760791132})
2021-03-12 00:16:05,826 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@37f753ce]]
2021-03-12 00:16:05,826 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@37f753ce]
2021-03-12 00:16:05,917 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:05,918 [main:117] - GENERATED CALL = (charRange()).first.minus('ꘙ')
2021-03-12 00:16:05,918 [main:113] - Case = [public open fun contains(value: kotlin.Char): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@8e9941f], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]]
2021-03-12 00:16:05,918 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Char): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@8e9941f]
2021-03-12 00:16:06,007 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:06,008 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]
2021-03-12 00:16:06,118 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:06,119 [main:117] - GENERATED CALL = (charRange()).contains('龔').compareTo(true)
2021-03-12 00:16:06,119 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e3def9e]]
2021-03-12 00:16:06,119 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e3def9e]
2021-03-12 00:16:06,120 [main:117] - GENERATED CALL = (charRange()).step.rotateRight(sumC)
2021-03-12 00:16:06,120 [main:61] - replacement of 0 of type Int is (charRange()).sumBy({a: T -> -1760791132})
2021-03-12 00:16:06,211 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:06,211 [main:66] - Compilation checking started
2021-03-12 00:16:06,552 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = (intRange()).endInclusive.digitToChar() .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = (charRange()).sumBy({a: T -> -1760791132})
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}
2021-03-12 00:16:06,553 [main:53] - replacing (1234L, Long)
2021-03-12 00:16:06,553 [main:50] - replacing 1234L Long
2021-03-12 00:16:06,553 [main:54] - Getting value of type Long
2021-03-12 00:16:06,653 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:06,653 [main:58] - GENERATED VALUE OF TYPE Long = 6679418257171500564
2021-03-12 00:16:06,653 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:06,746 [main:67] - randomType = Float
2021-03-12 00:16:06,868 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:16:06,924 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@500e15ee]
2021-03-12 00:16:07,025 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:07,026 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11cd442d]
2021-03-12 00:16:07,026 [main:78] - Generated call from random type = (0.78532875f).compareTo(78).plus(sumL)
2021-03-12 00:16:07,027 [main:61] - replacement of 1234L of type Long is (0.78532875f).compareTo(78).plus(sumL)
2021-03-12 00:16:07,117 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:07,117 [main:66] - Compilation checking started
2021-03-12 00:16:07,545 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = (intRange()).endInclusive.digitToChar() .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}
2021-03-12 00:16:07,546 [main:53] - replacing (sumL, Long)
2021-03-12 00:16:07,546 [main:50] - replacing sumL Long
2021-03-12 00:16:07,546 [main:54] - Getting value of type Long
2021-03-12 00:16:07,649 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:07,649 [main:58] - GENERATED VALUE OF TYPE Long = -4009561386510251109
2021-03-12 00:16:07,649 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:08,040 [main:67] - randomType = LinkedHashSet<HashMap<ULong?, String>>
2021-03-12 00:16:08,149 [main:302] - generating value of type = LinkedHashSet<HashMap<ULong?, String>> false depth = 0
2021-03-12 00:16:08,288 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: HashMap<ULong?, String>): LkedHashSet<HashMap<ULong?, Strg>> = TODO()
2021-03-12 00:16:08,291 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: HashMap<ULong?, String>): LkedHashSet<HashMap<ULong?, Strg>> = TODO()
2021-03-12 00:16:08,388 [main:302] - generating value of type = HashMap<ULong?, String> false depth = 3
2021-03-12 00:16:08,481 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<ULong?, String>): HashMap<ULong?, Strg> = TODO()
2021-03-12 00:16:08,483 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<ULong?, String>): HashMap<ULong?, Strg> = TODO()
2021-03-12 00:16:08,578 [main:302] - generating value of type = Pair<ULong?, String> false depth = 6
2021-03-12 00:16:08,704 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong?, second: String): Pair<ULong?, String> = TODO()
2021-03-12 00:16:08,706 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong?, second: String): Pair<ULong?, String> = TODO()
2021-03-12 00:16:08,807 [main:302] - generating value of type = ULong true depth = 9
2021-03-12 00:16:08,807 [main:302] - generating value of type = String true depth = 9
2021-03-12 00:16:08,808 [main:95] - GENERATED = Pair<ULong?, String>(4478752755594614285.toULong(), "mebhc")
2021-03-12 00:16:08,808 [main:95] - GENERATED = hashMapOf<ULong?, String>(Pair<ULong?, String>(4478752755594614285.toULong(), "mebhc"))
2021-03-12 00:16:08,809 [main:95] - GENERATED = linkedSetOf<HashMap<ULong?, String>>(hashMapOf<ULong?, String>(Pair<ULong?, String>(4478752755594614285.toULong(), "mebhc")))
2021-03-12 00:16:09,049 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11cd442d]
2021-03-12 00:16:09,146 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:09,147 [main:78] - Generated call from random type = (linkedSetOf<HashMap<ULong?, String>>(hashMapOf<ULong?, String>(Pair<ULong?, String>(4478752755594614285.toULong(), "mebhc")))).size.plus(-6567494114122202580)
2021-03-12 00:16:09,148 [main:106] - GETTING Long from CharRange
2021-03-12 00:16:09,194 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11cd442d]]
2021-03-12 00:16:09,195 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11cd442d]
2021-03-12 00:16:09,290 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:09,291 [main:117] - GENERATED CALL = (charRange()).step.plus(2192487245738520855)
2021-03-12 00:16:09,291 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13f1d350]]
2021-03-12 00:16:09,291 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13f1d350]
2021-03-12 00:16:09,400 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:09,400 [main:117] - GENERATED CALL = (charRange()).step.rem(-4310255040957153078)
2021-03-12 00:16:09,401 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a3769ed]]
2021-03-12 00:16:09,401 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a3769ed]
2021-03-12 00:16:09,401 [main:117] - GENERATED CALL = (charRange()).step.toLong()
2021-03-12 00:16:09,401 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]]
2021-03-12 00:16:09,401 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]
2021-03-12 00:16:09,402 [main:117] - GENERATED CALL = (charRange()).endInclusive.toLong()
2021-03-12 00:16:09,402 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@fdee9a5]]
2021-03-12 00:16:09,402 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@fdee9a5]
2021-03-12 00:16:09,494 [main:302] - generating value of type = Function1<T, Long> false depth = 0
2021-03-12 00:16:09,495 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:16:09,496 [main:117] - GENERATED CALL = (charRange()).sumOf({a: T -> -3143266928334026814})
2021-03-12 00:16:09,496 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]]
2021-03-12 00:16:09,496 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]
2021-03-12 00:16:09,496 [main:117] - GENERATED CALL = (charRange()).first.toLong()
2021-03-12 00:16:09,497 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1273fee8]]
2021-03-12 00:16:09,497 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1273fee8]
2021-03-12 00:16:09,497 [main:117] - GENERATED CALL = (charRange()).sum()
2021-03-12 00:16:09,497 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]]
2021-03-12 00:16:09,497 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]
2021-03-12 00:16:09,595 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:09,596 [main:117] - GENERATED CALL = (charRange()).step.times(-8921980031570367270)
2021-03-12 00:16:09,596 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68496278]]
2021-03-12 00:16:09,596 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68496278]
2021-03-12 00:16:09,597 [main:117] - GENERATED CALL = (charRange()).step.minus(sumL)
2021-03-12 00:16:09,597 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]]
2021-03-12 00:16:09,597 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]
2021-03-12 00:16:09,597 [main:117] - GENERATED CALL = (charRange()).step.div(sumL)
2021-03-12 00:16:09,598 [main:61] - replacement of sumL of type Long is (charRange()).step.toLong()
2021-03-12 00:16:09,691 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:09,692 [main:66] - Compilation checking started
2021-03-12 00:16:10,144 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = (intRange()).endInclusive.digitToChar() .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}


2021-03-12 00:16:10,145 [main:53] - replacing ((intRange()).endInclusive.digitToChar() .. '4', CharRange)
2021-03-12 00:16:10,145 [main:50] - replacing (intRange()).endInclusive.digitToChar() .. '4' CharRange
2021-03-12 00:16:10,145 [main:54] - Getting value of type CharRange
2021-03-12 00:16:10,273 [main:302] - generating value of type = CharRange false depth = 0
2021-03-12 00:16:10,401 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharRange = TODO()
2021-03-12 00:16:10,403 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharRange = TODO()
2021-03-12 00:16:10,742 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:16:10,742 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:16:10,743 [main:95] - GENERATED = CharRange('챳', '听')
2021-03-12 00:16:10,743 [main:58] - GENERATED VALUE OF TYPE CharRange = CharRange('챳', '听')
2021-03-12 00:16:10,743 [main:61] - GENERATED IS CALL =true
2021-03-12 00:16:10,841 [main:67] - randomType = Byte
2021-03-12 00:16:10,934 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:10,999 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7547fcc5]
2021-03-12 00:16:10,999 [main:149] - GENERATING call of type public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a09f2f5]
2021-03-12 00:16:11,104 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:11,105 [main:78] - Generated call from random type = (-114).toChar().until('澡')
2021-03-12 00:16:11,105 [main:106] - GETTING CharRange from CharRange
2021-03-12 00:16:11,165 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@fb7cc8f]]
2021-03-12 00:16:11,165 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@fb7cc8f]
2021-03-12 00:16:11,265 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:11,265 [main:117] - GENERATED CALL = (charRange()).endInclusive.rangeTo('⏸')
2021-03-12 00:16:11,266 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@fb7cc8f]]
2021-03-12 00:16:11,266 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@fb7cc8f]
2021-03-12 00:16:11,353 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:11,354 [main:117] - GENERATED CALL = (charRange()).first.rangeTo('')
2021-03-12 00:16:11,354 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a09f2f5]]
2021-03-12 00:16:11,354 [main:149] - GENERATING call of type public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a09f2f5]
2021-03-12 00:16:11,451 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:11,452 [main:117] - GENERATED CALL = (charRange()).first.until('菌')
2021-03-12 00:16:11,452 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a09f2f5]]
2021-03-12 00:16:11,452 [main:149] - GENERATING call of type public infix fun kotlin.Char.until(to: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3a09f2f5]
2021-03-12 00:16:11,543 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:11,544 [main:117] - GENERATED CALL = (charRange()).endInclusive.until('愖')
2021-03-12 00:16:11,544 [main:61] - replacement of (intRange()).endInclusive.digitToChar() .. '4' of type CharRange is (-114).toChar().until('澡')
2021-03-12 00:16:11,654 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:11,654 [main:66] - Compilation checking started
2021-03-12 00:16:12,078 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}


2021-03-12 00:16:12,079 [main:53] - replacing (10, Int)
2021-03-12 00:16:12,080 [main:50] - replacing 10 Int
2021-03-12 00:16:12,080 [main:54] - Getting value of type Int
2021-03-12 00:16:12,193 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:12,193 [main:58] - GENERATED VALUE OF TYPE Int = 437019457
2021-03-12 00:16:12,193 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:12,321 [main:67] - randomType = UByte
2021-03-12 00:16:12,445 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:16:12,489 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f2707c7]
2021-03-12 00:16:12,585 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:16:12,586 [main:78] - Generated call from random type = (56.toUByte()).compareTo(20.toUByte()).absoluteValue
2021-03-12 00:16:12,587 [main:106] - GETTING Int from LongRange
2021-03-12 00:16:12,619 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@34e17afb]]
2021-03-12 00:16:12,619 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@34e17afb]
2021-03-12 00:16:12,620 [main:117] - GENERATED CALL = (longRange()).endInclusive.toInt()
2021-03-12 00:16:12,620 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@61891398]]
2021-03-12 00:16:12,620 [main:117] - GENERATED CALL = (longRange()).first.sign
2021-03-12 00:16:12,620 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@61891398]]
2021-03-12 00:16:12,620 [main:117] - GENERATED CALL = (longRange()).endInclusive.sign
2021-03-12 00:16:12,621 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1170e97c]]
2021-03-12 00:16:12,621 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1170e97c]
2021-03-12 00:16:12,621 [main:117] - GENERATED CALL = (longRange()).count()
2021-03-12 00:16:12,621 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61bfcf43]]
2021-03-12 00:16:12,621 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61bfcf43]
2021-03-12 00:16:12,712 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:16:12,712 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:16:12,714 [main:117] - GENERATED CALL = (longRange()).indexOfFirst({a: T -> false})
2021-03-12 00:16:12,714 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]]
2021-03-12 00:16:12,714 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:12,802 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:12,803 [main:117] - GENERATED CALL = (longRange()).endInclusive.compareTo(-17)
2021-03-12 00:16:12,803 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@342ca509]]
2021-03-12 00:16:12,803 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@342ca509]
2021-03-12 00:16:12,803 [main:117] - GENERATED CALL = (longRange()).sum()
2021-03-12 00:16:12,803 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@6225569], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]]
2021-03-12 00:16:12,804 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongProgression[DeserializedSimpleFunctionDescriptor@6225569]
2021-03-12 00:16:12,907 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:16:12,908 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]
2021-03-12 00:16:13,009 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:13,010 [main:117] - GENERATED CALL = (longRange()).equals("efiyc").compareTo(true)
2021-03-12 00:16:13,010 [main:113] - Case = [public open fun contains(value: kotlin.Long): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@2cae9603], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]]
2021-03-12 00:16:13,010 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Long): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@2cae9603]
2021-03-12 00:16:13,107 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:13,107 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]
2021-03-12 00:16:13,235 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:13,236 [main:117] - GENERATED CALL = (longRange()).contains(1006304750504930000).compareTo(true)
2021-03-12 00:16:13,236 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]]
2021-03-12 00:16:13,236 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:13,343 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:13,344 [main:117] - GENERATED CALL = (longRange()).first.compareTo(82)
2021-03-12 00:16:13,344 [main:61] - replacement of 10 of type Int is (longRange()).endInclusive.compareTo(-17)
2021-03-12 00:16:13,451 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:13,452 [main:66] - Compilation checking started
2021-03-12 00:16:13,854 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}


2021-03-12 00:16:13,854 [main:53] - replacing ('0'.toInt(), Int)
2021-03-12 00:16:13,854 [main:50] - replacing '0'.toInt() Int
2021-03-12 00:16:13,854 [main:54] - Getting value of type Int
2021-03-12 00:16:13,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:13,942 [main:58] - GENERATED VALUE OF TYPE Int = 1630305771
2021-03-12 00:16:13,942 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:14,371 [main:67] - randomType = Triple<Double, UInt, Long?>
2021-03-12 00:16:14,487 [main:302] - generating value of type = Triple<Double, UInt, Long?> false depth = 0
2021-03-12 00:16:14,587 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Double, second: UInt, third: Long?): Triple<Double, UInt, Long?> = TODO()
2021-03-12 00:16:14,589 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Double, second: UInt, third: Long?): Triple<Double, UInt, Long?> = TODO()
2021-03-12 00:16:14,710 [main:302] - generating value of type = Double true depth = 3
2021-03-12 00:16:14,711 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:16:14,711 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:16:14,712 [main:95] - GENERATED = Triple<Double, UInt, Long?>(0.10630553348079608, 1795932175.toUInt(), 8128754421071860879)
2021-03-12 00:16:14,742 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2e241024]
2021-03-12 00:16:14,847 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:16:14,848 [main:78] - Generated call from random type = (Triple<Double, UInt, Long?>(0.10630553348079608, 1795932175.toUInt(), 8128754421071860879)).second.compareTo(86.toUByte())
2021-03-12 00:16:14,848 [main:106] - GETTING Int from LongRange
2021-03-12 00:16:14,887 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55aeefb3]]
2021-03-12 00:16:14,887 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55aeefb3]
2021-03-12 00:16:14,887 [main:117] - GENERATED CALL = (longRange()).endInclusive.countLeadingZeroBits()
2021-03-12 00:16:14,888 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fc3ac1]]
2021-03-12 00:16:14,888 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fc3ac1]
2021-03-12 00:16:14,888 [main:117] - GENERATED CALL = (longRange()).endInclusive.countTrailingZeroBits()
2021-03-12 00:16:14,888 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@61891398]]
2021-03-12 00:16:14,888 [main:117] - GENERATED CALL = (longRange()).first.sign
2021-03-12 00:16:14,888 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@34e17afb]]
2021-03-12 00:16:14,889 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@34e17afb]
2021-03-12 00:16:14,889 [main:117] - GENERATED CALL = (longRange()).endInclusive.toInt()
2021-03-12 00:16:14,889 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]]
2021-03-12 00:16:14,889 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:14,975 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:14,977 [main:117] - GENERATED CALL = (longRange()).first.compareTo(-61)
2021-03-12 00:16:14,977 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]]
2021-03-12 00:16:14,977 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:15,064 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:15,065 [main:117] - GENERATED CALL = (longRange()).endInclusive.compareTo(-50)
2021-03-12 00:16:15,065 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-12 00:16:15,065 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-12 00:16:15,152 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 00:16:15,152 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:16:15,153 [main:117] - GENERATED CALL = (longRange()).sumBy({a: T -> -1582943428})
2021-03-12 00:16:15,153 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@342ca509]]
2021-03-12 00:16:15,153 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@342ca509]
2021-03-12 00:16:15,154 [main:117] - GENERATED CALL = (longRange()).sum()
2021-03-12 00:16:15,154 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3b6ead]]
2021-03-12 00:16:15,154 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3b6ead]
2021-03-12 00:16:15,154 [main:117] - GENERATED CALL = (longRange()).first.countOneBits()
2021-03-12 00:16:15,154 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78fd5c77]]
2021-03-12 00:16:15,154 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78fd5c77]
2021-03-12 00:16:15,250 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:16:15,514 [main:43] - GENERATING CALL OF fun <T> maxOf(a: ULong, other: ULong, comparator: kotlin.Comparator<ULong>): T = TODO()
2021-03-12 00:16:15,517 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: ULong, other: ULong, comparator: kotlin.Comparator<ULong>): T = TODO()
2021-03-12 00:16:15,721 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 00:16:15,721 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 00:16:15,722 [main:302] - generating value of type = Comparator<ULong> false depth = 3
2021-03-12 00:16:15,819 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (ULong)->kotlin.Comparable<*>?): Comparator<ULong> = TODO()
2021-03-12 00:16:15,821 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (ULong)->kotlin.Comparable<*>?): Comparator<ULong> = TODO()
2021-03-12 00:16:16,057 [main:302] - generating value of type = Function1<ULong, Comparable<*>?> false depth = 6
2021-03-12 00:16:16,058 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-12 00:16:16,064 [main:95] - GENERATED = compareBy<ULong>({a: ULong -> 5349998880156337180})
2021-03-12 00:16:16,064 [main:95] - GENERATED = maxOf<ULong>(2651329795102612973.toULong(), 7174009309593603018.toULong(), compareBy<ULong>({a: ULong -> 5349998880156337180}))
2021-03-12 00:16:16,065 [main:117] - GENERATED CALL = (longRange()).lastIndexOf(maxOf<ULong>(2651329795102612973.toULong(), 7174009309593603018.toULong(), compareBy<ULong>({a: ULong -> 5349998880156337180})))
2021-03-12 00:16:16,065 [main:61] - replacement of '0'.toInt() of type Int is (longRange()).sumBy({a: T -> -1582943428})
2021-03-12 00:16:16,148 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:16,148 [main:53] - replacing (i.toInt(), Int)
2021-03-12 00:16:16,148 [main:50] - replacing i.toInt() Int
2021-03-12 00:16:16,148 [main:54] - Getting value of type Int
2021-03-12 00:16:16,231 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:16,232 [main:58] - GENERATED VALUE OF TYPE Int = -1420044421
2021-03-12 00:16:16,232 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:16,319 [main:67] - randomType = Byte
2021-03-12 00:16:16,405 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:16,461 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:16,461 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@791a2fb8]
2021-03-12 00:16:16,565 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:16,566 [main:78] - Generated call from random type = (-17).toInt().times(-11)
2021-03-12 00:16:16,567 [main:106] - GETTING Int from CharRange
2021-03-12 00:16:16,619 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45f668da]]
2021-03-12 00:16:16,619 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45f668da]
2021-03-12 00:16:16,620 [main:117] - GENERATED CALL = (charRange()).step.countLeadingZeroBits()
2021-03-12 00:16:16,620 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@272271e0]]
2021-03-12 00:16:16,620 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@272271e0]
2021-03-12 00:16:16,715 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 00:16:16,715 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:16:16,716 [main:117] - GENERATED CALL = (charRange()).sumOf({a: T -> -1939815377})
2021-03-12 00:16:16,716 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharProgression[DeserializedSimpleFunctionDescriptor@4cdf35fd], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]]
2021-03-12 00:16:16,716 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharProgression[DeserializedSimpleFunctionDescriptor@4cdf35fd]
2021-03-12 00:16:16,806 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:16:16,806 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]
2021-03-12 00:16:16,897 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:16,898 [main:117] - GENERATED CALL = (charRange()).equals("cknpk").compareTo(false)
2021-03-12 00:16:16,898 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74d8a788]]
2021-03-12 00:16:16,899 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74d8a788]
2021-03-12 00:16:16,986 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:16,987 [main:117] - GENERATED CALL = (charRange()).step.coerceAtMost(211217974)
2021-03-12 00:16:16,987 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78fd5c77]]
2021-03-12 00:16:16,987 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78fd5c77]
2021-03-12 00:16:17,109 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:16:17,238 [main:43] - GENERATING CALL OF fun <T> minOf(a: Byte, other: Byte): T = TODO()
2021-03-12 00:16:17,240 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Byte, other: Byte): T = TODO()
2021-03-12 00:16:17,328 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 00:16:17,328 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 00:16:17,329 [main:95] - GENERATED = minOf<Byte>(-34, 103)
2021-03-12 00:16:17,329 [main:117] - GENERATED CALL = (charRange()).lastIndexOf(minOf<Byte>(-34, 103))
2021-03-12 00:16:17,329 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@37f753ce]]
2021-03-12 00:16:17,329 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@37f753ce]
2021-03-12 00:16:17,415 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:17,416 [main:117] - GENERATED CALL = (charRange()).endInclusive.minus('')
2021-03-12 00:16:17,416 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45ed3fa9]]
2021-03-12 00:16:17,416 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45ed3fa9]
2021-03-12 00:16:17,503 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:17,504 [main:117] - GENERATED CALL = (charRange()).step.shl(1919246226)
2021-03-12 00:16:17,504 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@730b7e7e]]
2021-03-12 00:16:17,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@730b7e7e]
2021-03-12 00:16:17,605 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:17,606 [main:117] - GENERATED CALL = (charRange()).step.rem(5)
2021-03-12 00:16:17,606 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]]
2021-03-12 00:16:17,606 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]
2021-03-12 00:16:17,708 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:17,708 [main:117] - GENERATED CALL = (charRange()).endInclusive.compareTo('呴')
2021-03-12 00:16:17,709 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61bfcf43]]
2021-03-12 00:16:17,709 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61bfcf43]
2021-03-12 00:16:17,796 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:16:17,796 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:16:17,797 [main:117] - GENERATED CALL = (charRange()).indexOfFirst({a: T -> true})
2021-03-12 00:16:17,797 [main:61] - replacement of i.toInt() of type Int is (charRange()).lastIndexOf(minOf<Byte>(-34, 103))
2021-03-12 00:16:17,890 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:17,890 [main:53] - replacing (i.toInt(), Int)
2021-03-12 00:16:17,891 [main:50] - replacing i.toInt() Int
2021-03-12 00:16:17,891 [main:54] - Getting value of type Int
2021-03-12 00:16:17,978 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:17,978 [main:58] - GENERATED VALUE OF TYPE Int = -1323933498
2021-03-12 00:16:17,978 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:17,979 [main:67] - randomType = Long
2021-03-12 00:16:18,084 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:18,133 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:18,133 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19b4787c]
2021-03-12 00:16:18,216 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:18,216 [main:78] - Generated call from random type = (3621444446896120920).toInt().minus(47)
2021-03-12 00:16:18,217 [main:106] - GETTING Int from CharRange
2021-03-12 00:16:18,241 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@62fd809b]]
2021-03-12 00:16:18,242 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@62fd809b]
2021-03-12 00:16:18,323 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:18,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:18,406 [main:117] - GENERATED CALL = (charRange()).step.coerceIn(-281973397, 333667298)
2021-03-12 00:16:18,406 [main:113] - Case = [public open fun contains(value: kotlin.Char): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@8e9941f], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]]
2021-03-12 00:16:18,406 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Char): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@8e9941f]
2021-03-12 00:16:18,490 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:18,491 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]
2021-03-12 00:16:18,571 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:18,572 [main:117] - GENERATED CALL = (charRange()).contains('䣗').compareTo(false)
2021-03-12 00:16:18,572 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]]
2021-03-12 00:16:18,572 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]
2021-03-12 00:16:18,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:18,667 [main:117] - GENERATED CALL = (charRange()).step.or(1669929729)
2021-03-12 00:16:18,667 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c8fdf2f]]
2021-03-12 00:16:18,667 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c8fdf2f]
2021-03-12 00:16:18,668 [main:117] - GENERATED CALL = (charRange()).step.dec()
2021-03-12 00:16:18,668 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bd13693]]
2021-03-12 00:16:18,668 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bd13693]
2021-03-12 00:16:18,668 [main:117] - GENERATED CALL = (charRange()).endInclusive.digitToInt()
2021-03-12 00:16:18,668 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-12 00:16:18,668 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-12 00:16:18,760 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 00:16:18,760 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:16:18,761 [main:117] - GENERATED CALL = (charRange()).sumBy({a: T -> 812091164})
2021-03-12 00:16:18,761 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e9e59ca]]
2021-03-12 00:16:18,761 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e9e59ca]
2021-03-12 00:16:18,761 [main:117] - GENERATED CALL = (charRange()).endInclusive.toInt()
2021-03-12 00:16:18,761 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60d31a5e]]
2021-03-12 00:16:18,761 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60d31a5e]
2021-03-12 00:16:18,762 [main:117] - GENERATED CALL = (charRange()).step.countOneBits()
2021-03-12 00:16:18,762 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@37f753ce]]
2021-03-12 00:16:18,762 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@37f753ce]
2021-03-12 00:16:18,844 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:18,845 [main:117] - GENERATED CALL = (charRange()).first.minus('̯')
2021-03-12 00:16:18,845 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a909132]]
2021-03-12 00:16:18,845 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a909132]
2021-03-12 00:16:18,845 [main:117] - GENERATED CALL = (charRange()).step.inv()
2021-03-12 00:16:18,846 [main:61] - replacement of i.toInt() of type Int is (charRange()).endInclusive.digitToInt()
2021-03-12 00:16:18,931 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:18,932 [main:53] - replacing (1L .. 4L, LongRange)
2021-03-12 00:16:18,932 [main:50] - replacing 1L .. 4L LongRange
2021-03-12 00:16:18,932 [main:54] - Getting value of type LongRange
2021-03-12 00:16:19,022 [main:302] - generating value of type = LongRange false depth = 0
2021-03-12 00:16:19,129 [main:43] - GENERATING CALL OF fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongRange = TODO()
2021-03-12 00:16:19,130 [main:61] - WITHOUT TYPE PARAMS = fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongRange = TODO()
2021-03-12 00:16:19,409 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:16:19,409 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:16:19,410 [main:95] - GENERATED = LongRange(-7435282440323470782, 8525883657661494947)
2021-03-12 00:16:19,410 [main:58] - GENERATED VALUE OF TYPE LongRange = LongRange(-7435282440323470782, 8525883657661494947)
2021-03-12 00:16:19,410 [main:61] - GENERATED IS CALL =true
2021-03-12 00:16:19,502 [main:67] - randomType = Double
2021-03-12 00:16:19,601 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:16:19,646 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@925b315]
2021-03-12 00:16:19,730 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:19,730 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b601570]
2021-03-12 00:16:19,815 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:19,816 [main:78] - Generated call from random type = (0.9173385650911429).compareTo(-100).rangeTo(-4607217863071677006)
2021-03-12 00:16:19,817 [main:106] - GETTING LongRange from CharRange
2021-03-12 00:16:19,846 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b601570]]
2021-03-12 00:16:19,846 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b601570]
2021-03-12 00:16:19,927 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:19,928 [main:117] - GENERATED CALL = (charRange()).step.rangeTo(1346237302234014203)
2021-03-12 00:16:19,928 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public infix fun kotlin.Int.until(to: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@157303d9]]
2021-03-12 00:16:19,928 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 00:16:20,009 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:20,010 [main:117] - GENERATED CALL = (charRange()).step.until(-7557150282483401651)
2021-03-12 00:16:20,010 [main:61] - replacement of 1L .. 4L of type LongRange is (charRange()).step.until(-7557150282483401651)
2021-03-12 00:16:20,109 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:20,110 [main:66] - Compilation checking started
2021-03-12 00:16:20,488 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}


2021-03-12 00:16:20,489 [main:53] - replacing (1234, Int)
2021-03-12 00:16:20,489 [main:50] - replacing 1234 Int
2021-03-12 00:16:20,489 [main:54] - Getting value of type Int
2021-03-12 00:16:20,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:20,574 [main:58] - GENERATED VALUE OF TYPE Int = 1607393220
2021-03-12 00:16:20,574 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:21,214 [main:67] - randomType = Pair<Boolean, Function2<ULong, Long, ULong?>>?
2021-03-12 00:16:21,301 [main:302] - generating value of type = Pair<Boolean, Function2<ULong, Long, ULong?>> false depth = 0
2021-03-12 00:16:21,393 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Boolean, second: Function2<ULong, Long, ULong?>): Pair<Boolean, Function2<ULong, Long, ULong?>> = TODO()
2021-03-12 00:16:21,395 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean, second: Function2<ULong, Long, ULong?>): Pair<Boolean, Function2<ULong, Long, ULong?>> = TODO()
2021-03-12 00:16:21,503 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 00:16:21,503 [main:302] - generating value of type = Function2<ULong, Long, ULong?> false depth = 3
2021-03-12 00:16:21,503 [main:302] - generating value of type = ULong true depth = 4
2021-03-12 00:16:21,504 [main:95] - GENERATED = Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()})
2021-03-12 00:16:21,536 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.io.Serializable[DeserializedSimpleFunctionDescriptor@3a5e173a]
2021-03-12 00:16:21,622 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:16:21,622 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]
2021-03-12 00:16:21,708 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:21,709 [main:78] - Generated call from random type = (Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true)
2021-03-12 00:16:21,710 [main:106] - GETTING Int from Long
2021-03-12 00:16:21,764 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2270b999], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@31cddebb]]
2021-03-12 00:16:21,764 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2270b999]
2021-03-12 00:16:21,765 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@31cddebb]
2021-03-12 00:16:21,765 [main:117] - GENERATED CALL = (sumL).toShort().toInt()
2021-03-12 00:16:21,765 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e22d25e]]
2021-03-12 00:16:21,765 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:21,765 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e22d25e]
2021-03-12 00:16:21,766 [main:117] - GENERATED CALL = (sumL).toInt().unaryPlus()
2021-03-12 00:16:21,766 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3615fc07]]
2021-03-12 00:16:21,766 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:21,854 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:21,854 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3615fc07]
2021-03-12 00:16:21,854 [main:117] - GENERATED CALL = (sumL).compareTo(34).takeHighestOneBit()
2021-03-12 00:16:21,854 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4906e4cd]]
2021-03-12 00:16:21,855 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:21,855 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4906e4cd]
2021-03-12 00:16:21,941 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:21,941 [main:117] - GENERATED CALL = (sumL).toInt().div(104)
2021-03-12 00:16:21,942 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f9bba41]]
2021-03-12 00:16:21,942 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:21,942 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f9bba41]
2021-03-12 00:16:21,942 [main:117] - GENERATED CALL = (sumL).toInt().unaryMinus()
2021-03-12 00:16:21,942 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]]
2021-03-12 00:16:21,942 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070]
2021-03-12 00:16:21,942 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:22,031 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:22,031 [main:117] - GENERATED CALL = (sumL).toLong().compareTo(34)
2021-03-12 00:16:22,032 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@37594fa9]]
2021-03-12 00:16:22,032 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:22,136 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:22,137 [main:117] - GENERATED CALL = (sumL).compareTo(20).sign
2021-03-12 00:16:22,137 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3ea71809]]
2021-03-12 00:16:22,137 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:22,232 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:22,233 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3ea71809]
2021-03-12 00:16:22,233 [main:117] - GENERATED CALL = (sumL).compareTo(-79).takeLowestOneBit()
2021-03-12 00:16:22,233 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@61891398]]
2021-03-12 00:16:22,233 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070]
2021-03-12 00:16:22,234 [main:117] - GENERATED CALL = (sumL).toLong().sign
2021-03-12 00:16:22,234 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3b6ead]]
2021-03-12 00:16:22,234 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070]
2021-03-12 00:16:22,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3b6ead]
2021-03-12 00:16:22,234 [main:117] - GENERATED CALL = (sumL).toLong().countOneBits()
2021-03-12 00:16:22,234 [main:61] - replacement of 1234 of type Int is (Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true)
2021-03-12 00:16:22,317 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:22,317 [main:66] - Compilation checking started
2021-03-12 00:16:22,969 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return "OK"
}


2021-03-12 00:16:22,970 [main:53] - replacing (sumC * 10, Int)
2021-03-12 00:16:22,970 [main:50] - replacing sumC * 10 Int
2021-03-12 00:16:22,970 [main:54] - Getting value of type Int
2021-03-12 00:16:23,077 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:23,077 [main:58] - GENERATED VALUE OF TYPE Int = -933299882
2021-03-12 00:16:23,077 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:23,078 [main:67] - randomType = Int
2021-03-12 00:16:23,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:23,261 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:23,262 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12c25f3]
2021-03-12 00:16:23,369 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:23,370 [main:78] - Generated call from random type = (526514388).toInt().ushr(1652104947)
2021-03-12 00:16:23,371 [main:106] - GETTING Int from IntRange
2021-03-12 00:16:23,408 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12c25f3]]
2021-03-12 00:16:23,409 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12c25f3]
2021-03-12 00:16:23,509 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:23,510 [main:117] - GENERATED CALL = (intRange()).endInclusive.ushr(883865950)
2021-03-12 00:16:23,510 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e3def9e]]
2021-03-12 00:16:23,510 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e3def9e]
2021-03-12 00:16:23,627 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:23,628 [main:117] - GENERATED CALL = (intRange()).first.rotateRight(-1813887899)
2021-03-12 00:16:23,629 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@259b8c13]]
2021-03-12 00:16:23,629 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@259b8c13]
2021-03-12 00:16:23,728 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 00:16:23,728 [main:302] - generating value of type = R false depth = 1
2021-03-12 00:16:24,511 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: LinkedHashMap<Boolean?, Float>, block: T.()->LinkedHashMap<Double, Boolean?>?): R = TODO()
2021-03-12 00:16:24,513 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: LinkedHashMap<Boolean?, Float>, block: T.()->LinkedHashMap<Double, Boolean?>?): R = TODO()
2021-03-12 00:16:24,727 [main:302] - generating value of type = LinkedHashMap<Boolean?, Float> false depth = 4
2021-03-12 00:16:24,828 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Boolean?, Float> = TODO()
2021-03-12 00:16:24,830 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Boolean?, Float> = TODO()
2021-03-12 00:16:24,925 [main:95] - GENERATED = linkedMapOf<Boolean?, Float>()
2021-03-12 00:16:24,925 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, LinkedHashMap<Double, Boolean?>?> false depth = 4
2021-03-12 00:16:24,925 [main:302] - generating value of type = LinkedHashMap<Double, Boolean?> false depth = 5
2021-03-12 00:16:25,027 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Double, Boolean?>): LkedHashMap<Double, Boolean?> = TODO()
2021-03-12 00:16:25,029 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Double, Boolean?>): LkedHashMap<Double, Boolean?> = TODO()
2021-03-12 00:16:25,123 [main:302] - generating value of type = Pair<Double, Boolean?> false depth = 8
2021-03-12 00:16:25,223 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double, second: Boolean?): Pair<Double, Boolean?> = TODO()
2021-03-12 00:16:25,225 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double, second: Boolean?): Pair<Double, Boolean?> = TODO()
2021-03-12 00:16:25,350 [main:302] - generating value of type = Double true depth = 11
2021-03-12 00:16:25,351 [main:302] - generating value of type = Boolean true depth = 11
2021-03-12 00:16:25,352 [main:95] - GENERATED = Pair<Double, Boolean?>(0.49217613550649464, false)
2021-03-12 00:16:25,353 [main:95] - GENERATED = linkedMapOf<Double, Boolean?>(Pair<Double, Boolean?>(0.49217613550649464, false))
2021-03-12 00:16:25,354 [main:95] - GENERATED = with<LinkedHashMap<Boolean?, Float>, LinkedHashMap<Double, Boolean?>?>(linkedMapOf<Boolean?, Float>(), { linkedMapOf<Double, Boolean?>(Pair<Double, Boolean?>(0.49217613550649464, false))})
2021-03-12 00:16:25,355 [main:117] - GENERATED CALL = (intRange()).maxBy({a: T -> with<LinkedHashMap<Boolean?, Float>, LinkedHashMap<Double, Boolean?>?>(linkedMapOf<Boolean?, Float>(), { linkedMapOf<Double, Boolean?>(Pair<Double, Boolean?>(0.49217613550649464, false))})})
2021-03-12 00:16:25,356 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4e3ee82f]]
2021-03-12 00:16:25,356 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4e3ee82f]
2021-03-12 00:16:25,356 [main:117] - GENERATED CALL = (intRange()).random()
2021-03-12 00:16:25,357 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7bf1c78]]
2021-03-12 00:16:25,357 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7bf1c78]
2021-03-12 00:16:25,467 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:25,468 [main:117] - GENERATED CALL = (intRange()).first.coerceAtLeast(2055813064)
2021-03-12 00:16:25,468 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]]
2021-03-12 00:16:25,468 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]
2021-03-12 00:16:25,560 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:25,561 [main:117] - GENERATED CALL = (intRange()).endInclusive.or(949093144)
2021-03-12 00:16:25,561 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a909132]]
2021-03-12 00:16:25,561 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a909132]
2021-03-12 00:16:25,561 [main:117] - GENERATED CALL = (intRange()).first.inv()
2021-03-12 00:16:25,561 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5]]
2021-03-12 00:16:25,561 [main:117] - GENERATED CALL = (intRange()).endInclusive
2021-03-12 00:16:25,561 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@37594fa9]]
2021-03-12 00:16:25,562 [main:117] - GENERATED CALL = (intRange()).first.sign
2021-03-12 00:16:25,562 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7e1e4a05]]
2021-03-12 00:16:25,562 [main:117] - GENERATED CALL = (intRange()).step
2021-03-12 00:16:25,562 [main:61] - replacement of sumC * 10 of type Int is (intRange()).first.inv()
2021-03-12 00:16:25,650 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:25,651 [main:53] - replacing (i.toInt(), Int)
2021-03-12 00:16:25,651 [main:50] - replacing i.toInt() Int
2021-03-12 00:16:25,651 [main:54] - Getting value of type Int
2021-03-12 00:16:25,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:25,743 [main:58] - GENERATED VALUE OF TYPE Int = -1301370642
2021-03-12 00:16:25,743 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:25,744 [main:67] - randomType = String
2021-03-12 00:16:25,854 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:16:25,888 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@12cf790]
2021-03-12 00:16:25,990 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:25,991 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]
2021-03-12 00:16:26,087 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:26,088 [main:78] - Generated call from random type = ("xwbgc").get(1745715038).compareTo('?')
2021-03-12 00:16:26,090 [main:106] - GETTING Int from IntRange
2021-03-12 00:16:26,123 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19b4787c]]
2021-03-12 00:16:26,124 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@19b4787c]
2021-03-12 00:16:26,213 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:26,214 [main:117] - GENERATED CALL = (intRange()).endInclusive.minus(-101)
2021-03-12 00:16:26,214 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@736c02d2]]
2021-03-12 00:16:26,215 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@736c02d2]
2021-03-12 00:16:26,304 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:26,305 [main:117] - GENERATED CALL = (intRange()).endInclusive.shr(-379721603)
2021-03-12 00:16:26,305 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]]
2021-03-12 00:16:26,305 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3e0b3dde]
2021-03-12 00:16:26,393 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 00:16:26,394 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:16:26,395 [main:117] - GENERATED CALL = (intRange()).sumBy({a: T -> 636507902})
2021-03-12 00:16:26,395 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4182e699]]
2021-03-12 00:16:26,395 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4182e699]
2021-03-12 00:16:26,492 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 00:16:26,591 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<T> = TODO()
2021-03-12 00:16:26,592 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<T> = TODO()
2021-03-12 00:16:26,686 [main:95] - GENERATED = reverseOrder<T>()
2021-03-12 00:16:26,687 [main:117] - GENERATED CALL = (intRange()).minWith(reverseOrder<T>())
2021-03-12 00:16:26,687 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4906e4cd]]
2021-03-12 00:16:26,687 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4906e4cd]
2021-03-12 00:16:26,775 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:26,775 [main:117] - GENERATED CALL = (intRange()).endInclusive.div(126)
2021-03-12 00:16:26,776 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@37594fa9]]
2021-03-12 00:16:26,776 [main:117] - GENERATED CALL = (intRange()).endInclusive.sign
2021-03-12 00:16:26,776 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d63b66b]]
2021-03-12 00:16:26,776 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d63b66b]
2021-03-12 00:16:26,864 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:26,865 [main:117] - GENERATED CALL = (intRange()).first.plus(102)
2021-03-12 00:16:26,865 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@730b7e7e]]
2021-03-12 00:16:26,865 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@730b7e7e]
2021-03-12 00:16:26,961 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:26,962 [main:117] - GENERATED CALL = (intRange()).first.rem(-50)
2021-03-12 00:16:26,962 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12c25f3]]
2021-03-12 00:16:26,962 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12c25f3]
2021-03-12 00:16:27,079 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:27,080 [main:117] - GENERATED CALL = (intRange()).endInclusive.ushr(-934762668)
2021-03-12 00:16:27,080 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a909132]]
2021-03-12 00:16:27,081 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a909132]
2021-03-12 00:16:27,081 [main:117] - GENERATED CALL = (intRange()).endInclusive.inv()
2021-03-12 00:16:27,081 [main:61] - replacement of i.toInt() of type Int is ("xwbgc").get(1745715038).compareTo('?')
2021-03-12 00:16:27,169 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:27,169 [main:53] - replacing (1234L, Long)
2021-03-12 00:16:27,169 [main:50] - replacing 1234L Long
2021-03-12 00:16:27,169 [main:54] - Getting value of type Long
2021-03-12 00:16:27,257 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:27,257 [main:58] - GENERATED VALUE OF TYPE Long = -4885060165332175191
2021-03-12 00:16:27,257 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:27,463 [main:67] - randomType = LinkedHashMap<Long, Float>
2021-03-12 00:16:27,559 [main:302] - generating value of type = LinkedHashMap<Long, Float> false depth = 0
2021-03-12 00:16:27,656 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Long, Float>): LkedHashMap<Long, Float> = TODO()
2021-03-12 00:16:27,657 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Long, Float>): LkedHashMap<Long, Float> = TODO()
2021-03-12 00:16:27,752 [main:302] - generating value of type = Pair<Long, Float> false depth = 3
2021-03-12 00:16:27,843 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Float): Pair<Long, Float> = TODO()
2021-03-12 00:16:27,844 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Float): Pair<Long, Float> = TODO()
2021-03-12 00:16:27,934 [main:302] - generating value of type = Long true depth = 6
2021-03-12 00:16:27,935 [main:302] - generating value of type = Float true depth = 6
2021-03-12 00:16:27,936 [main:95] - GENERATED = Pair<Long, Float>(7006498177578616912, 0.13998187f)
2021-03-12 00:16:27,936 [main:95] - GENERATED = linkedMapOf<Long, Float>(Pair<Long, Float>(7006498177578616912, 0.13998187f))
2021-03-12 00:16:28,126 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]
2021-03-12 00:16:28,272 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:28,274 [main:78] - Generated call from random type = (linkedMapOf<Long, Float>(Pair<Long, Float>(7006498177578616912, 0.13998187f))).size.times(-6650009661551919803)
2021-03-12 00:16:28,276 [main:106] - GETTING Long from CharRange
2021-03-12 00:16:28,343 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@fdee9a5]]
2021-03-12 00:16:28,343 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Long): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@fdee9a5]
2021-03-12 00:16:28,465 [main:302] - generating value of type = Function1<T, Long> false depth = 0
2021-03-12 00:16:28,466 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:16:28,466 [main:117] - GENERATED CALL = (charRange()).sumOf({a: T -> 652249580404860228})
2021-03-12 00:16:28,467 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a3769ed]]
2021-03-12 00:16:28,467 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a3769ed]
2021-03-12 00:16:28,467 [main:117] - GENERATED CALL = (charRange()).step.toLong()
2021-03-12 00:16:28,467 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13f1d350]]
2021-03-12 00:16:28,467 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13f1d350]
2021-03-12 00:16:28,552 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:28,553 [main:117] - GENERATED CALL = (charRange()).step.rem(5023864644421877897)
2021-03-12 00:16:28,553 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]]
2021-03-12 00:16:28,553 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]
2021-03-12 00:16:28,640 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:28,641 [main:117] - GENERATED CALL = (charRange()).step.times(-1860724168099213684)
2021-03-12 00:16:28,641 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68496278]]
2021-03-12 00:16:28,641 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68496278]
2021-03-12 00:16:28,727 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:28,727 [main:117] - GENERATED CALL = (charRange()).step.minus(4591120347587528863)
2021-03-12 00:16:28,728 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]]
2021-03-12 00:16:28,728 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]
2021-03-12 00:16:28,828 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:28,829 [main:117] - GENERATED CALL = (charRange()).step.div(7075872479269988898)
2021-03-12 00:16:28,829 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]]
2021-03-12 00:16:28,829 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]
2021-03-12 00:16:28,830 [main:117] - GENERATED CALL = (charRange()).first.toLong()
2021-03-12 00:16:28,830 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1273fee8]]
2021-03-12 00:16:28,830 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1273fee8]
2021-03-12 00:16:28,830 [main:117] - GENERATED CALL = (charRange()).sum()
2021-03-12 00:16:28,830 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]]
2021-03-12 00:16:28,830 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36430024]
2021-03-12 00:16:28,830 [main:117] - GENERATED CALL = (charRange()).endInclusive.toLong()
2021-03-12 00:16:28,830 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11cd442d]]
2021-03-12 00:16:28,831 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11cd442d]
2021-03-12 00:16:28,941 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:28,942 [main:117] - GENERATED CALL = (charRange()).step.plus(-4960692198053115638)
2021-03-12 00:16:28,942 [main:61] - replacement of 1234L of type Long is (charRange()).step.div(7075872479269988898)
2021-03-12 00:16:29,029 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:29,030 [main:53] - replacing (sum, Int)
2021-03-12 00:16:29,031 [main:50] - replacing sum Int
2021-03-12 00:16:29,031 [main:54] - Getting value of type Int
2021-03-12 00:16:29,120 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:29,121 [main:58] - GENERATED VALUE OF TYPE Int = 622594494
2021-03-12 00:16:29,121 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:29,214 [main:67] - randomType = Double
2021-03-12 00:16:29,305 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:16:29,356 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@31b2fc37]
2021-03-12 00:16:29,356 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@925b315]
2021-03-12 00:16:29,456 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:29,457 [main:78] - Generated call from random type = (0.5251409470263729).toDouble().compareTo(-119)
2021-03-12 00:16:29,458 [main:106] - GETTING Int from LongRange
2021-03-12 00:16:29,500 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@37d7dda6]]
2021-03-12 00:16:29,500 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@37d7dda6]
2021-03-12 00:16:29,586 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:16:29,767 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Array<Short>): T = TODO()
2021-03-12 00:16:29,769 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Array<Short>): T = TODO()
2021-03-12 00:16:29,883 [main:302] - generating value of type = Array<Short> false depth = 3
2021-03-12 00:16:29,989 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Short> = TODO()
2021-03-12 00:16:29,990 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Short> = TODO()
2021-03-12 00:16:30,089 [main:95] - GENERATED = emptyArray<Short>()
2021-03-12 00:16:30,090 [main:95] - GENERATED = checkNotNull<Array<Short>>(emptyArray<Short>())
2021-03-12 00:16:30,090 [main:117] - GENERATED CALL = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>()))
2021-03-12 00:16:30,090 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78fd5c77]]
2021-03-12 00:16:30,090 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78fd5c77]
2021-03-12 00:16:30,174 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:16:30,355 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: UShort, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 00:16:30,356 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: UShort, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 00:16:30,560 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 00:16:30,561 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 00:16:30,562 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:16:30,562 [main:95] - GENERATED = requireNotNull<UShort>(15879.toUShort(), { "cocyf"})
2021-03-12 00:16:30,563 [main:117] - GENERATED CALL = (longRange()).lastIndexOf(requireNotNull<UShort>(15879.toUShort(), { "cocyf"}))
2021-03-12 00:16:30,563 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@272271e0]]
2021-03-12 00:16:30,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@272271e0]
2021-03-12 00:16:30,658 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 00:16:30,659 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:16:30,660 [main:117] - GENERATED CALL = (longRange()).sumOf({a: T -> 1772389834})
2021-03-12 00:16:30,660 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3b6ead]]
2021-03-12 00:16:30,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e3b6ead]
2021-03-12 00:16:30,661 [main:117] - GENERATED CALL = (longRange()).first.countOneBits()
2021-03-12 00:16:30,661 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fc3ac1]]
2021-03-12 00:16:30,661 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fc3ac1]
2021-03-12 00:16:30,661 [main:117] - GENERATED CALL = (longRange()).endInclusive.countTrailingZeroBits()
2021-03-12 00:16:30,661 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@61891398]]
2021-03-12 00:16:30,661 [main:117] - GENERATED CALL = (longRange()).first.sign
2021-03-12 00:16:30,661 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@34e17afb]]
2021-03-12 00:16:30,661 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@34e17afb]
2021-03-12 00:16:30,662 [main:117] - GENERATED CALL = (longRange()).endInclusive.toInt()
2021-03-12 00:16:30,662 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]]
2021-03-12 00:16:30,662 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:30,747 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:30,748 [main:117] - GENERATED CALL = (longRange()).endInclusive.compareTo(-57)
2021-03-12 00:16:30,748 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@cc46555]]
2021-03-12 00:16:30,748 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@cc46555]
2021-03-12 00:16:30,833 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:16:30,833 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:16:30,834 [main:117] - GENERATED CALL = (longRange()).indexOfLast({a: T -> true})
2021-03-12 00:16:30,834 [main:113] - Case = [public open fun contains(value: kotlin.Long): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@2cae9603], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]]
2021-03-12 00:16:30,834 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Long): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@2cae9603]
2021-03-12 00:16:30,917 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:30,918 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24690f54]
2021-03-12 00:16:31,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:31,020 [main:117] - GENERATED CALL = (longRange()).contains(2922205899483040395).compareTo(true)
2021-03-12 00:16:31,020 [main:61] - replacement of sum of type Int is (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>()))
2021-03-12 00:16:31,115 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:31,116 [main:66] - Compilation checking started
2021-03-12 00:16:31,619 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return "OK"
}


2021-03-12 00:16:31,619 [main:53] - replacing (1L .. 4L, LongRange)
2021-03-12 00:16:31,619 [main:50] - replacing 1L .. 4L LongRange
2021-03-12 00:16:31,619 [main:54] - Getting value of type LongRange
2021-03-12 00:16:31,728 [main:302] - generating value of type = LongRange false depth = 0
2021-03-12 00:16:31,843 [main:43] - GENERATING CALL OF fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongRange = TODO()
2021-03-12 00:16:31,845 [main:61] - WITHOUT TYPE PARAMS = fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): LongRange = TODO()
2021-03-12 00:16:32,168 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:16:32,169 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:16:32,170 [main:95] - GENERATED = LongRange(4895429295518525365, 708580971275767467)
2021-03-12 00:16:32,170 [main:58] - GENERATED VALUE OF TYPE LongRange = LongRange(4895429295518525365, 708580971275767467)
2021-03-12 00:16:32,170 [main:61] - GENERATED IS CALL =true
2021-03-12 00:16:32,171 [main:67] - randomType = Long
2021-03-12 00:16:32,273 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:32,333 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@62442217]
2021-03-12 00:16:32,333 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1a266821]
2021-03-12 00:16:32,437 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:32,438 [main:78] - Generated call from random type = (2423691165522639473).toByte().rangeTo(-7699326963853009771)
2021-03-12 00:16:32,439 [main:106] - GETTING LongRange from CharRange
2021-03-12 00:16:32,479 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b601570]]
2021-03-12 00:16:32,479 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b601570]
2021-03-12 00:16:32,571 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:32,572 [main:117] - GENERATED CALL = (charRange()).step.rangeTo(-2373730584274613248)
2021-03-12 00:16:32,572 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public infix fun kotlin.Int.until(to: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@157303d9]]
2021-03-12 00:16:32,573 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 00:16:32,659 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:32,660 [main:117] - GENERATED CALL = (charRange()).step.until(8960098712432798349)
2021-03-12 00:16:32,660 [main:61] - replacement of 1L .. 4L of type LongRange is (charRange()).step.until(8960098712432798349)
2021-03-12 00:16:32,753 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:32,753 [main:53] - replacing (sumL, Long)
2021-03-12 00:16:32,757 [main:50] - replacing sumL Long
2021-03-12 00:16:32,757 [main:54] - Getting value of type Long
2021-03-12 00:16:32,880 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:32,881 [main:58] - GENERATED VALUE OF TYPE Long = 7336078155571187201
2021-03-12 00:16:32,881 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:33,014 [main:67] - randomType = UInt
2021-03-12 00:16:33,136 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:16:33,183 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@71bc39f4]
2021-03-12 00:16:33,184 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2e46b46]
2021-03-12 00:16:33,184 [main:78] - Generated call from random type = (274333954.toUInt()).toUByte().toLong()
2021-03-12 00:16:33,185 [main:106] - GETTING Long from LongRange
2021-03-12 00:16:33,222 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], public final infix fun and(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1bc3ff34]]
2021-03-12 00:16:33,222 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1bc3ff34]
2021-03-12 00:16:33,316 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:33,317 [main:117] - GENERATED CALL = (longRange()).endInclusive.and(3949247678228264768)
2021-03-12 00:16:33,317 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.singleOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68ab9426]]
2021-03-12 00:16:33,317 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.singleOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68ab9426]
2021-03-12 00:16:33,317 [main:117] - GENERATED CALL = (longRange()).singleOrNull()
2021-03-12 00:16:33,317 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@477b324e]]
2021-03-12 00:16:33,317 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@477b324e]
2021-03-12 00:16:33,415 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:33,416 [main:117] - GENERATED CALL = (longRange()).elementAtOrNull(-1903389726)
2021-03-12 00:16:33,416 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], public final operator fun unaryPlus(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@94e72a4]]
2021-03-12 00:16:33,417 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@94e72a4]
2021-03-12 00:16:33,417 [main:117] - GENERATED CALL = (longRange()).first.unaryPlus()
2021-03-12 00:16:33,417 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeLowestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@1e847672]]
2021-03-12 00:16:33,417 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeLowestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@1e847672]
2021-03-12 00:16:33,417 [main:117] - GENERATED CALL = (longRange()).endInclusive.takeLowestOneBit()
2021-03-12 00:16:33,417 [main:113] - Case = [public final val first: kotlin.Long defined in kotlin.ranges.LongProgression[DeserializedPropertyDescriptor@3c100bd4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@6cd64398]]
2021-03-12 00:16:33,417 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@6cd64398]
2021-03-12 00:16:33,418 [main:117] - GENERATED CALL = (longRange()).first.takeHighestOneBit()
2021-03-12 00:16:33,418 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], public final operator fun dec(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@18473bda]]
2021-03-12 00:16:33,418 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@18473bda]
2021-03-12 00:16:33,418 [main:117] - GENERATED CALL = (longRange()).endInclusive.dec()
2021-03-12 00:16:33,418 [main:113] - Case = [public open val endInclusive: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@3db2a286], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@12678b1]]
2021-03-12 00:16:33,418 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@12678b1]
2021-03-12 00:16:33,515 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:33,516 [main:117] - GENERATED CALL = (longRange()).endInclusive.rem(51)
2021-03-12 00:16:33,516 [main:113] - Case = [public open fun iterator(): kotlin.collections.LongIterator defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@6885966e], public final fun next(): kotlin.Long defined in kotlin.collections.LongIterator[DeserializedSimpleFunctionDescriptor@50ed38ef]]
2021-03-12 00:16:33,516 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.LongIterator defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@6885966e]
2021-03-12 00:16:33,516 [main:149] - GENERATING call of type public final fun next(): kotlin.Long defined in kotlin.collections.LongIterator[DeserializedSimpleFunctionDescriptor@50ed38ef]
2021-03-12 00:16:33,517 [main:117] - GENERATED CALL = (longRange()).iterator().next()
2021-03-12 00:16:33,517 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1564d5de]]
2021-03-12 00:16:33,517 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1564d5de]
2021-03-12 00:16:33,638 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:33,639 [main:117] - GENERATED CALL = (longRange()).elementAt(-804219779)
2021-03-12 00:16:33,639 [main:61] - replacement of sumL of type Long is (274333954.toUInt()).toUByte().toLong()
2021-03-12 00:16:33,744 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:33,745 [main:53] - replacing (sumC, Int)
2021-03-12 00:16:33,745 [main:50] - replacing sumC Int
2021-03-12 00:16:33,745 [main:54] - Getting value of type Int
2021-03-12 00:16:33,839 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:33,839 [main:58] - GENERATED VALUE OF TYPE Int = 1507377797
2021-03-12 00:16:33,839 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:34,032 [main:67] - randomType = LinkedHashSet<Long?>
2021-03-12 00:16:34,129 [main:302] - generating value of type = LinkedHashSet<Long?> false depth = 0
2021-03-12 00:16:34,252 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Long?> = TODO()
2021-03-12 00:16:34,255 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Long?> = TODO()
2021-03-12 00:16:34,366 [main:95] - GENERATED = linkedSetOf<Long?>()
2021-03-12 00:16:34,572 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@61bfcf43]
2021-03-12 00:16:34,665 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:16:34,665 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:16:34,666 [main:78] - Generated call from random type = (linkedSetOf<Long?>()).indexOfFirst({a: T -> false})
2021-03-12 00:16:34,668 [main:106] - GETTING Int from IntRange
2021-03-12 00:16:34,705 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.findLast(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@b49378e]]
2021-03-12 00:16:34,705 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.findLast(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@b49378e]
2021-03-12 00:16:34,794 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:16:34,795 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:16:34,796 [main:117] - GENERATED CALL = (intRange()).findLast({a: T -> false})
2021-03-12 00:16:34,796 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@477b324e]]
2021-03-12 00:16:34,796 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAtOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@477b324e]
2021-03-12 00:16:34,885 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:34,886 [main:117] - GENERATED CALL = (intRange()).elementAtOrNull(1986112260)
2021-03-12 00:16:34,886 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@62fd809b]]
2021-03-12 00:16:34,886 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@62fd809b]
2021-03-12 00:16:34,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:35,082 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:35,083 [main:117] - GENERATED CALL = (intRange()).endInclusive.coerceIn(-222098448, 1159826165)
2021-03-12 00:16:35,083 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3615fc07]]
2021-03-12 00:16:35,083 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3615fc07]
2021-03-12 00:16:35,083 [main:117] - GENERATED CALL = (intRange()).first.takeHighestOneBit()
2021-03-12 00:16:35,084 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@207f36b3]]
2021-03-12 00:16:35,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@207f36b3]
2021-03-12 00:16:35,169 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 00:16:35,259 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 00:16:35,260 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 00:16:35,450 [main:385] - Cant generate call of fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 00:16:35,450 [main:158] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@207f36b3]
2021-03-12 00:16:35,451 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60d31a5e]]
2021-03-12 00:16:35,451 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60d31a5e]
2021-03-12 00:16:35,451 [main:117] - GENERATED CALL = (intRange()).first.countOneBits()
2021-03-12 00:16:35,451 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@78b5e9c7], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]]
2021-03-12 00:16:35,451 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]
2021-03-12 00:16:35,546 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:35,547 [main:117] - GENERATED CALL = (intRange()).first.or(-143308286)
2021-03-12 00:16:35,547 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@372787b5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3615fc07]]
2021-03-12 00:16:35,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3615fc07]
2021-03-12 00:16:35,547 [main:117] - GENERATED CALL = (intRange()).endInclusive.takeHighestOneBit()
2021-03-12 00:16:35,548 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4182e699]]
2021-03-12 00:16:35,548 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4182e699]
2021-03-12 00:16:35,638 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 00:16:35,731 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<Float>, selector: (T)->Float): Comparator<T> = TODO()
2021-03-12 00:16:35,733 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<Float>, selector: (T)->Float): Comparator<T> = TODO()
2021-03-12 00:16:36,040 [main:302] - generating value of type = Comparator<Float> false depth = 3
2021-03-12 00:16:36,134 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<Float> = TODO()
2021-03-12 00:16:36,136 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<Float> = TODO()
2021-03-12 00:16:36,225 [main:95] - GENERATED = naturalOrder<Float>()
2021-03-12 00:16:36,225 [main:385] - Cant generate call of fun <T, K> compareByDescending(comparator: kotlin.Comparator<Float>, selector: (T)->Float): Comparator<T> = TODO()
2021-03-12 00:16:36,225 [main:158] - CANT GENERATE PARAMS FOR @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4182e699]
2021-03-12 00:16:36,225 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78fd5c77]]
2021-03-12 00:16:36,225 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78fd5c77]
2021-03-12 00:16:36,313 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:16:36,406 [main:43] - GENERATING CALL OF fun <T> minOf(a: UInt, b: UInt): T = TODO()
2021-03-12 00:16:36,408 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UInt, b: UInt): T = TODO()
2021-03-12 00:16:36,558 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:16:36,559 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:16:36,560 [main:95] - GENERATED = minOf<UInt>(1280592315.toUInt(), 1550097362.toUInt())
2021-03-12 00:16:36,561 [main:117] - GENERATED CALL = (intRange()).lastIndexOf(minOf<UInt>(1280592315.toUInt(), 1550097362.toUInt()))
2021-03-12 00:16:36,561 [main:61] - replacement of sumC of type Int is (intRange()).first.countOneBits()
2021-03-12 00:16:36,657 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:36,658 [main:53] - replacing (sumC, Int)
2021-03-12 00:16:36,658 [main:50] - replacing sumC Int
2021-03-12 00:16:36,659 [main:54] - Getting value of type Int
2021-03-12 00:16:36,746 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:36,746 [main:58] - GENERATED VALUE OF TYPE Int = 1881240701
2021-03-12 00:16:36,747 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:36,936 [main:67] - randomType = Array<UShort>
2021-03-12 00:16:37,026 [main:302] - generating value of type = Array<UShort> false depth = 0
2021-03-12 00:16:37,147 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->UShort): Array<UShort> = TODO()
2021-03-12 00:16:37,148 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->UShort): Array<UShort> = TODO()
2021-03-12 00:16:37,452 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:16:37,453 [main:302] - generating value of type = Function1<Int, UShort> false depth = 3
2021-03-12 00:16:37,454 [main:302] - generating value of type = UShort true depth = 4
2021-03-12 00:16:37,454 [main:95] - GENERATED = Array<UShort>(-589553970, {a: Int -> 11220.toUShort()})
2021-03-12 00:16:37,468 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@753b6e01]
2021-03-12 00:16:37,558 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:16:37,647 [main:43] - GENERATING CALL OF fun <T> maxOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-12 00:16:37,648 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-12 00:16:37,736 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 00:16:37,736 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 00:16:37,737 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 00:16:37,737 [main:95] - GENERATED = maxOf<UShort>(8767.toUShort(), 3871.toUShort(), 14089.toUShort())
2021-03-12 00:16:37,738 [main:78] - Generated call from random type = (Array<UShort>(-589553970, {a: Int -> 11220.toUShort()})).indexOf(maxOf<UShort>(8767.toUShort(), 3871.toUShort(), 14089.toUShort()))
2021-03-12 00:16:37,739 [main:106] - GETTING Int from Long
2021-03-12 00:16:37,769 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@37594fa9]]
2021-03-12 00:16:37,769 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:37,886 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:37,887 [main:117] - GENERATED CALL = (sumL).compareTo(-21).sign
2021-03-12 00:16:37,888 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f9bba41]]
2021-03-12 00:16:37,888 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:38,001 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:38,002 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f9bba41]
2021-03-12 00:16:38,003 [main:117] - GENERATED CALL = (sumL).compareTo(107).unaryMinus()
2021-03-12 00:16:38,003 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f853a53]]
2021-03-12 00:16:38,003 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3b81473c]
2021-03-12 00:16:38,099 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:38,100 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f853a53]
2021-03-12 00:16:38,100 [main:117] - GENERATED CALL = (sumL).compareTo(18).and(sumC)
2021-03-12 00:16:38,100 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@62442217], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@35b451d9]]
2021-03-12 00:16:38,101 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@62442217]
2021-03-12 00:16:38,101 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@35b451d9]
2021-03-12 00:16:38,188 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:38,189 [main:117] - GENERATED CALL = (sumL).toByte().div(-65)
2021-03-12 00:16:38,189 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5c92fcf3], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71e873a8]]
2021-03-12 00:16:38,189 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5c92fcf3]
2021-03-12 00:16:38,275 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:16:38,276 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@71e873a8]
2021-03-12 00:16:38,276 [main:117] - GENERATED CALL = (sumL).div(0.6164637f).toRawBits()
2021-03-12 00:16:38,276 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@736c02d2]]
2021-03-12 00:16:38,276 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:38,276 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@736c02d2]
2021-03-12 00:16:38,361 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:38,362 [main:117] - GENERATED CALL = (sumL).toInt().shr(-2131380831)
2021-03-12 00:16:38,362 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55aeefb3]]
2021-03-12 00:16:38,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@55aeefb3]
2021-03-12 00:16:38,362 [main:117] - GENERATED CALL = (sumL).countLeadingZeroBits()
2021-03-12 00:16:38,362 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45f668da]]
2021-03-12 00:16:38,362 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:38,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45f668da]
2021-03-12 00:16:38,363 [main:117] - GENERATED CALL = (sumL).toInt().countLeadingZeroBits()
2021-03-12 00:16:38,363 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f853a53]]
2021-03-12 00:16:38,363 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:16:38,363 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f853a53]
2021-03-12 00:16:38,363 [main:117] - GENERATED CALL = (sumL).toInt().and(sumC)
2021-03-12 00:16:38,363 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@62442217], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5c3bb402]]
2021-03-12 00:16:38,363 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@62442217]
2021-03-12 00:16:38,363 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5c3bb402]
2021-03-12 00:16:38,363 [main:117] - GENERATED CALL = (sumL).toByte().countLeadingZeroBits()
2021-03-12 00:16:38,363 [main:61] - replacement of sumC of type Int is (sumL).countLeadingZeroBits()
2021-03-12 00:16:38,450 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:38,451 [main:66] - Compilation checking started
2021-03-12 00:16:38,745 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        (sumL).countLeadingZeroBits() = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return "OK"
}


2021-03-12 00:16:38,746 [main:53] - replacing ((intRange()).first.inv() + (charRange()).lastIndexOf(minOf<Byte>(-34, 103)) - (longRange()).sumBy({a: T -> -1582943428}), Int)
2021-03-12 00:16:38,746 [main:50] - replacing (intRange()).first.inv() + (charRange()).lastIndexOf(minOf<Byte>(-34, 103)) - (longRange()).sumBy({a: T -> -1582943428}) Int
2021-03-12 00:16:38,746 [main:54] - Getting value of type Int
2021-03-12 00:16:38,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:38,854 [main:58] - GENERATED VALUE OF TYPE Int = 1654776079
2021-03-12 00:16:38,854 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:38,855 [main:67] - randomType = Short
2021-03-12 00:16:38,949 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:16:39,001 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676d182d]
2021-03-12 00:16:39,089 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:16:39,090 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7dddbb74]
2021-03-12 00:16:39,090 [main:78] - Generated call from random type = (-20516).div(0.6711898889945116).toInt()
2021-03-12 00:16:39,090 [main:61] - replacement of (intRange()).first.inv() + (charRange()).lastIndexOf(minOf<Byte>(-34, 103)) - (longRange()).sumBy({a: T -> -1582943428}) of type Int is (-20516).div(0.6711898889945116).toInt()
2021-03-12 00:16:39,179 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:39,180 [main:53] - replacing (charRange().reversed().reversed(), CharProgression)
2021-03-12 00:16:39,181 [main:50] - replacing charRange().reversed().reversed() CharProgression
2021-03-12 00:16:39,181 [main:54] - Getting value of type CharProgression
2021-03-12 00:16:39,267 [main:302] - generating value of type = CharProgression false depth = 0
2021-03-12 00:16:39,358 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharProgression = TODO()
2021-03-12 00:16:39,360 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): CharProgression = TODO()
2021-03-12 00:16:39,702 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:16:39,703 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:16:39,703 [main:95] - GENERATED = CharRange('샱', '鱆')
2021-03-12 00:16:39,703 [main:58] - GENERATED VALUE OF TYPE CharProgression = CharRange('샱', '鱆')
2021-03-12 00:16:39,703 [main:61] - GENERATED IS CALL =true
2021-03-12 00:16:39,704 [main:67] - randomType = Int
2021-03-12 00:16:39,790 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:39,824 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]
2021-03-12 00:16:39,824 [main:149] - GENERATING call of type public infix fun kotlin.Char.downTo(to: kotlin.Char): kotlin.ranges.CharProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4c8141c6]
2021-03-12 00:16:39,911 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:39,911 [main:78] - Generated call from random type = (-403768546).toChar().downTo('ⵍ')
2021-03-12 00:16:39,915 [main:106] - GETTING CharProgression from Long
2021-03-12 00:16:39,953 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@9c5853e], public infix fun kotlin.Char.downTo(to: kotlin.Char): kotlin.ranges.CharProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4c8141c6]]
2021-03-12 00:16:39,953 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@9c5853e]
2021-03-12 00:16:39,953 [main:149] - GENERATING call of type public infix fun kotlin.Char.downTo(to: kotlin.Char): kotlin.ranges.CharProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4c8141c6]
2021-03-12 00:16:40,039 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:40,040 [main:117] - GENERATED CALL = (sumL).toChar().downTo('')
2021-03-12 00:16:40,040 [main:61] - replacement of charRange().reversed().reversed() of type CharProgression is CharRange('샱', '鱆')
2021-03-12 00:16:40,126 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:16:40,127 [main:66] - Compilation checking started
2021-03-12 00:16:40,587 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return "OK"
}


2021-03-12 00:16:40,590 [main:53] - replacing ("OK", String)
2021-03-12 00:16:40,590 [main:50] - replacing "OK" String
2021-03-12 00:16:40,590 [main:54] - Getting value of type String
2021-03-12 00:16:40,706 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:16:40,706 [main:58] - GENERATED VALUE OF TYPE String = "kziin"
2021-03-12 00:16:40,707 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:40,893 [main:67] - randomType = ArrayDeque<Byte>
2021-03-12 00:16:40,986 [main:302] - generating value of type = ArrayDeque<Byte> false depth = 0
2021-03-12 00:16:41,077 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Byte> = TODO()
2021-03-12 00:16:41,079 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Byte> = TODO()
2021-03-12 00:16:41,167 [main:95] - GENERATED = ArrayDeque<Byte>()
2021-03-12 00:16:41,289 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@4422fc08]
2021-03-12 00:16:41,289 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ef13431]
2021-03-12 00:16:41,289 [main:78] - Generated call from random type = (ArrayDeque<Byte>()).toArray().contentDeepToString()
2021-03-12 00:16:41,290 [main:106] - GETTING String from CharRange
2021-03-12 00:16:41,314 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2881d21e]]
2021-03-12 00:16:41,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2881d21e]
2021-03-12 00:16:41,314 [main:117] - GENERATED CALL = (charRange()).first.titlecase()
2021-03-12 00:16:41,314 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]]
2021-03-12 00:16:41,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]
2021-03-12 00:16:41,314 [main:117] - GENERATED CALL = (charRange()).endInclusive.lowercase()
2021-03-12 00:16:41,314 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]]
2021-03-12 00:16:41,315 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]
2021-03-12 00:16:41,315 [main:117] - GENERATED CALL = (charRange()).endInclusive.uppercase()
2021-03-12 00:16:41,315 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]]
2021-03-12 00:16:41,315 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]
2021-03-12 00:16:41,315 [main:117] - GENERATED CALL = (charRange()).first.uppercase()
2021-03-12 00:16:41,315 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5824fe3e]]
2021-03-12 00:16:41,315 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5824fe3e]
2021-03-12 00:16:41,402 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:16:41,403 [main:117] - GENERATED CALL = (charRange()).endInclusive.plus("eowca")
2021-03-12 00:16:41,403 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]]
2021-03-12 00:16:41,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]
2021-03-12 00:16:41,520 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:41,521 [main:117] - GENERATED CALL = (charRange()).step.toString(342366496)
2021-03-12 00:16:41,522 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]]
2021-03-12 00:16:41,522 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]
2021-03-12 00:16:41,523 [main:117] - GENERATED CALL = (charRange()).first.lowercase()
2021-03-12 00:16:41,523 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2881d21e]]
2021-03-12 00:16:41,523 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2881d21e]
2021-03-12 00:16:41,523 [main:117] - GENERATED CALL = (charRange()).endInclusive.titlecase()
2021-03-12 00:16:41,523 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5824fe3e]]
2021-03-12 00:16:41,523 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5824fe3e]
2021-03-12 00:16:41,625 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:16:41,626 [main:117] - GENERATED CALL = (charRange()).first.plus("bsoae")
2021-03-12 00:16:41,626 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77f0b0de]]
2021-03-12 00:16:41,626 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77f0b0de]
2021-03-12 00:16:41,713 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:16:41,807 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:16:41,903 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:16:41,904 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:16:42,096 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:16:42,097 [main:95] - GENERATED = StringBuilder(-1576757806)
2021-03-12 00:16:42,181 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:16:42,292 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:16:42,397 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:16:42,398 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:16:42,581 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:16:42,582 [main:95] - GENERATED = StringBuilder(-261098832)
2021-03-12 00:16:42,669 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:16:42,670 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:16:42,675 [main:117] - GENERATED CALL = (charRange()).joinToString("knghm", StringBuilder(-1576757806), "ogyzp", sum, StringBuilder(-261098832), {a: T -> "oxrsj"})
2021-03-12 00:16:42,675 [main:61] - replacement of "OK" of type String is (charRange()).endInclusive.plus("eowca")
2021-03-12 00:16:42,762 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:42,762 [main:66] - Compilation checking started
2021-03-12 00:16:43,222 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:43,223 [main:53] - replacing (4, Int)
2021-03-12 00:16:43,223 [main:50] - replacing 4 Int
2021-03-12 00:16:43,223 [main:54] - Getting value of type Int
2021-03-12 00:16:43,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:43,371 [main:58] - GENERATED VALUE OF TYPE Int = 1267697554
2021-03-12 00:16:43,371 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:43,596 [main:67] - randomType = Double?
2021-03-12 00:16:43,692 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:16:43,742 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@67369634]
2021-03-12 00:16:43,742 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1ebb3621]
2021-03-12 00:16:43,832 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:16:43,833 [main:78] - Generated call from random type = (0.9205493924369341)?.toByte().minus(-27)
2021-03-12 00:16:43,834 [main:106] - GETTING Int from CharRange
2021-03-12 00:16:43,868 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@74bd894b]]
2021-03-12 00:16:43,868 [main:117] - GENERATED CALL = (charRange()).first.code
2021-03-12 00:16:43,868 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@10641ce9]]
2021-03-12 00:16:43,869 [main:117] - GENERATED CALL = (charRange()).step.absoluteValue
2021-03-12 00:16:43,869 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bd13693]]
2021-03-12 00:16:43,869 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bd13693]
2021-03-12 00:16:43,869 [main:117] - GENERATED CALL = (charRange()).first.digitToInt()
2021-03-12 00:16:43,869 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fc424b]]
2021-03-12 00:16:43,869 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fc424b]
2021-03-12 00:16:43,869 [main:117] - GENERATED CALL = (charRange()).step.countTrailingZeroBits()
2021-03-12 00:16:43,869 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1170e97c]]
2021-03-12 00:16:43,869 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1170e97c]
2021-03-12 00:16:43,870 [main:117] - GENERATED CALL = (charRange()).count()
2021-03-12 00:16:43,870 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]]
2021-03-12 00:16:43,870 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]
2021-03-12 00:16:43,962 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:43,963 [main:117] - GENERATED CALL = (charRange()).first.compareTo('殝')
2021-03-12 00:16:43,963 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]]
2021-03-12 00:16:43,963 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2491aa04]
2021-03-12 00:16:44,055 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:44,056 [main:117] - GENERATED CALL = (charRange()).step.or(1352598965)
2021-03-12 00:16:44,056 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2a739459]]
2021-03-12 00:16:44,056 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2a739459]
2021-03-12 00:16:44,146 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:44,147 [main:117] - GENERATED CALL = (charRange()).step.rotateLeft(1357587860)
2021-03-12 00:16:44,147 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74d8a788]]
2021-03-12 00:16:44,147 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@74d8a788]
2021-03-12 00:16:44,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:44,234 [main:117] - GENERATED CALL = (charRange()).step.coerceAtMost(-1314801190)
2021-03-12 00:16:44,234 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]]
2021-03-12 00:16:44,234 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4d8e293]
2021-03-12 00:16:44,320 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:44,321 [main:117] - GENERATED CALL = (charRange()).endInclusive.compareTo('㶥')
2021-03-12 00:16:44,321 [main:61] - replacement of 4 of type Int is (charRange()).step.or(1352598965)
2021-03-12 00:16:44,428 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:44,428 [main:66] - Compilation checking started
2021-03-12 00:16:44,886 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:44,887 [main:53] - replacing (sumC, Int)
2021-03-12 00:16:44,887 [main:50] - replacing sumC Int
2021-03-12 00:16:44,887 [main:54] - Getting value of type Int
2021-03-12 00:16:44,984 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:44,985 [main:58] - GENERATED VALUE OF TYPE Int = 1750984886
2021-03-12 00:16:44,985 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:45,084 [main:67] - randomType = UInt
2021-03-12 00:16:45,173 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:16:45,205 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@25136422]
2021-03-12 00:16:45,294 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:16:45,295 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7bf1c78]
2021-03-12 00:16:45,383 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:16:45,384 [main:78] - Generated call from random type = (1538547957.toUInt()).compareTo(32.toUByte()).coerceAtLeast(2066585056)
2021-03-12 00:16:45,384 [main:61] - replacement of sumC of type Int is (1538547957.toUInt()).compareTo(32.toUByte()).coerceAtLeast(2066585056)
2021-03-12 00:16:45,471 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:45,578 [main:119] - TRYING TO REPLACE CONSTANT 0.78532875f
2021-03-12 00:16:45,668 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 00:16:45,668 [main:66] - Compilation checking started
2021-03-12 00:16:46,087 [main:119] - TRYING TO REPLACE CONSTANT 78
2021-03-12 00:16:46,176 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:16:46,177 [main:66] - Compilation checking started
2021-03-12 00:16:46,450 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(compareTo(true)).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:46,450 [main:119] - TRYING TO REPLACE CONSTANT 114
2021-03-12 00:16:46,564 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:16:46,564 [main:66] - Compilation checking started
2021-03-12 00:16:46,847 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (i).toChar().until('澡')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:46,847 [main:119] - TRYING TO REPLACE CONSTANT '澡'
2021-03-12 00:16:46,937 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 00:16:46,937 [main:66] - Compilation checking started
2021-03-12 00:16:47,418 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('샱')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo(-17) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:47,418 [main:119] - TRYING TO REPLACE CONSTANT 17
2021-03-12 00:16:47,520 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:47,520 [main:66] - Compilation checking started
2021-03-12 00:16:47,930 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('샱')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo((longRange()).endInclusive.compareTo(-17)) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:47,930 [main:119] - TRYING TO REPLACE CONSTANT 7557150282483401651
2021-03-12 00:16:48,021 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:16:48,021 [main:66] - Compilation checking started
2021-03-12 00:16:48,302 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(toLong())
fun charRange() = (-114).toChar().until('샱')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo((longRange()).endInclusive.compareTo(-17)) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo(true), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:48,302 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:16:48,415 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:16:48,415 [main:66] - Compilation checking started
2021-03-12 00:16:48,808 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('샱')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo((longRange()).endInclusive.compareTo(-17)) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli").compareTo((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli")), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:48,808 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:16:48,905 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 00:16:48,905 [main:66] - Compilation checking started
2021-03-12 00:16:49,303 [main:119] - TRYING TO REPLACE CONSTANT 2251897151875378477
2021-03-12 00:16:49,409 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:16:49,409 [main:66] - Compilation checking started
2021-03-12 00:16:49,845 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('샱')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo((longRange()).endInclusive.compareTo(-17)) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange('샱', '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> sumL.toULong()}))?.equals("glpli").compareTo((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli")), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:49,845 [main:119] - TRYING TO REPLACE CONSTANT '샱'
2021-03-12 00:16:49,938 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:49,939 [main:66] - Compilation checking started
2021-03-12 00:16:50,329 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('샱')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo((longRange()).endInclusive.compareTo(-17)) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange((charRange()).endInclusive, '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> sumL.toULong()}))?.equals("glpli").compareTo((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli")), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:50,329 [main:119] - TRYING TO REPLACE CONSTANT '鱆'
2021-03-12 00:16:50,427 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:16:50,427 [main:66] - Compilation checking started
2021-03-12 00:16:50,708 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1352598965)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('샱')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo((longRange()).endInclusive.compareTo(-17)) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange((charRange()).endInclusive, toChar())) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> sumL.toULong()}))?.equals("glpli").compareTo((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli")), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:50,708 [main:119] - TRYING TO REPLACE CONSTANT 1352598965
2021-03-12 00:16:50,801 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:16:50,801 [main:66] - Compilation checking started
2021-03-12 00:16:51,176 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. (charRange()).step.or(1)
fun longRange() = (charRange()).step.until(-7557150282483401651)
fun charRange() = (-114).toChar().until('샱')

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = (longRange()).indexOf(checkNotNull<Array<Short>>(emptyArray<Short>())) * (longRange()).endInclusive.compareTo((longRange()).endInclusive.compareTo(-17)) + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals((0.78532875f).compareTo(78).plus(sumL), (charRange()).step.toLong())

    var sumC = 0
    for (i in CharRange((charRange()).endInclusive, '鱆')) {
        sumC = (sumL).toShort().toInt()
    }
    assertEquals((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> sumL.toULong()}))?.equals("glpli").compareTo((Pair<Boolean, Function2<ULong, Long, ULong?>>(false, {a: ULong, b: Long -> 2251897151875378477.toULong()}))?.equals("glpli")), sumC)

    return (charRange()).endInclusive.plus("eowca")
}


2021-03-12 00:16:51,198 [main:41] - AFTER TRY 0 res = import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}
2021-03-12 00:16:51,503 [main:43] - Try №0
2021-03-12 00:16:52,313 [main:69] - Trying to insert fun box329(): String {
    val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable(prope0) as Object).getClass()

    return if (prope1 == prope2) "OK" else "$prope1 $prope2"
}
2021-03-12 00:16:52,422 [main:66] - Compilation checking started
2021-03-12 00:16:52,991 [main:103] - Trying to change 7 nodes
2021-03-12 00:16:52,991 [main:107] - replacing (prope1 == prope2, Boolean)
2021-03-12 00:16:52,994 [main:50] - replacing prope1 == prope2 Boolean
2021-03-12 00:16:52,994 [main:54] - Getting value of type Boolean
2021-03-12 00:16:53,107 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:53,107 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:16:53,109 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:53,226 [main:67] - randomType = UInt
2021-03-12 00:16:53,313 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:16:53,355 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3c2ed953]
2021-03-12 00:16:53,355 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@59feea1c]
2021-03-12 00:16:53,437 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:16:53,438 [main:78] - Generated call from random type = (1981452519.toUInt()).toFloat().equals("ciboa")
2021-03-12 00:16:53,439 [main:106] - GETTING Boolean from CharRange
2021-03-12 00:16:53,464 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6db33617]]
2021-03-12 00:16:53,465 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6db33617]
2021-03-12 00:16:53,465 [main:117] - GENERATED CALL = (charRange()).first.isLowerCase()
2021-03-12 00:16:53,465 [main:113] - Case = [public open fun contains(value: kotlin.Char): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@8e9941f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@178f3ded]]
2021-03-12 00:16:53,465 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Char): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@8e9941f]
2021-03-12 00:16:53,546 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:53,547 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@178f3ded]
2021-03-12 00:16:53,631 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:16:53,631 [main:117] - GENERATED CALL = (charRange()).contains('ጷ').equals("yenoc")
2021-03-12 00:16:53,632 [main:113] - Case = [public open fun contains(value: kotlin.Char): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@8e9941f], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@27cc3b4e]]
2021-03-12 00:16:53,632 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Char): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@8e9941f]
2021-03-12 00:16:53,712 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:16:53,713 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@27cc3b4e]
2021-03-12 00:16:53,792 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:53,793 [main:117] - GENERATED CALL = (charRange()).contains('屚').and(true)
2021-03-12 00:16:53,793 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ea5c7d3]]
2021-03-12 00:16:53,793 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ea5c7d3]
2021-03-12 00:16:53,793 [main:117] - GENERATED CALL = (charRange()).endInclusive.isSurrogate()
2021-03-12 00:16:53,793 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@574b4ae9]]
2021-03-12 00:16:53,793 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@574b4ae9]
2021-03-12 00:16:53,793 [main:117] - GENERATED CALL = (charRange()).first.isDefined()
2021-03-12 00:16:53,793 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef3a5]]
2021-03-12 00:16:53,793 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef3a5]
2021-03-12 00:16:53,794 [main:117] - GENERATED CALL = (charRange()).endInclusive.isTitleCase()
2021-03-12 00:16:53,794 [main:113] - Case = [public open fun iterator(): kotlin.collections.CharIterator defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@293cd1e8], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.CharIterator[DeserializedSimpleFunctionDescriptor@65dc10b]]
2021-03-12 00:16:53,794 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.CharIterator defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@293cd1e8]
2021-03-12 00:16:53,794 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.CharIterator[DeserializedSimpleFunctionDescriptor@65dc10b]
2021-03-12 00:16:53,794 [main:117] - GENERATED CALL = (charRange()).iterator().hasNext()
2021-03-12 00:16:53,794 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43c87534]]
2021-03-12 00:16:53,794 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43c87534]
2021-03-12 00:16:53,794 [main:117] - GENERATED CALL = (charRange()).first.isDigit()
2021-03-12 00:16:53,794 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharProgression[DeserializedSimpleFunctionDescriptor@4cdf35fd], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@108e4796]]
2021-03-12 00:16:53,794 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharProgression[DeserializedSimpleFunctionDescriptor@4cdf35fd]
2021-03-12 00:16:53,876 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:16:53,877 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@108e4796]
2021-03-12 00:16:53,959 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:53,960 [main:117] - GENERATED CALL = (charRange()).equals("mdula").xor(true)
2021-03-12 00:16:53,960 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bb93488]]
2021-03-12 00:16:53,960 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bb93488]
2021-03-12 00:16:53,960 [main:117] - GENERATED CALL = (charRange()).first.isWhitespace()
2021-03-12 00:16:53,960 [main:114] - replacement of prope1 == prope2 of type Boolean is (charRange()).equals("mdula").xor(true)
2021-03-12 00:16:54,070 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:54,070 [main:66] - Compilation checking started
2021-03-12 00:16:54,426 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable(prope0) as Object).getClass()

    return if ((charRange()).equals("mdula").xor(true)) "OK" else "$prope1 $prope2"
}


2021-03-12 00:16:54,426 [main:107] - replacing (prope0, Function0<Unit>)
2021-03-12 00:16:54,426 [main:50] - replacing prope0 Function0<Unit>
2021-03-12 00:16:54,427 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:16:54,510 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:16:54,511 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:16:54,515 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-12 00:16:54,515 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:54,516 [main:67] - randomType = Long
2021-03-12 00:16:54,596 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:16:54,628 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 00:16:54,657 [main:106] - GETTING Function0<Unit> from CharProgression
2021-03-12 00:16:54,674 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 00:16:54,703 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-12 00:16:54,728 [main:106] - GETTING Function0<Unit> from LongProgression
2021-03-12 00:16:54,740 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-12 00:16:54,762 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 00:16:54,763 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 00:16:54,764 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-12 00:16:54,785 [main:106] - GETTING Function0<Unit> from LongRange
2021-03-12 00:16:54,786 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-12 00:16:54,787 [main:106] - GETTING Function0<Unit> from CharRange
2021-03-12 00:16:54,788 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-12 00:16:54,802 [main:114] - replacement of prope0 of type Function0<Unit> is { println()}
2021-03-12 00:16:54,881 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:16:54,881 [main:66] - Compilation checking started
2021-03-12 00:16:55,257 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor(true)) "OK" else "$prope1 $prope2"
}


2021-03-12 00:16:55,345 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:16:55,428 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:16:55,428 [main:66] - Compilation checking started
2021-03-12 00:16:55,761 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}


2021-03-12 00:16:55,761 [main:41] - AFTER TRY 1 res = import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}


2021-03-12 00:16:56,141 [main:43] - Try №1
2021-03-12 00:16:56,833 [main:69] - Trying to insert fun String.fu0(count: Int) {
    val prope3 = false

    fu1 {
        this@fu0 + this@fu1.toString() + prope3.toString() + count.toString()
    }
}
2021-03-12 00:16:56,961 [main:66] - Compilation checking started
2021-03-12 00:16:57,558 [main:103] - Trying to change 19 nodes
2021-03-12 00:16:57,559 [main:107] - replacing ({
        this@fu0 + this@fu1.toString() + prope3.toString() + count.toString()
    }, [@kotlin.ExtensionFunctionType] Function1<Long, Unit>)
2021-03-12 00:16:57,562 [main:50] - replacing {
        this@fu0 + this@fu1.toString() + prope3.toString() + count.toString()
    } [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:16:57,562 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:16:57,678 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Long, Unit> false depth = 0
2021-03-12 00:16:57,679 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:16:57,684 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Long, Unit> = { println()}
2021-03-12 00:16:57,684 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:57,686 [main:67] - randomType = String
2021-03-12 00:16:57,787 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:16:57,847 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:16:57,894 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:16:57,943 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:16:57,970 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:16:57,975 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:16:57,979 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongProgression
2021-03-12 00:16:57,995 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:16:58,000 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:16:58,004 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharProgression
2021-03-12 00:16:58,021 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:16:58,048 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:16:58,052 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Long
2021-03-12 00:16:58,086 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Boolean
2021-03-12 00:16:58,098 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntProgression
2021-03-12 00:16:58,114 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:16:58,114 [main:114] - replacement of {
        this@fu0 + this@fu1.toString() + prope3.toString() + count.toString()
    } of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit> is { println()}
2021-03-12 00:16:58,207 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:16:58,208 [main:66] - Compilation checking started
2021-03-12 00:16:58,551 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = false

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.fu1()


2021-03-12 00:16:58,551 [main:107] - replacing (fu1, [@kotlin.ExtensionFunctionType] Function1<Long, Unit>)
2021-03-12 00:16:58,551 [main:50] - replacing fu1 [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:16:58,551 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:16:58,638 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Long, Unit> false depth = 0
2021-03-12 00:16:58,638 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:16:58,736 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:16:58,737 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:16:58,937 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:16:58,937 [main:95] - GENERATED = require(true)
2021-03-12 00:16:58,937 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Long, Unit> = { require(true)}
2021-03-12 00:16:58,938 [main:61] - GENERATED IS CALL =false
2021-03-12 00:16:58,939 [main:67] - randomType = String
2021-03-12 00:16:59,026 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:16:59,074 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongProgression
2021-03-12 00:16:59,091 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:16:59,126 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharProgression
2021-03-12 00:16:59,142 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:16:59,177 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:16:59,204 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:16:59,208 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:16:59,212 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:16:59,237 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:16:59,241 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:16:59,245 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:16:59,250 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Long
2021-03-12 00:16:59,282 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:16:59,287 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Boolean
2021-03-12 00:16:59,301 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntProgression
2021-03-12 00:16:59,312 [main:114] - replacement of fu1 of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit> is { require(true)}
2021-03-12 00:16:59,398 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:16:59,398 [main:66] - Compilation checking started
2021-03-12 00:16:59,642 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = false

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.{ require(true)}()


2021-03-12 00:16:59,642 [main:107] - replacing (false, Boolean)
2021-03-12 00:16:59,642 [main:50] - replacing false Boolean
2021-03-12 00:16:59,642 [main:54] - Getting value of type Boolean
2021-03-12 00:16:59,735 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:16:59,736 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:16:59,736 [main:61] - GENERATED IS CALL =false
2021-03-12 00:17:01,239 [main:67] - randomType = Function1<Long, ArrayDeque<Function2<Triple<Short, UInt, Function2<Short, Int?, UShort?>>?, Char, Pair<UByte, Byte>>>>
2021-03-12 00:17:01,240 [main:106] - GETTING Boolean from IntRange
2021-03-12 00:17:01,278 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@631852a5], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@108e4796]]
2021-03-12 00:17:01,278 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@631852a5]
2021-03-12 00:17:01,382 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:17:01,383 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@108e4796]
2021-03-12 00:17:01,383 [main:117] - GENERATED CALL = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))
2021-03-12 00:17:01,383 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30425f0e]]
2021-03-12 00:17:01,383 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30425f0e]
2021-03-12 00:17:01,384 [main:117] - GENERATED CALL = (intRange()).any()
2021-03-12 00:17:01,384 [main:113] - Case = [public open fun contains(value: kotlin.Int): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@171e4495], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@27cc3b4e]]
2021-03-12 00:17:01,384 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Int): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@171e4495]
2021-03-12 00:17:01,384 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@27cc3b4e]
2021-03-12 00:17:01,385 [main:117] - GENERATED CALL = (intRange()).contains(var sum =.and((charRange()).equals("mdula"))
2021-03-12 00:17:01,385 [main:113] - Case = [public open fun contains(value: kotlin.Int): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@171e4495], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@614ad27e]]
2021-03-12 00:17:01,385 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Int): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@171e4495]
2021-03-12 00:17:01,483 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:17:01,484 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@614ad27e]
2021-03-12 00:17:01,484 [main:117] - GENERATED CALL = (intRange()).contains(-1061326720).not()
2021-03-12 00:17:01,484 [main:113] - Case = [public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@691ef39b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@4730a5ca]]
2021-03-12 00:17:01,484 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@691ef39b]
2021-03-12 00:17:01,484 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@4730a5ca]
2021-03-12 00:17:01,573 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:17:01,574 [main:117] - GENERATED CALL = (intRange()).iterator().equals("tdtor")
2021-03-12 00:17:01,574 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@245a2c7f]]
2021-03-12 00:17:01,574 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@245a2c7f]
2021-03-12 00:17:01,668 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:17:01,668 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:17:01,669 [main:117] - GENERATED CALL = (intRange()).all({a: T -> false})
2021-03-12 00:17:01,669 [main:113] - Case = [public open fun contains(value: kotlin.Int): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@171e4495], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@108e4796]]
2021-03-12 00:17:01,669 [main:149] - GENERATING call of type public open fun contains(value: kotlin.Int): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@171e4495]
2021-03-12 00:17:01,761 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:17:01,762 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@108e4796]
2021-03-12 00:17:01,850 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:17:01,850 [main:117] - GENERATED CALL = (intRange()).contains(-1748813695).xor(false)
2021-03-12 00:17:01,850 [main:113] - Case = [public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@cc1247a]]
2021-03-12 00:17:01,851 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@cc1247a]
2021-03-12 00:17:01,851 [main:117] - GENERATED CALL = (intRange()).isEmpty()
2021-03-12 00:17:01,851 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@631852a5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@614ad27e]]
2021-03-12 00:17:01,851 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@631852a5]
2021-03-12 00:17:01,936 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:17:01,936 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@614ad27e]
2021-03-12 00:17:01,936 [main:117] - GENERATED CALL = (intRange()).equals("ockaf").not()
2021-03-12 00:17:01,936 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@631852a5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@178f3ded]]
2021-03-12 00:17:01,936 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@631852a5]
2021-03-12 00:17:02,021 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:17:02,021 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@178f3ded]
2021-03-12 00:17:02,146 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:17:02,147 [main:117] - GENERATED CALL = (intRange()).equals("sdgzy").equals("kbawt")
2021-03-12 00:17:02,147 [main:114] - replacement of false of type Boolean is (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))
2021-03-12 00:17:02,269 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:17:02,269 [main:66] - Compilation checking started
2021-03-12 00:17:02,667 [main:53] - Result = true
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.fu1()


2021-03-12 00:17:02,668 [main:107] - replacing (fu1, [@kotlin.ExtensionFunctionType] Function1<Long, Unit>)
2021-03-12 00:17:02,668 [main:50] - replacing fu1 [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:17:02,668 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:17:02,790 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Long, Unit> false depth = 0
2021-03-12 00:17:02,791 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:17:02,881 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:17:02,882 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:17:03,151 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:17:03,152 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:17:03,153 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:17:03,153 [main:95] - GENERATED = check(false, { "mavzq"})
2021-03-12 00:17:03,153 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Long, Unit> = { check(false, { "mavzq"})}
2021-03-12 00:17:03,153 [main:61] - GENERATED IS CALL =false
2021-03-12 00:17:03,155 [main:67] - randomType = Char
2021-03-12 00:17:03,238 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:17:03,261 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntProgression
2021-03-12 00:17:03,275 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Boolean
2021-03-12 00:17:03,289 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Long
2021-03-12 00:17:03,322 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:03,356 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharProgression
2021-03-12 00:17:03,393 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:03,397 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:17:03,427 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:17:03,451 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:03,482 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:03,489 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:17:03,494 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongProgression
2021-03-12 00:17:03,511 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:17:03,515 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:03,519 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:03,519 [main:114] - replacement of fu1 of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit> is { check(false, { "mavzq"})}
2021-03-12 00:17:03,602 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:17:03,602 [main:66] - Compilation checking started
2021-03-12 00:17:03,837 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.{ check(false, { "mavzq"})}()


2021-03-12 00:17:03,837 [main:107] - replacing (fu1, [@kotlin.ExtensionFunctionType] Function1<Long, Unit>)
2021-03-12 00:17:03,837 [main:50] - replacing fu1 [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:17:03,837 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:17:03,933 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Long, Unit> false depth = 0
2021-03-12 00:17:03,934 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:17:04,027 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:17:04,028 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:17:04,202 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:17:04,202 [main:95] - GENERATED = check(false)
2021-03-12 00:17:04,202 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Long, Unit> = { check(false)}
2021-03-12 00:17:04,202 [main:61] - GENERATED IS CALL =false
2021-03-12 00:17:04,291 [main:67] - randomType = UShort
2021-03-12 00:17:04,374 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:17:04,409 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:17:04,433 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:04,467 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Long
2021-03-12 00:17:04,501 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntProgression
2021-03-12 00:17:04,517 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:17:04,570 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:04,598 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:04,602 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:04,606 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:17:04,610 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharProgression
2021-03-12 00:17:04,627 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:17:04,631 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Boolean
2021-03-12 00:17:04,643 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:04,648 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongProgression
2021-03-12 00:17:04,665 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:04,665 [main:114] - replacement of fu1 of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit> is { check(false)}
2021-03-12 00:17:04,748 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:17:04,749 [main:66] - Compilation checking started
2021-03-12 00:17:04,967 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.{ check(false)}()


2021-03-12 00:17:04,967 [main:107] - replacing (fu1, [@kotlin.ExtensionFunctionType] Function1<Long, Unit>)
2021-03-12 00:17:04,967 [main:50] - replacing fu1 [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:17:04,967 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:17:05,052 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Long, Unit> false depth = 0
2021-03-12 00:17:05,052 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:17:05,145 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:17:05,146 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:17:05,319 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:17:05,320 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:17:05,323 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:17:05,323 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Long, Unit> = { contract({ println()})}
2021-03-12 00:17:05,324 [main:61] - GENERATED IS CALL =false
2021-03-12 00:17:05,412 [main:67] - randomType = Int?
2021-03-12 00:17:05,495 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:17:05,551 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:05,589 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:17:05,615 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:05,641 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharProgression
2021-03-12 00:17:05,659 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:05,664 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Boolean
2021-03-12 00:17:05,697 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:17:05,722 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:17:05,727 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Long
2021-03-12 00:17:05,761 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:05,765 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntProgression
2021-03-12 00:17:05,781 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:17:05,786 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongProgression
2021-03-12 00:17:05,802 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:05,806 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:05,806 [main:114] - replacement of fu1 of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit> is { contract({ println()})}
2021-03-12 00:17:05,890 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:17:05,890 [main:66] - Compilation checking started
2021-03-12 00:17:06,113 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.{ contract({ println()})}()


2021-03-12 00:17:06,114 [main:107] - replacing (5L, Long)
2021-03-12 00:17:06,114 [main:50] - replacing 5L Long
2021-03-12 00:17:06,114 [main:54] - Getting value of type Long
2021-03-12 00:17:06,196 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:17:06,197 [main:58] - GENERATED VALUE OF TYPE Long = -5929709381850366989
2021-03-12 00:17:06,197 [main:61] - GENERATED IS CALL =false
2021-03-12 00:17:06,459 [main:67] - randomType = HashSet<ArrayDeque<Double>>
2021-03-12 00:17:06,542 [main:302] - generating value of type = HashSet<ArrayDeque<Double>> false depth = 0
2021-03-12 00:17:06,629 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<ArrayDeque<Double>> = TODO()
2021-03-12 00:17:06,630 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<ArrayDeque<Double>> = TODO()
2021-03-12 00:17:06,717 [main:95] - GENERATED = hashSetOf<ArrayDeque<Double>>()
2021-03-12 00:17:06,866 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1273fee8]
2021-03-12 00:17:06,867 [main:78] - Generated call from random type = (hashSetOf<ArrayDeque<Double>>()).sum()
2021-03-12 00:17:06,867 [main:106] - GETTING Long from Long
2021-03-12 00:17:06,896 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@31b2fc37], @kotlin.SinceKotlin public fun kotlin.Double.roundToLong(): kotlin.Long defined in kotlin.math[DeserializedSimpleFunctionDescriptor@8fe4c7f]]
2021-03-12 00:17:06,896 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@31b2fc37]
2021-03-12 00:17:06,896 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToLong(): kotlin.Long defined in kotlin.math[DeserializedSimpleFunctionDescriptor@8fe4c7f]
2021-03-12 00:17:06,896 [main:117] - GENERATED CALL = (sumL * 10).toDouble().roundToLong()
2021-03-12 00:17:06,896 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070], public fun kotlin.Long.coerceIn(minimumValue: kotlin.Long, maximumValue: kotlin.Long): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4a0dffda]]
2021-03-12 00:17:06,896 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070]
2021-03-12 00:17:06,896 [main:149] - GENERATING call of type public fun kotlin.Long.coerceIn(minimumValue: kotlin.Long, maximumValue: kotlin.Long): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4a0dffda]
2021-03-12 00:17:06,897 [main:117] - GENERATED CALL = (sumL * 10).toLong().coerceIn(var sumL =
2021-03-12 00:17:06,897 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070], public final infix fun shl(bitCount: kotlin.Int): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@580a4873]]
2021-03-12 00:17:06,897 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070]
2021-03-12 00:17:06,897 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@580a4873]
2021-03-12 00:17:06,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:17:06,980 [main:117] - GENERATED CALL = (sumL * 10).toLong().shl(-522632567)
2021-03-12 00:17:06,980 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]]
2021-03-12 00:17:06,980 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:17:06,980 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4259ccab]
2021-03-12 00:17:06,980 [main:117] - GENERATED CALL = (sumL * 10).toInt().times(var sumL =
2021-03-12 00:17:06,981 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]]
2021-03-12 00:17:06,981 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:17:06,981 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]
2021-03-12 00:17:06,981 [main:117] - GENERATED CALL = (sumL * 10).toInt().div(var sumL =
2021-03-12 00:17:06,981 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1b1cc90], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.LongRange.random(): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@77d252d6]]
2021-03-12 00:17:06,981 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1b1cc90]
2021-03-12 00:17:07,064 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:17:07,065 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.LongRange.random(): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@77d252d6]
2021-03-12 00:17:07,065 [main:117] - GENERATED CALL = (sumL * 10).rangeTo(106).random()
2021-03-12 00:17:07,065 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@6cd64398]]
2021-03-12 00:17:07,065 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.takeHighestOneBit(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@6cd64398]
2021-03-12 00:17:07,065 [main:117] - GENERATED CALL = (sumL * 10).takeHighestOneBit()
2021-03-12 00:17:07,065 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68496278]]
2021-03-12 00:17:07,065 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:17:07,065 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68496278]
2021-03-12 00:17:07,148 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:17:07,148 [main:117] - GENERATED CALL = (sumL * 10).toInt().minus(8260508063311443557)
2021-03-12 00:17:07,149 [main:113] - Case = [public final operator fun dec(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@18473bda]]
2021-03-12 00:17:07,149 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@18473bda]
2021-03-12 00:17:07,149 [main:117] - GENERATED CALL = (sumL * 10).dec()
2021-03-12 00:17:07,149 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070], public fun kotlin.Long.coerceAtMost(maximumValue: kotlin.Long): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ceb2d1c]]
2021-03-12 00:17:07,149 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4138a070]
2021-03-12 00:17:07,149 [main:149] - GENERATING call of type public fun kotlin.Long.coerceAtMost(maximumValue: kotlin.Long): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ceb2d1c]
2021-03-12 00:17:07,149 [main:117] - GENERATED CALL = (sumL * 10).toLong().coerceAtMost(var sumL =
2021-03-12 00:17:07,149 [main:114] - replacement of 5L of type Long is (sumL * 10).takeHighestOneBit()
2021-03-12 00:17:07,231 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:17:07,232 [main:66] - Compilation checking started
2021-03-12 00:17:07,446 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = (sumL * 10).takeHighestOneBit().fu1()


2021-03-12 00:17:07,446 [main:107] - replacing (fu1, [@kotlin.ExtensionFunctionType] Function1<Long, Unit>)
2021-03-12 00:17:07,446 [main:50] - replacing fu1 [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:17:07,446 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit>
2021-03-12 00:17:07,529 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Long, Unit> false depth = 0
2021-03-12 00:17:07,530 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:17:07,615 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:17:07,616 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:17:07,789 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:17:07,789 [main:95] - GENERATED = println("xqamd")
2021-03-12 00:17:07,789 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Long, Unit> = { println("xqamd")}
2021-03-12 00:17:07,789 [main:61] - GENERATED IS CALL =false
2021-03-12 00:17:07,993 [main:67] - randomType = UShort?
2021-03-12 00:17:08,076 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:17:08,109 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:08,136 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:17:08,160 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:17:08,186 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntProgression
2021-03-12 00:17:08,201 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from IntRange
2021-03-12 00:17:08,205 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharProgression
2021-03-12 00:17:08,223 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Boolean
2021-03-12 00:17:08,235 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:08,269 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Long
2021-03-12 00:17:08,303 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongRange
2021-03-12 00:17:08,308 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from LongProgression
2021-03-12 00:17:08,323 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:08,327 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:08,331 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from CharRange
2021-03-12 00:17:08,336 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Long, Unit> from Int
2021-03-12 00:17:08,336 [main:114] - replacement of fu1 of type [@kotlin.ExtensionFunctionType] Function1<Long, Unit> is { println("xqamd")}
2021-03-12 00:17:08,418 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:17:08,418 [main:66] - Compilation checking started
2021-03-12 00:17:08,626 [main:49] - Result = false
Text:
import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.{ println("xqamd")}()


2021-03-12 00:17:08,709 [main:41] - AFTER TRY 2 res = import kotlin.test.*

fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.fu1()


2021-03-12 00:17:09,055 [main:43] - GENERATING CALL OF fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}
2021-03-12 00:17:09,056 [main:61] - WITHOUT TYPE PARAMS = fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}
2021-03-12 00:17:09,161 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:17:09,162 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:17:09,163 [main:95] - GENERATED = "eqaap".fu0(1150307091)
2021-03-12 00:17:09,244 [main:43] - GENERATING CALL OF fun fu1(fu1: Long.() -> Unit) = 5L.fu1()
2021-03-12 00:17:09,244 [main:61] - WITHOUT TYPE PARAMS = fun fu1(fu1: Long.() -> Unit) = 5L.fu1()
2021-03-12 00:17:09,415 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Long, Unit> false depth = 1
2021-03-12 00:17:09,415 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:17:09,502 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:17:09,503 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:17:09,675 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:17:09,675 [main:95] - GENERATED = print("jdgdl")
2021-03-12 00:17:09,675 [main:95] - GENERATED = fu1({ print("jdgdl")})
2021-03-12 00:17:09,761 [main:43] - Try №2
2021-03-12 00:17:17,555 [main:69] - Trying to insert fun fu8(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return Kla1("fail")
            } finally {
                prope4 += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }
2021-03-12 00:17:17,818 [main:66] - Compilation checking started
2021-03-12 00:17:19,313 [main:103] - Trying to change 216 nodes
2021-03-12 00:17:19,313 [main:107] - replacing (prope4, Kla1)
2021-03-12 00:17:19,315 [main:50] - replacing prope4 Kla1
2021-03-12 00:17:19,315 [main:54] - Getting value of type Kla1
2021-03-12 00:17:19,566 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:17:19,568 [main:112] - generating klass Kla1 text = class Kla1(var value: String) {
    operator fun plusAssign(s: String?) {
        value += s
        if (s != "closed") {
            value += "->"
        }
    }
}
2021-03-12 00:17:19,795 [main:194] - Type params = []
2021-03-12 00:17:20,025 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:17:20,028 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1("zdmpu")
2021-03-12 00:17:20,028 [main:61] - GENERATED IS CALL =true
2021-03-12 00:17:20,631 [main:67] - randomType = Array<Triple<Long?, Kla2, Long>>
2021-03-12 00:17:20,864 [main:302] - generating value of type = Array<Triple<Long?, Kla2, Long>> false depth = 0
2021-03-12 00:17:21,075 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Triple<Long?, Kla2, Long>): Array<Triple<Long?, Kla2, Long>> = TODO()
2021-03-12 00:17:21,078 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Triple<Long?, Kla2, Long>): Array<Triple<Long?, Kla2, Long>> = TODO()
2021-03-12 00:17:21,377 [main:302] - generating value of type = Triple<Long?, Kla2, Long> false depth = 3
2021-03-12 00:17:21,576 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Long?, second: Kla2, third: Long): Triple<Long?, Kla2, Long> = TODO()
2021-03-12 00:17:21,579 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Long?, second: Kla2, third: Long): Triple<Long?, Kla2, Long> = TODO()
2021-03-12 00:17:21,824 [main:302] - generating value of type = Long true depth = 6
2021-03-12 00:17:21,826 [main:302] - generating value of type = Kla2 false depth = 6
2021-03-12 00:17:21,828 [main:112] - generating klass Kla2 text = class Kla2() : Closeable {

    var prope4 = Kla1("")

    private fun fu2() {
        prope4 += "called"
    }

    fun fu3(): Kla1 {
        use {
            fu2()
        }
        return prope4
    }


    fun fu4(): Kla1 {
        use {
            fu2()
            return prope4
        }
        return Kla1("fail")
    }

    fun fu5(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message!!
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu6(): Kla1 {
        var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
use {
            try {
                fu2()
                return Kla1("fail")
            } finally {
                prope4 += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu7(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return prope4
            } finally {
                prope4 += "finally"
            }
        }
        return Kla1("fail")
    }

    fun fu8(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return Kla1("fail")
            } finally {
                prope4 += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu9(): Kla1 {
        use {
            try {
                try {
                    fu2()
                    throw Kla0("exception")
                } catch (e: Kla0) {
                    prope4 += "exception"
                    return Kla1("fail")
                } finally {
                    prope4 += "finally1"
                    return prope4
                }
            } finally {
                prope4 += "finally2"
            }
        }
        return Kla1("fail")
    }

    fun fu10(): Kla1 {
        use {
            try {
                try {
                    fu2()
                    return prope4
                } finally {
                    prope4 += "finally1"
                    prope4
                }
            } finally {
                prope4 += "finally2"
            }
        }
        return Kla1("fail")
    }

    override fun close() {
        prope4 += "closed"
    }
}
2021-03-12 00:17:22,059 [main:194] - Type params = []
2021-03-12 00:17:22,272 [main:302] - generating value of type = Long true depth = 6
2021-03-12 00:17:22,274 [main:95] - GENERATED = Triple<Long?, Kla2, Long>(1986058023007813394, Kla2(), 3053456269222479478)
2021-03-12 00:17:22,275 [main:95] - GENERATED = arrayOf<Triple<Long?, Kla2, Long>>(Triple<Long?, Kla2, Long>(1986058023007813394, Kla2(), 3053456269222479478))
2021-03-12 00:17:22,297 [main:106] - GETTING Kla1 from IntRange
2021-03-12 00:17:22,326 [main:106] - GETTING Kla1 from LongProgression
2021-03-12 00:17:22,340 [main:106] - GETTING Kla1 from Int
2021-03-12 00:17:22,381 [main:106] - GETTING Kla1 from Long
2021-03-12 00:17:22,429 [main:106] - GETTING Kla1 from IntRange
2021-03-12 00:17:22,429 [main:106] - GETTING Kla1 from LongRange
2021-03-12 00:17:22,467 [main:106] - GETTING Kla1 from CharProgression
2021-03-12 00:17:22,490 [main:106] - GETTING Kla1 from IntProgression
2021-03-12 00:17:22,510 [main:106] - GETTING Kla1 from Boolean
2021-03-12 00:17:22,525 [main:106] - GETTING Kla1 from CharRange
2021-03-12 00:17:22,566 [main:106] - GETTING Kla1 from Int
2021-03-12 00:17:22,567 [main:106] - GETTING Kla1 from Int
2021-03-12 00:17:22,567 [main:106] - GETTING Kla1 from LongRange
2021-03-12 00:17:22,568 [main:106] - GETTING Kla1 from CharRange
2021-03-12 00:17:22,569 [main:106] - GETTING Kla1 from CharRange
2021-03-12 00:17:22,569 [main:114] - replacement of prope4 of type Kla1 is Kla1("zdmpu")
2021-03-12 00:17:22,768 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:17:22,769 [main:66] - Compilation checking started
2021-03-12 00:17:23,575 [main:53] - Result = true
Text:
import kotlin.test.*
import java.io.Closeable


fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.fu1()

class Kla0(message: String) : Exception(message)

class Kla1(var value: String) {
    operator fun plusAssign(s: String?) {
        value += s
        if (s != "closed") {
            value += "->"
        }
    }
}

class Kla2() : Closeable {

    var prope4 = Kla1("")

    private fun fu2() {
        prope4 += "called"
    }

    fun fu3(): Kla1 {
        use {
            fu2()
        }
        return prope4
    }


    fun fu4(): Kla1 {
        use {
            fu2()
            return prope4
        }
        return Kla1("fail")
    }

    fun fu5(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message!!
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu6(): Kla1 {
        var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
use {
            try {
                fu2()
                return Kla1("fail")
            } finally {
                Kla1("zdmpu") += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu7(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return prope4
            } finally {
                prope4 += "finally"
            }
        }
        return Kla1("fail")
    }

    fun fu8(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return Kla1("fail")
            } finally {
                prope4 += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu9(): Kla1 {
        use {
            try {
                try {
                    fu2()
                    throw Kla0("exception")
                } catch (e: Kla0) {
                    prope4 += "exception"
                    return Kla1("fail")
                } finally {
                    prope4 += "finally1"
                    return prope4
                }
            } finally {
                prope4 += "finally2"
            }
        }
        return Kla1("fail")
    }

    fun fu10(): Kla1 {
        use {
            try {
                try {
                    fu2()
                    return prope4
                } finally {
                    prope4 += "finally1"
                    prope4
                }
            } finally {
                prope4 += "finally2"
            }
        }
        return Kla1("fail")
    }

    override fun close() {
        prope4 += "closed"
    }
}

fun box830(): String {
    var prope5 = Kla2()
    var prope6 = prope5.fu3()
    if (prope6.value != "called->closed") return "fail local: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu4()
    if (prope6.value != "called->closed") return "fail nonLocalSimple: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu5()
    if (prope6.value != "called->exception->closed") return "fail nonLocalWithException: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu6()
    if (prope6.value != "called->finally->closed") return "fail nonLocalWithFinally: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu7()
    if (prope6.value != "called->exception->finally->closed") return "fail nonLocalWithExceptionAndFinally: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu8()
    if (prope6.value != "called->exception->finally->closed") return "fail nonLocalWithExceptionAndFinallyWithReturn: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu9()
    if (prope6.value != "called->exception->finally1->finally2->closed") return "fail nonLocalNestedWithException: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu10()
    if (prope6.value != "called->finally1->finally2->closed") return "fail nonLocalNestedFinally: " + prope6.value


    return "OK"
}


2021-03-12 00:17:23,576 [main:107] - replacing (prope5.fu3(), Kla1)
2021-03-12 00:17:23,579 [main:50] - replacing prope5.fu3() Kla1
2021-03-12 00:17:23,579 [main:54] - Getting value of type Kla1
2021-03-12 00:17:23,814 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:17:23,816 [main:112] - generating klass Kla1 text = class Kla1(var value: String) {
    operator fun plusAssign(s: String?) {
        value += s
        if (s != "closed") {
            value += "->"
        }
    }
}
2021-03-12 00:17:24,018 [main:194] - Type params = []
2021-03-12 00:17:24,211 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:17:24,213 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1("dqmod")
2021-03-12 00:17:24,213 [main:61] - GENERATED IS CALL =true
2021-03-12 00:17:24,371 [main:67] - randomType = Float
2021-03-12 00:17:24,579 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:17:24,633 [main:106] - GETTING Kla1 from CharRange
2021-03-12 00:17:24,676 [main:106] - GETTING Kla1 from Int
2021-03-12 00:17:24,726 [main:106] - GETTING Kla1 from IntProgression
2021-03-12 00:17:24,742 [main:106] - GETTING Kla1 from Long
2021-03-12 00:17:24,796 [main:106] - GETTING Kla1 from Boolean
2021-03-12 00:17:24,809 [main:106] - GETTING Kla1 from IntRange
2021-03-12 00:17:24,846 [main:106] - GETTING Kla1 from Int
2021-03-12 00:17:24,847 [main:106] - GETTING Kla1 from CharRange
2021-03-12 00:17:24,847 [main:106] - GETTING Kla1 from Int
2021-03-12 00:17:24,848 [main:106] - GETTING Kla1 from IntRange
2021-03-12 00:17:24,849 [main:106] - GETTING Kla1 from CharProgression
2021-03-12 00:17:24,869 [main:106] - GETTING Kla1 from LongRange
2021-03-12 00:17:24,904 [main:106] - GETTING Kla1 from LongRange
2021-03-12 00:17:24,904 [main:106] - GETTING Kla1 from CharRange
2021-03-12 00:17:24,905 [main:106] - GETTING Kla1 from LongProgression
2021-03-12 00:17:24,916 [main:114] - replacement of prope5.fu3() of type Kla1 is Kla1("dqmod")
2021-03-12 00:17:25,159 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:17:25,160 [main:66] - Compilation checking started
2021-03-12 00:17:25,998 [main:53] - Result = true
Text:
import kotlin.test.*
import java.io.Closeable


fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.fu1()

class Kla0(message: String) : Exception(message)

class Kla1(var value: String) {
    operator fun plusAssign(s: String?) {
        value += s
        if (s != "closed") {
            value += "->"
        }
    }
}

class Kla2() : Closeable {

    var prope4 = Kla1("")

    private fun fu2() {
        prope4 += "called"
    }

    fun fu3(): Kla1 {
        use {
            fu2()
        }
        return prope4
    }


    fun fu4(): Kla1 {
        use {
            fu2()
            return prope4
        }
        return Kla1("fail")
    }

    fun fu5(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message!!
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu6(): Kla1 {
        var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
use {
            try {
                fu2()
                return Kla1("fail")
            } finally {
                Kla1("zdmpu") += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu7(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return prope4
            } finally {
                prope4 += "finally"
            }
        }
        return Kla1("fail")
    }

    fun fu8(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return Kla1("fail")
            } finally {
                prope4 += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu9(): Kla1 {
        use {
            try {
                try {
                    fu2()
                    throw Kla0("exception")
                } catch (e: Kla0) {
                    prope4 += "exception"
                    return Kla1("fail")
                } finally {
                    prope4 += "finally1"
                    return prope4
                }
            } finally {
                prope4 += "finally2"
            }
        }
        return Kla1("fail")
    }

    fun fu10(): Kla1 {
        use {
            try {
                try {
                    fu2()
                    return prope4
                } finally {
                    prope4 += "finally1"
                    prope4
                }
            } finally {
                prope4 += "finally2"
            }
        }
        return Kla1("fail")
    }

    override fun close() {
        prope4 += "closed"
    }
}

fun box830(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
var prope5 = Kla2()
    var prope6 = Kla1("dqmod")
    if (prope6.value != "called->closed") return "fail local: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu4()
    if (prope6.value != "called->closed") return "fail nonLocalSimple: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu5()
    if (prope6.value != "called->exception->closed") return "fail nonLocalWithException: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu6()
    if (prope6.value != "called->finally->closed") return "fail nonLocalWithFinally: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu7()
    if (prope6.value != "called->exception->finally->closed") return "fail nonLocalWithExceptionAndFinally: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu8()
    if (prope6.value != "called->exception->finally->closed") return "fail nonLocalWithExceptionAndFinallyWithReturn: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu9()
    if (prope6.value != "called->exception->finally1->finally2->closed") return "fail nonLocalNestedWithException: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu10()
    if (prope6.value != "called->finally1->finally2->closed") return "fail nonLocalNestedFinally: " + prope6.value


    return "OK"
}


2021-03-12 00:17:26,000 [main:107] - replacing ("exception", String)
2021-03-12 00:17:26,002 [main:50] - replacing "exception" String
2021-03-12 00:17:26,002 [main:54] - Getting value of type String
2021-03-12 00:17:26,214 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:17:26,216 [main:58] - GENERATED VALUE OF TYPE String = "fousf"
2021-03-12 00:17:26,216 [main:61] - GENERATED IS CALL =false
2021-03-12 00:17:26,219 [main:67] - randomType = String
2021-03-12 00:17:26,416 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:17:26,439 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@198b6a44]
2021-03-12 00:17:26,661 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:17:26,666 [main:78] - Generated call from random type = ("szjta").removePrefix("ewdab")
2021-03-12 00:17:26,667 [main:106] - GETTING String from Int
2021-03-12 00:17:26,702 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]]
2021-03-12 00:17:26,702 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]
2021-03-12 00:17:26,702 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]
2021-03-12 00:17:26,702 [main:117] - GENERATED CALL = (sumC * 10).toChar().uppercase()
2021-03-12 00:17:26,702 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f710b18]]
2021-03-12 00:17:26,702 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@f7e49b]
2021-03-12 00:17:26,703 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f710b18]
2021-03-12 00:17:26,703 [main:117] - GENERATED CALL = (sumC * 10).div(var sumL =.toString(sumC * 10 + i.toInt())
2021-03-12 00:17:26,703 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]]
2021-03-12 00:17:26,703 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]
2021-03-12 00:17:26,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:17:26,924 [main:117] - GENERATED CALL = (sumC * 10).toString(-2125717523)
2021-03-12 00:17:26,924 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]]
2021-03-12 00:17:26,924 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@75823c39]
2021-03-12 00:17:26,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]
2021-03-12 00:17:26,924 [main:117] - GENERATED CALL = (sumC * 10).toInt().toString(sum * 10)
2021-03-12 00:17:26,924 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]]
2021-03-12 00:17:26,924 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]
2021-03-12 00:17:26,925 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]
2021-03-12 00:17:26,925 [main:117] - GENERATED CALL = (sumC * 10).toChar().lowercase()
2021-03-12 00:17:26,925 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d1c219], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]]
2021-03-12 00:17:26,925 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@56d1c219]
2021-03-12 00:17:26,925 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]
2021-03-12 00:17:26,925 [main:117] - GENERATED CALL = (sumC * 10).compareTo(var sumC =.toString(var sum =
2021-03-12 00:17:26,925 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2881d21e]]
2021-03-12 00:17:26,925 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]
2021-03-12 00:17:26,925 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2881d21e]
2021-03-12 00:17:26,925 [main:117] - GENERATED CALL = (sumC * 10).toChar().titlecase()
2021-03-12 00:17:26,926 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5824fe3e]]
2021-03-12 00:17:26,926 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@785f4c04]
2021-03-12 00:17:26,926 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5824fe3e]
2021-03-12 00:17:27,131 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:17:27,133 [main:117] - GENERATED CALL = (sumC * 10).toChar().plus("zxxfc")
2021-03-12 00:17:27,133 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e9a34bc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa2339d]]
2021-03-12 00:17:27,133 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e9a34bc]
2021-03-12 00:17:27,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa2339d]
2021-03-12 00:17:27,133 [main:117] - GENERATED CALL = (sumC * 10).toByte().toString(var sum =
2021-03-12 00:17:27,134 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@373f0fd6], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16bd2611]]
2021-03-12 00:17:27,134 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@373f0fd6]
2021-03-12 00:17:27,134 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16bd2611]
2021-03-12 00:17:27,134 [main:117] - GENERATED CALL = (sumC * 10).toShort().toString(var sum =
2021-03-12 00:17:27,134 [main:114] - replacement of "exception" of type String is (sumC * 10).toChar().titlecase()
2021-03-12 00:17:27,319 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:17:27,319 [main:66] - Compilation checking started
2021-03-12 00:17:28,150 [main:53] - Result = true
Text:
import kotlin.test.*
import java.io.Closeable


fun intRange() = 1 .. 4
fun longRange() = 1L .. 4L
fun charRange() = '1' .. '4'

fun box(): String {
    var sum = 0
    for (i in intRange().reversed().reversed()) {
        sum = sum * 10 + i
    }
    assertEquals(1234, sum)

    var sumL = 0L
    for (i in longRange().reversed().reversed()) {
        sumL = sumL * 10 + i
    }
    assertEquals(1234L, sumL)

    var sumC = 0
    for (i in charRange().reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }
    assertEquals(1234, sumC)

    return "OK"
}

fun box329(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ println()}) as Object).getClass()

    return if ((charRange()).equals("mdula").xor((charRange()).equals("mdula").xor(true))) "OK" else "$prope1 $prope2"
}

fun String.fu0(count: Int) {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
val prope3 = (intRange()).equals("iyzby").xor((charRange()).equals("mdula"))

    fu1 { println()}
}

fun fu1(fu1: Long.() -> Unit) = 5L.fu1()

class Kla0(message: String) : Exception(message)

class Kla1(var value: String) {
    operator fun plusAssign(s: String?) {
        value += s
        if (s != "closed") {
            value += "->"
        }
    }
}

class Kla2() : Closeable {

    var prope4 = Kla1("")

    private fun fu2() {
        prope4 += "called"
    }

    fun fu3(): Kla1 {
        use {
            fu2()
        }
        return prope4
    }


    fun fu4(): Kla1 {
        use {
            fu2()
            return prope4
        }
        return Kla1("fail")
    }

    fun fu5(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message!!
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu6(): Kla1 {
        var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
use {
            try {
                fu2()
                return Kla1("fail")
            } finally {
                Kla1("zdmpu") += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu7(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return prope4
            } finally {
                prope4 += "finally"
            }
        }
        return Kla1("fail")
    }

    fun fu8(): Kla1 {
        use {
            try {
                fu2()
                throw Kla0("exception")
            } catch (e: Kla0) {
                prope4 += e.message
                return Kla1("fail")
            } finally {
                prope4 += "finally"
                return prope4
            }
        }
        return Kla1("fail")
    }

    fun fu9(): Kla1 {
        var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
use {
            try {
                try {
                    fu2()
                    throw Kla0((sumC * 10).toChar().titlecase())
                } catch (e: Kla0) {
                    prope4 += "exception"
                    return Kla1("fail")
                } finally {
                    prope4 += "finally1"
                    return prope4
                }
            } finally {
                prope4 += "finally2"
            }
        }
        return Kla1("fail")
    }

    fun fu10(): Kla1 {
        use {
            try {
                try {
                    fu2()
                    return prope4
                } finally {
                    prope4 += "finally1"
                    prope4
                }
            } finally {
                prope4 += "finally2"
            }
        }
        return Kla1("fail")
    }

    override fun close() {
        prope4 += "closed"
    }
}

fun box830(): String {
    var sum = 0
var sumL = 0L
var sumC = 0
val prope0 = { }
var prope5 = Kla2()
    var prope6 = Kla1("dqmod")
    if (prope6.value != "called->closed") return "fail local: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu4()
    if (prope6.value != "called->closed") return "fail nonLocalSimple: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu5()
    if (prope6.value != "called->exception->closed") return "fail nonLocalWithException: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu6()
    if (prope6.value != "called->finally->closed") return "fail nonLocalWithFinally: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu7()
    if (prope6.value != "called->exception->finally->closed") return "fail nonLocalWithExceptionAndFinally: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu8()
    if (prope6.value != "called->exception->finally->closed") return "fail nonLocalWithExceptionAndFinallyWithReturn: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu9()
    if (prope6.value != "called->exception->finally1->finally2->closed") return "fail nonLocalNestedWithException: " + prope6.value

    prope5 = Kla2()
    prope6 = prope5.fu10()
    if (prope6.value != "called->finally1->finally2->closed") return "fail nonLocalNestedFinally: " + prope6.value


    return "OK"
}


2021-03-12 00:17:28,152 [main:107] - replacing ("fail", String)
2021-03-12 00:17:28,153 [main:50] - replacing "fail" String
2021-03-12 00:17:28,153 [main:54] - Getting value of type String
2021-03-12 00:17:28,364 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:17:28,366 [main:58] - GENERATED VALUE OF TYPE String = "tfqxf"
2021-03-12 00:17:28,366 [main:61] - GENERATED IS CALL =false
2021-03-12 00:17:28,967 [main:67] - randomType = MutableMap<ULong, Kla1?>
2021-03-12 00:17:28,968 [main:106] - GETTING String from CharRange
2021-03-12 00:17:29,011 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]]
2021-03-12 00:17:29,012 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]
2021-03-12 00:17:29,012 [main:117] - GENERATED CALL = (charRange()).first.lowercase()
2021-03-12 00:17:29,012 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@619cb866], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]]
2021-03-12 00:17:29,012 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e62f8da]
2021-03-12 00:17:29,012 [main:117] - GENERATED CALL = (charRange()).step.toString(sumC * 10 + i.toInt())
2021-03-12 00:17:29,012 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]]
2021-03-12 00:17:29,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]
2021-03-12 00:17:29,013 [main:117] - GENERATED CALL = (charRange()).endInclusive.uppercase()
2021-03-12 00:17:29,013 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]]
2021-03-12 00:17:29,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24e36703]
2021-03-12 00:17:29,013 [main:117] - GENERATED CALL = (charRange()).first.uppercase()
2021-03-12 00:17:29,013 [main:113] - Case = [public open val endInclusive: kotlin.Char defined in kotlin.ranges.CharRange[DeserializedPropertyDescriptor@5e9c5247], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]]
2021-03-12 00:17:29,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397730e7]
2021-03-12 00:17:29,013 [main:117] - GENERATED CALL = (charRange()).endInclusive.lowercase()
2021-03-12 00:17:29,013 [main:113] - Case = [public final val first: kotlin.Char defined in kotlin.ranges.CharProgression[DeserializedPropertyDescriptor@7e6c7163], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5824fe3e]]
2021-03-12 00:17:29,013 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5824fe3e]
2021-03-12 00:17:29,220 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:17:29,222 [main:117] - GENERATED CALL = (charRange()).first.plus("danjz")
2021-03-12 00:17:29,223 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77f0b0de]]
2021-03-12 00:17:29,223 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77f0b0de]
2021-03-12 00:17:29,437 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:17:29,631 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:17:29,634 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:17:30,066 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:17:30,071 [main:95] - GENERATED = StringBuilder("jyyjc")
2021-03-12 00:17:30,280 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:17:30,504 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:17:30,723 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:17:30,726 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:17:31,141 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:17:31,144 [main:95] - GENERATED = StringBuilder(-1634787123)
2021-03-12 00:17:31,365 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:17:31,579 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:17:31,581 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:17:31,806 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:17:31,809 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:17:32,261 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 00:17:32,454 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:17:32,457 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:17:32,902 [main:302] - generating value of type = Int true depth = 7
2021-03-12 00:17:32,904 [main:95] - GENERATED = StringBuilder(-237812683)
2021-03-12 00:17:32,904 [main:95] - GENERATED = StringBuilder(StringBuilder(-237812683))
