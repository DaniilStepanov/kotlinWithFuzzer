2021-03-12 05:18:07,998 [main:66] - Compilation checking started
2021-03-12 05:18:09,379 [main:112] - generating klass I text = interface I {
    fun foo(x: String = "OK"): String = x
}
2021-03-12 05:18:10,080 [main:302] - generating value of type = J false depth = 1
2021-03-12 05:18:10,081 [main:112] - generating klass J text = interface J : I
2021-03-12 05:18:10,321 [main:302] - generating value of type = O false depth = 3
2021-03-12 05:18:10,321 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:10,324 [main:112] - generating klass J text = interface J : I
2021-03-12 05:18:10,580 [main:302] - generating value of type = O false depth = 1
2021-03-12 05:18:10,580 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:10,581 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:10,798 [main:45] - Trying to change 1 nodes
2021-03-12 05:18:10,800 [main:53] - replacing (O.foo(), String)
2021-03-12 05:18:10,800 [main:50] - replacing O.foo() String
2021-03-12 05:18:10,800 [main:54] - Getting value of type String
2021-03-12 05:18:10,888 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:10,891 [main:58] - GENERATED VALUE OF TYPE String = "fauyo"
2021-03-12 05:18:10,892 [main:61] - GENERATED IS CALL =false
2021-03-12 05:18:11,237 [main:67] - randomType = Array<LinkedHashSet<Long>>
2021-03-12 05:18:11,327 [main:302] - generating value of type = Array<LinkedHashSet<Long>> false depth = 0
2021-03-12 05:18:11,428 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<LkedHashSet<Long>> = TODO()
2021-03-12 05:18:11,431 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<LkedHashSet<Long>> = TODO()
2021-03-12 05:18:11,532 [main:95] - GENERATED = emptyArray<LinkedHashSet<Long>>()
2021-03-12 05:18:11,638 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@44747589]
2021-03-12 05:18:11,640 [main:78] - Generated call from random type = (emptyArray<LinkedHashSet<Long>>()).contentToString()
2021-03-12 05:18:11,640 [main:106] - GETTING String from String
2021-03-12 05:18:11,698 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2a8ef1fa], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]]
2021-03-12 05:18:11,699 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2a8ef1fa]
2021-03-12 05:18:11,777 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:11,777 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:18:11,853 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:11,855 [main:117] - GENERATED CALL = (O.foo()).compareTo("bztlz").toString(336360530)
2021-03-12 05:18:11,855 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]]
2021-03-12 05:18:11,855 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]
2021-03-12 05:18:11,857 [main:117] - GENERATED CALL = (O.foo()).uppercase()
2021-03-12 05:18:11,857 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ead689]]
2021-03-12 05:18:11,857 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:18:11,960 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:12,041 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:12,041 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ead689]
2021-03-12 05:18:12,115 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:12,117 [main:117] - GENERATED CALL = (O.foo()).subSequence(-2010329618, -2118390106).repeat(-803326869)
2021-03-12 05:18:12,117 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ead689]]
2021-03-12 05:18:12,117 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ead689]
2021-03-12 05:18:12,213 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:12,215 [main:117] - GENERATED CALL = (O.foo()).repeat(1069607730)
2021-03-12 05:18:12,215 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]]
2021-03-12 05:18:12,215 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]
2021-03-12 05:18:12,315 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:12,403 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:12,405 [main:117] - GENERATED CALL = (O.foo()).substringAfter('糘', "gujei")
2021-03-12 05:18:12,405 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23690154]]
2021-03-12 05:18:12,405 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-12 05:18:12,406 [main:117] - GENERATED CALL = (O.foo()).reversed()
2021-03-12 05:18:12,407 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]]
2021-03-12 05:18:12,407 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]
2021-03-12 05:18:12,478 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:12,478 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:12,481 [main:117] - GENERATED CALL = (O.foo()).dropLastWhile({a: Char -> false})
2021-03-12 05:18:12,481 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b80ca33]]
2021-03-12 05:18:12,481 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b80ca33]
2021-03-12 05:18:12,558 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:12,559 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:12,560 [main:117] - GENERATED CALL = (O.foo()).dropWhile({a: Char -> true})
2021-03-12 05:18:12,561 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d015de5]]
2021-03-12 05:18:12,561 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:18:12,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:12,640 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d015de5]
2021-03-12 05:18:12,641 [main:117] - GENERATED CALL = (O.foo()).get(-1017755603).uppercase()
2021-03-12 05:18:12,641 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c80c87e]]
2021-03-12 05:18:12,641 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c80c87e]
2021-03-12 05:18:12,713 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:12,714 [main:117] - GENERATED CALL = (O.foo()).dropLast(-1366932139)
2021-03-12 05:18:12,715 [main:61] - replacement of O.foo()

 of type String is (O.foo()).dropLastWhile({a: Char -> false})
2021-03-12 05:18:12,787 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:18:12,787 [main:66] - Compilation checking started
2021-03-12 05:18:13,524 [main:53] - Result = true
Text:
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = (O.foo()).dropLastWhile({a: Char -> false})
2021-03-12 05:18:13,646 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 05:18:13,739 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:18:13,739 [main:66] - Compilation checking started
2021-03-12 05:18:14,202 [main:41] - AFTER TRY 0 res = interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()
2021-03-12 05:18:14,344 [main:112] - generating klass I text = interface I {
    fun foo(x: String = "OK"): String = x
}
2021-03-12 05:18:14,510 [main:302] - generating value of type = J false depth = 1
2021-03-12 05:18:14,510 [main:112] - generating klass J text = interface J : I
2021-03-12 05:18:14,657 [main:302] - generating value of type = O false depth = 3
2021-03-12 05:18:14,657 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:14,658 [main:112] - generating klass J text = interface J : I
2021-03-12 05:18:14,804 [main:302] - generating value of type = O false depth = 1
2021-03-12 05:18:14,805 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:14,805 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:14,995 [main:43] - Try №0
2021-03-12 05:18:16,086 [main:69] - Trying to insert fun box669(): String =
        Kla1().Kla2().callback()
2021-03-12 05:18:16,180 [main:66] - Compilation checking started
2021-03-12 05:18:16,737 [main:103] - Trying to change 9 nodes
2021-03-12 05:18:16,737 [main:107] - replacing (callback, Function0<String>)
2021-03-12 05:18:16,737 [main:50] - replacing callback Function0<String>
2021-03-12 05:18:16,737 [main:54] - Getting value of type Function0<String>
2021-03-12 05:18:16,818 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 05:18:16,818 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:18:16,818 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "xoyux"}
2021-03-12 05:18:16,819 [main:61] - GENERATED IS CALL =false
2021-03-12 05:18:16,821 [main:67] - randomType = O
2021-03-12 05:18:16,900 [main:302] - generating value of type = O false depth = 0
2021-03-12 05:18:16,900 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:16,927 [main:106] - GETTING Function0<String> from String
2021-03-12 05:18:16,967 [main:106] - GETTING Function0<String> from O
2021-03-12 05:18:16,989 [main:114] - replacement of callback of type Function0<String> is { "xoyux"}
2021-03-12 05:18:17,071 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:18:17,071 [main:66] - Compilation checking started
2021-03-12 05:18:17,251 [main:49] - Result = false
Text:
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ prope0 })
}

fun box669(): String =
        Kla1().Kla2().{ "xoyux"}()


2021-03-12 05:18:17,251 [main:107] - replacing (prope0, String)
2021-03-12 05:18:17,251 [main:50] - replacing prope0 String
2021-03-12 05:18:17,251 [main:54] - Getting value of type String
2021-03-12 05:18:17,332 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:17,333 [main:58] - GENERATED VALUE OF TYPE String = "ullzf"
2021-03-12 05:18:17,333 [main:61] - GENERATED IS CALL =false
2021-03-12 05:18:17,463 [main:67] - randomType = Boolean
2021-03-12 05:18:17,563 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:17,577 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]
2021-03-12 05:18:17,694 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:17,695 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:18:17,783 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:17,785 [main:78] - Generated call from random type = (false).compareTo(true).toString(-1303224930)
2021-03-12 05:18:17,787 [main:106] - GETTING String from O
2021-03-12 05:18:17,804 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154a9056]]
2021-03-12 05:18:17,804 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:17,805 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154a9056]
2021-03-12 05:18:17,885 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:17,964 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:17,965 [main:117] - GENERATED CALL = (O).foo(O.foo()).substringAfterLast('墖', "kiihm")
2021-03-12 05:18:17,965 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]]
2021-03-12 05:18:17,965 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:18,043 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:18,044 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]
2021-03-12 05:18:18,125 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:18,127 [main:117] - GENERATED CALL = (O).foo("nfwab").replaceAfterLast('瘒', O.foo(), O.foo())
2021-03-12 05:18:18,127 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f80f99]]
2021-03-12 05:18:18,127 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:18,127 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f80f99]
2021-03-12 05:18:18,223 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:18,225 [main:117] - GENERATED CALL = (O).foo(O.foo()).replaceBeforeLast('₰', O.foo(), O.foo())
2021-03-12 05:18:18,226 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]]
2021-03-12 05:18:18,226 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:18,226 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]
2021-03-12 05:18:18,228 [main:117] - GENERATED CALL = (O).foo(O.foo()).toUpperCase()
2021-03-12 05:18:18,228 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]]
2021-03-12 05:18:18,228 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:18,228 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]
2021-03-12 05:18:18,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:18,356 [main:117] - GENERATED CALL = (O).foo(O.foo()).takeLast(-1836893808)
2021-03-12 05:18:18,357 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]]
2021-03-12 05:18:18,357 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:18,438 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:18,438 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]
2021-03-12 05:18:18,518 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:18,519 [main:117] - GENERATED CALL = (O).foo("zvaxo").substringAfter('阌', O.foo())
2021-03-12 05:18:18,519 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6a0a50]]
2021-03-12 05:18:18,519 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:18,519 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6a0a50]
2021-03-12 05:18:18,597 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:18,598 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:18,599 [main:117] - GENERATED CALL = (O).foo(O.foo()).filter({a: Char -> false})
2021-03-12 05:18:18,599 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cec6062]]
2021-03-12 05:18:18,599 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:18,675 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:18,676 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cec6062]
2021-03-12 05:18:18,797 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:18,884 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:18,966 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:18,967 [main:117] - GENERATED CALL = (O).foo("unzgg").replace('㹤', '췋', true)
2021-03-12 05:18:18,968 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f42b47]]
2021-03-12 05:18:18,968 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:19,047 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:19,048 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f42b47]
2021-03-12 05:18:19,127 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:19,129 [main:117] - GENERATED CALL = (O).foo("tbqru").substringBefore('똊', O.foo())
2021-03-12 05:18:19,129 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e02d66e]]
2021-03-12 05:18:19,129 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@6c3e2c3d]
2021-03-12 05:18:19,129 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e02d66e]
2021-03-12 05:18:19,130 [main:117] - GENERATED CALL = (O).foo(O.foo()).decapitalize()
2021-03-12 05:18:19,130 [main:114] - replacement of prope0 of type String is (O).foo("tbqru").substringBefore('똊', O.foo())
2021-03-12 05:18:19,233 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:18:19,234 [main:66] - Compilation checking started
2021-03-12 05:18:19,615 [main:53] - Result = true
Text:
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()


2021-03-12 05:18:19,616 [main:107] - replacing (Kla1().Kla2(), Kla2)
2021-03-12 05:18:19,616 [main:50] - replacing Kla1().Kla2() Kla2
2021-03-12 05:18:19,616 [main:54] - Getting value of type Kla2
2021-03-12 05:18:19,698 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:18:19,698 [main:112] - generating klass Kla2 text = inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
2021-03-12 05:18:19,698 [main:58] - GENERATED VALUE OF TYPE Kla2 = 
2021-03-12 05:18:19,794 [main:67] - randomType = UShort
2021-03-12 05:18:19,875 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:18:19,937 [main:106] - GETTING Kla2 from String
2021-03-12 05:18:19,964 [main:106] - GETTING Kla2 from O
2021-03-12 05:18:19,976 [main:111] - Cant find and generate replacement for Kla1().Kla2() type Kla2
2021-03-12 05:18:20,072 [main:141] - TRYING TO REPLACE CONSTANT '똊'
2021-03-12 05:18:20,151 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 05:18:20,151 [main:66] - Compilation checking started
2021-03-12 05:18:20,494 [main:41] - AFTER TRY 1 res = interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()


2021-03-12 05:18:20,660 [main:112] - generating klass I text = interface I {
    fun foo(x: String = "OK"): String = x
}
2021-03-12 05:18:20,831 [main:112] - generating klass J text = interface J : I
2021-03-12 05:18:21,008 [main:302] - generating value of type = O false depth = 1
2021-03-12 05:18:21,009 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:21,009 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:21,009 [main:112] - generating klass Kla0 text = open class Kla0(val callback: () -> String)
2021-03-12 05:18:21,089 [main:194] - Type params = []
2021-03-12 05:18:21,168 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 05:18:21,168 [main:302] - generating value of type = String true depth = 2
2021-03-12 05:18:21,169 [main:112] - generating klass Kla1 text = class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}
2021-03-12 05:18:21,169 [main:112] - generating klass Kla2 text = inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
2021-03-12 05:18:21,339 [main:43] - Try №1
2021-03-12 05:18:36,737 [main:48] - Already checked
2021-03-12 05:18:40,205 [main:69] - Trying to insert abstract fun resume(value: Ty0)
2021-03-12 05:18:40,310 [main:66] - Compilation checking started
2021-03-12 05:18:41,509 [main:103] - Trying to change 192 nodes
2021-03-12 05:18:41,509 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-12 05:18:41,509 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-12 05:18:41,509 [main:54] - Getting value of type String
2021-03-12 05:18:41,708 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:41,710 [main:58] - GENERATED VALUE OF TYPE String = "uszob"
2021-03-12 05:18:41,710 [main:61] - GENERATED IS CALL =false
2021-03-12 05:18:41,720 [main:67] - randomType = Kla4
2021-03-12 05:18:41,895 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:18:41,898 [main:112] - generating klass Kla4 text = object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}
2021-03-12 05:18:41,917 [main:106] - GETTING String from String
2021-03-12 05:18:41,956 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b97a21d]]
2021-03-12 05:18:41,956 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b97a21d]
2021-03-12 05:18:41,957 [main:117] - GENERATED CALL = (Kla1().prope0).lowercase()
2021-03-12 05:18:41,957 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fddd9c5]]
2021-03-12 05:18:41,957 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:18:42,142 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:42,349 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:42,353 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fddd9c5]
2021-03-12 05:18:42,561 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:18:42,735 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:42,737 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(1484715687, 676149224).commonSuffixWith("gnpgn", false)
2021-03-12 05:18:42,737 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]]
2021-03-12 05:18:42,737 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]
2021-03-12 05:18:42,738 [main:117] - GENERATED CALL = (Kla1().prope0).uppercase()
2021-03-12 05:18:42,738 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]]
2021-03-12 05:18:42,738 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]
2021-03-12 05:18:42,891 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:42,894 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:42,896 [main:117] - GENERATED CALL = (Kla1().prope0).filterNot({a: Char -> true})
2021-03-12 05:18:42,896 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b0923bb]]
2021-03-12 05:18:42,896 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b0923bb]
2021-03-12 05:18:43,050 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:43,052 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:43,055 [main:117] - GENERATED CALL = (Kla1().prope0).takeLastWhile({a: Char -> false})
2021-03-12 05:18:43,056 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12631b01]]
2021-03-12 05:18:43,056 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12631b01]
2021-03-12 05:18:43,056 [main:117] - GENERATED CALL = (Kla1().prope0).trimEnd()
2021-03-12 05:18:43,056 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34ea808b]]
2021-03-12 05:18:43,056 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34ea808b]
2021-03-12 05:18:43,224 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:43,400 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:43,556 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:43,558 [main:117] - GENERATED CALL = (Kla1().prope0).replaceAfter('枤', "owzkt", "nrekn")
2021-03-12 05:18:43,559 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]]
2021-03-12 05:18:43,559 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]
2021-03-12 05:18:43,716 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:43,718 [main:117] - GENERATED CALL = (Kla1().prope0).replaceBefore('⨕', Kla1().prope0, Kla1().prope0)
2021-03-12 05:18:43,718 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c6279b0]]
2021-03-12 05:18:43,718 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c6279b0]
2021-03-12 05:18:43,718 [main:117] - GENERATED CALL = (Kla1().prope0).toLowerCase()
2021-03-12 05:18:43,719 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fddd9c5]]
2021-03-12 05:18:43,719 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fddd9c5]
2021-03-12 05:18:43,908 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:18:44,090 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:44,094 [main:117] - GENERATED CALL = (Kla1().prope0).commonSuffixWith("bzmww", false)
2021-03-12 05:18:44,095 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (Kla1().prope0).uppercase()
2021-03-12 05:18:44,273 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:18:44,273 [main:66] - Compilation checking started
2021-03-12 05:18:44,948 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != prope6 + prope6) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:18:44,951 [main:107] - replacing ("Continuation ", String)
2021-03-12 05:18:44,951 [main:50] - replacing "Continuation " String
2021-03-12 05:18:44,951 [main:54] - Getting value of type String
2021-03-12 05:18:45,112 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:45,114 [main:58] - GENERATED VALUE OF TYPE String = "jtuyp"
2021-03-12 05:18:45,114 [main:61] - GENERATED IS CALL =false
2021-03-12 05:18:45,123 [main:67] - randomType = J
2021-03-12 05:18:45,124 [main:106] - GETTING String from Function0<String>
2021-03-12 05:18:45,139 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]]
2021-03-12 05:18:45,139 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:45,139 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]
2021-03-12 05:18:45,299 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:45,487 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:45,491 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replaceBefore('쩭', "haoif", Kla1().prope0)
2021-03-12 05:18:45,492 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bc53a18]]
2021-03-12 05:18:45,492 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:45,492 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bc53a18]
2021-03-12 05:18:45,675 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:18:45,877 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:18:45,881 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:18:46,056 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:18:46,059 [main:95] - GENERATED = setOfNotNull<Int>(-1173452658)
2021-03-12 05:18:46,059 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().slice(setOfNotNull<Int>(-1173452658))
2021-03-12 05:18:46,060 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@415e5cdd]]
2021-03-12 05:18:46,060 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:46,060 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@415e5cdd]
2021-03-12 05:18:46,208 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:18:46,215 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().removeSurrounding("lomeb")
2021-03-12 05:18:46,215 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749aa71]]
2021-03-12 05:18:46,215 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:46,216 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749aa71]
2021-03-12 05:18:46,216 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().trimMargin(Kla1().prope0)
2021-03-12 05:18:46,216 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]]
2021-03-12 05:18:46,216 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:46,216 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]
2021-03-12 05:18:46,217 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().trimStart()
2021-03-12 05:18:46,217 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]]
2021-03-12 05:18:46,217 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:46,217 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]
2021-03-12 05:18:46,376 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:46,543 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:46,546 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replaceAfterLast('ꢺ', Kla1().prope0, "hivlc")
2021-03-12 05:18:46,546 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]]
2021-03-12 05:18:46,546 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:46,546 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]
2021-03-12 05:18:46,698 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:46,700 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:46,703 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().filterNot({a: Char -> false})
2021-03-12 05:18:46,703 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34ea808b]]
2021-03-12 05:18:46,703 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:46,703 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34ea808b]
2021-03-12 05:18:46,877 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:46,880 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replaceAfter('忹', Kla1().prope0, Kla1().prope0)
2021-03-12 05:18:46,880 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d295c0]]
2021-03-12 05:18:46,880 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:46,880 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d295c0]
2021-03-12 05:18:47,026 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:47,184 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:47,357 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:47,360 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replaceFirst('', '䲋', true)
2021-03-12 05:18:47,360 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6a0a50]]
2021-03-12 05:18:47,360 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:18:47,360 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6a0a50]
2021-03-12 05:18:47,503 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:47,505 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:47,507 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().filter({a: Char -> false})
2021-03-12 05:18:47,507 [main:114] - replacement of "Continuation " of type String is (Kla0({ "hbvec"}).callback).invoke().trimStart()
2021-03-12 05:18:47,650 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:18:47,650 [main:66] - Compilation checking started
2021-03-12 05:18:48,395 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != prope6 + prope6) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:18:48,399 [main:107] - replacing (prope9 != numberOfSuspensions, Boolean)
2021-03-12 05:18:48,400 [main:50] - replacing prope9 != numberOfSuspensions Boolean
2021-03-12 05:18:48,400 [main:54] - Getting value of type Boolean
2021-03-12 05:18:48,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:48,578 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:18:48,578 [main:61] - GENERATED IS CALL =false
2021-03-12 05:18:48,919 [main:67] - randomType = Pair<Kla9, UShort>
2021-03-12 05:18:49,062 [main:302] - generating value of type = Pair<Kla9, UShort> false depth = 0
2021-03-12 05:18:49,220 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla9, second: UShort): Pair<Kla9, UShort> = TODO()
2021-03-12 05:18:49,224 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla9, second: UShort): Pair<Kla9, UShort> = TODO()
2021-03-12 05:18:49,374 [main:302] - generating value of type = Kla9 false depth = 3
2021-03-12 05:18:49,377 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:18:49,377 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 05:18:49,379 [main:95] - GENERATED = Pair<Kla9, UShort>(Kla9(), 6089.toUShort())
2021-03-12 05:18:49,396 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@6900cf3a]
2021-03-12 05:18:49,541 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:18:49,542 [main:78] - Generated call from random type = (Pair<Kla9, UShort>(Kla9(), 6089.toUShort())).equals("hpcbz")
2021-03-12 05:18:49,543 [main:106] - GETTING Boolean from O
2021-03-12 05:18:49,563 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:18:49,563 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:49,734 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:49,738 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:18:49,878 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:18:49,879 [main:117] - GENERATED CALL = (O).foo("pykws").equals("pydhy")
2021-03-12 05:18:49,879 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:18:49,879 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:49,879 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:18:49,880 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).matches(Kla1().prope0)
2021-03-12 05:18:49,880 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:18:49,880 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:18:50,019 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:18:50,020 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:18:50,161 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:50,164 [main:117] - GENERATED CALL = (O).equals("cuyig").xor(true)
2021-03-12 05:18:50,164 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:18:50,164 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:50,164 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:18:50,165 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).toBoolean()
2021-03-12 05:18:50,165 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:18:50,165 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:50,165 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:18:50,304 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:50,449 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:50,452 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).startsWith("lywqj", true)
2021-03-12 05:18:50,452 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:18:50,452 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:18:50,594 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:18:50,594 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:18:50,594 [main:117] - GENERATED CALL = (O).equals("giykg").not()
2021-03-12 05:18:50,595 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]]
2021-03-12 05:18:50,595 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:50,595 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]
2021-03-12 05:18:50,750 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:50,753 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).endsWith(Kla1().prope0, true)
2021-03-12 05:18:50,753 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:18:50,753 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:18:50,894 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:18:50,894 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:18:51,068 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:18:51,069 [main:117] - GENERATED CALL = (O).equals("ajneu").equals("tsyva")
2021-03-12 05:18:51,069 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]]
2021-03-12 05:18:51,069 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:18:51,221 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:18:51,222 [main:117] - GENERATED CALL = (O).equals("nhlek")
2021-03-12 05:18:51,222 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:18:51,222 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:18:51,363 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:18:51,364 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:18:51,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:18:51,508 [main:117] - GENERATED CALL = (O).equals("ofnzl").and(true)
2021-03-12 05:18:51,508 [main:114] - replacement of prope9 != numberOfSuspensions of type Boolean is (O).equals("ajneu").equals("tsyva")
2021-03-12 05:18:51,649 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:18:51,649 [main:66] - Compilation checking started
2021-03-12 05:18:52,255 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != prope6 + prope6) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:18:52,259 [main:107] - replacing (method, String)
2021-03-12 05:18:52,259 [main:50] - replacing method String
2021-03-12 05:18:52,260 [main:54] - Getting value of type String
2021-03-12 05:18:52,423 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:52,426 [main:58] - GENERATED VALUE OF TYPE String = "jlbog"
2021-03-12 05:18:52,426 [main:61] - GENERATED IS CALL =false
2021-03-12 05:18:52,436 [main:67] - randomType = I
2021-03-12 05:18:52,437 [main:106] - GETTING String from O
2021-03-12 05:18:52,458 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba474e2]]
2021-03-12 05:18:52,458 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:52,459 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba474e2]
2021-03-12 05:18:52,459 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).concat(Kla1().prope0)
2021-03-12 05:18:52,459 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]]
2021-03-12 05:18:52,459 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:52,459 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]
2021-03-12 05:18:52,624 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:52,627 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).takeLast(1815168632)
2021-03-12 05:18:52,627 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a42cf29]]
2021-03-12 05:18:52,627 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:52,628 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a42cf29]
2021-03-12 05:18:52,773 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:18:52,776 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).drop(-663115564)
2021-03-12 05:18:52,776 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]]
2021-03-12 05:18:52,776 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:52,777 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]
2021-03-12 05:18:52,777 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).trimStart()
2021-03-12 05:18:52,777 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6edb3e51]]
2021-03-12 05:18:52,777 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:52,916 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:18:52,919 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6edb3e51]
2021-03-12 05:18:52,919 [main:117] - GENERATED CALL = (O).foo("wkebe").trimIndent()
2021-03-12 05:18:52,919 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a6a3e5]]
2021-03-12 05:18:52,919 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:52,920 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a6a3e5]
2021-03-12 05:18:53,057 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:18:53,060 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)
2021-03-12 05:18:53,060 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b80ca33]]
2021-03-12 05:18:53,060 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:53,060 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b80ca33]
2021-03-12 05:18:53,201 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:53,204 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:53,207 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).dropWhile({a: Char -> true})
2021-03-12 05:18:53,207 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69629430]]
2021-03-12 05:18:53,207 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:53,207 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69629430]
2021-03-12 05:18:53,208 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).trim()
2021-03-12 05:18:53,208 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]]
2021-03-12 05:18:53,208 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:53,208 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]
2021-03-12 05:18:53,357 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:18:53,359 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:18:53,362 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).filterNot({a: Char -> false})
2021-03-12 05:18:53,362 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]]
2021-03-12 05:18:53,362 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:18:53,363 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]
2021-03-12 05:18:53,504 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:18:53,510 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).removePrefix("qqzlw")
2021-03-12 05:18:53,510 [main:114] - replacement of method of type String is (O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)
2021-03-12 05:18:53,649 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:18:53,650 [main:66] - Compilation checking started
2021-03-12 05:18:54,507 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != prope6 + prope6) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:18:54,509 [main:107] - replacing (prope1, Result<Ty0>)
2021-03-12 05:18:54,509 [main:50] - replacing prope1 Result<Ty0>
2021-03-12 05:18:54,509 [main:54] - Getting value of type Result<Ty0>
2021-03-12 05:18:54,650 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 05:18:54,795 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:18:54,799 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:18:55,116 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:18:55,116 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 05:18:55,126 [main:67] - randomType = O
2021-03-12 05:18:55,267 [main:302] - generating value of type = O false depth = 0
2021-03-12 05:18:55,270 [main:112] - generating klass O text = object O : J
2021-03-12 05:18:55,293 [main:106] - GETTING Result<Ty0> from Function0<String>
2021-03-12 05:18:55,307 [main:106] - GETTING Result<Ty0> from Kla1
2021-03-12 05:18:55,319 [main:106] - GETTING Result<Ty0> from O
2021-03-12 05:18:55,353 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:18:55,377 [main:106] - GETTING Result<Ty0> from Function0<String>
2021-03-12 05:18:55,378 [main:106] - GETTING Result<Ty0> from Kla2
2021-03-12 05:18:55,392 [main:111] - Cant find and generate replacement for prope1 type Result<Ty0>
2021-03-12 05:18:55,392 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 05:18:55,393 [main:50] - replacing getOrThrow() Ty0
2021-03-12 05:18:55,393 [main:54] - Getting value of type Ty0
2021-03-12 05:18:55,540 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 05:18:55,546 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 05:18:55,894 [main:67] - randomType = Double?
2021-03-12 05:18:56,037 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:18:56,106 [main:106] - GETTING Ty0 from Kla2
2021-03-12 05:18:56,128 [main:106] - GETTING Ty0 from Kla1
2021-03-12 05:18:56,137 [main:106] - GETTING Ty0 from O
2021-03-12 05:18:56,160 [main:106] - GETTING Ty0 from String
2021-03-12 05:18:56,191 [main:106] - GETTING Ty0 from Function0<String>
2021-03-12 05:18:56,203 [main:106] - GETTING Ty0 from Function0<String>
2021-03-12 05:18:56,203 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 05:18:56,203 [main:107] - replacing (prope7, Continuation<Unit>)
2021-03-12 05:18:56,204 [main:50] - replacing prope7 Continuation<Unit>
2021-03-12 05:18:56,204 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:18:56,353 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:18:56,505 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:18:56,509 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:18:57,022 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:18:57,178 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:18:57,182 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:18:57,554 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:18:57,729 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:18:57,733 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:18:58,238 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 05:18:58,394 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:18:58,397 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:18:58,899 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-12 05:18:59,047 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:18:59,102 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:18:59,597 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:18:59,597 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:18:59,597 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:18:59,597 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:18:59,597 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:18:59,597 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:18:59,752 [main:67] - randomType = Long
2021-03-12 05:18:59,889 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:18:59,933 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:18:59,955 [main:106] - GETTING Continuation<Unit> from Kla2
2021-03-12 05:18:59,966 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:18:59,976 [main:106] - GETTING Continuation<Unit> from Kla1
2021-03-12 05:18:59,982 [main:106] - GETTING Continuation<Unit> from O
2021-03-12 05:18:59,996 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:18:59,997 [main:111] - Cant find and generate replacement for prope7 type Continuation<Unit>
2021-03-12 05:18:59,997 [main:107] - replacing (prope3, Boolean)
2021-03-12 05:18:59,997 [main:50] - replacing prope3 Boolean
2021-03-12 05:18:59,997 [main:54] - Getting value of type Boolean
2021-03-12 05:19:00,134 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:00,137 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:19:00,137 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:00,803 [main:67] - randomType = Map<Float, ArrayList<Boolean?>>
2021-03-12 05:19:00,804 [main:106] - GETTING Boolean from Kla1
2021-03-12 05:19:00,811 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:19:00,811 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:19:00,955 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:00,956 [main:117] - GENERATED CALL = (Kla1()).prope0.equals("pwhas")
2021-03-12 05:19:00,956 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:19:00,956 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:01,103 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:01,103 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:19:01,103 [main:117] - GENERATED CALL = (Kla1()).equals("ydkah").not()
2021-03-12 05:19:01,103 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:19:01,103 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:01,245 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:01,245 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:19:01,388 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:01,391 [main:117] - GENERATED CALL = (Kla1()).equals("tebkl").xor(true)
2021-03-12 05:19:01,391 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:19:01,391 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:19:01,392 [main:117] - GENERATED CALL = (Kla1()).prope0.matches(Kla1().prope0)
2021-03-12 05:19:01,392 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:19:01,392 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:01,535 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:01,535 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:19:01,673 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:01,676 [main:117] - GENERATED CALL = (Kla1()).equals("fmsnb").and(true)
2021-03-12 05:19:01,676 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:19:01,676 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:01,812 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:01,812 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:19:01,954 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:01,957 [main:117] - GENERATED CALL = (Kla1()).equals("jftqu").or(true)
2021-03-12 05:19:01,957 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:19:01,957 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:19:02,102 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:02,105 [main:117] - GENERATED CALL = (Kla1()).prope0.startsWith(Kla1().prope0, true)
2021-03-12 05:19:02,105 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]]
2021-03-12 05:19:02,105 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:02,245 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:02,245 [main:117] - GENERATED CALL = (Kla1()).equals("zdcfw")
2021-03-12 05:19:02,245 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:19:02,245 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:19:02,246 [main:117] - GENERATED CALL = (Kla1()).prope0.toBoolean()
2021-03-12 05:19:02,246 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]]
2021-03-12 05:19:02,246 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]
2021-03-12 05:19:02,388 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:02,534 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:02,537 [main:117] - GENERATED CALL = (Kla1()).prope0.endsWith("tyxcm", true)
2021-03-12 05:19:02,537 [main:114] - replacement of prope3 of type Boolean is (Kla1()).prope0.endsWith("tyxcm", true)
2021-03-12 05:19:02,676 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:02,677 [main:66] - Compilation checking started
2021-03-12 05:19:03,054 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != prope6 + prope6) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                (Kla1()).prope0.endsWith("tyxcm", true) = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:03,057 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 05:19:03,057 [main:50] - replacing c Continuation<Unit>
2021-03-12 05:19:03,057 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:19:03,197 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:19:03,338 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:19:03,342 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:19:03,804 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:19:03,946 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:19:03,950 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:19:04,282 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:19:04,425 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:19:04,429 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:19:04,896 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 05:19:05,046 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:19:05,050 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:19:05,509 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:19:05,509 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:19:05,509 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:19:05,509 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:19:05,510 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:19:05,520 [main:67] - randomType = Kla8
2021-03-12 05:19:05,655 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:19:05,658 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}
2021-03-12 05:19:05,666 [main:106] - GETTING Continuation<Unit> from Kla2
2021-03-12 05:19:05,682 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:19:05,709 [main:106] - GETTING Continuation<Unit> from O
2021-03-12 05:19:05,724 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:19:05,737 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:19:05,738 [main:106] - GETTING Continuation<Unit> from Kla1
2021-03-12 05:19:05,744 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 05:19:05,744 [main:107] - replacing (Kla4, Kla4)
2021-03-12 05:19:05,745 [main:50] - replacing Kla4 Kla4
2021-03-12 05:19:05,745 [main:54] - Getting value of type Kla4
2021-03-12 05:19:05,880 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:19:05,882 [main:112] - generating klass Kla4 text = object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}
2021-03-12 05:19:05,882 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4
2021-03-12 05:19:05,883 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:06,214 [main:67] - randomType = Kla7<Int?>
2021-03-12 05:19:06,350 [main:302] - generating value of type = Kla7<Int?> false depth = 0
2021-03-12 05:19:06,353 [main:112] - generating klass Kla7 text = abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 05:19:07,270 [main:302] - generating value of type = Kla10 false depth = 2
2021-03-12 05:19:07,273 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:19:07,289 [main:106] - GETTING Kla4 from O
2021-03-12 05:19:07,300 [main:106] - GETTING Kla4 from Function0<String>
2021-03-12 05:19:07,314 [main:106] - GETTING Kla4 from Kla2
2021-03-12 05:19:07,330 [main:106] - GETTING Kla4 from Kla1
2021-03-12 05:19:07,338 [main:106] - GETTING Kla4 from String
2021-03-12 05:19:07,369 [main:106] - GETTING Kla4 from Function0<String>
2021-03-12 05:19:07,369 [main:114] - replacement of Kla4 of type Kla4 is Kla4
2021-03-12 05:19:07,514 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 05:19:07,517 [main:107] - replacing (method, String)
2021-03-12 05:19:07,517 [main:50] - replacing method String
2021-03-12 05:19:07,517 [main:54] - Getting value of type String
2021-03-12 05:19:07,660 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:07,663 [main:58] - GENERATED VALUE OF TYPE String = "vlyhu"
2021-03-12 05:19:07,663 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:07,827 [main:67] - randomType = ArrayDeque<String>
2021-03-12 05:19:07,974 [main:302] - generating value of type = ArrayDeque<String> false depth = 0
2021-03-12 05:19:08,114 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<String> = TODO()
2021-03-12 05:19:08,118 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<String> = TODO()
2021-03-12 05:19:08,256 [main:95] - GENERATED = ArrayDeque<String>()
2021-03-12 05:19:08,442 [main:149] - GENERATING call of type public final fun first(): kotlin.String defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@58438813]
2021-03-12 05:19:08,442 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]
2021-03-12 05:19:08,584 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:19:08,590 [main:78] - Generated call from random type = (ArrayDeque<String>()).first().removePrefix("iwxdd")
2021-03-12 05:19:08,591 [main:106] - GETTING String from O
2021-03-12 05:19:08,612 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68279736]]
2021-03-12 05:19:08,612 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:08,752 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:08,755 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68279736]
2021-03-12 05:19:08,888 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:08,891 [main:117] - GENERATED CALL = (O).foo("dvlaj").substring(-1813285729)
2021-03-12 05:19:08,891 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]]
2021-03-12 05:19:08,891 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:08,892 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]
2021-03-12 05:19:09,024 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:09,027 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).replaceAfterLast('዗', Kla1().prope0, Kla1().prope0)
2021-03-12 05:19:09,027 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efdb98d]]
2021-03-12 05:19:09,027 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:09,027 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efdb98d]
2021-03-12 05:19:09,027 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).prependIndent(Kla1().prope0)
2021-03-12 05:19:09,027 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ef2745]]
2021-03-12 05:19:09,027 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:09,028 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ef2745]
2021-03-12 05:19:09,163 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:09,304 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:09,307 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).padStart(-825986947, '⿋')
2021-03-12 05:19:09,308 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]]
2021-03-12 05:19:09,308 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:09,308 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]
2021-03-12 05:19:09,443 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:19:09,446 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:19:09,449 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).replaceFirstChar({a: Char -> 'ᓶ'})
2021-03-12 05:19:09,449 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b80ca33]]
2021-03-12 05:19:09,449 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:09,449 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b80ca33]
2021-03-12 05:19:09,581 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:19:09,584 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:19:09,587 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).dropWhile({a: Char -> false})
2021-03-12 05:19:09,587 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]]
2021-03-12 05:19:09,587 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:09,587 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]
2021-03-12 05:19:09,587 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).toUpperCase()
2021-03-12 05:19:09,587 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]]
2021-03-12 05:19:09,587 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:09,588 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]
2021-03-12 05:19:09,588 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).uppercase()
2021-03-12 05:19:09,588 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]]
2021-03-12 05:19:09,588 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:09,737 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:09,740 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]
2021-03-12 05:19:09,877 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:09,880 [main:117] - GENERATED CALL = (O).foo("nyhiw").replaceBefore('᧽', Kla1().prope0, Kla1().prope0)
2021-03-12 05:19:09,881 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a6a3e5]]
2021-03-12 05:19:09,881 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:19:09,881 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a6a3e5]
2021-03-12 05:19:10,012 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:10,015 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).substringBeforeLast('疵', Kla1().prope0)
2021-03-12 05:19:10,015 [main:114] - replacement of method of type String is "vlyhu"
2021-03-12 05:19:10,149 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:19:10,149 [main:66] - Compilation checking started
2021-03-12 05:19:10,736 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != prope6 + prope6) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:10,740 [main:107] - replacing (prope6 + prope6, String)
2021-03-12 05:19:10,740 [main:50] - replacing prope6 + prope6 String
2021-03-12 05:19:10,740 [main:54] - Getting value of type String
2021-03-12 05:19:10,877 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:10,879 [main:58] - GENERATED VALUE OF TYPE String = "jqbay"
2021-03-12 05:19:10,879 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:10,889 [main:67] - randomType = Kla8
2021-03-12 05:19:11,022 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 05:19:11,025 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}
2021-03-12 05:19:11,032 [main:106] - GETTING String from Kla2
2021-03-12 05:19:11,045 [main:113] - Case = [public final val callback: () -> kotlin.String defined in Kla1.Kla2[PropertyDescriptorImpl@6ed574d3], public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]]
2021-03-12 05:19:11,045 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:11,046 [main:117] - GENERATED CALL = (Kla1().Kla2()).callback.invoke()
2021-03-12 05:19:11,046 [main:114] - replacement of prope6 + prope6 of type String is "jqbay"
2021-03-12 05:19:11,177 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:19:11,177 [main:66] - Compilation checking started
2021-03-12 05:19:11,778 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:11,780 [main:107] - replacing (prope1, String)
2021-03-12 05:19:11,780 [main:50] - replacing prope1 String
2021-03-12 05:19:11,780 [main:54] - Getting value of type String
2021-03-12 05:19:11,937 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:11,940 [main:58] - GENERATED VALUE OF TYPE String = "efdng"
2021-03-12 05:19:11,940 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:12,250 [main:67] - randomType = UInt?
2021-03-12 05:19:12,381 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:19:12,419 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3752b238]
2021-03-12 05:19:12,419 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a2e27d6]
2021-03-12 05:19:12,551 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:12,554 [main:78] - Generated call from random type = (1409346668.toUInt())?.toUShort().toString(-1560285391)
2021-03-12 05:19:12,555 [main:106] - GETTING String from Function0<String>
2021-03-12 05:19:12,569 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a6a3e5]]
2021-03-12 05:19:12,569 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:12,569 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a6a3e5]
2021-03-12 05:19:12,699 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:12,702 [main:117] - GENERATED CALL = (callback).invoke().substringBeforeLast('᱅', Kla1().prope0)
2021-03-12 05:19:12,702 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]]
2021-03-12 05:19:12,702 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:12,702 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]
2021-03-12 05:19:12,702 [main:117] - GENERATED CALL = (callback).invoke().toUpperCase()
2021-03-12 05:19:12,702 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]]
2021-03-12 05:19:12,702 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:12,702 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]
2021-03-12 05:19:12,834 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:12,837 [main:117] - GENERATED CALL = (callback).invoke().takeLast(-2001881634)
2021-03-12 05:19:12,837 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7a0796]]
2021-03-12 05:19:12,837 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:12,837 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7a0796]
2021-03-12 05:19:12,977 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:19:13,116 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:19:13,120 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:19:13,406 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:19:13,408 [main:95] - GENERATED = StringBuilder(-49019016)
2021-03-12 05:19:13,409 [main:117] - GENERATED CALL = (callback).invoke().removeSuffix(StringBuilder(-49019016))
2021-03-12 05:19:13,409 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@415e5cdd]]
2021-03-12 05:19:13,409 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:13,409 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@415e5cdd]
2021-03-12 05:19:13,548 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:19:13,555 [main:117] - GENERATED CALL = (callback).invoke().removeSurrounding("ehomo")
2021-03-12 05:19:13,555 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cf9443c]]
2021-03-12 05:19:13,555 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:13,555 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cf9443c]
2021-03-12 05:19:13,556 [main:117] - GENERATED CALL = (callback).invoke().replaceIndent(Kla1().prope0)
2021-03-12 05:19:13,556 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]]
2021-03-12 05:19:13,556 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:13,556 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]
2021-03-12 05:19:13,692 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:19:13,694 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:19:13,697 [main:117] - GENERATED CALL = (callback).invoke().replaceFirstChar({a: Char -> '炫'})
2021-03-12 05:19:13,697 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c80c87e]]
2021-03-12 05:19:13,697 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:13,697 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c80c87e]
2021-03-12 05:19:13,841 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:13,844 [main:117] - GENERATED CALL = (callback).invoke().dropLast(76826710)
2021-03-12 05:19:13,844 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69629430]]
2021-03-12 05:19:13,844 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:13,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69629430]
2021-03-12 05:19:13,844 [main:117] - GENERATED CALL = (callback).invoke().trim()
2021-03-12 05:19:13,844 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba474e2]]
2021-03-12 05:19:13,844 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:13,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba474e2]
2021-03-12 05:19:13,844 [main:117] - GENERATED CALL = (callback).invoke().concat(Kla1().prope0)
2021-03-12 05:19:13,844 [main:114] - replacement of prope1 of type String is (callback).invoke().substringBeforeLast('᱅', Kla1().prope0)
2021-03-12 05:19:13,974 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:13,974 [main:66] - Compilation checking started
2021-03-12 05:19:14,364 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                (callback).invoke().substringBeforeLast('᱅', Kla1().prope0) += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:14,366 [main:107] - replacing (prope2, Function0<Unit>)
2021-03-12 05:19:14,367 [main:50] - replacing prope2 Function0<Unit>
2021-03-12 05:19:14,367 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:19:14,506 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:19:14,509 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:19:14,649 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:19:14,652 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:19:14,942 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:19:14,945 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:19:15,083 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:19:15,087 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:19:15,378 [main:302] - generating value of type = Any false depth = 8
2021-03-12 05:19:15,378 [main:95] - GENERATED = println("yjkgm")
2021-03-12 05:19:15,379 [main:95] - GENERATED = contract({ println("yjkgm")})
2021-03-12 05:19:15,379 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("yjkgm")})}
2021-03-12 05:19:15,379 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:15,541 [main:67] - randomType = HashSet<Kla9>
2021-03-12 05:19:15,677 [main:302] - generating value of type = HashSet<Kla9> false depth = 0
2021-03-12 05:19:15,836 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Kla9>): HashSet<Kla9> = TODO()
2021-03-12 05:19:15,840 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Kla9>): HashSet<Kla9> = TODO()
2021-03-12 05:19:16,136 [main:302] - generating value of type = Collection<Kla9> false depth = 3
2021-03-12 05:19:16,277 [main:43] - GENERATING CALL OF fun <T> listOf(): Collection<Kla9> = TODO()
2021-03-12 05:19:16,280 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): Collection<Kla9> = TODO()
2021-03-12 05:19:16,423 [main:95] - GENERATED = listOf<Kla9>()
2021-03-12 05:19:16,423 [main:95] - GENERATED = LinkedHashSet<Kla9>(listOf<Kla9>())
2021-03-12 05:19:16,550 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:19:16,570 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:16,581 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:16,582 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:19:16,599 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:19:16,609 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:19:16,614 [main:114] - replacement of prope2 of type Function0<Unit> is { contract({ println("yjkgm")})}
2021-03-12 05:19:16,743 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:19:16,744 [main:66] - Compilation checking started
2021-03-12 05:19:17,118 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        { contract({ println("yjkgm")})}()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:17,121 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n"), String)
2021-03-12 05:19:17,121 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n") String
2021-03-12 05:19:17,121 [main:54] - Getting value of type String
2021-03-12 05:19:17,254 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:17,256 [main:58] - GENERATED VALUE OF TYPE String = "daflr"
2021-03-12 05:19:17,256 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:17,574 [main:67] - randomType = Function2<J, ULong, Boolean>
2021-03-12 05:19:17,574 [main:106] - GETTING String from String
2021-03-12 05:19:17,596 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d015de5]]
2021-03-12 05:19:17,596 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:19:17,748 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:17,751 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d015de5]
2021-03-12 05:19:17,751 [main:117] - GENERATED CALL = (Kla1().prope0).get(1248278327).uppercase()
2021-03-12 05:19:17,751 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@415e5cdd]]
2021-03-12 05:19:17,751 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@415e5cdd]
2021-03-12 05:19:17,883 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:19:18,019 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:19:18,023 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:19:18,311 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:19:18,314 [main:95] - GENERATED = StringBuilder("kgspp")
2021-03-12 05:19:18,314 [main:117] - GENERATED CALL = (Kla1().prope0).removeSurrounding(StringBuilder("kgspp"))
2021-03-12 05:19:18,314 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]]
2021-03-12 05:19:18,314 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]
2021-03-12 05:19:18,314 [main:117] - GENERATED CALL = (Kla1().prope0).toUpperCase()
2021-03-12 05:19:18,314 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12631b01]]
2021-03-12 05:19:18,314 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12631b01]
2021-03-12 05:19:18,315 [main:117] - GENERATED CALL = (Kla1().prope0).trimEnd()
2021-03-12 05:19:18,315 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]]
2021-03-12 05:19:18,315 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]
2021-03-12 05:19:18,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:18,454 [main:117] - GENERATED CALL = (Kla1().prope0).takeLast(2023061529)
2021-03-12 05:19:18,455 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1d3bc1df], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]]
2021-03-12 05:19:18,455 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:19:18,604 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:18,607 [main:117] - GENERATED CALL = (Kla1().prope0).length.toString(-674031681)
2021-03-12 05:19:18,607 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fddd9c5]]
2021-03-12 05:19:18,607 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:19:18,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:18,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:18,874 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fddd9c5]
2021-03-12 05:19:19,003 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:19:19,140 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:19:19,144 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:19:19,435 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:19:19,437 [main:95] - GENERATED = StringBuilder(-497577224)
2021-03-12 05:19:19,599 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:19,602 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(-2046331989, -494836974).commonSuffixWith(StringBuilder(-497577224), true)
2021-03-12 05:19:19,602 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]]
2021-03-12 05:19:19,602 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]
2021-03-12 05:19:19,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:19,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:19,869 [main:117] - GENERATED CALL = (Kla1().prope0).removeRange(-96088735, -1318899033)
2021-03-12 05:19:19,869 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]]
2021-03-12 05:19:19,869 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]
2021-03-12 05:19:20,002 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:20,005 [main:117] - GENERATED CALL = (Kla1().prope0).replaceBefore('᪬', Kla1().prope0, Kla1().prope0)
2021-03-12 05:19:20,005 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2a8ef1fa], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]]
2021-03-12 05:19:20,005 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2a8ef1fa]
2021-03-12 05:19:20,006 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:19:20,141 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:20,144 [main:117] - GENERATED CALL = (Kla1().prope0).compareTo(Kla1().prope0).toString(1291304895)
2021-03-12 05:19:20,144 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n") of type String is (Kla1().prope0).get(1248278327).uppercase()
2021-03-12 05:19:20,276 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:20,276 [main:66] - Compilation checking started
2021-03-12 05:19:20,934 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:20,937 [main:107] - replacing (!prope3, Boolean)
2021-03-12 05:19:20,938 [main:50] - replacing !prope3 Boolean
2021-03-12 05:19:20,938 [main:54] - Getting value of type Boolean
2021-03-12 05:19:21,096 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:21,099 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:19:21,099 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:21,563 [main:67] - randomType = Pair<UShort, Int?>
2021-03-12 05:19:21,696 [main:302] - generating value of type = Pair<UShort, Int?> false depth = 0
2021-03-12 05:19:21,856 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: Int?): Pair<UShort, Int?> = TODO()
2021-03-12 05:19:21,860 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: Int?): Pair<UShort, Int?> = TODO()
2021-03-12 05:19:21,995 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 05:19:21,998 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:19:22,000 [main:95] - GENERATED = Pair<UShort, Int?>(2864.toUShort(), -80328206)
2021-03-12 05:19:22,012 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3c11bcb]
2021-03-12 05:19:22,142 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:22,143 [main:78] - Generated call from random type = (Pair<UShort, Int?>(2864.toUShort(), -80328206)).first.equals("gtnkt")
2021-03-12 05:19:22,143 [main:106] - GETTING Boolean from Kla2
2021-03-12 05:19:22,154 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]]
2021-03-12 05:19:22,154 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:19:22,282 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:22,282 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("nbtmd")
2021-03-12 05:19:22,282 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:19:22,282 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:19:22,412 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:22,413 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:19:22,550 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:22,553 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("wnohp").or(true)
2021-03-12 05:19:22,553 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:19:22,553 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:19:22,693 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:22,693 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:19:22,836 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:22,836 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("retcu").equals("tgofa")
2021-03-12 05:19:22,836 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:19:22,836 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:19:22,974 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:22,974 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:19:23,105 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:23,108 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("qapmf").and(true)
2021-03-12 05:19:23,108 [main:113] - Case = [public final val callback: () -> kotlin.String defined in Kla1.Kla2[PropertyDescriptorImpl@6ed574d3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]]
2021-03-12 05:19:23,108 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:19:23,244 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:23,244 [main:117] - GENERATED CALL = (Kla1().Kla2()).callback.equals("txyum")
2021-03-12 05:19:23,244 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:19:23,244 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:19:23,373 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:23,373 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:19:23,373 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("xqjqt").not()
2021-03-12 05:19:23,373 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:19:23,373 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:19:23,503 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:23,503 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:19:23,654 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:23,657 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("xtxnq").xor(false)
2021-03-12 05:19:23,657 [main:114] - replacement of !prope3 of type Boolean is (Kla1().Kla2()).equals("retcu").equals("tgofa")
2021-03-12 05:19:23,788 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:23,788 [main:66] - Compilation checking started
2021-03-12 05:19:24,372 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:24,374 [main:107] - replacing (prope5.prope2, Function0<Unit>)
2021-03-12 05:19:24,374 [main:50] - replacing prope5.prope2 Function0<Unit>
2021-03-12 05:19:24,374 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:19:24,515 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:19:24,518 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:19:24,655 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:19:24,658 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:19:24,945 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:19:24,948 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:19:25,083 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:19:25,087 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:19:25,374 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 05:19:25,377 [main:95] - GENERATED = require(true)
2021-03-12 05:19:25,377 [main:95] - GENERATED = contract({ require(true)})
2021-03-12 05:19:25,377 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true)})}
2021-03-12 05:19:25,377 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:25,383 [main:67] - randomType = Char
2021-03-12 05:19:25,521 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:25,555 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:25,570 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:19:25,585 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:19:25,605 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:19:25,610 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:19:25,622 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:25,622 [main:114] - replacement of prope5.prope2 of type Function0<Unit> is { contract({ require(true)})}
2021-03-12 05:19:25,766 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:19:25,767 [main:66] - Compilation checking started
2021-03-12 05:19:26,134 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { contract({ require(true)})} = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:26,136 [main:107] - replacing (true, Boolean)
2021-03-12 05:19:26,136 [main:50] - replacing true Boolean
2021-03-12 05:19:26,136 [main:54] - Getting value of type Boolean
2021-03-12 05:19:26,268 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:26,270 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:19:26,271 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:26,281 [main:67] - randomType = Kla9
2021-03-12 05:19:26,416 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 05:19:26,418 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:19:26,425 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:19:26,426 [main:78] - Generated call from random type = (Kla9()).prope3.not()
2021-03-12 05:19:26,426 [main:106] - GETTING Boolean from Function0<String>
2021-03-12 05:19:26,434 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:19:26,435 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:26,435 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:19:26,435 [main:117] - GENERATED CALL = (callback).invoke().toBoolean()
2021-03-12 05:19:26,435 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]]
2021-03-12 05:19:26,435 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:26,435 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]
2021-03-12 05:19:26,569 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:26,572 [main:117] - GENERATED CALL = (callback).invoke().endsWith(Kla1().prope0, false)
2021-03-12 05:19:26,572 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:19:26,572 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:19:26,701 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:26,701 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:19:26,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:26,835 [main:117] - GENERATED CALL = (callback).equals("ofmxd").or(true)
2021-03-12 05:19:26,835 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:19:26,835 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:19:26,965 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:26,965 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:19:27,097 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:27,100 [main:117] - GENERATED CALL = (callback).equals("dbxob").xor(false)
2021-03-12 05:19:27,100 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]]
2021-03-12 05:19:27,100 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:19:27,229 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:27,229 [main:117] - GENERATED CALL = (callback).equals("cbjmx")
2021-03-12 05:19:27,229 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:19:27,229 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:27,229 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:19:27,357 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:27,360 [main:117] - GENERATED CALL = (callback).invoke().matches("ztlwf")
2021-03-12 05:19:27,360 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:19:27,360 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:19:27,489 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:27,489 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:19:27,489 [main:117] - GENERATED CALL = (callback).equals("oivyg").not()
2021-03-12 05:19:27,489 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:19:27,489 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:27,489 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:19:27,619 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:27,622 [main:117] - GENERATED CALL = (callback).invoke().startsWith(Kla1().prope0, true)
2021-03-12 05:19:27,622 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:19:27,622 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:27,622 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:19:27,767 [main:117] - GENERATED CALL = (callback).invoke().equals(null)
2021-03-12 05:19:27,767 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:19:27,767 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:19:27,896 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:27,896 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:19:28,024 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:28,026 [main:117] - GENERATED CALL = (callback).equals("eowpd").and(true)
2021-03-12 05:19:28,027 [main:114] - replacement of true of type Boolean is (callback).equals("oivyg").not()
2021-03-12 05:19:28,154 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:28,155 [main:66] - Compilation checking started
2021-03-12 05:19:28,524 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (callback).equals("oivyg").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            prope5.prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:28,527 [main:107] - replacing (prope5, Kla9)
2021-03-12 05:19:28,527 [main:50] - replacing prope5 Kla9
2021-03-12 05:19:28,527 [main:54] - Getting value of type Kla9
2021-03-12 05:19:28,665 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 05:19:28,668 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:19:28,668 [main:58] - GENERATED VALUE OF TYPE Kla9 = Kla9()
2021-03-12 05:19:28,668 [main:61] - GENERATED IS CALL =true
2021-03-12 05:19:28,990 [main:67] - randomType = ArrayList<Char>
2021-03-12 05:19:29,124 [main:302] - generating value of type = ArrayList<Char> false depth = 0
2021-03-12 05:19:29,258 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Char> = TODO()
2021-03-12 05:19:29,262 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Char> = TODO()
2021-03-12 05:19:29,410 [main:95] - GENERATED = arrayListOf<Char>()
2021-03-12 05:19:29,576 [main:106] - GETTING Kla9 from Kla2
2021-03-12 05:19:29,586 [main:106] - GETTING Kla9 from String
2021-03-12 05:19:29,602 [main:106] - GETTING Kla9 from Function0<String>
2021-03-12 05:19:29,610 [main:106] - GETTING Kla9 from O
2021-03-12 05:19:29,623 [main:106] - GETTING Kla9 from Function0<String>
2021-03-12 05:19:29,624 [main:106] - GETTING Kla9 from Kla1
2021-03-12 05:19:29,627 [main:114] - replacement of prope5 of type Kla9 is Kla9()
2021-03-12 05:19:29,780 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:19:29,780 [main:66] - Compilation checking started
2021-03-12 05:19:30,371 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:30,374 [main:107] - replacing (0, Int)
2021-03-12 05:19:30,374 [main:50] - replacing 0 Int
2021-03-12 05:19:30,374 [main:54] - Getting value of type Int
2021-03-12 05:19:30,515 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:30,518 [main:58] - GENERATED VALUE OF TYPE Int = -311782123
2021-03-12 05:19:30,518 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:30,528 [main:67] - randomType = Kla6
2021-03-12 05:19:30,671 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:19:30,673 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}
2021-03-12 05:19:30,693 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@172a69f1]
2021-03-12 05:19:30,693 [main:78] - Generated call from random type = (Kla6()).prope1?.hashCode()!!
2021-03-12 05:19:30,694 [main:106] - GETTING Int from Function0<String>
2021-03-12 05:19:30,705 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6daa3bc0]]
2021-03-12 05:19:30,705 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:30,705 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6daa3bc0]
2021-03-12 05:19:30,705 [main:117] - GENERATED CALL = (callback).invoke().toInt()
2021-03-12 05:19:30,705 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]]
2021-03-12 05:19:30,705 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:19:30,833 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:30,833 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]
2021-03-12 05:19:30,962 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:30,965 [main:117] - GENERATED CALL = (callback).equals("kfvug").compareTo(true)
2021-03-12 05:19:30,965 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a10ed67]]
2021-03-12 05:19:30,965 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:30,965 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a10ed67]
2021-03-12 05:19:31,101 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:31,235 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:31,238 [main:117] - GENERATED CALL = (callback).invoke().compareTo("qhqcf", false)
2021-03-12 05:19:31,239 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1d3bc1df]]
2021-03-12 05:19:31,239 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:19:31,239 [main:117] - GENERATED CALL = (callback).invoke().length
2021-03-12 05:19:31,239 [main:114] - replacement of 0 of type Int is (callback).invoke().toInt()
2021-03-12 05:19:31,371 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:31,371 [main:66] - Compilation checking started
2021-03-12 05:19:31,730 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = (callback).invoke().toInt()
        prope3 = false
        prope2 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:31,732 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 05:19:31,732 [main:50] - replacing {} Function0<Unit>
2021-03-12 05:19:31,732 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:19:31,860 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:19:31,863 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:19:32,013 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:19:32,017 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:19:32,295 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:19:32,296 [main:95] - GENERATED = print("gskym")
2021-03-12 05:19:32,296 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("gskym")}
2021-03-12 05:19:32,296 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:32,301 [main:67] - randomType = Int
2021-03-12 05:19:32,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:32,464 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:19:32,470 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:19:32,491 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:19:32,509 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:19:32,522 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:32,531 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:32,531 [main:114] - replacement of {} of type Function0<Unit> is { print("gskym")}
2021-03-12 05:19:32,658 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:19:32,658 [main:66] - Compilation checking started
2021-03-12 05:19:33,249 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:33,252 [main:107] - replacing (true, Boolean)
2021-03-12 05:19:33,252 [main:50] - replacing true Boolean
2021-03-12 05:19:33,252 [main:54] - Getting value of type Boolean
2021-03-12 05:19:33,395 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:33,397 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:19:33,397 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:33,706 [main:67] - randomType = Array<String>
2021-03-12 05:19:33,845 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 05:19:33,977 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-12 05:19:33,980 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-12 05:19:34,277 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:19:34,280 [main:95] - GENERATED = arrayOfNulls<String>(682011818)
2021-03-12 05:19:34,293 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@244a0aa5]
2021-03-12 05:19:34,419 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:34,420 [main:78] - Generated call from random type = (arrayOfNulls<String>(682011818)).size.equals("obtra")
2021-03-12 05:19:34,420 [main:106] - GETTING Boolean from Kla1
2021-03-12 05:19:34,425 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:19:34,425 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:34,552 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:34,552 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:19:34,681 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:34,684 [main:117] - GENERATED CALL = (Kla1()).equals("eqkgv").and(true)
2021-03-12 05:19:34,684 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:19:34,684 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:19:34,816 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:34,819 [main:117] - GENERATED CALL = (Kla1()).prope0.startsWith(Kla1().prope0, true)
2021-03-12 05:19:34,819 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:19:34,819 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:19:34,820 [main:117] - GENERATED CALL = (Kla1()).prope0.toBoolean()
2021-03-12 05:19:34,820 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:19:34,820 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:34,947 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:19:35,079 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:35,082 [main:117] - GENERATED CALL = (Kla1()).equals(null).xor(true)
2021-03-12 05:19:35,082 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:19:35,082 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:19:35,209 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:35,210 [main:117] - GENERATED CALL = (Kla1()).prope0.equals("lmwpi")
2021-03-12 05:19:35,210 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:19:35,210 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:35,340 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:35,340 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:19:35,475 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:35,475 [main:117] - GENERATED CALL = (Kla1()).equals("spfvs").equals("dlycd")
2021-03-12 05:19:35,476 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:19:35,476 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:35,607 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:35,608 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:19:35,608 [main:117] - GENERATED CALL = (Kla1()).equals("ijhyv").not()
2021-03-12 05:19:35,608 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]]
2021-03-12 05:19:35,608 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:35,735 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:35,735 [main:117] - GENERATED CALL = (Kla1()).equals("cndgt")
2021-03-12 05:19:35,735 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:19:35,735 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:19:35,735 [main:117] - GENERATED CALL = (Kla1()).prope0.matches(Kla1().prope0)
2021-03-12 05:19:35,735 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:19:35,735 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:35,864 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:35,864 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:19:36,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:36,022 [main:117] - GENERATED CALL = (Kla1()).equals("uezcj").or(false)
2021-03-12 05:19:36,022 [main:114] - replacement of true of type Boolean is (Kla1()).prope0.matches(Kla1().prope0)
2021-03-12 05:19:36,152 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:36,152 [main:66] - Compilation checking started
2021-03-12 05:19:36,526 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1()).prope0.matches(Kla1().prope0)) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:36,528 [main:107] - replacing ({
        prope1.getOrThrow()
    }, Any?)
2021-03-12 05:19:36,528 [main:50] - replacing {
        prope1.getOrThrow()
    } Any?
2021-03-12 05:19:36,528 [main:54] - Getting value of type Any?
2021-03-12 05:19:36,660 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:36,660 [main:58] - GENERATED VALUE OF TYPE Any? = "dtsrl"
2021-03-12 05:19:36,660 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:38,014 [main:67] - randomType = List<Pair<HashMap<Long?, Short?>, Float>?>
2021-03-12 05:19:38,016 [main:106] - GETTING Any? from String
2021-03-12 05:19:38,038 [main:106] - GETTING Any? from Function0<String>
2021-03-12 05:19:38,071 [main:106] - GETTING Any? from O
2021-03-12 05:19:38,084 [main:106] - GETTING Any? from Kla2
2021-03-12 05:19:38,094 [main:106] - GETTING Any? from Function0<String>
2021-03-12 05:19:38,096 [main:106] - GETTING Any? from Kla1
2021-03-12 05:19:38,099 [main:114] - replacement of {
        prope1.getOrThrow()
    } of type Any? is "dtsrl"
2021-03-12 05:19:38,228 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 05:19:38,228 [main:66] - Compilation checking started
2021-03-12 05:19:38,233 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:19:38,233 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) "dtsrl"
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:38,235 [main:107] - replacing (f, SuspendFunction0<Unit>)
2021-03-12 05:19:38,235 [main:50] - replacing f SuspendFunction0<Unit>
2021-03-12 05:19:38,235 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 05:19:38,367 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 05:19:38,370 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:19:38,504 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:19:38,508 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:19:38,785 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:19:38,785 [main:95] - GENERATED = print("pxdwy")
2021-03-12 05:19:38,785 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("pxdwy")}
2021-03-12 05:19:38,785 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:38,791 [main:67] - randomType = Int
2021-03-12 05:19:38,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:38,958 [main:106] - GETTING SuspendFunction0<Unit> from Function0<String>
2021-03-12 05:19:38,969 [main:106] - GETTING SuspendFunction0<Unit> from Kla1
2021-03-12 05:19:38,974 [main:106] - GETTING SuspendFunction0<Unit> from Kla2
2021-03-12 05:19:38,984 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 05:19:39,001 [main:106] - GETTING SuspendFunction0<Unit> from Function0<String>
2021-03-12 05:19:39,002 [main:106] - GETTING SuspendFunction0<Unit> from O
2021-03-12 05:19:39,016 [main:114] - replacement of f of type SuspendFunction0<Unit> is { print("pxdwy")}
2021-03-12 05:19:39,146 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:19:39,147 [main:66] - Compilation checking started
2021-03-12 05:19:39,546 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    { print("pxdwy")}.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:39,548 [main:107] - replacing (prope2, Function0<Unit>)
2021-03-12 05:19:39,548 [main:50] - replacing prope2 Function0<Unit>
2021-03-12 05:19:39,548 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:19:39,685 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:19:39,688 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:19:39,821 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:19:39,824 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:19:40,277 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:19:40,280 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:19:40,282 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:19:40,283 [main:95] - GENERATED = check(true, { "icrzb"})
2021-03-12 05:19:40,283 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "icrzb"})}
2021-03-12 05:19:40,283 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:40,293 [main:67] - randomType = Kla0
2021-03-12 05:19:40,420 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:19:40,422 [main:112] - generating klass Kla0 text = open class Kla0(val callback: () -> String)
2021-03-12 05:19:40,550 [main:194] - Type params = []
2021-03-12 05:19:40,680 [main:302] - generating value of type = Function0<String> false depth = 2
2021-03-12 05:19:40,682 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:19:40,694 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:19:40,710 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:19:40,717 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:19:40,740 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:40,751 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:19:40,765 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:40,765 [main:114] - replacement of prope2 of type Function0<Unit> is { check(true, { "icrzb"})}
2021-03-12 05:19:40,890 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:19:40,891 [main:66] - Compilation checking started
2021-03-12 05:19:41,242 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine { c ->
    prope2 = { c.resume(Unit) }
}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            { check(true, { "icrzb"})} = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:41,244 [main:107] - replacing ({ c ->
    prope2 = { c.resume(Unit) }
}, Function1<Continuation<Unit>, Unit>)
2021-03-12 05:19:41,245 [main:50] - replacing { c ->
    prope2 = { c.resume(Unit) }
} Function1<Continuation<Unit>, Unit>
2021-03-12 05:19:41,245 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 05:19:41,372 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 05:19:41,374 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:19:41,504 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:19:41,508 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:19:41,784 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:19:41,787 [main:95] - GENERATED = check(true)
2021-03-12 05:19:41,787 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(true)}
2021-03-12 05:19:41,787 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:41,929 [main:67] - randomType = UByte
2021-03-12 05:19:42,061 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:19:42,103 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from O
2021-03-12 05:19:42,124 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:19:42,178 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<String>
2021-03-12 05:19:42,194 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla1
2021-03-12 05:19:42,203 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla2
2021-03-12 05:19:42,220 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<String>
2021-03-12 05:19:42,220 [main:114] - replacement of { c ->
    prope2 = { c.resume(Unit) }
} of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(true)}
2021-03-12 05:19:42,349 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:19:42,349 [main:66] - Compilation checking started
2021-03-12 05:19:42,908 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla0({ "hbvec"}).callback).invoke().trimStart() + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:42,910 [main:107] - replacing ((Kla0({ "hbvec"}).callback).invoke().trimStart() + c, String)
2021-03-12 05:19:42,910 [main:50] - replacing (Kla0({ "hbvec"}).callback).invoke().trimStart() + c String
2021-03-12 05:19:42,910 [main:54] - Getting value of type String
2021-03-12 05:19:43,040 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:43,042 [main:58] - GENERATED VALUE OF TYPE String = "jwhza"
2021-03-12 05:19:43,042 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:43,512 [main:67] - randomType = HashMap<Map<Kla6, Byte>, J>
2021-03-12 05:19:43,639 [main:302] - generating value of type = HashMap<Map<Kla6, Byte>, J> false depth = 0
2021-03-12 05:19:43,772 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Map<Kla6, Byte>, J> = TODO()
2021-03-12 05:19:43,775 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Map<Kla6, Byte>, J> = TODO()
2021-03-12 05:19:43,908 [main:95] - GENERATED = linkedMapOf<Map<Kla6, Byte>, J>()
2021-03-12 05:19:44,069 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:19:44,220 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:44,224 [main:78] - Generated call from random type = (linkedMapOf<Map<Kla6, Byte>, J>()).size.toString(669090998)
2021-03-12 05:19:44,224 [main:106] - GETTING String from String
2021-03-12 05:19:44,253 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]]
2021-03-12 05:19:44,253 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]
2021-03-12 05:19:44,408 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:19:44,411 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:19:44,414 [main:117] - GENERATED CALL = (Kla1().prope0).dropLastWhile({a: Char -> false})
2021-03-12 05:19:44,414 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18c6e645]]
2021-03-12 05:19:44,414 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18c6e645]
2021-03-12 05:19:44,546 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:44,682 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:44,685 [main:117] - GENERATED CALL = (Kla1().prope0).padEnd(-1441837618, '䎍')
2021-03-12 05:19:44,685 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2a8ef1fa], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]]
2021-03-12 05:19:44,685 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2a8ef1fa]
2021-03-12 05:19:44,812 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:44,815 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:19:44,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:44,950 [main:117] - GENERATED CALL = (Kla1().prope0).compareTo("ueypo").toString(1564962327)
2021-03-12 05:19:44,950 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]]
2021-03-12 05:19:44,951 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]
2021-03-12 05:19:45,080 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:19:45,082 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:19:45,085 [main:117] - GENERATED CALL = (Kla1().prope0).filterNot({a: Char -> true})
2021-03-12 05:19:45,085 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]]
2021-03-12 05:19:45,085 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]
2021-03-12 05:19:45,212 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:19:45,215 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:19:45,218 [main:117] - GENERATED CALL = (Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'})
2021-03-12 05:19:45,218 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]]
2021-03-12 05:19:45,218 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]
2021-03-12 05:19:45,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:45,349 [main:117] - GENERATED CALL = (Kla1().prope0).takeLast(-165596951)
2021-03-12 05:19:45,349 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]]
2021-03-12 05:19:45,349 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]
2021-03-12 05:19:45,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:45,608 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:45,611 [main:117] - GENERATED CALL = (Kla1().prope0).removeRange(-1458526982, 1841600560)
2021-03-12 05:19:45,611 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b20585e]]
2021-03-12 05:19:45,611 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:19:45,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:45,866 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:45,869 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b20585e]
2021-03-12 05:19:45,998 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:19:46,130 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:46,132 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(-1169653291, -1243923634).commonPrefixWith("mlmuu", false)
2021-03-12 05:19:46,132 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]]
2021-03-12 05:19:46,132 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]
2021-03-12 05:19:46,258 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:46,261 [main:117] - GENERATED CALL = (Kla1().prope0).replaceBefore('ᐷ', Kla1().prope0, Kla1().prope0)
2021-03-12 05:19:46,261 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b20585e]]
2021-03-12 05:19:46,261 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b20585e]
2021-03-12 05:19:46,413 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:19:46,546 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:19:46,549 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:19:46,822 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:19:46,828 [main:95] - GENERATED = StringBuilder("qamfh")
2021-03-12 05:19:46,957 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:46,960 [main:117] - GENERATED CALL = (Kla1().prope0).commonPrefixWith(StringBuilder("qamfh"), true)
2021-03-12 05:19:46,960 [main:114] - replacement of (Kla0({ "hbvec"}).callback).invoke().trimStart() + c of type String is (Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'})
2021-03-12 05:19:47,089 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:47,089 [main:66] - Compilation checking started
2021-03-12 05:19:47,681 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:47,683 [main:107] - replacing ({
                prope1 += "done;"
                prope3 = true
            }, Function0<Unit>)
2021-03-12 05:19:47,683 [main:50] - replacing {
                prope1 += "done;"
                prope3 = true
            } Function0<Unit>
2021-03-12 05:19:47,684 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:19:47,810 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:19:47,813 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:19:47,947 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:19:47,950 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:19:48,255 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:19:48,258 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:19:48,392 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:19:48,396 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:19:48,705 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 05:19:48,708 [main:95] - GENERATED = require(false)
2021-03-12 05:19:48,708 [main:95] - GENERATED = contract({ require(false)})
2021-03-12 05:19:48,708 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(false)})}
2021-03-12 05:19:48,708 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:48,718 [main:67] - randomType = J
2021-03-12 05:19:48,720 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:19:48,738 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:48,749 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:19:48,750 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:19:48,762 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:19:48,774 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:19:48,777 [main:114] - replacement of {
                prope1 += "done;"
                prope3 = true
            } of type Function0<Unit> is { contract({ require(false)})}
2021-03-12 05:19:48,909 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:19:48,909 [main:66] - Compilation checking started
2021-03-12 05:19:49,285 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { contract({ require(false)})}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:49,287 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 05:19:49,287 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 05:19:49,287 [main:54] - Getting value of type String
2021-03-12 05:19:49,418 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:49,421 [main:58] - GENERATED VALUE OF TYPE String = "xklby"
2021-03-12 05:19:49,421 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:49,715 [main:67] - randomType = ArrayList<UInt>
2021-03-12 05:19:49,841 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-12 05:19:49,973 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-12 05:19:49,977 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-12 05:19:50,111 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 05:19:50,114 [main:95] - GENERATED = arrayListOf<UInt>(36287816.toUInt())
2021-03-12 05:19:50,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:19:50,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:50,373 [main:78] - Generated call from random type = (arrayListOf<UInt>(36287816.toUInt())).modCount.toString(-2051640430)
2021-03-12 05:19:50,374 [main:106] - GETTING String from Kla1
2021-03-12 05:19:50,378 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]]
2021-03-12 05:19:50,379 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]
2021-03-12 05:19:50,513 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:50,642 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:50,668 [main:117] - GENERATED CALL = (Kla1()).prope0.replaceBefore('㌢', Kla1().prope0, "neqlf")
2021-03-12 05:19:50,668 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]]
2021-03-12 05:19:50,668 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]
2021-03-12 05:19:50,795 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:19:50,801 [main:117] - GENERATED CALL = (Kla1()).prope0.removePrefix("msceu")
2021-03-12 05:19:50,801 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]]
2021-03-12 05:19:50,801 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]
2021-03-12 05:19:50,928 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:51,057 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:51,060 [main:117] - GENERATED CALL = (Kla1()).prope0.replaceAfterLast('唬', "brool", Kla1().prope0)
2021-03-12 05:19:51,060 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efdb98d]]
2021-03-12 05:19:51,060 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efdb98d]
2021-03-12 05:19:51,186 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:51,188 [main:117] - GENERATED CALL = (Kla1()).prope0.prependIndent("txxfq")
2021-03-12 05:19:51,189 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]]
2021-03-12 05:19:51,189 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]
2021-03-12 05:19:51,316 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:51,450 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:51,453 [main:117] - GENERATED CALL = (Kla1()).prope0.removeRange(-1344527977, -330573097)
2021-03-12 05:19:51,453 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69629430]]
2021-03-12 05:19:51,453 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69629430]
2021-03-12 05:19:51,453 [main:117] - GENERATED CALL = (Kla1()).prope0.trim()
2021-03-12 05:19:51,453 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574]]
2021-03-12 05:19:51,453 [main:117] - GENERATED CALL = (Kla1()).prope0
2021-03-12 05:19:51,454 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]]
2021-03-12 05:19:51,454 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]
2021-03-12 05:19:51,454 [main:117] - GENERATED CALL = (Kla1()).prope0.trimStart()
2021-03-12 05:19:51,454 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba474e2]]
2021-03-12 05:19:51,454 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ba474e2]
2021-03-12 05:19:51,582 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:51,585 [main:117] - GENERATED CALL = (Kla1()).prope0.concat("vvjgg")
2021-03-12 05:19:51,585 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]]
2021-03-12 05:19:51,585 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]
2021-03-12 05:19:51,585 [main:117] - GENERATED CALL = (Kla1()).prope0.toUpperCase()
2021-03-12 05:19:51,585 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (Kla1()).prope0.concat("vvjgg")
2021-03-12 05:19:51,712 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:51,712 [main:66] - Compilation checking started
2021-03-12 05:19:52,066 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error((Kla1()).prope0.concat("vvjgg"))
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:52,068 [main:107] - replacing ("OK", String)
2021-03-12 05:19:52,068 [main:50] - replacing "OK" String
2021-03-12 05:19:52,068 [main:54] - Getting value of type String
2021-03-12 05:19:52,198 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:52,200 [main:58] - GENERATED VALUE OF TYPE String = "ijept"
2021-03-12 05:19:52,200 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:53,606 [main:67] - randomType = ArrayDeque<ArrayList<Pair<Function2<Kla8, Byte?, Sequence<J>>, Kla3?>?>>
2021-03-12 05:19:53,732 [main:302] - generating value of type = ArrayDeque<ArrayList<Pair<Function2<Kla8, Byte?, Sequence<J>>, Kla3?>?>> false depth = 0
2021-03-12 05:19:53,868 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ArrayList<Pair<Function2<Kla8, Byte?, Sequence<J>>, Kla3?>?>> = TODO()
2021-03-12 05:19:53,872 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ArrayList<Pair<Function2<Kla8, Byte?, Sequence<J>>, Kla3?>?>> = TODO()
2021-03-12 05:19:54,154 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:19:54,157 [main:95] - GENERATED = ArrayDeque<ArrayList<Pair<Function2<Kla8, Byte?, Sequence<J>>, Kla3?>?>>(-2072691647)
2021-03-12 05:19:54,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:19:54,605 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:54,645 [main:78] - Generated call from random type = (ArrayDeque<ArrayList<Pair<Function2<Kla8, Byte?, Sequence<J>>, Kla3?>?>>(-2072691647)).modCount.toString(-1873044166)
2021-03-12 05:19:54,645 [main:114] - replacement of "OK" of type String is (ArrayDeque<ArrayList<Pair<Function2<Kla8, Byte?, Sequence<J>>, Kla3?>?>>(-2072691647)).modCount.toString(-1873044166)
2021-03-12 05:19:54,772 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:54,772 [main:66] - Compilation checking started
2021-03-12 05:19:55,206 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return (ArrayDeque<ArrayList<Pair<Function2<Kla8, Byte?, Sequence<J>>, Kla3?>?>>(-2072691647)).modCount.toString(-1873044166)
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:55,208 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:19:55,209 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:19:55,209 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:19:55,338 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:19:55,343 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:19:55,499 [main:67] - randomType = Kla1?
2021-03-12 05:19:55,627 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:19:55,629 [main:112] - generating klass Kla1 text = class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}
2021-03-12 05:19:55,635 [main:106] - GETTING EmptyCoroutineContext from Function0<String>
2021-03-12 05:19:55,644 [main:106] - GETTING EmptyCoroutineContext from Function0<String>
2021-03-12 05:19:55,644 [main:106] - GETTING EmptyCoroutineContext from Kla2
2021-03-12 05:19:55,654 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:19:55,671 [main:106] - GETTING EmptyCoroutineContext from O
2021-03-12 05:19:55,684 [main:106] - GETTING EmptyCoroutineContext from Kla1
2021-03-12 05:19:55,688 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:19:55,688 [main:107] - replacing (it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true, Boolean)
2021-03-12 05:19:55,688 [main:50] - replacing it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true Boolean
2021-03-12 05:19:55,688 [main:54] - Getting value of type Boolean
2021-03-12 05:19:55,818 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:55,820 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:19:55,820 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:55,826 [main:67] - randomType = Char
2021-03-12 05:19:55,954 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:55,977 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@63ff878f]
2021-03-12 05:19:55,978 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@29a9ea3f]
2021-03-12 05:19:56,112 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:56,112 [main:78] - Generated call from random type = ('').toDouble().equals("qqhlq")
2021-03-12 05:19:56,113 [main:106] - GETTING Boolean from String
2021-03-12 05:19:56,134 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e7e3]]
2021-03-12 05:19:56,134 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:19:56,263 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:56,266 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e7e3]
2021-03-12 05:19:56,266 [main:117] - GENERATED CALL = (Kla1().prope0).get(500508732).isISOControl()
2021-03-12 05:19:56,266 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ed89ac]]
2021-03-12 05:19:56,266 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:19:56,396 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:56,399 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ed89ac]
2021-03-12 05:19:56,399 [main:117] - GENERATED CALL = (Kla1().prope0).get(-259668998).isDefined()
2021-03-12 05:19:56,399 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5746c348]]
2021-03-12 05:19:56,399 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:19:56,527 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:56,530 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5746c348]
2021-03-12 05:19:56,530 [main:117] - GENERATED CALL = (Kla1().prope0).get(-1229191928).isLetter()
2021-03-12 05:19:56,530 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1213b66a]]
2021-03-12 05:19:56,530 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1213b66a]
2021-03-12 05:19:56,660 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:19:56,790 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:56,793 [main:117] - GENERATED CALL = (Kla1().prope0).contains('䩄', false)
2021-03-12 05:19:56,793 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@556e389d]]
2021-03-12 05:19:56,793 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:19:56,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:19:56,924 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@556e389d]
2021-03-12 05:19:56,924 [main:117] - GENERATED CALL = (Kla1().prope0).get(1423233383).isLetterOrDigit()
2021-03-12 05:19:56,925 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:19:56,925 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:19:57,071 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:57,072 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:19:57,072 [main:117] - GENERATED CALL = (Kla1().prope0).equals("cpscm").not()
2021-03-12 05:19:57,072 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96776b8]]
2021-03-12 05:19:57,072 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96776b8]
2021-03-12 05:19:57,072 [main:117] - GENERATED CALL = (Kla1().prope0).isEmpty()
2021-03-12 05:19:57,072 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c36705]]
2021-03-12 05:19:57,072 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c36705]
2021-03-12 05:19:57,072 [main:117] - GENERATED CALL = (Kla1().prope0).any()
2021-03-12 05:19:57,072 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:19:57,072 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:19:57,204 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:57,204 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:19:57,331 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:57,334 [main:117] - GENERATED CALL = (Kla1().prope0).equals("tnhpg").and(false)
2021-03-12 05:19:57,334 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:19:57,334 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:19:57,463 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:57,463 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:19:57,591 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:57,593 [main:117] - GENERATED CALL = (Kla1().prope0).equals("stfbq").or(false)
2021-03-12 05:19:57,593 [main:114] - replacement of it?.methodName?.startsWith((O).foo(Kla1().prope0).substringBeforeLast('卬', Kla1().prope0)) == true of type Boolean is (Kla1().prope0).get(-259668998).isDefined()
2021-03-12 05:19:57,728 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:19:57,729 [main:66] - Compilation checking started
2021-03-12 05:19:58,328 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if (prope1 != "jqbay") return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { (Kla1().prope0).get(-259668998).isDefined() }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:19:58,331 [main:107] - replacing (prope1 != "jqbay", Boolean)
2021-03-12 05:19:58,331 [main:50] - replacing prope1 != "jqbay" Boolean
2021-03-12 05:19:58,331 [main:54] - Getting value of type Boolean
2021-03-12 05:19:58,495 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:58,497 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:19:58,497 [main:61] - GENERATED IS CALL =false
2021-03-12 05:19:58,651 [main:67] - randomType = Sequence<I>
2021-03-12 05:19:58,652 [main:106] - GETTING Boolean from Kla1
2021-03-12 05:19:58,657 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:19:58,657 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:58,783 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:58,783 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:19:58,908 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:58,910 [main:117] - GENERATED CALL = (Kla1()).equals("nwuux").or(false)
2021-03-12 05:19:58,910 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:19:58,910 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:59,041 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:59,041 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:19:59,168 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:59,168 [main:117] - GENERATED CALL = (Kla1()).equals("jbybp").equals("hrmci")
2021-03-12 05:19:59,168 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:19:59,168 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:19:59,293 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:19:59,296 [main:117] - GENERATED CALL = (Kla1()).prope0.matches("fidgb")
2021-03-12 05:19:59,296 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]]
2021-03-12 05:19:59,296 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]
2021-03-12 05:19:59,445 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:59,447 [main:117] - GENERATED CALL = (Kla1()).prope0.endsWith(Kla1().prope0, false)
2021-03-12 05:19:59,447 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:19:59,447 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:19:59,573 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:59,574 [main:117] - GENERATED CALL = (Kla1()).prope0.equals("gceoc")
2021-03-12 05:19:59,574 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:19:59,574 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:59,701 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:59,701 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:19:59,701 [main:117] - GENERATED CALL = (Kla1()).equals("bonvf").not()
2021-03-12 05:19:59,702 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:19:59,702 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:19:59,826 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:19:59,826 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:19:59,954 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:19:59,956 [main:117] - GENERATED CALL = (Kla1()).equals("cefub").and(false)
2021-03-12 05:19:59,956 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:19:59,956 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:20:00,087 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:00,214 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:00,217 [main:117] - GENERATED CALL = (Kla1()).prope0.startsWith("vhgdt", false)
2021-03-12 05:20:00,217 [main:113] - Case = [public final val prope0: kotlin.String defined in Kla1[PropertyDescriptorImpl@6a4de574], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:20:00,217 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:20:00,217 [main:117] - GENERATED CALL = (Kla1()).prope0.toBoolean()
2021-03-12 05:20:00,217 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:20:00,217 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@51d775f8]
2021-03-12 05:20:00,342 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:00,342 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:20:00,466 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:00,468 [main:117] - GENERATED CALL = (Kla1()).equals("pszzc").xor(false)
2021-03-12 05:20:00,468 [main:114] - replacement of prope1 != "jqbay" of type Boolean is (Kla1()).prope0.toBoolean()
2021-03-12 05:20:00,594 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:00,594 [main:66] - Compilation checking started
2021-03-12 05:20:01,158 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { (Kla1().prope0).get(-259668998).isDefined() }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:01,159 [main:107] - replacing (prope2, Function0<Unit>)
2021-03-12 05:20:01,160 [main:50] - replacing prope2 Function0<Unit>
2021-03-12 05:20:01,160 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:20:01,295 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:20:01,297 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:01,436 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:20:01,439 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:20:01,884 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:20:01,886 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:20:01,888 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:20:01,888 [main:95] - GENERATED = check(false, { "qkzkq"})
2021-03-12 05:20:01,888 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "qkzkq"})}
2021-03-12 05:20:01,888 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:02,169 [main:67] - randomType = Sequence<ULong>
2021-03-12 05:20:02,170 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:20:02,176 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:20:02,185 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:20:02,196 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:20:02,206 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:20:02,207 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:20:02,223 [main:114] - replacement of prope2 of type Function0<Unit> is { check(false, { "qkzkq"})}
2021-03-12 05:20:02,349 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:20:02,350 [main:66] - Compilation checking started
2021-03-12 05:20:02,767 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { (Kla1().prope0).get(-259668998).isDefined() }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        { check(false, { "qkzkq"})}()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:02,768 [main:107] - replacing (prope10 != null, Boolean)
2021-03-12 05:20:02,769 [main:50] - replacing prope10 != null Boolean
2021-03-12 05:20:02,769 [main:54] - Getting value of type Boolean
2021-03-12 05:20:02,918 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:02,920 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:20:02,921 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:02,925 [main:67] - randomType = Boolean
2021-03-12 05:20:03,056 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:03,068 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:20:03,194 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:03,194 [main:78] - Generated call from random type = (false).equals("szdjh")
2021-03-12 05:20:03,195 [main:106] - GETTING Boolean from Function0<String>
2021-03-12 05:20:03,204 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:20:03,204 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:03,329 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:03,329 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:20:03,457 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:03,459 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).equals("erlum").or(false)
2021-03-12 05:20:03,460 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:20:03,460 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:03,460 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:20:03,589 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:03,591 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().startsWith(Kla1().prope0, false)
2021-03-12 05:20:03,591 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:20:03,591 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:03,591 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:20:03,592 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().toBoolean()
2021-03-12 05:20:03,592 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:20:03,592 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:03,724 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:03,724 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:20:03,852 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:03,855 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).equals("azdcd").xor(true)
2021-03-12 05:20:03,855 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:20:03,855 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:04,005 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:04,005 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:20:04,142 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:04,145 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).equals("kpjkb").and(true)
2021-03-12 05:20:04,145 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]]
2021-03-12 05:20:04,145 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:04,271 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:04,272 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).equals("tperd")
2021-03-12 05:20:04,272 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:20:04,272 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:04,272 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:20:04,399 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:04,399 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().equals("olfci")
2021-03-12 05:20:04,399 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:20:04,399 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:04,399 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:20:04,399 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().matches(Kla1().prope0)
2021-03-12 05:20:04,399 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:20:04,399 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:04,524 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:04,524 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:20:04,524 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).equals("rjvtc").not()
2021-03-12 05:20:04,525 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:20:04,525 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:04,650 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:04,650 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:20:04,791 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:04,791 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).equals("amnvr").equals("mqsnu")
2021-03-12 05:20:04,791 [main:114] - replacement of prope10 != null of type Boolean is (Kla0({ "hbvec"}).callback).invoke().matches(Kla1().prope0)
2021-03-12 05:20:04,916 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:04,917 [main:66] - Compilation checking started
2021-03-12 05:20:05,284 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!prope3) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while ((Kla0({ "hbvec"}).callback).invoke().matches(Kla1().prope0)) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { (Kla1().prope0).get(-259668998).isDefined() }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:05,286 [main:107] - replacing (prope3, Boolean)
2021-03-12 05:20:05,287 [main:50] - replacing prope3 Boolean
2021-03-12 05:20:05,287 [main:54] - Getting value of type Boolean
2021-03-12 05:20:05,418 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:05,420 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:20:05,421 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:05,563 [main:67] - randomType = Float
2021-03-12 05:20:05,698 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:20:05,728 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@240c9b52]
2021-03-12 05:20:05,728 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@f71a790]
2021-03-12 05:20:05,728 [main:78] - Generated call from random type = (0.50082016f).toDouble().isInfinite()
2021-03-12 05:20:05,729 [main:106] - GETTING Boolean from O
2021-03-12 05:20:05,739 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:20:05,739 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:05,739 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:20:05,868 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:05,868 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).equals("uhrhx")
2021-03-12 05:20:05,868 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:20:05,868 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:05,993 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:05,995 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:20:06,121 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:06,124 [main:117] - GENERATED CALL = (O).foo("ogmwp").startsWith(Kla1().prope0, true)
2021-03-12 05:20:06,124 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:20:06,124 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:20:06,272 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:06,272 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:20:06,397 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:06,399 [main:117] - GENERATED CALL = (O).equals("bmdkp").and(false)
2021-03-12 05:20:06,399 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:20:06,399 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:06,526 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:06,528 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:20:06,529 [main:117] - GENERATED CALL = (O).foo("ykagq").toBoolean()
2021-03-12 05:20:06,529 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:20:06,529 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:20:06,654 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:06,654 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:20:06,654 [main:117] - GENERATED CALL = (O).equals("rcjdz").not()
2021-03-12 05:20:06,654 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:20:06,654 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:20:06,786 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:06,786 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:20:06,928 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:06,931 [main:117] - GENERATED CALL = (O).equals("dfjlm").or(false)
2021-03-12 05:20:06,931 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]]
2021-03-12 05:20:06,931 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:20:07,056 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:07,056 [main:117] - GENERATED CALL = (O).equals("pfjba")
2021-03-12 05:20:07,056 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]]
2021-03-12 05:20:07,056 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:07,056 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]
2021-03-12 05:20:07,187 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:07,314 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:07,316 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).endsWith("ophmb", true)
2021-03-12 05:20:07,316 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:20:07,316 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in O[DeserializedSimpleFunctionDescriptor@6384c81e]
2021-03-12 05:20:07,441 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:07,441 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:20:07,566 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:07,568 [main:117] - GENERATED CALL = (O).equals("faclx").xor(true)
2021-03-12 05:20:07,568 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:20:07,568 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:07,568 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:20:07,569 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).matches(Kla1().prope0)
2021-03-12 05:20:07,569 [main:114] - replacement of prope3 of type Boolean is (O).foo("ogmwp").startsWith(Kla1().prope0, true)
2021-03-12 05:20:07,696 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:07,696 [main:66] - Compilation checking started
2021-03-12 05:20:08,282 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { (Kla1().prope0).get(-259668998).isDefined() }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:08,284 [main:107] - replacing (prope2, Function0<Unit>)
2021-03-12 05:20:08,284 [main:50] - replacing prope2 Function0<Unit>
2021-03-12 05:20:08,284 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:20:08,408 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:20:08,411 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:08,542 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:20:08,545 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:20:08,845 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:20:08,848 [main:95] - GENERATED = check(false)
2021-03-12 05:20:08,848 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 05:20:08,848 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:08,996 [main:67] - randomType = Kla3?
2021-03-12 05:20:08,997 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:20:09,017 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:20:09,023 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:20:09,034 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:20:09,044 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:20:09,053 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:20:09,053 [main:114] - replacement of prope2 of type Function0<Unit> is { check(false)}
2021-03-12 05:20:09,178 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:20:09,178 [main:66] - Compilation checking started
2021-03-12 05:20:09,538 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { (Kla1().prope0).get(-259668998).isDefined() }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        { check(false)}()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:09,540 [main:107] - replacing (prope1, String)
2021-03-12 05:20:09,540 [main:50] - replacing prope1 String
2021-03-12 05:20:09,540 [main:54] - Getting value of type String
2021-03-12 05:20:09,675 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:09,677 [main:58] - GENERATED VALUE OF TYPE String = "vcqmw"
2021-03-12 05:20:09,678 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:09,844 [main:67] - randomType = Map<O, Kla9>
2021-03-12 05:20:09,845 [main:106] - GETTING String from String
2021-03-12 05:20:09,861 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a6a3e5]]
2021-03-12 05:20:09,862 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a6a3e5]
2021-03-12 05:20:09,988 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:10,117 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:10,119 [main:117] - GENERATED CALL = (Kla1().prope0).substringBeforeLast('턄', "gwwgf")
2021-03-12 05:20:10,119 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c6279b0]]
2021-03-12 05:20:10,119 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c6279b0]
2021-03-12 05:20:10,119 [main:117] - GENERATED CALL = (Kla1().prope0).toLowerCase()
2021-03-12 05:20:10,119 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]]
2021-03-12 05:20:10,119 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]
2021-03-12 05:20:10,247 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:10,374 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:10,376 [main:117] - GENERATED CALL = (Kla1().prope0).removeRange(517321825, 2020555555)
2021-03-12 05:20:10,376 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fddd9c5]]
2021-03-12 05:20:10,376 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fddd9c5]
2021-03-12 05:20:10,503 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:20:10,634 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:10,636 [main:117] - GENERATED CALL = (Kla1().prope0).commonSuffixWith(StringBuilder(), false)
2021-03-12 05:20:10,636 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1d3bc1df], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]]
2021-03-12 05:20:10,637 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:20:10,764 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:10,766 [main:117] - GENERATED CALL = (Kla1().prope0).length.toString(-963997136)
2021-03-12 05:20:10,766 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]]
2021-03-12 05:20:10,766 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]
2021-03-12 05:20:10,892 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:10,894 [main:117] - GENERATED CALL = (Kla1().prope0).takeLast(-279829869)
2021-03-12 05:20:10,894 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7a0796]]
2021-03-12 05:20:10,894 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7a0796]
2021-03-12 05:20:11,052 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:20:11,183 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:20:11,186 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:20:11,458 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:20:11,588 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:20:11,592 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:20:11,878 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:20:11,880 [main:95] - GENERATED = StringBuilder(-208557007)
2021-03-12 05:20:11,881 [main:95] - GENERATED = StringBuilder(StringBuilder(-208557007))
2021-03-12 05:20:11,881 [main:117] - GENERATED CALL = (Kla1().prope0).removeSuffix(StringBuilder(StringBuilder(-208557007)))
2021-03-12 05:20:11,881 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cec6062]]
2021-03-12 05:20:11,881 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cec6062]
2021-03-12 05:20:12,007 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:12,135 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:12,263 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:12,265 [main:117] - GENERATED CALL = (Kla1().prope0).replace('꒟', 'ꞵ', true)
2021-03-12 05:20:12,265 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]]
2021-03-12 05:20:12,265 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]
2021-03-12 05:20:12,392 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:20:12,394 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:20:12,397 [main:117] - GENERATED CALL = (Kla1().prope0).dropLastWhile({a: Char -> false})
2021-03-12 05:20:12,397 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]]
2021-03-12 05:20:12,397 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64dbb4b7]
2021-03-12 05:20:12,397 [main:117] - GENERATED CALL = (Kla1().prope0).toUpperCase()
2021-03-12 05:20:12,397 [main:114] - replacement of prope1 of type String is (Kla1().prope0).toLowerCase()
2021-03-12 05:20:12,522 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:12,523 [main:66] - Compilation checking started
2021-03-12 05:20:12,868 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        (Kla1().prope0).toLowerCase() += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { (Kla1().prope0).get(-259668998).isDefined() }?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:12,869 [main:107] - replacing ({ (Kla1().prope0).get(-259668998).isDefined() }, Function0<Boolean>)
2021-03-12 05:20:12,870 [main:50] - replacing { (Kla1().prope0).get(-259668998).isDefined() } Function0<Boolean>
2021-03-12 05:20:12,870 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 05:20:12,996 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 05:20:12,998 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:20:13,000 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 05:20:13,000 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:13,144 [main:67] - randomType = UByte
2021-03-12 05:20:13,271 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:20:13,326 [main:106] - GETTING Function0<Boolean> from O
2021-03-12 05:20:13,341 [main:106] - GETTING Function0<Boolean> from Function0<String>
2021-03-12 05:20:13,350 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 05:20:13,367 [main:106] - GETTING Function0<Boolean> from Kla2
2021-03-12 05:20:13,377 [main:106] - GETTING Function0<Boolean> from Function0<String>
2021-03-12 05:20:13,378 [main:106] - GETTING Function0<Boolean> from Kla1
2021-03-12 05:20:13,381 [main:114] - replacement of { (Kla1().prope0).get(-259668998).isDefined() } of type Function0<Boolean> is { false}
2021-03-12 05:20:13,508 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:20:13,508 [main:66] - Compilation checking started
2021-03-12 05:20:14,030 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:14,032 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 05:20:14,033 [main:50] - replacing numberOfSuspensions Int
2021-03-12 05:20:14,033 [main:54] - Getting value of type Int
2021-03-12 05:20:14,169 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:14,171 [main:58] - GENERATED VALUE OF TYPE Int = 2119063844
2021-03-12 05:20:14,171 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:14,312 [main:67] - randomType = UShort
2021-03-12 05:20:14,438 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:20:14,467 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@49773c16]
2021-03-12 05:20:14,592 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:20:14,594 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1172652b]
2021-03-12 05:20:14,719 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:14,721 [main:78] - Generated call from random type = (4867.toUShort()).compareTo(16.toUByte()).rotateLeft(882487590)
2021-03-12 05:20:14,722 [main:106] - GETTING Int from Function0<String>
2021-03-12 05:20:14,731 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6daa3bc0]]
2021-03-12 05:20:14,731 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:14,732 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6daa3bc0]
2021-03-12 05:20:14,732 [main:117] - GENERATED CALL = (callback).invoke().toInt()
2021-03-12 05:20:14,732 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1d3bc1df]]
2021-03-12 05:20:14,732 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:14,732 [main:117] - GENERATED CALL = (callback).invoke().length
2021-03-12 05:20:14,732 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a10ed67]]
2021-03-12 05:20:14,732 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:14,732 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a10ed67]
2021-03-12 05:20:14,858 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:14,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:14,986 [main:117] - GENERATED CALL = (callback).invoke().compareTo("iderf", false)
2021-03-12 05:20:14,986 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]]
2021-03-12 05:20:14,986 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:15,111 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:15,111 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]
2021-03-12 05:20:15,234 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:15,237 [main:117] - GENERATED CALL = (callback).equals("imltu").compareTo(false)
2021-03-12 05:20:15,237 [main:114] - replacement of numberOfSuspensions of type Int is (callback).invoke().compareTo("iderf", false)
2021-03-12 05:20:15,361 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:15,361 [main:66] - Compilation checking started
2021-03-12 05:20:15,733 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(callback).invoke().compareTo("iderf", false)) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:15,735 [main:107] - replacing (createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }), Continuation<Unit>)
2021-03-12 05:20:15,735 [main:50] - replacing createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }) Continuation<Unit>
2021-03-12 05:20:15,735 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:20:15,866 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:20:15,997 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:20:16,001 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:20:16,424 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:20:16,555 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:20:16,558 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:20:16,833 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:20:16,965 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:20:16,968 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:20:17,395 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:20:17,395 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:20:17,395 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:20:17,396 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:20:17,404 [main:67] - randomType = Kla4
2021-03-12 05:20:17,528 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:20:17,530 [main:112] - generating klass Kla4 text = object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}
2021-03-12 05:20:17,539 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:20:17,548 [main:106] - GETTING Continuation<Unit> from O
2021-03-12 05:20:17,559 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:20:17,560 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:20:17,577 [main:106] - GETTING Continuation<Unit> from Kla2
2021-03-12 05:20:17,587 [main:106] - GETTING Continuation<Unit> from Kla1
2021-03-12 05:20:17,591 [main:111] - Cant find and generate replacement for createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }) type Continuation<Unit>
2021-03-12 05:20:17,591 [main:107] - replacing (prope1, String)
2021-03-12 05:20:17,591 [main:50] - replacing prope1 String
2021-03-12 05:20:17,591 [main:54] - Getting value of type String
2021-03-12 05:20:17,714 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:17,716 [main:58] - GENERATED VALUE OF TYPE String = "lqztu"
2021-03-12 05:20:17,717 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:17,721 [main:67] - randomType = Int
2021-03-12 05:20:17,847 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:17,881 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@254a4f0e]
2021-03-12 05:20:17,881 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a945c72]
2021-03-12 05:20:17,881 [main:78] - Generated call from random type = (56978450).toChar().titlecase()
2021-03-12 05:20:17,882 [main:106] - GETTING String from Function0<String>
2021-03-12 05:20:17,891 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bc53a18]]
2021-03-12 05:20:17,891 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:17,891 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bc53a18]
2021-03-12 05:20:18,040 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:20:18,170 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:20:18,174 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 05:20:18,303 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:20:18,306 [main:95] - GENERATED = setOf<Int>(1573884228)
2021-03-12 05:20:18,306 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().slice(setOf<Int>(1573884228))
2021-03-12 05:20:18,306 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470e7190]]
2021-03-12 05:20:18,306 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:18,306 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470e7190]
2021-03-12 05:20:18,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:18,556 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:18,683 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:20:18,688 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replaceRange(-482894358, -340773916, "ikwxj")
2021-03-12 05:20:18,688 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bcfd40]]
2021-03-12 05:20:18,688 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:18,688 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bcfd40]
2021-03-12 05:20:18,813 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:20:18,815 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:20:18,818 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().takeWhile({a: Char -> true})
2021-03-12 05:20:18,818 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f80f99]]
2021-03-12 05:20:18,818 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:18,818 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f80f99]
2021-03-12 05:20:18,943 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:19,071 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:19,074 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replaceBeforeLast('如', "cbtua", Kla1().prope0)
2021-03-12 05:20:19,074 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@415e5cdd]]
2021-03-12 05:20:19,074 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:19,074 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@415e5cdd]
2021-03-12 05:20:19,198 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:20:19,203 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().removeSurrounding("enezr")
2021-03-12 05:20:19,204 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c6279b0]]
2021-03-12 05:20:19,204 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:19,204 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c6279b0]
2021-03-12 05:20:19,204 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().toLowerCase()
2021-03-12 05:20:19,204 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cec6062]]
2021-03-12 05:20:19,204 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:19,204 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cec6062]
2021-03-12 05:20:19,330 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:19,456 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:19,582 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:19,584 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replace('뒠', '딃', false)
2021-03-12 05:20:19,584 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68279736]]
2021-03-12 05:20:19,584 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:19,584 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68279736]
2021-03-12 05:20:19,712 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:19,715 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().substring(-893434997)
2021-03-12 05:20:19,715 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12631b01]]
2021-03-12 05:20:19,715 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:19,715 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12631b01]
2021-03-12 05:20:19,715 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().trimEnd()
2021-03-12 05:20:19,715 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b97a21d]]
2021-03-12 05:20:19,715 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:19,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b97a21d]
2021-03-12 05:20:19,716 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().lowercase()
2021-03-12 05:20:19,716 [main:114] - replacement of prope1 of type String is (Kla0({ "hbvec"}).callback).invoke().substring(-893434997)
2021-03-12 05:20:19,840 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:19,841 [main:66] - Compilation checking started
2021-03-12 05:20:20,187 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                (Kla0({ "hbvec"}).callback).invoke().substring(-893434997) += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error((Kla1().prope0).get(1248278327).uppercase()) }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:20,190 [main:107] - replacing ({ error((Kla1().prope0).get(1248278327).uppercase()) }, Function0<Nothing>)
2021-03-12 05:20:20,190 [main:50] - replacing { error((Kla1().prope0).get(1248278327).uppercase()) } Function0<Nothing>
2021-03-12 05:20:20,190 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 05:20:20,338 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 05:20:20,340 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 05:20:20,498 [main:43] - GENERATING CALL OF fun error(message: kotlin.Any): Nothg = TODO()
2021-03-12 05:20:20,501 [main:61] - WITHOUT TYPE PARAMS = fun error(message: kotlin.Any): Nothg = TODO()
2021-03-12 05:20:20,770 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:20:20,770 [main:95] - GENERATED = error("vaaad")
2021-03-12 05:20:20,770 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { error("vaaad")}
2021-03-12 05:20:20,770 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:20,917 [main:67] - randomType = Array<Kla0>
2021-03-12 05:20:21,040 [main:302] - generating value of type = Array<Kla0> false depth = 0
2021-03-12 05:20:21,170 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Kla0): Array<Kla0> = TODO()
2021-03-12 05:20:21,173 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Kla0): Array<Kla0> = TODO()
2021-03-12 05:20:21,303 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 05:20:21,305 [main:112] - generating klass Kla0 text = open class Kla0(val callback: () -> String)
2021-03-12 05:20:21,428 [main:194] - Type params = []
2021-03-12 05:20:21,552 [main:302] - generating value of type = Function0<String> false depth = 5
2021-03-12 05:20:21,554 [main:302] - generating value of type = String true depth = 6
2021-03-12 05:20:21,557 [main:95] - GENERATED = arrayOf<Kla0>(Kla0({ "mvdlo"}))
2021-03-12 05:20:21,568 [main:106] - GETTING Function0<Nothing> from Function0<String>
2021-03-12 05:20:21,577 [main:106] - GETTING Function0<Nothing> from O
2021-03-12 05:20:21,588 [main:106] - GETTING Function0<Nothing> from Kla1
2021-03-12 05:20:21,593 [main:106] - GETTING Function0<Nothing> from Kla2
2021-03-12 05:20:21,603 [main:106] - GETTING Function0<Nothing> from Function0<String>
2021-03-12 05:20:21,604 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 05:20:21,620 [main:114] - replacement of { error((Kla1().prope0).get(1248278327).uppercase()) } of type Function0<Nothing> is { error("vaaad")}
2021-03-12 05:20:21,744 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:20:21,745 [main:66] - Compilation checking started
2021-03-12 05:20:22,281 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:22,284 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 05:20:22,284 [main:50] - replacing getOrThrow() Any?
2021-03-12 05:20:22,284 [main:54] - Getting value of type Any?
2021-03-12 05:20:22,422 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:22,422 [main:58] - GENERATED VALUE OF TYPE Any? = "fiuax"
2021-03-12 05:20:22,422 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:23,458 [main:67] - randomType = Triple<Function2<Byte, Byte, Short>, Kla4, MutableMap<Char?, Kla3>>
2021-03-12 05:20:23,580 [main:302] - generating value of type = Triple<Function2<Byte, Byte, Short>, Kla4, MutableMap<Char?, Kla3>> false depth = 0
2021-03-12 05:20:23,712 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Function2<Byte, Byte, Short>, second: Kla4, third: MutableMap<Char?, Kla3>): Triple<Function2<Byte, Byte, Short>, Kla4, MutableMap<Char?, Kla3>> = TODO()
2021-03-12 05:20:23,715 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Function2<Byte, Byte, Short>, second: Kla4, third: MutableMap<Char?, Kla3>): Triple<Function2<Byte, Byte, Short>, Kla4, MutableMap<Char?, Kla3>> = TODO()
2021-03-12 05:20:23,845 [main:302] - generating value of type = Function2<Byte, Byte, Short> false depth = 3
2021-03-12 05:20:23,847 [main:302] - generating value of type = Short true depth = 4
2021-03-12 05:20:23,850 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 05:20:23,852 [main:112] - generating klass Kla4 text = object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}
2021-03-12 05:20:23,852 [main:302] - generating value of type = MutableMap<Char?, Kla3> false depth = 3
2021-03-12 05:20:23,982 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Char?, Kla3>): MutableMap<Char?, Kla3> = TODO()
2021-03-12 05:20:23,985 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Char?, Kla3>): MutableMap<Char?, Kla3> = TODO()
2021-03-12 05:20:24,262 [main:302] - generating value of type = Map<Char?, Kla3> false depth = 6
2021-03-12 05:20:24,391 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Char?, Kla3>): Map<Char?, Kla3> = TODO()
2021-03-12 05:20:24,394 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Char?, Kla3>): Map<Char?, Kla3> = TODO()
2021-03-12 05:20:24,523 [main:302] - generating value of type = Pair<Char?, Kla3> false depth = 9
2021-03-12 05:20:24,652 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char?, second: Kla3): Pair<Char?, Kla3> = TODO()
2021-03-12 05:20:24,655 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char?, second: Kla3): Pair<Char?, Kla3> = TODO()
2021-03-12 05:20:24,782 [main:302] - generating value of type = Char true depth = 12
2021-03-12 05:20:24,784 [main:302] - generating value of type = Kla3 false depth = 12
2021-03-12 05:20:24,787 [main:112] - generating klass Kla3 text = interface Kla3 {
    suspend fun fu5(x: String = "first")
}
2021-03-12 05:20:25,046 [main:302] - generating value of type = Kla4 false depth = 14
2021-03-12 05:20:25,049 [main:112] - generating klass Kla4 text = object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}
2021-03-12 05:20:25,049 [main:95] - GENERATED = Pair<Char?, Kla3>('ﾛ', Kla4)
2021-03-12 05:20:25,049 [main:95] - GENERATED = linkedMapOf<Char?, Kla3>(Pair<Char?, Kla3>('ﾛ', Kla4))
2021-03-12 05:20:25,049 [main:95] - GENERATED = LinkedHashMap<Char?, Kla3>(linkedMapOf<Char?, Kla3>(Pair<Char?, Kla3>('ﾛ', Kla4)))
2021-03-12 05:20:25,050 [main:95] - GENERATED = Triple<Function2<Byte, Byte, Short>, Kla4, MutableMap<Char?, Kla3>>({a: Byte, b: Byte -> 4169}, Kla4, LinkedHashMap<Char?, Kla3>(linkedMapOf<Char?, Kla3>(Pair<Char?, Kla3>('ﾛ', Kla4))))
2021-03-12 05:20:25,089 [main:106] - GETTING Any? from O
2021-03-12 05:20:25,110 [main:106] - GETTING Any? from Kla2
2021-03-12 05:20:25,120 [main:106] - GETTING Any? from String
2021-03-12 05:20:25,137 [main:106] - GETTING Any? from Kla1
2021-03-12 05:20:25,142 [main:106] - GETTING Any? from Function0<String>
2021-03-12 05:20:25,151 [main:106] - GETTING Any? from Function0<String>
2021-03-12 05:20:25,151 [main:114] - replacement of getOrThrow() of type Any? is "fiuax"
2021-03-12 05:20:25,274 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:20:25,274 [main:66] - Compilation checking started
2021-03-12 05:20:25,644 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1."fiuax"
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !prope3) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:25,646 [main:107] - replacing (prope3, Boolean)
2021-03-12 05:20:25,646 [main:50] - replacing prope3 Boolean
2021-03-12 05:20:25,646 [main:54] - Getting value of type Boolean
2021-03-12 05:20:25,769 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:25,771 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:20:25,771 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:25,909 [main:67] - randomType = Short
2021-03-12 05:20:26,032 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:20:26,066 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2398268c]
2021-03-12 05:20:26,066 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ec1553a]
2021-03-12 05:20:26,066 [main:78] - Generated call from random type = (4992).toChar().isDigit()
2021-03-12 05:20:26,067 [main:106] - GETTING Boolean from String
2021-03-12 05:20:26,083 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96776b8]]
2021-03-12 05:20:26,083 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96776b8]
2021-03-12 05:20:26,084 [main:117] - GENERATED CALL = (Kla1().prope0).isEmpty()
2021-03-12 05:20:26,084 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1d3bc1df], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@244a0aa5]]
2021-03-12 05:20:26,084 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@244a0aa5]
2021-03-12 05:20:26,207 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:26,207 [main:117] - GENERATED CALL = (Kla1().prope0).length.equals("lmena")
2021-03-12 05:20:26,207 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55be61ea]]
2021-03-12 05:20:26,207 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:20:26,329 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:26,331 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55be61ea]
2021-03-12 05:20:26,454 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:26,580 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:26,583 [main:117] - GENERATED CALL = (Kla1().prope0).get(246393683).equals('躂', true)
2021-03-12 05:20:26,583 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ed89ac]]
2021-03-12 05:20:26,583 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:20:26,706 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:26,708 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ed89ac]
2021-03-12 05:20:26,708 [main:117] - GENERATED CALL = (Kla1().prope0).get(-1642777760).isDefined()
2021-03-12 05:20:26,708 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c36705]]
2021-03-12 05:20:26,708 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c36705]
2021-03-12 05:20:26,708 [main:117] - GENERATED CALL = (Kla1().prope0).any()
2021-03-12 05:20:26,708 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32e662a2]]
2021-03-12 05:20:26,709 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:20:26,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:26,833 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32e662a2]
2021-03-12 05:20:26,833 [main:117] - GENERATED CALL = (Kla1().prope0).get(1457679856).isUpperCase()
2021-03-12 05:20:26,833 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e7e3]]
2021-03-12 05:20:26,833 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:20:26,956 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:26,958 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5287e7e3]
2021-03-12 05:20:26,958 [main:117] - GENERATED CALL = (Kla1().prope0).get(1779898748).isISOControl()
2021-03-12 05:20:26,958 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96776b8]]
2021-03-12 05:20:26,958 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:20:27,083 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:27,207 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:27,210 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96776b8]
2021-03-12 05:20:27,210 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(741271955, 2093956116).isEmpty()
2021-03-12 05:20:27,210 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706e89df]]
2021-03-12 05:20:27,210 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:20:27,333 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:27,335 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706e89df]
2021-03-12 05:20:27,335 [main:117] - GENERATED CALL = (Kla1().prope0).get(-412553067).isLowSurrogate()
2021-03-12 05:20:27,335 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:20:27,335 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:20:27,335 [main:117] - GENERATED CALL = (Kla1().prope0).toBoolean()
2021-03-12 05:20:27,335 [main:114] - replacement of prope3 of type Boolean is (Kla1().prope0).get(-1642777760).isDefined()
2021-03-12 05:20:27,458 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:27,458 [main:66] - Compilation checking started
2021-03-12 05:20:28,001 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:28,003 [main:107] - replacing (false, Boolean)
2021-03-12 05:20:28,003 [main:50] - replacing false Boolean
2021-03-12 05:20:28,003 [main:54] - Getting value of type Boolean
2021-03-12 05:20:28,128 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:28,130 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:20:28,130 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:28,589 [main:67] - randomType = Triple<Kla0, LinkedHashSet<I>, Kla4?>
2021-03-12 05:20:28,711 [main:302] - generating value of type = Triple<Kla0, LinkedHashSet<I>, Kla4?> false depth = 0
2021-03-12 05:20:28,842 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla0, second: LinkedHashSet<I>, third: Kla4?): Triple<Kla0, LinkedHashSet<I>, Kla4?> = TODO()
2021-03-12 05:20:28,845 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla0, second: LinkedHashSet<I>, third: Kla4?): Triple<Kla0, LinkedHashSet<I>, Kla4?> = TODO()
2021-03-12 05:20:28,974 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 05:20:28,976 [main:112] - generating klass Kla0 text = open class Kla0(val callback: () -> String)
2021-03-12 05:20:29,100 [main:194] - Type params = []
2021-03-12 05:20:29,222 [main:302] - generating value of type = Function0<String> false depth = 5
2021-03-12 05:20:29,225 [main:302] - generating value of type = String true depth = 6
2021-03-12 05:20:29,227 [main:302] - generating value of type = LinkedHashSet<I> false depth = 3
2021-03-12 05:20:29,355 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<I> = TODO()
2021-03-12 05:20:29,358 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<I> = TODO()
2021-03-12 05:20:29,486 [main:95] - GENERATED = LinkedHashSet<I>()
2021-03-12 05:20:29,486 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 05:20:29,488 [main:112] - generating klass Kla4 text = object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}
2021-03-12 05:20:29,489 [main:95] - GENERATED = Triple<Kla0, LinkedHashSet<I>, Kla4?>(Kla0({ "mnnfv"}), LinkedHashSet<I>(), Kla4)
2021-03-12 05:20:29,508 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@79c8a3fe]
2021-03-12 05:20:29,632 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:29,632 [main:78] - Generated call from random type = (Triple<Kla0, LinkedHashSet<I>, Kla4?>(Kla0({ "mnnfv"}), LinkedHashSet<I>(), Kla4)).first.equals("ilypp")
2021-03-12 05:20:29,633 [main:106] - GETTING Boolean from Function0<String>
2021-03-12 05:20:29,642 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]]
2021-03-12 05:20:29,642 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:29,642 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@778f0f8a]
2021-03-12 05:20:29,642 [main:117] - GENERATED CALL = (callback).invoke().toBoolean()
2021-03-12 05:20:29,642 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]]
2021-03-12 05:20:29,642 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:29,642 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]
2021-03-12 05:20:29,766 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:29,769 [main:117] - GENERATED CALL = (callback).invoke().endsWith(Kla1().prope0, false)
2021-03-12 05:20:29,769 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]]
2021-03-12 05:20:29,769 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:29,891 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:29,892 [main:117] - GENERATED CALL = (callback).equals("janzp")
2021-03-12 05:20:29,892 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:20:29,892 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:30,015 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:30,015 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:20:30,138 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:30,139 [main:117] - GENERATED CALL = (callback).equals("lxcwr").equals("qlafm")
2021-03-12 05:20:30,139 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:20:30,139 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:30,139 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:20:30,262 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:30,263 [main:117] - GENERATED CALL = (callback).invoke().equals("qjbgk")
2021-03-12 05:20:30,263 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:20:30,263 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:30,263 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:20:30,416 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:30,541 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:30,543 [main:117] - GENERATED CALL = (callback).invoke().startsWith("kfnfw", false)
2021-03-12 05:20:30,543 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:20:30,543 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:30,667 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:30,668 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:20:30,668 [main:117] - GENERATED CALL = (callback).equals("siwbj").not()
2021-03-12 05:20:30,668 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:20:30,668 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:30,668 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:20:30,792 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:30,795 [main:117] - GENERATED CALL = (callback).invoke().matches("lhwaz")
2021-03-12 05:20:30,795 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:20:30,795 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:30,919 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:30,919 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:20:31,044 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:31,046 [main:117] - GENERATED CALL = (callback).equals("jupvj").xor(true)
2021-03-12 05:20:31,047 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:20:31,047 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:31,170 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:31,170 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:20:31,293 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:31,296 [main:117] - GENERATED CALL = (callback).equals("aodxb").and(false)
2021-03-12 05:20:31,296 [main:114] - replacement of false of type Boolean is (callback).invoke().endsWith(Kla1().prope0, false)
2021-03-12 05:20:31,419 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:31,419 [main:66] - Compilation checking started
2021-03-12 05:20:31,762 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = (callback).invoke().endsWith(Kla1().prope0, false)
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error("Wrong state-machine generated: it is finished early")
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:31,764 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 05:20:31,765 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 05:20:31,765 [main:54] - Getting value of type String
2021-03-12 05:20:31,889 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:31,891 [main:58] - GENERATED VALUE OF TYPE String = "jwxge"
2021-03-12 05:20:31,891 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:32,180 [main:67] - randomType = Collection<String>
2021-03-12 05:20:32,180 [main:106] - GETTING String from Kla2
2021-03-12 05:20:32,190 [main:113] - Case = [public final val callback: () -> kotlin.String defined in Kla1.Kla2[PropertyDescriptorImpl@6ed574d3], public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]]
2021-03-12 05:20:32,190 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:32,191 [main:117] - GENERATED CALL = (Kla1().Kla2()).callback.invoke()
2021-03-12 05:20:32,191 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (Kla1().Kla2()).callback.invoke()
2021-03-12 05:20:32,314 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:32,315 [main:66] - Compilation checking started
2021-03-12 05:20:32,863 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:32,865 [main:107] - replacing (prope1, Result<Any?>)
2021-03-12 05:20:32,865 [main:50] - replacing prope1 Result<Any?>
2021-03-12 05:20:32,865 [main:54] - Getting value of type Result<Any?>
2021-03-12 05:20:32,992 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 05:20:33,146 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 05:20:33,150 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 05:20:33,422 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 05:20:33,424 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:20:33,424 [main:95] - GENERATED = runCatching<Any?>({ "cebgw"})
2021-03-12 05:20:33,424 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "cebgw"})
2021-03-12 05:20:33,425 [main:61] - GENERATED IS CALL =true
2021-03-12 05:20:33,573 [main:67] - randomType = Sequence<O>
2021-03-12 05:20:33,574 [main:106] - GETTING Result<Any?> from Function0<String>
2021-03-12 05:20:33,585 [main:106] - GETTING Result<Any?> from String
2021-03-12 05:20:33,602 [main:106] - GETTING Result<Any?> from Kla1
2021-03-12 05:20:33,607 [main:106] - GETTING Result<Any?> from O
2021-03-12 05:20:33,619 [main:106] - GETTING Result<Any?> from Function0<String>
2021-03-12 05:20:33,620 [main:106] - GETTING Result<Any?> from Kla2
2021-03-12 05:20:33,631 [main:114] - replacement of prope1 of type Result<Any?> is runCatching<Any?>({ "cebgw"})
2021-03-12 05:20:33,754 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:20:33,755 [main:66] - Compilation checking started
2021-03-12 05:20:34,305 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:34,308 [main:107] - replacing (prope5, Kla9)
2021-03-12 05:20:34,308 [main:50] - replacing prope5 Kla9
2021-03-12 05:20:34,308 [main:54] - Getting value of type Kla9
2021-03-12 05:20:34,452 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 05:20:34,454 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:20:34,455 [main:58] - GENERATED VALUE OF TYPE Kla9 = Kla9()
2021-03-12 05:20:34,455 [main:61] - GENERATED IS CALL =true
2021-03-12 05:20:34,605 [main:67] - randomType = Long
2021-03-12 05:20:34,730 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:20:34,761 [main:106] - GETTING Kla9 from Function0<String>
2021-03-12 05:20:34,770 [main:106] - GETTING Kla9 from Function0<String>
2021-03-12 05:20:34,770 [main:106] - GETTING Kla9 from String
2021-03-12 05:20:34,787 [main:106] - GETTING Kla9 from Kla2
2021-03-12 05:20:34,796 [main:106] - GETTING Kla9 from O
2021-03-12 05:20:34,807 [main:106] - GETTING Kla9 from Kla1
2021-03-12 05:20:34,810 [main:114] - replacement of prope5 of type Kla9 is Kla9()
2021-03-12 05:20:34,934 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:20:34,935 [main:66] - Compilation checking started
2021-03-12 05:20:35,491 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:35,493 [main:107] - replacing (Kla4, Kla4)
2021-03-12 05:20:35,493 [main:50] - replacing Kla4 Kla4
2021-03-12 05:20:35,493 [main:54] - Getting value of type Kla4
2021-03-12 05:20:35,631 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:20:35,633 [main:112] - generating klass Kla4 text = object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}
2021-03-12 05:20:35,633 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4
2021-03-12 05:20:35,634 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:36,263 [main:67] - randomType = ArrayDeque<Function2<J, UByte?, Kla5>>
2021-03-12 05:20:36,390 [main:302] - generating value of type = ArrayDeque<Function2<J, UByte?, Kla5>> false depth = 0
2021-03-12 05:20:36,523 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Function2<J, UByte?, Kla5>> = TODO()
2021-03-12 05:20:36,526 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Function2<J, UByte?, Kla5>> = TODO()
2021-03-12 05:20:36,658 [main:95] - GENERATED = ArrayDeque<Function2<J, UByte?, Kla5>>()
2021-03-12 05:20:36,856 [main:106] - GETTING Kla4 from O
2021-03-12 05:20:36,867 [main:106] - GETTING Kla4 from Kla2
2021-03-12 05:20:36,878 [main:106] - GETTING Kla4 from String
2021-03-12 05:20:36,894 [main:106] - GETTING Kla4 from Function0<String>
2021-03-12 05:20:36,902 [main:106] - GETTING Kla4 from Kla1
2021-03-12 05:20:36,907 [main:106] - GETTING Kla4 from Function0<String>
2021-03-12 05:20:36,907 [main:114] - replacement of Kla4 of type Kla4 is Kla4
2021-03-12 05:20:37,032 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 05:20:37,034 [main:107] - replacing ({
                prope1 += "done;"
                prope3 = true
            }, Function0<Unit>)
2021-03-12 05:20:37,035 [main:50] - replacing {
                prope1 += "done;"
                prope3 = true
            } Function0<Unit>
2021-03-12 05:20:37,035 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:20:37,159 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:20:37,162 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:37,291 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:37,295 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:37,564 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:20:37,564 [main:95] - GENERATED = println("zrplk")
2021-03-12 05:20:37,564 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("zrplk")}
2021-03-12 05:20:37,564 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:37,843 [main:67] - randomType = Short?
2021-03-12 05:20:37,968 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:20:38,002 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:20:38,007 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:20:38,017 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:20:38,026 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:20:38,027 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:20:38,044 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:20:38,054 [main:114] - replacement of {
                prope1 += "done;"
                prope3 = true
            } of type Function0<Unit> is { println("zrplk")}
2021-03-12 05:20:38,179 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:20:38,180 [main:66] - Compilation checking started
2021-03-12 05:20:38,762 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        prope2()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:38,764 [main:107] - replacing (prope2, Function0<Unit>)
2021-03-12 05:20:38,764 [main:50] - replacing prope2 Function0<Unit>
2021-03-12 05:20:38,764 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:20:38,898 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:20:38,901 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:39,042 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:20:39,047 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:20:39,455 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:20:39,457 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:20:39,459 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:20:39,460 [main:95] - GENERATED = require(true, { "xcjwa"})
2021-03-12 05:20:39,460 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "xcjwa"})}
2021-03-12 05:20:39,460 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:39,610 [main:67] - randomType = J?
2021-03-12 05:20:39,611 [main:106] - GETTING Function0<Unit> from O
2021-03-12 05:20:39,630 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:20:39,642 [main:106] - GETTING Function0<Unit> from Kla2
2021-03-12 05:20:39,654 [main:106] - GETTING Function0<Unit> from Kla1
2021-03-12 05:20:39,659 [main:106] - GETTING Function0<Unit> from Function0<String>
2021-03-12 05:20:39,660 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:20:39,676 [main:114] - replacement of prope2 of type Function0<Unit> is { require(true, { "xcjwa"})}
2021-03-12 05:20:39,800 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:20:39,800 [main:66] - Compilation checking started
2021-03-12 05:20:40,335 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:40,337 [main:107] - replacing (true, Boolean)
2021-03-12 05:20:40,337 [main:50] - replacing true Boolean
2021-03-12 05:20:40,337 [main:54] - Getting value of type Boolean
2021-03-12 05:20:40,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:40,478 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:20:40,479 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:41,504 [main:67] - randomType = MutableMap<Function2<Kla7<Kla10>, String, UShort>, Short?>
2021-03-12 05:20:41,505 [main:106] - GETTING Boolean from Function0<String>
2021-03-12 05:20:41,514 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:20:41,514 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:41,514 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:20:41,637 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:41,637 [main:117] - GENERATED CALL = (callback).invoke().equals("xabgf")
2021-03-12 05:20:41,637 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:20:41,637 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:41,637 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:20:41,637 [main:117] - GENERATED CALL = (callback).invoke().matches(Kla1().prope0)
2021-03-12 05:20:41,638 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]]
2021-03-12 05:20:41,638 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:41,638 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]
2021-03-12 05:20:41,760 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:41,762 [main:117] - GENERATED CALL = (callback).invoke().endsWith(Kla1().prope0, true)
2021-03-12 05:20:41,762 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:20:41,762 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:41,885 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:41,886 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:20:42,008 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:42,011 [main:117] - GENERATED CALL = (callback).equals("glyrv").and(true)
2021-03-12 05:20:42,011 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:20:42,011 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:42,135 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:42,135 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:20:42,260 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:42,262 [main:117] - GENERATED CALL = (callback).equals("sgzub").xor(false)
2021-03-12 05:20:42,263 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:20:42,263 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:20:42,263 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:20:42,387 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:42,390 [main:117] - GENERATED CALL = (callback).invoke().startsWith(Kla1().prope0, true)
2021-03-12 05:20:42,390 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:20:42,390 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:42,513 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:42,514 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:20:42,514 [main:117] - GENERATED CALL = (callback).equals("gwjyj").not()
2021-03-12 05:20:42,514 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:20:42,514 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:42,637 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:42,637 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:20:42,760 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:42,762 [main:117] - GENERATED CALL = (callback).equals("znnrx").or(true)
2021-03-12 05:20:42,763 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]]
2021-03-12 05:20:42,763 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:42,885 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:42,885 [main:117] - GENERATED CALL = (callback).equals("jkyyv")
2021-03-12 05:20:42,885 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:20:42,885 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:43,008 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:43,008 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:20:43,132 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:43,132 [main:117] - GENERATED CALL = (callback).equals("tzpqp").equals("jwfcx")
2021-03-12 05:20:43,132 [main:114] - replacement of true of type Boolean is (callback).invoke().matches(Kla1().prope0)
2021-03-12 05:20:43,255 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:43,255 [main:66] - Compilation checking started
2021-03-12 05:20:43,604 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = (callback).invoke().matches(Kla1().prope0)
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:43,606 [main:107] - replacing ((Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame", String)
2021-03-12 05:20:43,607 [main:50] - replacing (Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame" String
2021-03-12 05:20:43,607 [main:54] - Getting value of type String
2021-03-12 05:20:43,758 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:43,760 [main:58] - GENERATED VALUE OF TYPE String = "snlbd"
2021-03-12 05:20:43,760 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:44,042 [main:67] - randomType = Long?
2021-03-12 05:20:44,165 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:20:44,198 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3c591a08]
2021-03-12 05:20:44,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:20:44,322 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:44,324 [main:78] - Generated call from random type = (-3266270918058628104)?.toInt().toString(1702327587)
2021-03-12 05:20:44,325 [main:106] - GETTING String from O
2021-03-12 05:20:44,336 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]]
2021-03-12 05:20:44,336 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:44,336 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]
2021-03-12 05:20:44,337 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).trimStart()
2021-03-12 05:20:44,337 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]]
2021-03-12 05:20:44,337 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:44,337 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]
2021-03-12 05:20:44,459 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:20:44,461 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:20:44,464 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).dropLastWhile({a: Char -> true})
2021-03-12 05:20:44,464 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e02d66e]]
2021-03-12 05:20:44,464 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:44,464 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e02d66e]
2021-03-12 05:20:44,464 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).decapitalize()
2021-03-12 05:20:44,464 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b9bbfa]]
2021-03-12 05:20:44,464 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:44,587 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:44,589 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b9bbfa]
2021-03-12 05:20:44,713 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:44,838 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:44,840 [main:117] - GENERATED CALL = (O).foo("awliu").replaceIndentByMargin("ghotc", "qqnsb")
2021-03-12 05:20:44,840 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@561e62ed]]
2021-03-12 05:20:44,840 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:44,841 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@561e62ed]
2021-03-12 05:20:44,963 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:44,963 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).plus("zmjma")
2021-03-12 05:20:44,963 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ef58600]]
2021-03-12 05:20:44,964 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:44,964 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ef58600]
2021-03-12 05:20:45,087 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:20:45,089 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:20:45,091 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:20:45,091 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68279736]]
2021-03-12 05:20:45,091 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:45,092 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68279736]
2021-03-12 05:20:45,213 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:45,216 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).substring(701428330)
2021-03-12 05:20:45,216 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]]
2021-03-12 05:20:45,216 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:45,216 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5957ffd0]
2021-03-12 05:20:45,338 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:45,465 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:45,467 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).replaceBefore('맢', Kla1().prope0, "loecj")
2021-03-12 05:20:45,467 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]]
2021-03-12 05:20:45,467 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:45,467 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]
2021-03-12 05:20:45,590 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:45,715 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:45,718 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).substringAfter('႖', "pmvky")
2021-03-12 05:20:45,718 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]]
2021-03-12 05:20:45,718 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:20:45,841 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:45,843 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]
2021-03-12 05:20:45,965 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:46,092 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:46,094 [main:117] - GENERATED CALL = (O).foo("cvacr").removeRange(-545733905, 1865888103)
2021-03-12 05:20:46,094 [main:114] - replacement of (Kla1().prope0).replaceFirstChar({a: Char -> 'ꍇ'}) + " is not subtype of CoroutineStackFrame" of type String is (O).foo(Kla1().prope0).decapitalize()
2021-03-12 05:20:46,216 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:46,217 [main:66] - Compilation checking started
2021-03-12 05:20:46,773 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:46,775 [main:107] - replacing (f, SuspendFunction0<Unit>)
2021-03-12 05:20:46,775 [main:50] - replacing f SuspendFunction0<Unit>
2021-03-12 05:20:46,775 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 05:20:46,897 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 05:20:46,899 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:47,026 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:47,029 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:47,433 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:20:47,435 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 05:20:47,438 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:20:47,567 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:47,570 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:47,973 [main:302] - generating value of type = Int true depth = 8
2021-03-12 05:20:47,975 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 05:20:47,977 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 05:20:48,104 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:48,107 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:48,377 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 12
2021-03-12 05:20:48,379 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 05:20:48,516 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:48,519 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:48,788 [main:302] - generating value of type = Any false depth = 16
2021-03-12 05:20:48,788 [main:385] - Cant generate call of fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:48,788 [main:95] - GENERATED = contract({ })
2021-03-12 05:20:48,788 [main:95] - GENERATED = repeat(1885793025, {a: Int -> contract({ })})
2021-03-12 05:20:48,788 [main:95] - GENERATED = repeat(1265856262, {a: Int -> repeat(1885793025, {a: Int -> contract({ })})})
2021-03-12 05:20:48,788 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { repeat(1265856262, {a: Int -> repeat(1885793025, {a: Int -> contract({ })})})}
2021-03-12 05:20:48,789 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:49,082 [main:67] - randomType = Sequence<Long>
2021-03-12 05:20:49,084 [main:106] - GETTING SuspendFunction0<Unit> from Function0<String>
2021-03-12 05:20:49,095 [main:106] - GETTING SuspendFunction0<Unit> from O
2021-03-12 05:20:49,106 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 05:20:49,154 [main:106] - GETTING SuspendFunction0<Unit> from Kla1
2021-03-12 05:20:49,159 [main:106] - GETTING SuspendFunction0<Unit> from Kla2
2021-03-12 05:20:49,169 [main:106] - GETTING SuspendFunction0<Unit> from Function0<String>
2021-03-12 05:20:49,169 [main:114] - replacement of f of type SuspendFunction0<Unit> is { repeat(1265856262, {a: Int -> repeat(1885793025, {a: Int -> contract({ })})})}
2021-03-12 05:20:49,290 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:20:49,291 [main:66] - Compilation checking started
2021-03-12 05:20:49,647 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    { repeat(1265856262, {a: Int -> repeat(1885793025, {a: Int -> contract({ })})})}.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:49,650 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 05:20:49,650 [main:50] - replacing c Continuation<Unit>
2021-03-12 05:20:49,650 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:20:49,783 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:20:49,910 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:20:49,913 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:20:50,322 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:20:50,449 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:20:50,452 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:20:50,723 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:20:50,853 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:20:50,857 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:20:51,279 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:20:51,279 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:20:51,279 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:20:51,279 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:20:51,416 [main:67] - randomType = Float
2021-03-12 05:20:51,539 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:20:51,570 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:20:51,587 [main:106] - GETTING Continuation<Unit> from Kla1
2021-03-12 05:20:51,591 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:20:51,600 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:20:51,601 [main:106] - GETTING Continuation<Unit> from O
2021-03-12 05:20:51,613 [main:106] - GETTING Continuation<Unit> from Kla2
2021-03-12 05:20:51,621 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 05:20:51,622 [main:107] - replacing (runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x), Unit?)
2021-03-12 05:20:51,622 [main:50] - replacing runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x) Unit?
2021-03-12 05:20:51,622 [main:54] - Getting value of type Unit?
2021-03-12 05:20:51,743 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 05:20:51,899 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:51,902 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:52,302 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:20:52,305 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-12 05:20:52,307 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 05:20:52,434 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:20:52,437 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:20:52,842 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 05:20:52,844 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 05:20:52,846 [main:302] - generating value of type = Any false depth = 8
2021-03-12 05:20:52,846 [main:95] - GENERATED = check(true, { "kzxca"})
2021-03-12 05:20:52,847 [main:95] - GENERATED = repeat(233993785, {a: Int -> check(true, { "kzxca"})})
2021-03-12 05:20:52,847 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(233993785, {a: Int -> check(true, { "kzxca"})})
2021-03-12 05:20:52,847 [main:61] - GENERATED IS CALL =true
2021-03-12 05:20:52,851 [main:67] - randomType = Char
2021-03-12 05:20:52,974 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:20:52,995 [main:106] - GETTING Unit? from Kla1
2021-03-12 05:20:53,000 [main:106] - GETTING Unit? from Kla2
2021-03-12 05:20:53,010 [main:106] - GETTING Unit? from String
2021-03-12 05:20:53,025 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@491d909]]
2021-03-12 05:20:53,025 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:20:53,147 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:53,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:53,272 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@491d909]
2021-03-12 05:20:53,394 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:20:53,396 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:53,524 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:53,527 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:53,794 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:20:53,794 [main:95] - GENERATED = print("bvhkn")
2021-03-12 05:20:53,794 [main:117] - GENERATED CALL = (Kla1().prope0)?.subSequence(-1241244004, 710514424).forEach({a: Char -> print("bvhkn")})
2021-03-12 05:20:53,794 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c5c5f0]]
2021-03-12 05:20:53,795 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:20:53,918 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:54,042 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:54,044 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c5c5f0]
2021-03-12 05:20:54,170 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:20:54,172 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:54,307 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:54,310 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:54,626 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:20:54,628 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:20:54,755 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:54,758 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:55,162 [main:302] - generating value of type = Int true depth = 8
2021-03-12 05:20:55,165 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 05:20:55,167 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 05:20:55,294 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:20:55,297 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:20:55,563 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 05:20:55,566 [main:95] - GENERATED = check(true)
2021-03-12 05:20:55,566 [main:95] - GENERATED = repeat(-153239762, {a: Int -> check(true)})
2021-03-12 05:20:55,566 [main:95] - GENERATED = contract({ repeat(-153239762, {a: Int -> check(true)})})
2021-03-12 05:20:55,567 [main:117] - GENERATED CALL = (Kla1().prope0)?.subSequence(1587515611, 68208897).forEachIndexed({a: Int, b: Char -> contract({ repeat(-153239762, {a: Int -> check(true)})})})
2021-03-12 05:20:55,567 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@491d909]]
2021-03-12 05:20:55,567 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@491d909]
2021-03-12 05:20:55,690 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:20:55,692 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:55,821 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:55,824 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:56,225 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:20:56,227 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 05:20:56,229 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:20:56,234 [main:95] - GENERATED = repeat(-1109507879, {a: Int -> println()})
2021-03-12 05:20:56,235 [main:117] - GENERATED CALL = (Kla1().prope0)?.forEach({a: Char -> repeat(-1109507879, {a: Int -> println()})})
2021-03-12 05:20:56,235 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c5c5f0]]
2021-03-12 05:20:56,235 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c5c5f0]
2021-03-12 05:20:56,356 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:20:56,358 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:20:56,484 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:56,488 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 05:20:56,894 [main:302] - generating value of type = Int true depth = 4
2021-03-12 05:20:56,897 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 05:20:56,899 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:20:57,025 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:57,029 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:20:57,292 [main:302] - generating value of type = Any false depth = 8
2021-03-12 05:20:57,292 [main:95] - GENERATED = println("ocdnz")
2021-03-12 05:20:57,292 [main:95] - GENERATED = repeat(431374503, {a: Int -> println("ocdnz")})
2021-03-12 05:20:57,292 [main:117] - GENERATED CALL = (Kla1().prope0)?.forEachIndexed({a: Int, b: Char -> repeat(431374503, {a: Int -> println("ocdnz")})})
2021-03-12 05:20:57,292 [main:114] - replacement of runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x) of type Unit? is (Kla1().prope0)?.subSequence(1587515611, 68208897).forEachIndexed({a: Int, b: Char -> contract({ repeat(-153239762, {a: Int -> check(true)})})})
2021-03-12 05:20:57,448 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:20:57,448 [main:66] - Compilation checking started
2021-03-12 05:20:57,795 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        (Kla1().prope0)?.subSequence(1587515611, 68208897).forEachIndexed({a: Int, b: Char -> contract({ repeat(-153239762, {a: Int -> check(true)})})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:57,797 [main:107] - replacing (prope9, Int)
2021-03-12 05:20:57,797 [main:50] - replacing prope9 Int
2021-03-12 05:20:57,797 [main:54] - Getting value of type Int
2021-03-12 05:20:57,928 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:57,930 [main:58] - GENERATED VALUE OF TYPE Int = 1138716814
2021-03-12 05:20:57,930 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:58,073 [main:67] - randomType = Boolean?
2021-03-12 05:20:58,194 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:58,207 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]
2021-03-12 05:20:58,335 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:58,338 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@360ba44f]
2021-03-12 05:20:58,464 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:20:58,467 [main:78] - Generated call from random type = (true)?.compareTo(false).shr(-123591417)
2021-03-12 05:20:58,468 [main:106] - GETTING Int from Function0<String>
2021-03-12 05:20:58,480 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1d3bc1df]]
2021-03-12 05:20:58,480 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:58,481 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().length
2021-03-12 05:20:58,481 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6daa3bc0]]
2021-03-12 05:20:58,481 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:58,481 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6daa3bc0]
2021-03-12 05:20:58,481 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().toInt()
2021-03-12 05:20:58,481 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a10ed67]]
2021-03-12 05:20:58,481 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:20:58,481 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a10ed67]
2021-03-12 05:20:58,608 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:20:58,739 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:58,742 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().compareTo("dvgvr", true)
2021-03-12 05:20:58,742 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]]
2021-03-12 05:20:58,742 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:20:58,864 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:20:58,865 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]
2021-03-12 05:20:58,986 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:58,989 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).equals("gtear").compareTo(false)
2021-03-12 05:20:58,989 [main:114] - replacement of prope9 of type Int is 1138716814
2021-03-12 05:20:59,111 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 05:20:59,111 [main:66] - Compilation checking started
2021-03-12 05:20:59,644 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:20:59,646 [main:107] - replacing (prope1.isSuccess, Boolean)
2021-03-12 05:20:59,646 [main:50] - replacing prope1.isSuccess Boolean
2021-03-12 05:20:59,646 [main:54] - Getting value of type Boolean
2021-03-12 05:20:59,770 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:20:59,772 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:20:59,772 [main:61] - GENERATED IS CALL =false
2021-03-12 05:20:59,916 [main:67] - randomType = Kla6?
2021-03-12 05:21:00,038 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:21:00,040 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}
2021-03-12 05:21:00,055 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@7e8f79b1]
2021-03-12 05:21:00,177 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:00,177 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:21:00,300 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:00,300 [main:78] - Generated call from random type = (Kla6())?.equals("fjjkq").equals("lyhze")
2021-03-12 05:21:00,301 [main:106] - GETTING Boolean from Function0<String>
2021-03-12 05:21:00,310 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]]
2021-03-12 05:21:00,310 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:21:00,310 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:21:00,462 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:00,463 [main:117] - GENERATED CALL = (callback).invoke().equals("hrkrr")
2021-03-12 05:21:00,463 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:21:00,463 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:21:00,585 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:00,585 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:21:00,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:00,714 [main:117] - GENERATED CALL = (callback).equals("xezkd").xor(false)
2021-03-12 05:21:00,714 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:21:00,714 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:21:00,838 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:00,838 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:21:00,959 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:00,959 [main:117] - GENERATED CALL = (callback).equals("lsibw").equals("jndxs")
2021-03-12 05:21:00,959 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]]
2021-03-12 05:21:00,959 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:21:00,960 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5768dbdf]
2021-03-12 05:21:01,082 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:01,084 [main:117] - GENERATED CALL = (callback).invoke().startsWith(Kla1().prope0, true)
2021-03-12 05:21:01,085 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:21:01,085 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:21:01,206 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:01,206 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:21:01,206 [main:117] - GENERATED CALL = (callback).equals("xllkj").not()
2021-03-12 05:21:01,206 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:21:01,206 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:21:01,328 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:01,328 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:21:01,449 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:01,452 [main:117] - GENERATED CALL = (callback).equals("keanu").and(false)
2021-03-12 05:21:01,452 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]]
2021-03-12 05:21:01,452 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:21:01,574 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:01,575 [main:117] - GENERATED CALL = (callback).equals("pevwr")
2021-03-12 05:21:01,575 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:21:01,575 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:21:01,697 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:01,698 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:21:01,820 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:01,823 [main:117] - GENERATED CALL = (callback).equals("kycqz").or(true)
2021-03-12 05:21:01,823 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]]
2021-03-12 05:21:01,823 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:21:01,823 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a7a8284]
2021-03-12 05:21:01,944 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:01,946 [main:117] - GENERATED CALL = (callback).invoke().matches("dygzd")
2021-03-12 05:21:01,946 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]]
2021-03-12 05:21:01,946 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@43bf950b]
2021-03-12 05:21:01,946 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b3292c0]
2021-03-12 05:21:02,069 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:02,071 [main:117] - GENERATED CALL = (callback).invoke().endsWith(Kla1().prope0, false)
2021-03-12 05:21:02,071 [main:114] - replacement of prope1.isSuccess of type Boolean is (callback).equals("xllkj").not()
2021-03-12 05:21:02,193 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:02,195 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 05:21:02,195 [main:50] - replacing getOrThrow() Ty0
2021-03-12 05:21:02,195 [main:54] - Getting value of type Ty0
2021-03-12 05:21:02,320 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 05:21:02,325 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 05:21:02,460 [main:67] - randomType = Float
2021-03-12 05:21:02,581 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:21:02,611 [main:106] - GETTING Ty0 from Function0<String>
2021-03-12 05:21:02,620 [main:106] - GETTING Ty0 from Kla2
2021-03-12 05:21:02,631 [main:106] - GETTING Ty0 from O
2021-03-12 05:21:02,642 [main:106] - GETTING Ty0 from Kla1
2021-03-12 05:21:02,646 [main:106] - GETTING Ty0 from Function0<String>
2021-03-12 05:21:02,647 [main:106] - GETTING Ty0 from String
2021-03-12 05:21:02,662 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 05:21:02,662 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:21:02,662 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:21:02,662 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:21:02,783 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:21:02,788 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:21:03,063 [main:67] - randomType = ArrayList<UInt>
2021-03-12 05:21:03,184 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-12 05:21:03,344 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<UInt>): ArrayList<UInt> = TODO()
2021-03-12 05:21:03,347 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<UInt>): ArrayList<UInt> = TODO()
2021-03-12 05:21:03,617 [main:302] - generating value of type = Collection<UInt> false depth = 3
2021-03-12 05:21:03,744 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): Collection<UInt> = TODO()
2021-03-12 05:21:03,747 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): Collection<UInt> = TODO()
2021-03-12 05:21:03,874 [main:95] - GENERATED = ArrayDeque<UInt>()
2021-03-12 05:21:03,874 [main:95] - GENERATED = ArrayList<UInt>(ArrayDeque<UInt>())
2021-03-12 05:21:03,993 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:21:04,010 [main:106] - GETTING EmptyCoroutineContext from Function0<String>
2021-03-12 05:21:04,018 [main:106] - GETTING EmptyCoroutineContext from Kla2
2021-03-12 05:21:04,028 [main:106] - GETTING EmptyCoroutineContext from O
2021-03-12 05:21:04,039 [main:106] - GETTING EmptyCoroutineContext from Function0<String>
2021-03-12 05:21:04,040 [main:106] - GETTING EmptyCoroutineContext from Kla1
2021-03-12 05:21:04,043 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:21:04,044 [main:107] - replacing (true, Boolean)
2021-03-12 05:21:04,044 [main:50] - replacing true Boolean
2021-03-12 05:21:04,044 [main:54] - Getting value of type Boolean
2021-03-12 05:21:04,166 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:04,168 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:21:04,168 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:04,177 [main:67] - randomType = Kla9
2021-03-12 05:21:04,299 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 05:21:04,301 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:21:04,308 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:21:04,431 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:04,434 [main:78] - Generated call from random type = (Kla9()).prope3.or(true)
2021-03-12 05:21:04,434 [main:106] - GETTING Boolean from Kla2
2021-03-12 05:21:04,445 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:21:04,445 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:04,566 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:04,566 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:21:04,689 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:04,692 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("repps").or(true)
2021-03-12 05:21:04,692 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:21:04,692 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:04,819 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:04,819 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:21:04,941 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:04,943 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("puvhr").xor(false)
2021-03-12 05:21:04,943 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]]
2021-03-12 05:21:04,943 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:05,065 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:05,065 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("xwsqr")
2021-03-12 05:21:05,065 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:21:05,066 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:05,188 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:05,188 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:21:05,310 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:05,310 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("pmxot").equals("lxufx")
2021-03-12 05:21:05,310 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:21:05,310 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:05,431 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:05,431 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:21:05,431 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("lxidy").not()
2021-03-12 05:21:05,431 [main:113] - Case = [public final val callback: () -> kotlin.String defined in Kla1.Kla2[PropertyDescriptorImpl@6ed574d3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]]
2021-03-12 05:21:05,431 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:21:05,553 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:05,553 [main:117] - GENERATED CALL = (Kla1().Kla2()).callback.equals("ezszz")
2021-03-12 05:21:05,553 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:21:05,553 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:05,675 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:05,675 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:21:05,801 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:05,803 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("vnxyi").and(true)
2021-03-12 05:21:05,803 [main:114] - replacement of true of type Boolean is (Kla1().Kla2()).equals("lxidy").not()
2021-03-12 05:21:05,925 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:05,925 [main:66] - Compilation checking started
2021-03-12 05:21:06,480 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = prope1.getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:06,482 [main:107] - replacing (prope1, Result<Any?>)
2021-03-12 05:21:06,482 [main:50] - replacing prope1 Result<Any?>
2021-03-12 05:21:06,482 [main:54] - Getting value of type Result<Any?>
2021-03-12 05:21:06,603 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 05:21:06,731 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 05:21:06,734 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 05:21:07,001 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 05:21:07,004 [main:95] - GENERATED = runCatching<Any?>({ null})
2021-03-12 05:21:07,004 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ null})
2021-03-12 05:21:07,004 [main:61] - GENERATED IS CALL =true
2021-03-12 05:21:07,008 [main:67] - randomType = String
2021-03-12 05:21:07,132 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:07,152 [main:106] - GETTING Result<Any?> from String
2021-03-12 05:21:07,169 [main:106] - GETTING Result<Any?> from Function0<String>
2021-03-12 05:21:07,178 [main:106] - GETTING Result<Any?> from Kla2
2021-03-12 05:21:07,188 [main:106] - GETTING Result<Any?> from O
2021-03-12 05:21:07,199 [main:106] - GETTING Result<Any?> from Kla1
2021-03-12 05:21:07,204 [main:106] - GETTING Result<Any?> from Function0<String>
2021-03-12 05:21:07,204 [main:114] - replacement of prope1 of type Result<Any?> is runCatching<Any?>({ null})
2021-03-12 05:21:07,327 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:21:07,327 [main:66] - Compilation checking started
2021-03-12 05:21:07,848 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while (!(O).foo("ogmwp").startsWith(Kla1().prope0, true)) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:07,851 [main:107] - replacing (!(O).foo("ogmwp").startsWith(Kla1().prope0, true), Boolean)
2021-03-12 05:21:07,852 [main:50] - replacing !(O).foo("ogmwp").startsWith(Kla1().prope0, true) Boolean
2021-03-12 05:21:07,852 [main:54] - Getting value of type Boolean
2021-03-12 05:21:07,991 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:07,994 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:21:07,994 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:08,132 [main:67] - randomType = Float
2021-03-12 05:21:08,255 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:21:08,284 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5167eba7]
2021-03-12 05:21:08,285 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706e89df]
2021-03-12 05:21:08,285 [main:78] - Generated call from random type = (0.40994328f).toChar().isLowSurrogate()
2021-03-12 05:21:08,285 [main:106] - GETTING Boolean from String
2021-03-12 05:21:08,301 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1213b66a]]
2021-03-12 05:21:08,301 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:21:08,423 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:08,547 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:08,550 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1213b66a]
2021-03-12 05:21:08,672 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:08,797 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:08,799 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(1243989176, -1713529363).contains('', true)
2021-03-12 05:21:08,799 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c36705]]
2021-03-12 05:21:08,799 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:21:08,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:09,047 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:09,049 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c36705]
2021-03-12 05:21:09,049 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(1588923353, 1323221064).any()
2021-03-12 05:21:09,049 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96776b8]]
2021-03-12 05:21:09,049 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@96776b8]
2021-03-12 05:21:09,049 [main:117] - GENERATED CALL = (Kla1().prope0).isEmpty()
2021-03-12 05:21:09,049 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6892bd]]
2021-03-12 05:21:09,049 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:21:09,172 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:09,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:09,298 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6892bd]
2021-03-12 05:21:09,450 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:09,452 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:09,454 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(1272869025, 1836710190).all({a: Char -> false})
2021-03-12 05:21:09,455 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32e662a2]]
2021-03-12 05:21:09,455 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:21:09,576 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:09,578 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32e662a2]
2021-03-12 05:21:09,578 [main:117] - GENERATED CALL = (Kla1().prope0).get(1090465928).isUpperCase()
2021-03-12 05:21:09,579 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@623c99f8]]
2021-03-12 05:21:09,579 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:21:09,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:09,826 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:09,828 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@623c99f8]
2021-03-12 05:21:09,828 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(-361052836, 438859009).isNotBlank()
2021-03-12 05:21:09,828 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706e89df]]
2021-03-12 05:21:09,828 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:21:09,951 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:09,953 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706e89df]
2021-03-12 05:21:09,953 [main:117] - GENERATED CALL = (Kla1().prope0).get(1341227269).isLowSurrogate()
2021-03-12 05:21:09,953 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:21:09,953 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21aa13cf]
2021-03-12 05:21:10,075 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:10,075 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:21:10,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:10,200 [main:117] - GENERATED CALL = (Kla1().prope0).equals("gkcwf").or(false)
2021-03-12 05:21:10,200 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34a30697]]
2021-03-12 05:21:10,200 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5205391d]
2021-03-12 05:21:10,323 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:10,325 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34a30697]
2021-03-12 05:21:10,325 [main:117] - GENERATED CALL = (Kla1().prope0).get(1288739911).isWhitespace()
2021-03-12 05:21:10,325 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c56cf6d]]
2021-03-12 05:21:10,325 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:21:10,448 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:10,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:10,574 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c56cf6d]
2021-03-12 05:21:10,574 [main:117] - GENERATED CALL = (Kla1().prope0).subSequence(-729375028, 1870799881).isBlank()
2021-03-12 05:21:10,574 [main:114] - replacement of !(O).foo("ogmwp").startsWith(Kla1().prope0, true) of type Boolean is (Kla1().prope0).get(1288739911).isWhitespace()
2021-03-12 05:21:10,696 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:10,696 [main:66] - Compilation checking started
2021-03-12 05:21:11,381 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:11,383 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:21:11,384 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:21:11,384 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:21:11,506 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:21:11,511 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:21:11,647 [main:67] - randomType = Short
2021-03-12 05:21:11,768 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:21:11,800 [main:106] - GETTING EmptyCoroutineContext from Kla2
2021-03-12 05:21:11,810 [main:106] - GETTING EmptyCoroutineContext from Kla1
2021-03-12 05:21:11,814 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:21:11,830 [main:106] - GETTING EmptyCoroutineContext from Function0<String>
2021-03-12 05:21:11,839 [main:106] - GETTING EmptyCoroutineContext from O
2021-03-12 05:21:11,850 [main:106] - GETTING EmptyCoroutineContext from Function0<String>
2021-03-12 05:21:11,850 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:21:11,850 [main:107] - replacing (Kla4, Kla4)
2021-03-12 05:21:11,850 [main:50] - replacing Kla4 Kla4
2021-03-12 05:21:11,850 [main:54] - Getting value of type Kla4
2021-03-12 05:21:11,972 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:21:11,974 [main:112] - generating klass Kla4 text = object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}
2021-03-12 05:21:11,974 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4
2021-03-12 05:21:11,974 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:12,110 [main:67] - randomType = UShort
2021-03-12 05:21:12,233 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:21:12,261 [main:106] - GETTING Kla4 from String
2021-03-12 05:21:12,277 [main:106] - GETTING Kla4 from Function0<String>
2021-03-12 05:21:12,286 [main:106] - GETTING Kla4 from Kla1
2021-03-12 05:21:12,290 [main:106] - GETTING Kla4 from O
2021-03-12 05:21:12,301 [main:106] - GETTING Kla4 from Function0<String>
2021-03-12 05:21:12,301 [main:106] - GETTING Kla4 from Kla2
2021-03-12 05:21:12,310 [main:114] - replacement of Kla4 of type Kla4 is Kla4
2021-03-12 05:21:12,434 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 05:21:12,436 [main:107] - replacing (prope1, String)
2021-03-12 05:21:12,436 [main:50] - replacing prope1 String
2021-03-12 05:21:12,436 [main:54] - Getting value of type String
2021-03-12 05:21:12,558 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:12,560 [main:58] - GENERATED VALUE OF TYPE String = "dooak"
2021-03-12 05:21:12,560 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:12,860 [main:67] - randomType = UByte?
2021-03-12 05:21:12,983 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:21:13,012 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@70cc37ff]
2021-03-12 05:21:13,135 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:21:13,137 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:21:13,258 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:13,261 [main:78] - Generated call from random type = (16.toUByte())?.compareTo(45.toUByte()).toString(1169004857)
2021-03-12 05:21:13,261 [main:106] - GETTING String from Function0<String>
2021-03-12 05:21:13,270 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68279736]]
2021-03-12 05:21:13,270 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:13,270 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68279736]
2021-03-12 05:21:13,394 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:13,397 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().substring(754287006)
2021-03-12 05:21:13,397 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b80ca33]]
2021-03-12 05:21:13,397 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:13,397 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b80ca33]
2021-03-12 05:21:13,519 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:13,521 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:13,523 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().dropWhile({a: Char -> false})
2021-03-12 05:21:13,524 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]]
2021-03-12 05:21:13,524 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:13,524 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]
2021-03-12 05:21:13,645 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:21:13,651 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().removePrefix("rxnsj")
2021-03-12 05:21:13,651 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f80f99]]
2021-03-12 05:21:13,651 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:13,651 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72f80f99]
2021-03-12 05:21:13,774 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:13,776 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replaceBeforeLast('Ԭ', Kla1().prope0, Kla1().prope0)
2021-03-12 05:21:13,776 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749aa71]]
2021-03-12 05:21:13,776 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:13,776 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749aa71]
2021-03-12 05:21:13,776 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().trimMargin(Kla1().prope0)
2021-03-12 05:21:13,777 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]]
2021-03-12 05:21:13,777 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:13,777 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]
2021-03-12 05:21:13,777 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().uppercase()
2021-03-12 05:21:13,777 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]]
2021-03-12 05:21:13,777 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:13,777 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]
2021-03-12 05:21:13,899 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:14,023 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:14,025 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().replaceAfterLast('浏', Kla1().prope0, "apkti")
2021-03-12 05:21:14,025 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c80c87e]]
2021-03-12 05:21:14,026 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:14,026 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c80c87e]
2021-03-12 05:21:14,149 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:14,151 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().dropLast(-344548939)
2021-03-12 05:21:14,151 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]]
2021-03-12 05:21:14,151 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:14,151 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]
2021-03-12 05:21:14,274 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:14,276 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().substringAfter('쳃', Kla1().prope0)
2021-03-12 05:21:14,276 [main:113] - Case = [public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ef2745]]
2021-03-12 05:21:14,276 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.String defined in kotlin.Function0[FunctionInvokeDescriptor@4dc7745e]
2021-03-12 05:21:14,276 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ef2745]
2021-03-12 05:21:14,399 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:14,524 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:14,526 [main:117] - GENERATED CALL = (Kla0({ "hbvec"}).callback).invoke().padStart(-957842538, '௞')
2021-03-12 05:21:14,526 [main:114] - replacement of prope1 of type String is (Kla0({ "hbvec"}).callback).invoke().removePrefix("rxnsj")
2021-03-12 05:21:14,649 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:14,649 [main:66] - Compilation checking started
2021-03-12 05:21:14,983 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        (Kla0({ "hbvec"}).callback).invoke().removePrefix("rxnsj") += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:14,985 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 05:21:14,985 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 05:21:14,985 [main:54] - Getting value of type Boolean
2021-03-12 05:21:15,109 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:15,111 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:21:15,111 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:15,115 [main:67] - randomType = Char
2021-03-12 05:21:15,238 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:15,257 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4ffb96e3]
2021-03-12 05:21:15,380 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:15,382 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@409dbb20]
2021-03-12 05:21:15,382 [main:78] - Generated call from random type = ('䩱').rangeTo('脗').isEmpty()
2021-03-12 05:21:15,382 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is ('䩱').rangeTo('脗').isEmpty()
2021-03-12 05:21:15,507 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:15,507 [main:66] - Compilation checking started
2021-03-12 05:21:16,069 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:16,071 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 05:21:16,071 [main:50] - replacing getOrThrow() Ty0
2021-03-12 05:21:16,071 [main:54] - Getting value of type Ty0
2021-03-12 05:21:16,193 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 05:21:16,198 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 05:21:16,338 [main:67] - randomType = Kla10
2021-03-12 05:21:16,458 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 05:21:16,461 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:21:16,478 [main:106] - GETTING Ty0 from String
2021-03-12 05:21:16,494 [main:106] - GETTING Ty0 from Function0<String>
2021-03-12 05:21:16,503 [main:106] - GETTING Ty0 from Function0<String>
2021-03-12 05:21:16,503 [main:106] - GETTING Ty0 from Kla1
2021-03-12 05:21:16,508 [main:106] - GETTING Ty0 from Kla2
2021-03-12 05:21:16,517 [main:106] - GETTING Ty0 from O
2021-03-12 05:21:16,527 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 05:21:16,527 [main:107] - replacing ({
        fu8(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 05:21:16,528 [main:50] - replacing {
        fu8(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 05:21:16,528 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 05:21:16,650 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 05:21:16,652 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:21:16,657 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-12 05:21:16,657 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:16,666 [main:67] - randomType = Kla9
2021-03-12 05:21:16,787 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 05:21:16,789 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:21:16,798 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<String>
2021-03-12 05:21:16,807 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla1
2021-03-12 05:21:16,812 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<String>
2021-03-12 05:21:16,814 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from O
2021-03-12 05:21:16,826 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla2
2021-03-12 05:21:16,836 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:21:16,852 [main:114] - replacement of {
        fu8(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-12 05:21:16,974 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:21:16,975 [main:66] - Compilation checking started
2021-03-12 05:21:17,500 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:17,502 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 05:21:17,502 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 05:21:17,502 [main:54] - Getting value of type Throwable?
2021-03-12 05:21:17,627 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:21:17,754 [main:43] - GENERATING CALL OF fun Error(message: kotlin.String?): Throwable = TODO()
2021-03-12 05:21:17,757 [main:61] - WITHOUT TYPE PARAMS = fun Error(message: kotlin.String?): Throwable = TODO()
2021-03-12 05:21:18,022 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:21:18,024 [main:95] - GENERATED = Error("dchtd")
2021-03-12 05:21:18,024 [main:58] - GENERATED VALUE OF TYPE Throwable? = Error("dchtd")
2021-03-12 05:21:18,024 [main:61] - GENERATED IS CALL =true
2021-03-12 05:21:18,295 [main:67] - randomType = Double?
2021-03-12 05:21:18,418 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:21:18,450 [main:106] - GETTING Throwable? from O
2021-03-12 05:21:18,461 [main:106] - GETTING Throwable? from Function0<String>
2021-03-12 05:21:18,470 [main:106] - GETTING Throwable? from Kla1
2021-03-12 05:21:18,475 [main:106] - GETTING Throwable? from Function0<String>
2021-03-12 05:21:18,476 [main:106] - GETTING Throwable? from String
2021-03-12 05:21:18,493 [main:106] - GETTING Throwable? from Kla2
2021-03-12 05:21:18,502 [main:114] - replacement of exceptionOrNull() of type Throwable? is Error("dchtd")
2021-03-12 05:21:18,624 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:21:18,624 [main:66] - Compilation checking started
2021-03-12 05:21:19,005 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).Error("dchtd")?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((Kla1().prope0).uppercase() + i + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:19,007 [main:107] - replacing ((Kla1().prope0).uppercase() + i, String)
2021-03-12 05:21:19,007 [main:50] - replacing (Kla1().prope0).uppercase() + i String
2021-03-12 05:21:19,007 [main:54] - Getting value of type String
2021-03-12 05:21:19,131 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:19,133 [main:58] - GENERATED VALUE OF TYPE String = "bqtyz"
2021-03-12 05:21:19,134 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:19,138 [main:67] - randomType = String
2021-03-12 05:21:19,260 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:19,279 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47ead689]
2021-03-12 05:21:19,402 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:19,404 [main:78] - Generated call from random type = ("mhmwl").repeat(303308038)
2021-03-12 05:21:19,405 [main:106] - GETTING String from O
2021-03-12 05:21:19,416 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]]
2021-03-12 05:21:19,416 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:19,416 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500e15ee]
2021-03-12 05:21:19,416 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).uppercase()
2021-03-12 05:21:19,416 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23690154]]
2021-03-12 05:21:19,416 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:19,416 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23690154]
2021-03-12 05:21:19,417 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).reversed()
2021-03-12 05:21:19,417 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]]
2021-03-12 05:21:19,417 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:19,417 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22d456ba]
2021-03-12 05:21:19,538 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:19,540 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).replaceAfterLast('응', Kla1().prope0, Kla1().prope0)
2021-03-12 05:21:19,541 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]]
2021-03-12 05:21:19,541 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:19,541 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]
2021-03-12 05:21:19,663 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:21:19,665 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:21:19,668 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).replaceFirstChar({a: Char -> ''})
2021-03-12 05:21:19,668 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6a0a50]]
2021-03-12 05:21:19,668 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:19,789 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:19,791 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6a0a50]
2021-03-12 05:21:19,913 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:19,915 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:19,918 [main:117] - GENERATED CALL = (O).foo("hjfmt").filter({a: Char -> true})
2021-03-12 05:21:19,918 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]]
2021-03-12 05:21:19,918 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:19,918 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@464a5b0a]
2021-03-12 05:21:19,918 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).trimStart()
2021-03-12 05:21:19,918 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]]
2021-03-12 05:21:19,918 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:20,044 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:20,046 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29190964]
2021-03-12 05:21:20,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:21:20,174 [main:117] - GENERATED CALL = (O).foo("tmust").removePrefix("uxcli")
2021-03-12 05:21:20,174 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]]
2021-03-12 05:21:20,174 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:20,174 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]
2021-03-12 05:21:20,297 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:20,299 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).takeLast(183901365)
2021-03-12 05:21:20,299 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efdb98d]]
2021-03-12 05:21:20,299 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:20,299 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5efdb98d]
2021-03-12 05:21:20,300 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).prependIndent(Kla1().prope0)
2021-03-12 05:21:20,300 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b0923bb]]
2021-03-12 05:21:20,300 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:20,422 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:20,424 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b0923bb]
2021-03-12 05:21:20,546 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:20,548 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:20,550 [main:117] - GENERATED CALL = (O).foo("jqasl").takeLastWhile({a: Char -> false})
2021-03-12 05:21:20,550 [main:114] - replacement of (Kla1().prope0).uppercase() + i of type String is (O).foo(Kla1().prope0).reversed()
2021-03-12 05:21:20,671 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:20,671 [main:66] - Compilation checking started
2021-03-12 05:21:21,202 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((O).foo(Kla1().prope0).reversed() + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:21,205 [main:107] - replacing (prope3, Boolean)
2021-03-12 05:21:21,205 [main:50] - replacing prope3 Boolean
2021-03-12 05:21:21,205 [main:54] - Getting value of type Boolean
2021-03-12 05:21:21,350 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:21,353 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:21:21,353 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:21,496 [main:67] - randomType = String?
2021-03-12 05:21:21,621 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:21,642 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-12 05:21:21,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:21,892 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:21,894 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6892bd]
2021-03-12 05:21:22,018 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:22,049 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:22,052 [main:78] - Generated call from random type = ("lotwa")?.subSequence(-1156746925, -590337489).all({a: Char -> false})
2021-03-12 05:21:22,053 [main:106] - GETTING Boolean from Kla2
2021-03-12 05:21:22,065 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]]
2021-03-12 05:21:22,065 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:22,188 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:22,188 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6fca1c7e]
2021-03-12 05:21:22,313 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:22,316 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("yfnav").xor(true)
2021-03-12 05:21:22,316 [main:113] - Case = [public final val callback: () -> kotlin.String defined in Kla1.Kla2[PropertyDescriptorImpl@6ed574d3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]]
2021-03-12 05:21:22,316 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@7a25c650]
2021-03-12 05:21:22,440 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:22,440 [main:117] - GENERATED CALL = (Kla1().Kla2()).callback.equals("vsjnn")
2021-03-12 05:21:22,440 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]]
2021-03-12 05:21:22,440 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:22,563 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:22,563 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7929ce8b]
2021-03-12 05:21:22,685 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:22,688 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("ytncs").and(true)
2021-03-12 05:21:22,688 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]]
2021-03-12 05:21:22,688 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:22,810 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:22,810 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@170ba653]
2021-03-12 05:21:22,934 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:22,934 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("hmmfk").equals("tjvko")
2021-03-12 05:21:22,934 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]]
2021-03-12 05:21:22,934 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:23,061 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:23,062 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@55e74dde]
2021-03-12 05:21:23,185 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:23,188 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("jhjhq").or(false)
2021-03-12 05:21:23,188 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]]
2021-03-12 05:21:23,188 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:23,311 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals(null)
2021-03-12 05:21:23,311 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]]
2021-03-12 05:21:23,311 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1.Kla2[DeserializedSimpleFunctionDescriptor@10cd8b02]
2021-03-12 05:21:23,434 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:21:23,434 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@484b250b]
2021-03-12 05:21:23,434 [main:117] - GENERATED CALL = (Kla1().Kla2()).equals("lrrnr").not()
2021-03-12 05:21:23,434 [main:114] - replacement of prope3 of type Boolean is (Kla1().Kla2()).equals(null)
2021-03-12 05:21:23,557 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:23,558 [main:66] - Compilation checking started
2021-03-12 05:21:23,895 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                (Kla1().Kla2()).equals(null) = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((O).foo(Kla1().prope0).reversed() + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:23,897 [main:107] - replacing (createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }), Continuation<Unit>)
2021-03-12 05:21:23,897 [main:50] - replacing createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }) Continuation<Unit>
2021-03-12 05:21:23,897 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:21:24,022 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:21:24,153 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:21:24,157 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:21:24,583 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:21:24,711 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:24,715 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:24,988 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:21:25,120 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:25,124 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:25,593 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 05:21:25,726 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:21:25,730 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:21:26,158 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:21:26,159 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:26,159 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:26,159 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:21:26,159 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:21:26,433 [main:67] - randomType = Float?
2021-03-12 05:21:26,556 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:21:26,589 [main:106] - GETTING Continuation<Unit> from Kla1
2021-03-12 05:21:26,594 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:21:26,604 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:21:26,621 [main:106] - GETTING Continuation<Unit> from Kla2
2021-03-12 05:21:26,632 [main:106] - GETTING Continuation<Unit> from O
2021-03-12 05:21:26,643 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:21:26,643 [main:111] - Cant find and generate replacement for createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }) type Continuation<Unit>
2021-03-12 05:21:26,643 [main:107] - replacing ({ c ->
        prope9++
        prope2 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 05:21:26,643 [main:50] - replacing { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 05:21:26,643 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 05:21:26,766 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 05:21:26,768 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:21:26,897 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:21:26,901 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:21:27,310 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:21:27,312 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:21:27,315 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:21:27,315 [main:95] - GENERATED = require(true, { "mbjyu"})
2021-03-12 05:21:27,315 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(true, { "mbjyu"})}
2021-03-12 05:21:27,315 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:27,744 [main:67] - randomType = Array<ULong>
2021-03-12 05:21:27,867 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-12 05:21:27,995 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: ULong): Array<ULong> = TODO()
2021-03-12 05:21:27,998 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: ULong): Array<ULong> = TODO()
2021-03-12 05:21:28,128 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 05:21:28,130 [main:95] - GENERATED = arrayOf<ULong>(5664550716645262740.toULong())
2021-03-12 05:21:28,143 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla1
2021-03-12 05:21:28,149 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<String>
2021-03-12 05:21:28,158 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from O
2021-03-12 05:21:28,170 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla2
2021-03-12 05:21:28,180 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<String>
2021-03-12 05:21:28,182 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:21:28,198 [main:114] - replacement of { c ->
        prope9++
        prope2 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(true, { "mbjyu"})}
2021-03-12 05:21:28,322 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:21:28,323 [main:66] - Compilation checking started
2021-03-12 05:21:28,869 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = "before(first);--;after(first);before(second);--;after(second);--;done;"
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mbjyu"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((O).foo(Kla1().prope0).reversed() + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:28,871 [main:107] - replacing ("before(first);--;after(first);before(second);--;after(second);--;done;", String)
2021-03-12 05:21:28,871 [main:50] - replacing "before(first);--;after(first);before(second);--;after(second);--;done;" String
2021-03-12 05:21:28,871 [main:54] - Getting value of type String
2021-03-12 05:21:28,996 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:28,998 [main:58] - GENERATED VALUE OF TYPE String = "xestf"
2021-03-12 05:21:28,998 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:29,003 [main:67] - randomType = Int
2021-03-12 05:21:29,132 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:29,164 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@254a4f0e]
2021-03-12 05:21:29,164 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6316b1ff]
2021-03-12 05:21:29,165 [main:78] - Generated call from random type = (-820780750).toChar().lowercase()
2021-03-12 05:21:29,165 [main:106] - GETTING String from O
2021-03-12 05:21:29,176 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ef2745]]
2021-03-12 05:21:29,176 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:29,176 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ef2745]
2021-03-12 05:21:29,298 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:29,423 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:29,425 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).padStart(-1882083686, '齹')
2021-03-12 05:21:29,425 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154a9056]]
2021-03-12 05:21:29,425 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:29,548 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:29,550 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154a9056]
2021-03-12 05:21:29,673 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:29,675 [main:117] - GENERATED CALL = (O).foo("rzrpi").substringAfterLast('ҍ', Kla1().prope0)
2021-03-12 05:21:29,675 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]]
2021-03-12 05:21:29,676 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:29,798 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:29,801 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@602e9cd6]
2021-03-12 05:21:29,924 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:29,927 [main:117] - GENERATED CALL = (O).foo("iusle").substringAfter('䬴', Kla1().prope0)
2021-03-12 05:21:29,927 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ea055b2]]
2021-03-12 05:21:29,927 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:29,927 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ea055b2]
2021-03-12 05:21:29,927 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).capitalize()
2021-03-12 05:21:29,928 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b97a21d]]
2021-03-12 05:21:29,928 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:29,928 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b97a21d]
2021-03-12 05:21:29,928 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).lowercase()
2021-03-12 05:21:29,928 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d295c0]]
2021-03-12 05:21:29,928 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:29,928 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d295c0]
2021-03-12 05:21:30,053 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:30,178 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:30,303 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:30,306 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).replaceFirst('', '魷', false)
2021-03-12 05:21:30,306 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]]
2021-03-12 05:21:30,306 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:30,306 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@203855c2]
2021-03-12 05:21:30,428 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:30,431 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:30,433 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).dropLastWhile({a: Char -> false})
2021-03-12 05:21:30,434 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b0923bb]]
2021-03-12 05:21:30,434 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:30,556 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:30,559 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b0923bb]
2021-03-12 05:21:30,689 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:30,692 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:30,694 [main:117] - GENERATED CALL = (O).foo("cdrqu").takeLastWhile({a: Char -> true})
2021-03-12 05:21:30,694 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f42b47]]
2021-03-12 05:21:30,695 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:30,816 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:30,819 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f42b47]
2021-03-12 05:21:30,941 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:30,943 [main:117] - GENERATED CALL = (O).foo("jicfa").substringBefore('巂', Kla1().prope0)
2021-03-12 05:21:30,944 [main:113] - Case = [public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ef58600]]
2021-03-12 05:21:30,944 [main:149] - GENERATING call of type public open fun foo(x: kotlin.String): kotlin.String defined in O[SimpleFunctionDescriptorImpl@ba51c99]
2021-03-12 05:21:30,944 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ef58600]
2021-03-12 05:21:31,067 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:21:31,070 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:31,072 [main:117] - GENERATED CALL = (O).foo(Kla1().prope0).filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:21:31,072 [main:114] - replacement of "before(first);--;after(first);before(second);--;after(second);--;done;" of type String is (O).foo(Kla1().prope0).capitalize()
2021-03-12 05:21:31,194 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:31,194 [main:66] - Compilation checking started
2021-03-12 05:21:31,720 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = (O).foo(Kla1().prope0).capitalize()
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = ""

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mbjyu"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((O).foo(Kla1().prope0).reversed() + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:31,722 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 05:21:31,722 [main:50] - replacing getOrThrow() Ty0
2021-03-12 05:21:31,722 [main:54] - Getting value of type Ty0
2021-03-12 05:21:31,884 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 05:21:31,890 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 05:21:31,900 [main:67] - randomType = Kla5
2021-03-12 05:21:32,023 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:21:32,025 [main:112] - generating klass Kla5 text = open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}
2021-03-12 05:21:32,148 [main:194] - Type params = []
2021-03-12 05:21:32,271 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:21:32,398 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:32,402 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:32,678 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:21:32,810 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:32,813 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:33,233 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 05:21:33,365 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:21:33,369 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:21:33,787 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:21:33,787 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:33,787 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:33,801 [main:106] - GETTING Ty0 from Kla1
2021-03-12 05:21:33,805 [main:106] - GETTING Ty0 from Function0<String>
2021-03-12 05:21:33,813 [main:106] - GETTING Ty0 from O
2021-03-12 05:21:33,824 [main:106] - GETTING Ty0 from Kla2
2021-03-12 05:21:33,834 [main:106] - GETTING Ty0 from String
2021-03-12 05:21:33,851 [main:106] - GETTING Ty0 from Function0<String>
2021-03-12 05:21:33,851 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 05:21:33,851 [main:107] - replacing (createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }), Continuation<Unit>)
2021-03-12 05:21:33,851 [main:50] - replacing createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }) Continuation<Unit>
2021-03-12 05:21:33,851 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 05:21:33,975 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 05:21:34,104 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:21:34,107 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:21:34,522 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 05:21:34,651 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:34,654 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:34,929 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 05:21:35,060 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:35,112 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:35,532 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:21:35,532 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:21:35,532 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 05:21:35,532 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 05:21:35,542 [main:67] - randomType = Kla0
2021-03-12 05:21:35,665 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:21:35,667 [main:112] - generating klass Kla0 text = open class Kla0(val callback: () -> String)
2021-03-12 05:21:35,790 [main:194] - Type params = []
2021-03-12 05:21:35,912 [main:302] - generating value of type = Function0<String> false depth = 2
2021-03-12 05:21:35,914 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:21:35,923 [main:106] - GETTING Continuation<Unit> from O
2021-03-12 05:21:35,935 [main:106] - GETTING Continuation<Unit> from Kla2
2021-03-12 05:21:35,945 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:21:35,954 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 05:21:35,970 [main:106] - GETTING Continuation<Unit> from Kla1
2021-03-12 05:21:35,975 [main:106] - GETTING Continuation<Unit> from Function0<String>
2021-03-12 05:21:35,975 [main:111] - Cant find and generate replacement for createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    }) type Continuation<Unit>
2021-03-12 05:21:35,975 [main:107] - replacing ("", String)
2021-03-12 05:21:35,975 [main:50] - replacing "" String
2021-03-12 05:21:35,975 [main:54] - Getting value of type String
2021-03-12 05:21:36,100 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:36,102 [main:58] - GENERATED VALUE OF TYPE String = "ygdfj"
2021-03-12 05:21:36,103 [main:61] - GENERATED IS CALL =false
2021-03-12 05:21:36,245 [main:67] - randomType = Boolean?
2021-03-12 05:21:36,366 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:36,378 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b5308c]
2021-03-12 05:21:36,500 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:21:36,503 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 05:21:36,625 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:36,628 [main:78] - Generated call from random type = (true)?.compareTo(true).toString(1779638173)
2021-03-12 05:21:36,628 [main:106] - GETTING String from String
2021-03-12 05:21:36,645 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f42b47]]
2021-03-12 05:21:36,645 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77f42b47]
2021-03-12 05:21:36,769 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:36,894 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:36,896 [main:117] - GENERATED CALL = (Kla1().prope0).substringBefore('땉', "hjdwy")
2021-03-12 05:21:36,898 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154a9056]]
2021-03-12 05:21:36,898 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154a9056]
2021-03-12 05:21:37,021 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:21:37,146 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:21:37,149 [main:117] - GENERATED CALL = (Kla1().prope0).substringAfterLast('狓', "hyzcw")
2021-03-12 05:21:37,149 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bcfd40]]
2021-03-12 05:21:37,149 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bcfd40]
2021-03-12 05:21:37,271 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:37,274 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:37,277 [main:117] - GENERATED CALL = (Kla1().prope0).takeWhile({a: Char -> true})
2021-03-12 05:21:37,277 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6a0a50]]
2021-03-12 05:21:37,277 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d6a0a50]
2021-03-12 05:21:37,399 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:37,401 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:37,404 [main:117] - GENERATED CALL = (Kla1().prope0).filter({a: Char -> true})
2021-03-12 05:21:37,404 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]]
2021-03-12 05:21:37,404 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48ef978b]
2021-03-12 05:21:37,529 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:21:37,531 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:21:37,534 [main:117] - GENERATED CALL = (Kla1().prope0).replaceFirstChar({a: Char -> ''})
2021-03-12 05:21:37,534 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]]
2021-03-12 05:21:37,534 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fad88e]
2021-03-12 05:21:37,657 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:21:37,659 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:21:37,662 [main:117] - GENERATED CALL = (Kla1().prope0).filterNot({a: Char -> false})
2021-03-12 05:21:37,662 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]]
2021-03-12 05:21:37,662 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eed4856]
2021-03-12 05:21:37,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:37,910 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:37,913 [main:117] - GENERATED CALL = (Kla1().prope0).removeRange(38740296, -668198121)
2021-03-12 05:21:37,913 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e02d66e]]
2021-03-12 05:21:37,913 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e02d66e]
2021-03-12 05:21:37,913 [main:117] - GENERATED CALL = (Kla1().prope0).decapitalize()
2021-03-12 05:21:37,913 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470e7190]]
2021-03-12 05:21:37,913 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@470e7190]
2021-03-12 05:21:38,041 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:38,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:38,292 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:21:38,455 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:21:38,459 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:21:38,726 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:21:38,729 [main:95] - GENERATED = StringBuilder(-1113846261)
2021-03-12 05:21:38,729 [main:117] - GENERATED CALL = (Kla1().prope0).replaceRange(-2064016539, 1491473404, StringBuilder(-1113846261))
2021-03-12 05:21:38,729 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]]
2021-03-12 05:21:38,729 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3204b591]
2021-03-12 05:21:38,852 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:38,854 [main:117] - GENERATED CALL = (Kla1().prope0).takeLast(-1654750245)
2021-03-12 05:21:38,854 [main:114] - replacement of "" of type String is (Kla1().prope0).substringBefore('땉', "hjdwy")
2021-03-12 05:21:38,977 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:21:38,978 [main:66] - Compilation checking started
2021-03-12 05:21:39,527 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = (O).foo(Kla1().prope0).capitalize()
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = (Kla1().prope0).substringBefore('땉', "hjdwy")

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mbjyu"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((O).foo(Kla1().prope0).reversed() + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:39,530 [main:107] - replacing (this, Kla6)
2021-03-12 05:21:39,530 [main:50] - replacing this Kla6
2021-03-12 05:21:39,530 [main:54] - Getting value of type Kla6
2021-03-12 05:21:39,658 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:21:39,661 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        this.prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}
2021-03-12 05:21:39,661 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-12 05:21:39,661 [main:61] - GENERATED IS CALL =true
2021-03-12 05:21:39,666 [main:67] - randomType = Int
2021-03-12 05:21:39,790 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:21:39,823 [main:106] - GETTING Kla6 from Function0<String>
2021-03-12 05:21:39,831 [main:106] - GETTING Kla6 from Kla2
2021-03-12 05:21:39,841 [main:106] - GETTING Kla6 from Kla1
2021-03-12 05:21:39,845 [main:106] - GETTING Kla6 from Function0<String>
2021-03-12 05:21:39,846 [main:106] - GETTING Kla6 from String
2021-03-12 05:21:39,862 [main:106] - GETTING Kla6 from O
2021-03-12 05:21:39,872 [main:114] - replacement of this of type Kla6 is Kla6()
2021-03-12 05:21:39,996 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:21:39,996 [main:66] - Compilation checking started
2021-03-12 05:21:40,546 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface I {
    fun foo(x: String = "OK"): String = x
}

interface J : I

object O : J

fun box(): String = O.foo()

open class Kla0(val callback: () -> String)

class Kla1 {
    val prope0 = "OK"

    inner class Kla2 : Kla0({ (O).foo("tbqru").substringBefore('똊', O.foo()) })
}

fun box669(): String =
        Kla1().Kla2().callback()

fun box251(): String {
    fu1 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().prope0).get(1288739911).isWhitespace()) {
        prope1 += "--;"
        prope2()
    }

    prope3 = false
    fu2 {
        Kla4.fu5()
        Kla4.fu5("second")
    }
    while ((Kla1().Kla2()).equals("retcu").equals("tgofa")) {
        prope1 += "--;"
        { require(true, { "xcjwa"})}()
    }

    val prope6 = (O).foo(Kla1().prope0).capitalize()
    if ((Kla1()).prope0.toBoolean()) return "fail: $prope1"

    return "OK"
}

interface Kla3 {
    suspend fun fu5(x: String = "first")
}

object Kla4 : Kla3 {
    override suspend fun fu5(x: String) {
        prope1 += "before($x);"
        fu0()
        prope1 += "after($x);"
    }
}

suspend fun fu0(): Unit = suspendCoroutine {a: Continuation<Unit> -> check(true)}

fun fu1(f: suspend () -> Unit) {
    f.startCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = { println("zrplk")}
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
}

fun fu2(f: suspend () -> Unit) {
    val prope7 = f.createCoroutine(object : Kla7<Unit>() {
        override fun resume(x: Unit) {
            prope2 = {
                prope1 += "done;"
                prope3 = true
            }
        }
        override fun fu6(x: Throwable) {}
        override val context = EmptyCoroutineContext
    })
    prope7.resume(Unit)
}

var prope1 = (Kla1().prope0).substringBefore('땉', "hjdwy")

var prope2: () -> Unit = { }

var prope3 = false

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        x(prope1.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        runCatching<Any?>({ "cebgw"}).exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope1: Result<Any?>) {
        prope1.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Any?>) {
        Kla6().prope1 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope1: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope1: Result<Ty0>) {
        if (prope1.isSuccess) {
            resume(prope1.getOrThrow())
        } else {
            fu6(prope1.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((O).foo(Kla1().prope0).decapitalize())
        prope8.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope8.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope8.find { false}?.let { error("vaaad")}
    }

    fun fu10(method: String) {
        prope8.find { ('䩱').rangeTo('脗').isEmpty() } ?: error("tail-call optimization hit: method " + "vlyhu" + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla8()

class Kla9 {
    private var prope9 = 0
    var prope3 = false

    var prope2: () -> Unit = {}

    fun fu11() {
        prope9 = 0
        prope3 = false
        prope2 = { print("gskym")}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mbjyu"})}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (Kla1().Kla2()).equals("lxidy").not()) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error((O).foo(Kla1().prope0).reversed() + ", got " + prope9)
            prope2()
        }
        if ((O).equals("ajneu").equals("tsyva"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 1138716814)
        if (prope3) error((Kla1().Kla2()).callback.invoke())
        prope2()
        if (checkFinished && !(Kla1().prope0).get(-1642777760).isDefined()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope2 = {
            Kla9().prope3 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:21:40,549 [main:107] - replacing (prope1, Result<Ty0>)
2021-03-12 05:21:40,549 [main:50] - replacing prope1 Result<Ty0>
2021-03-12 05:21:40,549 [main:54] - Getting value of type Result<Ty0>
