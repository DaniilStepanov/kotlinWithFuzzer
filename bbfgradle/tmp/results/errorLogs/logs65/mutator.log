2021-03-12 01:59:42,728 [main:66] - Compilation checking started
2021-03-12 01:59:43,940 [main:112] - generating klass Outer text = class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}
2021-03-12 01:59:43,942 [main:112] - generating klass Companion text = private companion object {
        val result = "OK"
    }
2021-03-12 01:59:44,223 [main:45] - Trying to change 4 nodes
2021-03-12 01:59:44,227 [main:53] - replacing (Outer().test, String)
2021-03-12 01:59:44,227 [main:50] - replacing Outer().test String
2021-03-12 01:59:44,227 [main:54] - Getting value of type String
2021-03-12 01:59:44,330 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:59:44,333 [main:58] - GENERATED VALUE OF TYPE String = "vdjnj"
2021-03-12 01:59:44,333 [main:61] - GENERATED IS CALL =false
2021-03-12 01:59:45,059 [main:67] - randomType = Function1<Outer?, Outer>
2021-03-12 01:59:45,060 [main:106] - GETTING String from String
2021-03-12 01:59:45,152 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4d738]]
2021-03-12 01:59:45,152 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4d738]
2021-03-12 01:59:45,253 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:59:45,256 [main:117] - GENERATED CALL = (result).replaceAfterLast('サ', Outer().test, Outer().test)
2021-03-12 01:59:45,256 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@113c8c87]]
2021-03-12 01:59:45,256 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@113c8c87]
2021-03-12 01:59:45,258 [main:117] - GENERATED CALL = (result).trimIndent()
2021-03-12 01:59:45,260 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f2f7838]]
2021-03-12 01:59:45,260 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f2f7838]
2021-03-12 01:59:45,370 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:59:45,370 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:59:45,373 [main:117] - GENERATED CALL = (result).takeLastWhile({a: Char -> false})
2021-03-12 01:59:45,373 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1154f447]]
2021-03-12 01:59:45,373 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939]
2021-03-12 01:59:45,451 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:45,540 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:45,541 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1154f447]
2021-03-12 01:59:45,627 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:59:45,734 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:59:45,736 [main:117] - GENERATED CALL = (result).subSequence(1217865030, -1751936551).commonSuffixWith("jibio", true)
2021-03-12 01:59:45,737 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b53b6c8]]
2021-03-12 01:59:45,737 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b53b6c8]
2021-03-12 01:59:45,742 [main:117] - GENERATED CALL = (result).prependIndent(Outer().test)
2021-03-12 01:59:45,742 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f314302]]
2021-03-12 01:59:45,742 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9]
2021-03-12 01:59:45,824 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:45,825 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f314302]
2021-03-12 01:59:45,826 [main:117] - GENERATED CALL = (result).get(1262501928).uppercase()
2021-03-12 01:59:45,827 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579a5178]]
2021-03-12 01:59:45,827 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 01:59:45,828 [main:117] - GENERATED CALL = (result).decapitalize()
2021-03-12 01:59:45,828 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce0d1aa]]
2021-03-12 01:59:45,828 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce0d1aa]
2021-03-12 01:59:45,829 [main:117] - GENERATED CALL = (result).uppercase()
2021-03-12 01:59:45,830 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c78bd1]]
2021-03-12 01:59:45,830 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c78bd1]
2021-03-12 01:59:45,918 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 01:59:45,918 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:59:45,921 [main:117] - GENERATED CALL = (result).filterIndexed({a: Int, b: Char -> true})
2021-03-12 01:59:45,921 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2554ce33]]
2021-03-12 01:59:45,922 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2554ce33]
2021-03-12 01:59:46,004 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:59:46,006 [main:117] - GENERATED CALL = (result).substringAfterLast('▮', test)
2021-03-12 01:59:46,006 [main:61] - replacement of Outer().test of type String is (result).subSequence(1217865030, -1751936551).commonSuffixWith("jibio", true)
2021-03-12 01:59:46,090 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:59:46,092 [main:66] - Compilation checking started
2021-03-12 01:59:46,357 [main:49] - Result = false
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = (result).subSequence(1217865030, -1751936551).commonSuffixWith("jibio", true)
2021-03-12 01:59:46,359 [main:53] - replacing (test, String)
2021-03-12 01:59:46,359 [main:50] - replacing test String
2021-03-12 01:59:46,359 [main:54] - Getting value of type String
2021-03-12 01:59:46,442 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:59:46,442 [main:58] - GENERATED VALUE OF TYPE String = "dqaum"
2021-03-12 01:59:46,443 [main:61] - GENERATED IS CALL =false
2021-03-12 01:59:46,760 [main:67] - randomType = Array<Char?>
2021-03-12 01:59:46,861 [main:302] - generating value of type = Array<Char?> false depth = 0
2021-03-12 01:59:46,984 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Char?> = TODO()
2021-03-12 01:59:46,987 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Char?> = TODO()
2021-03-12 01:59:47,075 [main:95] - GENERATED = emptyArray<Char?>()
2021-03-12 01:59:47,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c3806a2]
2021-03-12 01:59:47,104 [main:78] - Generated call from random type = (emptyArray<Char?>()).contentDeepToString()
2021-03-12 01:59:47,104 [main:106] - GETTING String from String
2021-03-12 01:59:47,152 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f83813]]
2021-03-12 01:59:47,152 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f83813]
2021-03-12 01:59:47,264 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:59:47,372 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:59:47,448 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:59:47,450 [main:117] - GENERATED CALL = (result).replace('៘', '訮', false)
2021-03-12 01:59:47,450 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60bffecb]]
2021-03-12 01:59:47,450 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60bffecb]
2021-03-12 01:59:47,541 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:47,542 [main:117] - GENERATED CALL = (result).takeLast(-561275480)
2021-03-12 01:59:47,543 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290150cb]]
2021-03-12 01:59:47,543 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939]
2021-03-12 01:59:47,642 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:47,719 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:47,720 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290150cb]
2021-03-12 01:59:47,798 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:47,800 [main:117] - GENERATED CALL = (result).subSequence(349831606, 1788687207).repeat(361289349)
2021-03-12 01:59:47,801 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c0ae9]]
2021-03-12 01:59:47,801 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c0ae9]
2021-03-12 01:59:47,802 [main:117] - GENERATED CALL = (result).trimStart()
2021-03-12 01:59:47,803 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15904558]]
2021-03-12 01:59:47,803 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15904558]
2021-03-12 01:59:47,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:48,005 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:48,007 [main:117] - GENERATED CALL = (result).removeRange(-478578165, 242407494)
2021-03-12 01:59:48,007 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec931a0]]
2021-03-12 01:59:48,007 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec931a0]
2021-03-12 01:59:48,090 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 01:59:48,173 [main:43] - GENERATING CALL OF fun <T> emptyList(): Iterable<Int> = TODO()
2021-03-12 01:59:48,175 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): Iterable<Int> = TODO()
2021-03-12 01:59:48,254 [main:95] - GENERATED = emptyList<Int>()
2021-03-12 01:59:48,255 [main:117] - GENERATED CALL = (result).slice(emptyList<Int>())
2021-03-12 01:59:48,255 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61f342aa]]
2021-03-12 01:59:48,255 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61f342aa]
2021-03-12 01:59:48,341 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:48,343 [main:117] - GENERATED CALL = (result).take(1962169602)
2021-03-12 01:59:48,343 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a711314]]
2021-03-12 01:59:48,343 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a711314]
2021-03-12 01:59:48,422 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:59:48,424 [main:117] - GENERATED CALL = (result).substringAfter('㾔', Outer().test)
2021-03-12 01:59:48,424 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36010af3]]
2021-03-12 01:59:48,424 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36010af3]
2021-03-12 01:59:48,498 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:48,573 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:59:48,575 [main:117] - GENERATED CALL = (result).padStart(1917246176, 'ጯ')
2021-03-12 01:59:48,575 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@501d07c5]]
2021-03-12 01:59:48,576 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@501d07c5]
2021-03-12 01:59:48,681 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:48,771 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:48,850 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:59:48,930 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:59:48,932 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:59:49,110 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:59:49,111 [main:95] - GENERATED = StringBuilder(41305749)
2021-03-12 01:59:49,112 [main:117] - GENERATED CALL = (result).replaceRange(-91113741, 1704931676, StringBuilder(41305749))
2021-03-12 01:59:49,112 [main:61] - replacement of test of type String is (result).replace('៘', '訮', false)
2021-03-12 01:59:49,186 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:59:49,186 [main:66] - Compilation checking started
2021-03-12 01:59:49,443 [main:49] - Result = false
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        (result).replace('៘', '訮', false) = result
    }
}

fun box() = Outer().test


2021-03-12 01:59:49,560 [main:41] - AFTER TRY 0 res = class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test
2021-03-12 01:59:49,730 [main:112] - generating klass Outer text = class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}
2021-03-12 01:59:49,731 [main:112] - generating klass Companion text = private companion object {
        val result = "OK"
    }
2021-03-12 01:59:49,894 [main:43] - Try №0
2021-03-12 01:59:51,900 [main:69] - Trying to insert inline fun fu0(s: () -> Kla0 = {
    object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0
}) = s()
2021-03-12 01:59:51,991 [main:66] - Compilation checking started
2021-03-12 01:59:52,563 [main:103] - Trying to change 19 nodes
2021-03-12 01:59:52,563 [main:107] - replacing (s, Function0<Kla0>)
2021-03-12 01:59:52,563 [main:50] - replacing s Function0<Kla0>
2021-03-12 01:59:52,563 [main:54] - Getting value of type Function0<Kla0>
2021-03-12 01:59:52,649 [main:302] - generating value of type = Function0<Kla0> false depth = 0
2021-03-12 01:59:52,650 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-12 01:59:52,650 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu1(): String
}
2021-03-12 01:59:52,852 [main:58] - GENERATED VALUE OF TYPE Function0<Kla0> = { TODO()}
2021-03-12 01:59:52,853 [main:61] - GENERATED IS CALL =false
2021-03-12 01:59:52,853 [main:67] - randomType = String
2021-03-12 01:59:52,940 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:59:52,979 [main:106] - GETTING Function0<Kla0> from String
2021-03-12 01:59:53,007 [main:106] - GETTING Function0<Kla0> from Outer
2021-03-12 01:59:53,012 [main:114] - replacement of s of type Function0<Kla0> is { TODO()}
2021-03-12 01:59:53,100 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:59:53,100 [main:66] - Compilation checking started
2021-03-12 01:59:53,307 [main:49] - Result = false
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0
}) = { TODO()}()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return prope1.fu1()
}


2021-03-12 01:59:53,307 [main:107] - replacing (prope1, Kla0)
2021-03-12 01:59:53,307 [main:50] - replacing prope1 Kla0
2021-03-12 01:59:53,307 [main:54] - Getting value of type Kla0
2021-03-12 01:59:53,394 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:59:53,394 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu1(): String
}
2021-03-12 01:59:53,593 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 01:59:53,593 [main:61] - GENERATED IS CALL =true
2021-03-12 01:59:53,595 [main:67] - randomType = Kla0
2021-03-12 01:59:53,596 [main:106] - GETTING Kla0 from Outer
2021-03-12 01:59:53,608 [main:106] - GETTING Kla0 from String
2021-03-12 01:59:53,645 [main:114] - replacement of prope1 of type Kla0 is TODO()
2021-03-12 01:59:53,729 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:59:53,730 [main:66] - Compilation checking started
2021-03-12 01:59:53,968 [main:49] - Result = false
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return TODO().fu1()
}


2021-03-12 01:59:53,969 [main:107] - replacing (prope0.fu1() != "OK", Boolean)
2021-03-12 01:59:53,969 [main:50] - replacing prope0.fu1() != "OK" Boolean
2021-03-12 01:59:53,969 [main:54] - Getting value of type Boolean
2021-03-12 01:59:54,054 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:59:54,055 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:59:54,055 [main:61] - GENERATED IS CALL =false
2021-03-12 01:59:54,261 [main:67] - randomType = Double?
2021-03-12 01:59:54,348 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:59:54,419 [main:149] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@47c2f550]
2021-03-12 01:59:54,420 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1d48359a]
2021-03-12 01:59:54,421 [main:78] - Generated call from random type = (0.930575023210977)?.toFloat().isInfinite()
2021-03-12 01:59:54,422 [main:106] - GETTING Boolean from String
2021-03-12 01:59:54,462 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b32d5bb]]
2021-03-12 01:59:54,462 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939]
2021-03-12 01:59:54,550 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:54,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:54,635 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b32d5bb]
2021-03-12 01:59:54,636 [main:117] - GENERATED CALL = (Outer().test).subSequence(1119779914, -1011953199).isEmpty()
2021-03-12 01:59:54,636 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bbc46dd]]
2021-03-12 01:59:54,636 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bbc46dd]
2021-03-12 01:59:54,717 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:54,806 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:59:54,895 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:59:54,897 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:59:55,077 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:59:55,078 [main:95] - GENERATED = StringBuilder("egltj")
2021-03-12 01:59:55,184 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:55,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:55,367 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:59:55,368 [main:117] - GENERATED CALL = (Outer().test).regionMatches(2036028149, StringBuilder("egltj"), -1537393940, -690627127, true)
2021-03-12 01:59:55,369 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8ba0f]]
2021-03-12 01:59:55,369 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9]
2021-03-12 01:59:55,448 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:55,449 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a8ba0f]
2021-03-12 01:59:55,529 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:59:55,627 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:59:55,628 [main:117] - GENERATED CALL = (Outer().test).get(1802490748).equals('躳', false)
2021-03-12 01:59:55,628 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc5c89]]
2021-03-12 01:59:55,629 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9]
2021-03-12 01:59:55,721 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:55,722 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc5c89]
2021-03-12 01:59:55,723 [main:117] - GENERATED CALL = (Outer().test).get(25247780).isDigit()
2021-03-12 01:59:55,723 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d3b0d3c]]
2021-03-12 01:59:55,723 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9]
2021-03-12 01:59:55,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:55,812 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d3b0d3c]
2021-03-12 01:59:55,813 [main:117] - GENERATED CALL = (Outer().test).get(-257713582).isHighSurrogate()
2021-03-12 01:59:55,813 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@307c048f]]
2021-03-12 01:59:55,813 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@307c048f]
2021-03-12 01:59:55,813 [main:117] - GENERATED CALL = (Outer().test).matches(Outer().test)
2021-03-12 01:59:55,813 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c792489]]
2021-03-12 01:59:55,813 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939]
2021-03-12 01:59:55,895 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:55,980 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:55,981 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c792489]
2021-03-12 01:59:56,063 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:59:56,161 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:59:56,162 [main:117] - GENERATED CALL = (Outer().test).subSequence(-1358508632, -1725379768).endsWith('䰳', false)
2021-03-12 01:59:56,162 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@413721f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125c79dc]]
2021-03-12 01:59:56,162 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@413721f]
2021-03-12 01:59:56,162 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@125c79dc]
2021-03-12 01:59:56,251 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:59:56,252 [main:117] - GENERATED CALL = (Outer().test).compareTo(Outer().test).equals("whmaw")
2021-03-12 01:59:56,252 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bbc46dd]]
2021-03-12 01:59:56,252 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939]
2021-03-12 01:59:56,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:56,414 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:56,415 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bbc46dd]
2021-03-12 01:59:56,493 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:56,587 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:59:56,680 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:56,764 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:56,843 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:59:56,844 [main:117] - GENERATED CALL = (Outer().test).subSequence(1641022537, 1480767251).regionMatches(-1057570488, "voynp", 1117580741, -1709573570, false)
2021-03-12 01:59:56,844 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4870b38]]
2021-03-12 01:59:56,844 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@31a57be9]
2021-03-12 01:59:56,924 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:59:56,925 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4870b38]
2021-03-12 01:59:56,925 [main:117] - GENERATED CALL = (Outer().test).get(1359420791).isTitleCase()
2021-03-12 01:59:56,926 [main:114] - replacement of prope0.fu1() != "OK" of type Boolean is (Outer().test).matches(Outer().test)
2021-03-12 01:59:57,004 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:59:57,005 [main:66] - Compilation checking started
2021-03-12 01:59:57,280 [main:49] - Result = false
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if ((Outer().test).matches(Outer().test)) return "fail 1: ${prope0.fu1()}"
    return prope1.fu1()
}


2021-03-12 01:59:57,280 [main:107] - replacing (s(), Kla0)
2021-03-12 01:59:57,280 [main:50] - replacing s() Kla0
2021-03-12 01:59:57,281 [main:54] - Getting value of type Kla0
2021-03-12 01:59:57,361 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:59:57,361 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu1(): String
}
2021-03-12 01:59:57,524 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 01:59:57,524 [main:61] - GENERATED IS CALL =true
2021-03-12 01:59:57,525 [main:67] - randomType = Kla0
2021-03-12 01:59:57,526 [main:106] - GETTING Kla0 from String
2021-03-12 01:59:57,549 [main:106] - GETTING Kla0 from Outer
2021-03-12 01:59:57,554 [main:114] - replacement of s() of type Kla0 is TODO()
2021-03-12 01:59:57,634 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:59:57,634 [main:66] - Compilation checking started
2021-03-12 01:59:57,801 [main:49] - Result = false
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0
}) = TODO()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return prope1.fu1()
}


2021-03-12 01:59:57,802 [main:107] - replacing (fu0(), Kla0)
2021-03-12 01:59:57,802 [main:50] - replacing fu0() Kla0
2021-03-12 01:59:57,802 [main:54] - Getting value of type Kla0
2021-03-12 01:59:57,903 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:59:57,903 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu1(): String
}
2021-03-12 01:59:58,097 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 01:59:58,097 [main:61] - GENERATED IS CALL =true
2021-03-12 01:59:58,377 [main:67] - randomType = ArrayDeque<Byte?>
2021-03-12 01:59:58,454 [main:302] - generating value of type = ArrayDeque<Byte?> false depth = 0
2021-03-12 01:59:58,538 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte?>): ArrayDeque<Byte?> = TODO()
2021-03-12 01:59:58,540 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte?>): ArrayDeque<Byte?> = TODO()
2021-03-12 01:59:58,749 [main:302] - generating value of type = Collection<Byte?> false depth = 3
2021-03-12 01:59:58,852 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Byte?): Collection<Byte?> = TODO()
2021-03-12 01:59:58,853 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Byte?): Collection<Byte?> = TODO()
2021-03-12 01:59:58,942 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 01:59:58,942 [main:95] - GENERATED = setOf<Byte?>(-104)
2021-03-12 01:59:58,943 [main:95] - GENERATED = ArrayDeque<Byte?>(setOf<Byte?>(-104))
2021-03-12 01:59:59,160 [main:106] - GETTING Kla0 from Outer
2021-03-12 01:59:59,168 [main:106] - GETTING Kla0 from String
2021-03-12 01:59:59,203 [main:114] - replacement of fu0() of type Kla0 is TODO()
2021-03-12 01:59:59,289 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:59:59,289 [main:66] - Compilation checking started
2021-03-12 01:59:59,486 [main:49] - Result = false
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = TODO()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return prope1.fu1()
}


2021-03-12 01:59:59,487 [main:107] - replacing (prope0, Kla0)
2021-03-12 01:59:59,487 [main:50] - replacing prope0 Kla0
2021-03-12 01:59:59,487 [main:54] - Getting value of type Kla0
2021-03-12 01:59:59,568 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:59:59,569 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu1(): String
}
2021-03-12 01:59:59,744 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 01:59:59,744 [main:61] - GENERATED IS CALL =true
2021-03-12 01:59:59,827 [main:67] - randomType = Kla0?
2021-03-12 01:59:59,828 [main:106] - GETTING Kla0 from String
2021-03-12 01:59:59,856 [main:106] - GETTING Kla0 from Outer
2021-03-12 01:59:59,862 [main:114] - replacement of prope0 of type Kla0 is TODO()
2021-03-12 01:59:59,940 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:59:59,940 [main:66] - Compilation checking started
2021-03-12 02:00:00,117 [main:49] - Result = false
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (TODO().fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return prope1.fu1()
}


2021-03-12 02:00:00,117 [main:107] - replacing (object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0, Kla0)
2021-03-12 02:00:00,118 [main:50] - replacing object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0 Kla0
2021-03-12 02:00:00,118 [main:54] - Getting value of type Kla0
2021-03-12 02:00:00,203 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 02:00:00,203 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu1(): String
}
2021-03-12 02:00:00,406 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 02:00:00,406 [main:61] - GENERATED IS CALL =true
2021-03-12 02:00:00,407 [main:67] - randomType = Kla0
2021-03-12 02:00:00,409 [main:106] - GETTING Kla0 from Outer
2021-03-12 02:00:00,419 [main:106] - GETTING Kla0 from String
2021-03-12 02:00:00,444 [main:114] - replacement of object : Kla0 {
        override fun fu1() = "OK"
    } as Kla0 of type Kla0 is TODO()
2021-03-12 02:00:00,535 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(CALL_EXPRESSION)
2021-03-12 02:00:00,535 [main:66] - Compilation checking started
2021-03-12 02:00:00,858 [main:53] - Result = true
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    TODO()
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return prope1.fu1()
}


2021-03-12 02:00:00,858 [main:107] - replacing (prope1.fu1(), String)
2021-03-12 02:00:00,858 [main:50] - replacing prope1.fu1() String
2021-03-12 02:00:00,858 [main:54] - Getting value of type String
2021-03-12 02:00:00,936 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:00:00,937 [main:58] - GENERATED VALUE OF TYPE String = "kbntk"
2021-03-12 02:00:00,937 [main:61] - GENERATED IS CALL =false
2021-03-12 02:00:01,018 [main:67] - randomType = ULong
2021-03-12 02:00:01,094 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 02:00:01,142 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@26e434f5]
2021-03-12 02:00:01,142 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b1a4a22]
2021-03-12 02:00:01,224 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:01,225 [main:78] - Generated call from random type = (1182634738204234963.toULong()).toByte().toString(-1068279482)
2021-03-12 02:00:01,226 [main:106] - GETTING String from Outer
2021-03-12 02:00:01,234 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c]]
2021-03-12 02:00:01,235 [main:117] - GENERATED CALL = (Outer()).test
2021-03-12 02:00:01,235 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78b28970]]
2021-03-12 02:00:01,235 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78b28970]
2021-03-12 02:00:01,318 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:00:01,435 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:00:01,436 [main:117] - GENERATED CALL = (Outer()).test.substringBefore('䵀', "xagly")
2021-03-12 02:00:01,436 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2554ce33]]
2021-03-12 02:00:01,437 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2554ce33]
2021-03-12 02:00:01,536 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:00:01,537 [main:117] - GENERATED CALL = (Outer()).test.substringAfterLast('', Outer().test)
2021-03-12 02:00:01,537 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36010af3]]
2021-03-12 02:00:01,537 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36010af3]
2021-03-12 02:00:01,633 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:01,734 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:00:01,735 [main:117] - GENERATED CALL = (Outer()).test.padStart(1726620255, '㖡')
2021-03-12 02:00:01,735 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@501d07c5]]
2021-03-12 02:00:01,735 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@501d07c5]
2021-03-12 02:00:01,816 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:01,898 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:01,973 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:00:01,977 [main:117] - GENERATED CALL = (Outer()).test.replaceRange(1946827779, -1548323108, "pvumz")
2021-03-12 02:00:01,978 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4d738]]
2021-03-12 02:00:01,978 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4d738]
2021-03-12 02:00:02,054 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:00:02,129 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:00:02,130 [main:117] - GENERATED CALL = (Outer()).test.replaceAfterLast('가', "aruqh", Outer().test)
2021-03-12 02:00:02,131 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c0ae9]]
2021-03-12 02:00:02,131 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c0ae9]
2021-03-12 02:00:02,131 [main:117] - GENERATED CALL = (Outer()).test.trimStart()
2021-03-12 02:00:02,131 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@103e1cf0]]
2021-03-12 02:00:02,131 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@103e1cf0]
2021-03-12 02:00:02,131 [main:117] - GENERATED CALL = (Outer()).test.toLowerCase()
2021-03-12 02:00:02,132 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec931a0]]
2021-03-12 02:00:02,132 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec931a0]
2021-03-12 02:00:02,206 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 02:00:02,286 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 02:00:02,287 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 02:00:02,383 [main:95] - GENERATED = mutableSetOf<Int>()
2021-03-12 02:00:02,383 [main:117] - GENERATED CALL = (Outer()).test.slice(mutableSetOf<Int>())
2021-03-12 02:00:02,384 [main:113] - Case = [public final val test: kotlin.String defined in Outer[PropertyDescriptorImpl@79611d2c], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@777379d]]
2021-03-12 02:00:02,384 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@777379d]
2021-03-12 02:00:02,477 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:00:02,477 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:00:02,478 [main:117] - GENERATED CALL = (Outer()).test.dropWhile({a: Char -> true})
2021-03-12 02:00:02,478 [main:114] - replacement of prope1.fu1() of type String is (Outer()).test.toLowerCase()
2021-03-12 02:00:02,556 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:00:02,557 [main:66] - Compilation checking started
2021-03-12 02:00:02,929 [main:53] - Result = true
Text:
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    TODO()
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return (Outer()).test.toLowerCase()
}


2021-03-12 02:00:03,008 [main:41] - AFTER TRY 1 res = class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    TODO()
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return (Outer()).test.toLowerCase()
}


2021-03-12 02:00:03,158 [main:112] - generating klass Outer text = class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}
2021-03-12 02:00:03,159 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu1(): String
}
2021-03-12 02:00:03,344 [main:112] - generating klass Companion text = private companion object {
        val result = "OK"
    }
2021-03-12 02:00:03,500 [main:43] - GENERATING CALL OF inline fun fu0(s: () -> Kla0 = {
    TODO()
}) = s()
2021-03-12 02:00:03,501 [main:61] - WITHOUT TYPE PARAMS = inline fun fu0(s: () -> Kla0 = {
    TODO()
}) = s()
2021-03-12 02:00:03,665 [main:302] - generating value of type = Function0<Kla0> false depth = 1
2021-03-12 02:00:03,665 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-12 02:00:03,666 [main:112] - generating klass Kla0 text = interface Kla0 {
    fun fu1(): String
}
2021-03-12 02:00:03,819 [main:95] - GENERATED = fu0({ TODO()})
2021-03-12 02:00:03,907 [main:43] - Try №1
2021-03-12 02:00:10,638 [main:48] - Already checked
2021-03-12 02:00:19,668 [main:48] - Already checked
2021-03-12 02:00:23,949 [main:69] - Trying to insert fun box671(): String {
    val prope8 = fu6 {
        add(fu5())
    }
    return if (prope8 != "?OK") return "Fail: $prope8" else "OK"
}
2021-03-12 02:00:24,062 [main:66] - Compilation checking started
2021-03-12 02:00:25,114 [main:103] - Trying to change 184 nodes
2021-03-12 02:00:25,115 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-12 02:00:25,116 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-12 02:00:25,116 [main:54] - Getting value of type String
2021-03-12 02:00:25,279 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:00:25,281 [main:58] - GENERATED VALUE OF TYPE String = "bjvfj"
2021-03-12 02:00:25,282 [main:61] - GENERATED IS CALL =false
2021-03-12 02:00:26,672 [main:67] - randomType = Function2<MutableMap<UInt, Boolean>, Function1<HashMap<UByte, LinkedHashSet<ULong>>, Kla6>, Kla7>
2021-03-12 02:00:26,672 [main:106] - GETTING String from String
2021-03-12 02:00:26,700 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28332e43]]
2021-03-12 02:00:26,701 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28332e43]
2021-03-12 02:00:26,701 [main:117] - GENERATED CALL = ((Outer()).test).reversed()
2021-03-12 02:00:26,701 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61f342aa]]
2021-03-12 02:00:26,701 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61f342aa]
2021-03-12 02:00:26,891 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:26,895 [main:117] - GENERATED CALL = ((Outer()).test).take(-1252043047)
2021-03-12 02:00:26,895 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4d738]]
2021-03-12 02:00:26,895 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4d738]
2021-03-12 02:00:27,036 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:00:27,039 [main:117] - GENERATED CALL = ((Outer()).test).replaceAfterLast('ꐔ', (Outer()).test, Outer().test)
2021-03-12 02:00:27,039 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@413721f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@528d8000]]
2021-03-12 02:00:27,039 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@413721f]
2021-03-12 02:00:27,187 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:00:27,190 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@528d8000]
2021-03-12 02:00:27,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:27,337 [main:117] - GENERATED CALL = ((Outer()).test).compareTo("ttycm").toString(-1326918494)
2021-03-12 02:00:27,337 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290150cb]]
2021-03-12 02:00:27,337 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e6939]
2021-03-12 02:00:27,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:27,618 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:27,620 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@290150cb]
2021-03-12 02:00:27,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:00:27,812 [main:117] - GENERATED CALL = ((Outer()).test).subSequence(581875884, 1471704284).repeat(1299741552)
2021-03-12 02:00:27,812 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dfdcc1f]]
2021-03-12 02:00:27,812 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dfdcc1f]
2021-03-12 02:00:27,813 [main:117] - GENERATED CALL = ((Outer()).test).trim()
2021-03-12 02:00:27,813 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c0ae9]]
2021-03-12 02:00:27,813 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@406c0ae9]
2021-03-12 02:00:27,813 [main:117] - GENERATED CALL = ((Outer()).test).trimStart()
2021-03-12 02:00:27,813 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f83813]]
2021-03-12 02:00:27,813 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15f83813]
2021-03-12 02:00:27,964 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:00:28,097 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:00:28,228 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:00:28,230 [main:117] - GENERATED CALL = ((Outer()).test).replace('籠', '❽', true)
2021-03-12 02:00:28,231 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d6049bd]]
2021-03-12 02:00:28,231 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d6049bd]
2021-03-12 02:00:28,368 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:00:28,370 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:00:28,373 [main:117] - GENERATED CALL = ((Outer()).test).dropLastWhile({a: Char -> true})
2021-03-12 02:00:28,373 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@218241ea]]
2021-03-12 02:00:28,373 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@218241ea]
2021-03-12 02:00:28,511 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:00:28,659 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 02:00:28,662 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 02:00:29,010 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 02:00:29,016 [main:95] - GENERATED = StringBuilder("ankib")
2021-03-12 02:00:29,172 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:00:29,175 [main:117] - GENERATED CALL = ((Outer()).test).commonPrefixWith(StringBuilder("ankib"), false)
2021-03-12 02:00:29,175 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is ((Outer()).test).compareTo("ttycm").toString(-1326918494)
2021-03-12 02:00:29,319 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:00:29,319 [main:66] - Compilation checking started
2021-03-12 02:00:29,955 [main:53] - Result = true
Text:

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    TODO()
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return (Outer()).test.toLowerCase()
}

class Kla1 {
    var prope4 = ""

    suspend fun <Ty0> fu10(prope8: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope8)
        COROUTINE_SUSPENDED
    }
}

fun Kla1.fu2(c: Throwable?) {
    prope4 += if (c == null) "?" else "!"
}

fun fu3() = Kla2()

class Kla2() {
    var prope5 = true
    public suspend fun fu11(): Boolean {
        val prope13 = prope5
        prope5 = false
        return prope13
    }
    public suspend fun fu12(): String = "OK"
}

public inline fun Kla1.fu4(action: Kla1.() -> String?): String? {
    var prope6: Throwable? = null
    try {
        return action()
    } catch(x: Exception) {
        prope6 = x
        throw x
    } finally {
        fu2(prope6)
    }
}

public suspend fun Kla1.fu5(): String? {
    return fu4 {
        val prope15 = fu3()
        if (!prope15.fu11())
            return null
        return prope15.fu12()
    }
}

fun fu6(c: suspend Kla1.() -> Unit): String {
    val prope7 = Kla1()
    c.startCoroutine(prope7, Kla3)
    return prope7.prope4
}

fun Kla1.add(s: String?) {
    prope4 += s
}

fun box671(): String {
    val prope8 = fu6 {
        add(fu5())
    }
    return if (prope8 != "?OK") return "Fail: $prope8" else "OK"
}

fun <Ty0> fu8(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu9(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(prope8: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope14: CoroutineStackFrame? = c
        while (prope14 != null) {
            prope9.add(prope14.getStackTraceElement())
            prope14 = prope14.callerFrame
        }
    }

    fun fu16(method: String) {
        val prope1 = fu0()
val prope0 = fu0()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error(((Outer()).test).compareTo("ttycm").toString(-1326918494) +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu18() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope10++
        prope12 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope8: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:00:29,958 [main:107] - replacing (prope5, Boolean)
2021-03-12 02:00:29,960 [main:50] - replacing prope5 Boolean
2021-03-12 02:00:29,960 [main:54] - Getting value of type Boolean
2021-03-12 02:00:30,124 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:00:30,127 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 02:00:30,127 [main:61] - GENERATED IS CALL =false
2021-03-12 02:00:30,456 [main:67] - randomType = List<UByte>
2021-03-12 02:00:30,457 [main:106] - GETTING Boolean from Kla0
2021-03-12 02:00:30,463 [main:113] - Case = [public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@56c9c74a]]
2021-03-12 02:00:30,463 [main:149] - GENERATING call of type public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12]
2021-03-12 02:00:30,463 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@56c9c74a]
2021-03-12 02:00:30,603 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:00:30,604 [main:117] - GENERATED CALL = (fu0({ TODO()})).fu1().equals("frfcr")
2021-03-12 02:00:30,604 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d275f8e]]
2021-03-12 02:00:30,604 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8]
2021-03-12 02:00:30,737 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:00:30,737 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6d275f8e]
2021-03-12 02:00:30,872 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:00:30,872 [main:117] - GENERATED CALL = (fu0({ TODO()})).equals("skemi").equals("hgxoe")
2021-03-12 02:00:30,872 [main:113] - Case = [public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8e76c4]]
2021-03-12 02:00:30,872 [main:149] - GENERATING call of type public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12]
2021-03-12 02:00:30,873 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8e76c4]
2021-03-12 02:00:30,873 [main:117] - GENERATED CALL = (fu0({ TODO()})).fu1().toBoolean()
2021-03-12 02:00:30,873 [main:113] - Case = [public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@712607c6]]
2021-03-12 02:00:30,873 [main:149] - GENERATING call of type public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12]
2021-03-12 02:00:30,873 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@712607c6]
2021-03-12 02:00:31,006 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:00:31,141 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:00:31,144 [main:117] - GENERATED CALL = (fu0({ TODO()})).fu1().startsWith("vupfd", true)
2021-03-12 02:00:31,144 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f04ab10]]
2021-03-12 02:00:31,144 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8]
2021-03-12 02:00:31,325 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:00:31,326 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f04ab10]
2021-03-12 02:00:31,480 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:00:31,482 [main:117] - GENERATED CALL = (fu0({ TODO()})).equals("pgvtj").xor(true)
2021-03-12 02:00:31,483 [main:113] - Case = [public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@307c048f]]
2021-03-12 02:00:31,483 [main:149] - GENERATING call of type public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12]
2021-03-12 02:00:31,483 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@307c048f]
2021-03-12 02:00:31,483 [main:117] - GENERATED CALL = (fu0({ TODO()})).fu1().matches(prope0.fu1())
2021-03-12 02:00:31,483 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@79b82278]]
2021-03-12 02:00:31,483 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8]
2021-03-12 02:00:31,616 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:00:31,617 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@79b82278]
2021-03-12 02:00:31,745 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:00:31,748 [main:117] - GENERATED CALL = (fu0({ TODO()})).equals("pvoib").or(true)
2021-03-12 02:00:31,748 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@182ce28a]]
2021-03-12 02:00:31,748 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8]
2021-03-12 02:00:31,886 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:00:31,887 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@182ce28a]
2021-03-12 02:00:31,887 [main:117] - GENERATED CALL = (fu0({ TODO()})).equals("zatna").not()
2021-03-12 02:00:31,887 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71644fdf]]
2021-03-12 02:00:31,887 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@6e7ca2e8]
2021-03-12 02:00:32,031 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:00:32,031 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71644fdf]
2021-03-12 02:00:32,159 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:00:32,162 [main:117] - GENERATED CALL = (fu0({ TODO()})).equals("fmaeu").and(false)
2021-03-12 02:00:32,162 [main:113] - Case = [public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a158ac1]]
2021-03-12 02:00:32,162 [main:149] - GENERATING call of type public abstract fun fu1(): kotlin.String defined in Kla0[SimpleFunctionDescriptorImpl@2cfffa12]
2021-03-12 02:00:32,162 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a158ac1]
2021-03-12 02:00:32,308 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:00:32,489 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:00:32,491 [main:117] - GENERATED CALL = (fu0({ TODO()})).fu1().endsWith("mkbtr", false)
2021-03-12 02:00:32,492 [main:114] - replacement of prope5 of type Boolean is (fu0({ TODO()})).fu1().equals("frfcr")
2021-03-12 02:00:32,622 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:00:32,623 [main:66] - Compilation checking started
2021-03-12 02:00:33,253 [main:53] - Result = true
Text:

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    TODO()
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return (Outer()).test.toLowerCase()
}

class Kla1 {
    var prope4 = ""

    suspend fun <Ty0> fu10(prope8: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope8)
        COROUTINE_SUSPENDED
    }
}

fun Kla1.fu2(c: Throwable?) {
    prope4 += if (c == null) "?" else "!"
}

fun fu3() = Kla2()

class Kla2() {
    var prope5 = true
    public suspend fun fu11(): Boolean {
        val prope1 = fu0()
val prope0 = fu0()
val prope13 = (fu0({ TODO()})).fu1().equals("frfcr")
        prope5 = false
        return prope13
    }
    public suspend fun fu12(): String = "OK"
}

public inline fun Kla1.fu4(action: Kla1.() -> String?): String? {
    var prope6: Throwable? = null
    try {
        return action()
    } catch(x: Exception) {
        prope6 = x
        throw x
    } finally {
        fu2(prope6)
    }
}

public suspend fun Kla1.fu5(): String? {
    return fu4 {
        val prope15 = fu3()
        if (!prope15.fu11())
            return null
        return prope15.fu12()
    }
}

fun fu6(c: suspend Kla1.() -> Unit): String {
    val prope7 = Kla1()
    c.startCoroutine(prope7, Kla3)
    return prope7.prope4
}

fun Kla1.add(s: String?) {
    prope4 += s
}

fun box671(): String {
    val prope8 = fu6 {
        add(fu5())
    }
    return if (prope8 != "?OK") return "Fail: $prope8" else "OK"
}

fun <Ty0> fu8(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu9(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(prope8: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope14: CoroutineStackFrame? = c
        while (prope14 != null) {
            prope9.add(prope14.getStackTraceElement())
            prope14 = prope14.callerFrame
        }
    }

    fun fu16(method: String) {
        val prope1 = fu0()
val prope0 = fu0()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error(((Outer()).test).compareTo("ttycm").toString(-1326918494) +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu18() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope10++
        prope12 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope8: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:00:33,257 [main:107] - replacing (this, Kla4)
2021-03-12 02:00:33,259 [main:50] - replacing this Kla4
2021-03-12 02:00:33,259 [main:54] - Getting value of type Kla4
2021-03-12 02:00:33,401 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 02:00:33,404 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope1 = fu0()
val prope0 = fu0()
this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-12 02:00:33,405 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 02:00:33,405 [main:61] - GENERATED IS CALL =true
2021-03-12 02:00:34,899 [main:67] - randomType = Function1<ArrayDeque<Sequence<UShort?>?>?, Kla5<ULong>>
2021-03-12 02:00:34,900 [main:106] - GETTING Kla4 from Kla0
2021-03-12 02:00:34,918 [main:106] - GETTING Kla4 from String
2021-03-12 02:00:34,961 [main:106] - GETTING Kla4 from String
2021-03-12 02:00:34,962 [main:106] - GETTING Kla4 from Kla0
2021-03-12 02:00:34,963 [main:106] - GETTING Kla4 from String
2021-03-12 02:00:34,965 [main:106] - GETTING Kla4 from Outer
2021-03-12 02:00:34,975 [main:106] - GETTING Kla4 from Outer
2021-03-12 02:00:34,975 [main:114] - replacement of this of type Kla4 is Kla4()
2021-03-12 02:00:35,127 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:00:35,128 [main:66] - Compilation checking started
2021-03-12 02:00:35,751 [main:53] - Result = true
Text:

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    private companion object {
        val result = "OK"
    }

    val test: String

    init {
        test = result
    }
}

fun box() = Outer().test

interface Kla0 {
    fun fu1(): String
}

inline fun fu0(s: () -> Kla0 = {
    TODO()
}) = s()

val prope0 = fu0()

fun box961(): String {
    val prope1 = fu0()
    if (prope0.fu1() != "OK") return "fail 1: ${prope0.fu1()}"
    return (Outer()).test.toLowerCase()
}

class Kla1 {
    var prope4 = ""

    suspend fun <Ty0> fu10(prope8: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope8)
        COROUTINE_SUSPENDED
    }
}

fun Kla1.fu2(c: Throwable?) {
    prope4 += if (c == null) "?" else "!"
}

fun fu3() = Kla2()

class Kla2() {
    var prope5 = true
    public suspend fun fu11(): Boolean {
        val prope1 = fu0()
val prope0 = fu0()
val prope13 = (fu0({ TODO()})).fu1().equals("frfcr")
        prope5 = false
        return prope13
    }
    public suspend fun fu12(): String = "OK"
}

public inline fun Kla1.fu4(action: Kla1.() -> String?): String? {
    var prope6: Throwable? = null
    try {
        return action()
    } catch(x: Exception) {
        prope6 = x
        throw x
    } finally {
        fu2(prope6)
    }
}

public suspend fun Kla1.fu5(): String? {
    return fu4 {
        val prope15 = fu3()
        if (!prope15.fu11())
            return null
        return prope15.fu12()
    }
}

fun fu6(c: suspend Kla1.() -> Unit): String {
    val prope7 = Kla1()
    c.startCoroutine(prope7, Kla3)
    return prope7.prope4
}

fun Kla1.add(s: String?) {
    prope4 += s
}

fun box671(): String {
    val prope8 = fu6 {
        add(fu5())
    }
    return if (prope8 != "?OK") return "Fail: $prope8" else "OK"
}

fun <Ty0> fu8(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        x(prope4.getOrThrow())
    }
}

fun fu9(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        val prope1 = fu0()
val prope0 = fu0()
Kla4().prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty0>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            fu13(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun fu13(exception: Throwable)
    abstract fun resume(prope8: Ty0)
}

class Kla6 {
    private val prope9 = arrayListOf<StackTraceElement?>()

    suspend fun fu15() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu15(it)
    }

    fun fu15(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope9.clear()
        var prope14: CoroutineStackFrame? = c
        while (prope14 != null) {
            prope9.add(prope14.getStackTraceElement())
            prope14 = prope14.callerFrame
        }
    }

    fun fu16(method: String) {
        val prope1 = fu0()
val prope0 = fu0()
prope9.find { it?.methodName?.startsWith(method) == true }?.let { error(((Outer()).test).compareTo("ttycm").toString(-1326918494) +
                prope9.joinToString(separator = "\n")) }
    }

    fun fu17(method: String) {
        prope9.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope9.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope10 = 0
    var prope11 = false

    var prope12: () -> Unit = {}

    fun fu18() {
        prope10 = 0
        prope11 = false
        prope12 = {}
    }

    suspend fun fu19() = suspendCoroutine<Unit> { c ->
        prope10++
        prope12 = { c.resume(Unit) }
    }

    fun fu20(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope10 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope10)
            prope12()
        }
        if (prope10 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope10)
        if (prope11) error("Wrong state-machine generated: it is finished early")
        prope12()
        if (checkFinished && !prope11) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope8: Unit) {
        prope3.prope12 = {
            prope3.prope11 = true
        }
    }

    override fun fu13(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:00:35,755 [main:107] - replacing (prope10, Int)
2021-03-12 02:00:35,756 [main:50] - replacing prope10 Int
2021-03-12 02:00:35,757 [main:54] - Getting value of type Int
